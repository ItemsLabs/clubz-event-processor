// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AssignedCardPack is an object representing the database table.
type AssignedCardPack struct {
	ID                 string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt          time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Opened             bool        `boil:"opened" json:"opened" toml:"opened" yaml:"opened"`
	CardPackTypeID     string      `boil:"card_pack_type_id" json:"card_pack_type_id" toml:"card_pack_type_id" yaml:"card_pack_type_id"`
	UserID             string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	OpenedAt           null.Time   `boil:"opened_at" json:"opened_at,omitempty" toml:"opened_at" yaml:"opened_at,omitempty"`
	Revealed           bool        `boil:"revealed" json:"revealed" toml:"revealed" yaml:"revealed"`
	RevealedAt         null.Time   `boil:"revealed_at" json:"revealed_at,omitempty" toml:"revealed_at" yaml:"revealed_at,omitempty"`
	CardIds            null.JSON   `boil:"card_ids" json:"card_ids,omitempty" toml:"card_ids" yaml:"card_ids,omitempty"`
	StoreTransactionID null.String `boil:"store_transaction_id" json:"store_transaction_id,omitempty" toml:"store_transaction_id" yaml:"store_transaction_id,omitempty"`
	Refunded           bool        `boil:"refunded" json:"refunded" toml:"refunded" yaml:"refunded"`

	R *assignedCardPackR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assignedCardPackL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssignedCardPackColumns = struct {
	ID                 string
	CreatedAt          string
	UpdatedAt          string
	Opened             string
	CardPackTypeID     string
	UserID             string
	OpenedAt           string
	Revealed           string
	RevealedAt         string
	CardIds            string
	StoreTransactionID string
	Refunded           string
}{
	ID:                 "id",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	Opened:             "opened",
	CardPackTypeID:     "card_pack_type_id",
	UserID:             "user_id",
	OpenedAt:           "opened_at",
	Revealed:           "revealed",
	RevealedAt:         "revealed_at",
	CardIds:            "card_ids",
	StoreTransactionID: "store_transaction_id",
	Refunded:           "refunded",
}

var AssignedCardPackTableColumns = struct {
	ID                 string
	CreatedAt          string
	UpdatedAt          string
	Opened             string
	CardPackTypeID     string
	UserID             string
	OpenedAt           string
	Revealed           string
	RevealedAt         string
	CardIds            string
	StoreTransactionID string
	Refunded           string
}{
	ID:                 "assigned_card_packs.id",
	CreatedAt:          "assigned_card_packs.created_at",
	UpdatedAt:          "assigned_card_packs.updated_at",
	Opened:             "assigned_card_packs.opened",
	CardPackTypeID:     "assigned_card_packs.card_pack_type_id",
	UserID:             "assigned_card_packs.user_id",
	OpenedAt:           "assigned_card_packs.opened_at",
	Revealed:           "assigned_card_packs.revealed",
	RevealedAt:         "assigned_card_packs.revealed_at",
	CardIds:            "assigned_card_packs.card_ids",
	StoreTransactionID: "assigned_card_packs.store_transaction_id",
	Refunded:           "assigned_card_packs.refunded",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AssignedCardPackWhere = struct {
	ID                 whereHelperstring
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	Opened             whereHelperbool
	CardPackTypeID     whereHelperstring
	UserID             whereHelperstring
	OpenedAt           whereHelpernull_Time
	Revealed           whereHelperbool
	RevealedAt         whereHelpernull_Time
	CardIds            whereHelpernull_JSON
	StoreTransactionID whereHelpernull_String
	Refunded           whereHelperbool
}{
	ID:                 whereHelperstring{field: "\"assigned_card_packs\".\"id\""},
	CreatedAt:          whereHelpertime_Time{field: "\"assigned_card_packs\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"assigned_card_packs\".\"updated_at\""},
	Opened:             whereHelperbool{field: "\"assigned_card_packs\".\"opened\""},
	CardPackTypeID:     whereHelperstring{field: "\"assigned_card_packs\".\"card_pack_type_id\""},
	UserID:             whereHelperstring{field: "\"assigned_card_packs\".\"user_id\""},
	OpenedAt:           whereHelpernull_Time{field: "\"assigned_card_packs\".\"opened_at\""},
	Revealed:           whereHelperbool{field: "\"assigned_card_packs\".\"revealed\""},
	RevealedAt:         whereHelpernull_Time{field: "\"assigned_card_packs\".\"revealed_at\""},
	CardIds:            whereHelpernull_JSON{field: "\"assigned_card_packs\".\"card_ids\""},
	StoreTransactionID: whereHelpernull_String{field: "\"assigned_card_packs\".\"store_transaction_id\""},
	Refunded:           whereHelperbool{field: "\"assigned_card_packs\".\"refunded\""},
}

// AssignedCardPackRels is where relationship names are stored.
var AssignedCardPackRels = struct {
	CardPackType     string
	StoreTransaction string
	User             string
}{
	CardPackType:     "CardPackType",
	StoreTransaction: "StoreTransaction",
	User:             "User",
}

// assignedCardPackR is where relationships are stored.
type assignedCardPackR struct {
	CardPackType     *CardPackType            `boil:"CardPackType" json:"CardPackType" toml:"CardPackType" yaml:"CardPackType"`
	StoreTransaction *StoreProductTransaction `boil:"StoreTransaction" json:"StoreTransaction" toml:"StoreTransaction" yaml:"StoreTransaction"`
	User             *User                    `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*assignedCardPackR) NewStruct() *assignedCardPackR {
	return &assignedCardPackR{}
}

func (r *assignedCardPackR) GetCardPackType() *CardPackType {
	if r == nil {
		return nil
	}
	return r.CardPackType
}

func (r *assignedCardPackR) GetStoreTransaction() *StoreProductTransaction {
	if r == nil {
		return nil
	}
	return r.StoreTransaction
}

func (r *assignedCardPackR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// assignedCardPackL is where Load methods for each relationship are stored.
type assignedCardPackL struct{}

var (
	assignedCardPackAllColumns            = []string{"id", "created_at", "updated_at", "opened", "card_pack_type_id", "user_id", "opened_at", "revealed", "revealed_at", "card_ids", "store_transaction_id", "refunded"}
	assignedCardPackColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "opened", "card_pack_type_id", "user_id", "revealed", "refunded"}
	assignedCardPackColumnsWithDefault    = []string{"opened_at", "revealed_at", "card_ids", "store_transaction_id"}
	assignedCardPackPrimaryKeyColumns     = []string{"id"}
	assignedCardPackGeneratedColumns      = []string{}
)

type (
	// AssignedCardPackSlice is an alias for a slice of pointers to AssignedCardPack.
	// This should almost always be used instead of []AssignedCardPack.
	AssignedCardPackSlice []*AssignedCardPack

	assignedCardPackQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assignedCardPackType                 = reflect.TypeOf(&AssignedCardPack{})
	assignedCardPackMapping              = queries.MakeStructMapping(assignedCardPackType)
	assignedCardPackPrimaryKeyMapping, _ = queries.BindMapping(assignedCardPackType, assignedCardPackMapping, assignedCardPackPrimaryKeyColumns)
	assignedCardPackInsertCacheMut       sync.RWMutex
	assignedCardPackInsertCache          = make(map[string]insertCache)
	assignedCardPackUpdateCacheMut       sync.RWMutex
	assignedCardPackUpdateCache          = make(map[string]updateCache)
	assignedCardPackUpsertCacheMut       sync.RWMutex
	assignedCardPackUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single assignedCardPack record from the query.
func (q assignedCardPackQuery) One(exec boil.Executor) (*AssignedCardPack, error) {
	o := &AssignedCardPack{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for assigned_card_packs")
	}

	return o, nil
}

// All returns all AssignedCardPack records from the query.
func (q assignedCardPackQuery) All(exec boil.Executor) (AssignedCardPackSlice, error) {
	var o []*AssignedCardPack

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to AssignedCardPack slice")
	}

	return o, nil
}

// Count returns the count of all AssignedCardPack records in the query.
func (q assignedCardPackQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count assigned_card_packs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assignedCardPackQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if assigned_card_packs exists")
	}

	return count > 0, nil
}

// CardPackType pointed to by the foreign key.
func (o *AssignedCardPack) CardPackType(mods ...qm.QueryMod) cardPackTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CardPackTypeID),
	}

	queryMods = append(queryMods, mods...)

	return CardPackTypes(queryMods...)
}

// StoreTransaction pointed to by the foreign key.
func (o *AssignedCardPack) StoreTransaction(mods ...qm.QueryMod) storeProductTransactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StoreTransactionID),
	}

	queryMods = append(queryMods, mods...)

	return StoreProductTransactions(queryMods...)
}

// User pointed to by the foreign key.
func (o *AssignedCardPack) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadCardPackType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignedCardPackL) LoadCardPackType(e boil.Executor, singular bool, maybeAssignedCardPack interface{}, mods queries.Applicator) error {
	var slice []*AssignedCardPack
	var object *AssignedCardPack

	if singular {
		var ok bool
		object, ok = maybeAssignedCardPack.(*AssignedCardPack)
		if !ok {
			object = new(AssignedCardPack)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedCardPack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedCardPack))
			}
		}
	} else {
		s, ok := maybeAssignedCardPack.(*[]*AssignedCardPack)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedCardPack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedCardPack))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &assignedCardPackR{}
		}
		args[object.CardPackTypeID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedCardPackR{}
			}

			args[obj.CardPackTypeID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`card_pack_types`),
		qm.WhereIn(`card_pack_types.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CardPackType")
	}

	var resultSlice []*CardPackType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CardPackType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for card_pack_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for card_pack_types")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CardPackType = foreign
		if foreign.R == nil {
			foreign.R = &cardPackTypeR{}
		}
		foreign.R.AssignedCardPacks = append(foreign.R.AssignedCardPacks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CardPackTypeID == foreign.ID {
				local.R.CardPackType = foreign
				if foreign.R == nil {
					foreign.R = &cardPackTypeR{}
				}
				foreign.R.AssignedCardPacks = append(foreign.R.AssignedCardPacks, local)
				break
			}
		}
	}

	return nil
}

// LoadStoreTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignedCardPackL) LoadStoreTransaction(e boil.Executor, singular bool, maybeAssignedCardPack interface{}, mods queries.Applicator) error {
	var slice []*AssignedCardPack
	var object *AssignedCardPack

	if singular {
		var ok bool
		object, ok = maybeAssignedCardPack.(*AssignedCardPack)
		if !ok {
			object = new(AssignedCardPack)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedCardPack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedCardPack))
			}
		}
	} else {
		s, ok := maybeAssignedCardPack.(*[]*AssignedCardPack)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedCardPack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedCardPack))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &assignedCardPackR{}
		}
		if !queries.IsNil(object.StoreTransactionID) {
			args[object.StoreTransactionID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedCardPackR{}
			}

			if !queries.IsNil(obj.StoreTransactionID) {
				args[obj.StoreTransactionID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`store_product_transactions`),
		qm.WhereIn(`store_product_transactions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load StoreProductTransaction")
	}

	var resultSlice []*StoreProductTransaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice StoreProductTransaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for store_product_transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for store_product_transactions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StoreTransaction = foreign
		if foreign.R == nil {
			foreign.R = &storeProductTransactionR{}
		}
		foreign.R.StoreTransactionAssignedCardPacks = append(foreign.R.StoreTransactionAssignedCardPacks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.StoreTransactionID, foreign.ID) {
				local.R.StoreTransaction = foreign
				if foreign.R == nil {
					foreign.R = &storeProductTransactionR{}
				}
				foreign.R.StoreTransactionAssignedCardPacks = append(foreign.R.StoreTransactionAssignedCardPacks, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignedCardPackL) LoadUser(e boil.Executor, singular bool, maybeAssignedCardPack interface{}, mods queries.Applicator) error {
	var slice []*AssignedCardPack
	var object *AssignedCardPack

	if singular {
		var ok bool
		object, ok = maybeAssignedCardPack.(*AssignedCardPack)
		if !ok {
			object = new(AssignedCardPack)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedCardPack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedCardPack))
			}
		}
	} else {
		s, ok := maybeAssignedCardPack.(*[]*AssignedCardPack)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedCardPack)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedCardPack))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &assignedCardPackR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedCardPackR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.AssignedCardPacks = append(foreign.R.AssignedCardPacks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.AssignedCardPacks = append(foreign.R.AssignedCardPacks, local)
				break
			}
		}
	}

	return nil
}

// SetCardPackType of the assignedCardPack to the related item.
// Sets o.R.CardPackType to related.
// Adds o to related.R.AssignedCardPacks.
func (o *AssignedCardPack) SetCardPackType(exec boil.Executor, insert bool, related *CardPackType) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assigned_card_packs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"card_pack_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, assignedCardPackPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CardPackTypeID = related.ID
	if o.R == nil {
		o.R = &assignedCardPackR{
			CardPackType: related,
		}
	} else {
		o.R.CardPackType = related
	}

	if related.R == nil {
		related.R = &cardPackTypeR{
			AssignedCardPacks: AssignedCardPackSlice{o},
		}
	} else {
		related.R.AssignedCardPacks = append(related.R.AssignedCardPacks, o)
	}

	return nil
}

// SetStoreTransaction of the assignedCardPack to the related item.
// Sets o.R.StoreTransaction to related.
// Adds o to related.R.StoreTransactionAssignedCardPacks.
func (o *AssignedCardPack) SetStoreTransaction(exec boil.Executor, insert bool, related *StoreProductTransaction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assigned_card_packs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"store_transaction_id"}),
		strmangle.WhereClause("\"", "\"", 2, assignedCardPackPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.StoreTransactionID, related.ID)
	if o.R == nil {
		o.R = &assignedCardPackR{
			StoreTransaction: related,
		}
	} else {
		o.R.StoreTransaction = related
	}

	if related.R == nil {
		related.R = &storeProductTransactionR{
			StoreTransactionAssignedCardPacks: AssignedCardPackSlice{o},
		}
	} else {
		related.R.StoreTransactionAssignedCardPacks = append(related.R.StoreTransactionAssignedCardPacks, o)
	}

	return nil
}

// RemoveStoreTransaction relationship.
// Sets o.R.StoreTransaction to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AssignedCardPack) RemoveStoreTransaction(exec boil.Executor, related *StoreProductTransaction) error {
	var err error

	queries.SetScanner(&o.StoreTransactionID, nil)
	if _, err = o.Update(exec, boil.Whitelist("store_transaction_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.StoreTransaction = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.StoreTransactionAssignedCardPacks {
		if queries.Equal(o.StoreTransactionID, ri.StoreTransactionID) {
			continue
		}

		ln := len(related.R.StoreTransactionAssignedCardPacks)
		if ln > 1 && i < ln-1 {
			related.R.StoreTransactionAssignedCardPacks[i] = related.R.StoreTransactionAssignedCardPacks[ln-1]
		}
		related.R.StoreTransactionAssignedCardPacks = related.R.StoreTransactionAssignedCardPacks[:ln-1]
		break
	}
	return nil
}

// SetUser of the assignedCardPack to the related item.
// Sets o.R.User to related.
// Adds o to related.R.AssignedCardPacks.
func (o *AssignedCardPack) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assigned_card_packs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, assignedCardPackPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &assignedCardPackR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			AssignedCardPacks: AssignedCardPackSlice{o},
		}
	} else {
		related.R.AssignedCardPacks = append(related.R.AssignedCardPacks, o)
	}

	return nil
}

// AssignedCardPacks retrieves all the records using an executor.
func AssignedCardPacks(mods ...qm.QueryMod) assignedCardPackQuery {
	mods = append(mods, qm.From("\"assigned_card_packs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"assigned_card_packs\".*"})
	}

	return assignedCardPackQuery{q}
}

// FindAssignedCardPack retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssignedCardPack(exec boil.Executor, iD string, selectCols ...string) (*AssignedCardPack, error) {
	assignedCardPackObj := &AssignedCardPack{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"assigned_card_packs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, assignedCardPackObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from assigned_card_packs")
	}

	return assignedCardPackObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AssignedCardPack) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no assigned_card_packs provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(assignedCardPackColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assignedCardPackInsertCacheMut.RLock()
	cache, cached := assignedCardPackInsertCache[key]
	assignedCardPackInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assignedCardPackAllColumns,
			assignedCardPackColumnsWithDefault,
			assignedCardPackColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assignedCardPackType, assignedCardPackMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assignedCardPackType, assignedCardPackMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"assigned_card_packs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"assigned_card_packs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into assigned_card_packs")
	}

	if !cached {
		assignedCardPackInsertCacheMut.Lock()
		assignedCardPackInsertCache[key] = cache
		assignedCardPackInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the AssignedCardPack.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AssignedCardPack) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	assignedCardPackUpdateCacheMut.RLock()
	cache, cached := assignedCardPackUpdateCache[key]
	assignedCardPackUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assignedCardPackAllColumns,
			assignedCardPackPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update assigned_card_packs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"assigned_card_packs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, assignedCardPackPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assignedCardPackType, assignedCardPackMapping, append(wl, assignedCardPackPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update assigned_card_packs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for assigned_card_packs")
	}

	if !cached {
		assignedCardPackUpdateCacheMut.Lock()
		assignedCardPackUpdateCache[key] = cache
		assignedCardPackUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q assignedCardPackQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for assigned_card_packs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for assigned_card_packs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssignedCardPackSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedCardPackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"assigned_card_packs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, assignedCardPackPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in assignedCardPack slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all assignedCardPack")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AssignedCardPack) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no assigned_card_packs provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(assignedCardPackColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assignedCardPackUpsertCacheMut.RLock()
	cache, cached := assignedCardPackUpsertCache[key]
	assignedCardPackUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			assignedCardPackAllColumns,
			assignedCardPackColumnsWithDefault,
			assignedCardPackColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			assignedCardPackAllColumns,
			assignedCardPackPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert assigned_card_packs, could not build update column list")
		}

		ret := strmangle.SetComplement(assignedCardPackAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(assignedCardPackPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert assigned_card_packs, could not build conflict column list")
			}

			conflict = make([]string, len(assignedCardPackPrimaryKeyColumns))
			copy(conflict, assignedCardPackPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"assigned_card_packs\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(assignedCardPackType, assignedCardPackMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assignedCardPackType, assignedCardPackMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert assigned_card_packs")
	}

	if !cached {
		assignedCardPackUpsertCacheMut.Lock()
		assignedCardPackUpsertCache[key] = cache
		assignedCardPackUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single AssignedCardPack record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AssignedCardPack) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no AssignedCardPack provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assignedCardPackPrimaryKeyMapping)
	sql := "DELETE FROM \"assigned_card_packs\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from assigned_card_packs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for assigned_card_packs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assignedCardPackQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no assignedCardPackQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from assigned_card_packs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for assigned_card_packs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssignedCardPackSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedCardPackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"assigned_card_packs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignedCardPackPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from assignedCardPack slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for assigned_card_packs")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AssignedCardPack) Reload(exec boil.Executor) error {
	ret, err := FindAssignedCardPack(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssignedCardPackSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssignedCardPackSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedCardPackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"assigned_card_packs\".* FROM \"assigned_card_packs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignedCardPackPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in AssignedCardPackSlice")
	}

	*o = slice

	return nil
}

// AssignedCardPackExists checks if the AssignedCardPack row exists.
func AssignedCardPackExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"assigned_card_packs\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if assigned_card_packs exists")
	}

	return exists, nil
}

// Exists checks if the AssignedCardPack row exists.
func (o *AssignedCardPack) Exists(exec boil.Executor) (bool, error) {
	return AssignedCardPackExists(exec, o.ID)
}
