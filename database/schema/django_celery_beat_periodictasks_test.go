// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDjangoCeleryBeatPeriodicListTasks(t *testing.T) {
	t.Parallel()

	query := DjangoCeleryBeatPeriodicListTasks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDjangoCeleryBeatPeriodicListTasksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodicListTask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodicListTaskDBTypes, true, djangoCeleryBeatPeriodicListTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DjangoCeleryBeatPeriodicListTasks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDjangoCeleryBeatPeriodicListTasksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodicListTask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodicListTaskDBTypes, true, djangoCeleryBeatPeriodicListTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DjangoCeleryBeatPeriodicListTasks().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DjangoCeleryBeatPeriodicListTasks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDjangoCeleryBeatPeriodicListTasksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodicListTask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodicListTaskDBTypes, true, djangoCeleryBeatPeriodicListTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DjangoCeleryBeatPeriodicListTaskSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DjangoCeleryBeatPeriodicListTasks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDjangoCeleryBeatPeriodicListTasksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodicListTask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodicListTaskDBTypes, true, djangoCeleryBeatPeriodicListTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DjangoCeleryBeatPeriodicListTaskExists(tx, o.Ident)
	if err != nil {
		t.Errorf("Unable to check if DjangoCeleryBeatPeriodicListTask exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DjangoCeleryBeatPeriodicListTaskExists to return true, but got false.")
	}
}

func testDjangoCeleryBeatPeriodicListTasksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodicListTask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodicListTaskDBTypes, true, djangoCeleryBeatPeriodicListTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	djangoCeleryBeatPeriodicListTaskFound, err := FindDjangoCeleryBeatPeriodicListTask(tx, o.Ident)
	if err != nil {
		t.Error(err)
	}

	if djangoCeleryBeatPeriodicListTaskFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDjangoCeleryBeatPeriodicListTasksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodicListTask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodicListTaskDBTypes, true, djangoCeleryBeatPeriodicListTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DjangoCeleryBeatPeriodicListTasks().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testDjangoCeleryBeatPeriodicListTasksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodicListTask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodicListTaskDBTypes, true, djangoCeleryBeatPeriodicListTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DjangoCeleryBeatPeriodicListTasks().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDjangoCeleryBeatPeriodicListTasksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	djangoCeleryBeatPeriodicListTaskOne := &DjangoCeleryBeatPeriodicListTask{}
	djangoCeleryBeatPeriodicListTaskTwo := &DjangoCeleryBeatPeriodicListTask{}
	if err = randomize.Struct(seed, djangoCeleryBeatPeriodicListTaskOne, djangoCeleryBeatPeriodicListTaskDBTypes, false, djangoCeleryBeatPeriodicListTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}
	if err = randomize.Struct(seed, djangoCeleryBeatPeriodicListTaskTwo, djangoCeleryBeatPeriodicListTaskDBTypes, false, djangoCeleryBeatPeriodicListTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = djangoCeleryBeatPeriodicListTaskOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = djangoCeleryBeatPeriodicListTaskTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DjangoCeleryBeatPeriodicListTasks().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDjangoCeleryBeatPeriodicListTasksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	djangoCeleryBeatPeriodicListTaskOne := &DjangoCeleryBeatPeriodicListTask{}
	djangoCeleryBeatPeriodicListTaskTwo := &DjangoCeleryBeatPeriodicListTask{}
	if err = randomize.Struct(seed, djangoCeleryBeatPeriodicListTaskOne, djangoCeleryBeatPeriodicListTaskDBTypes, false, djangoCeleryBeatPeriodicListTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}
	if err = randomize.Struct(seed, djangoCeleryBeatPeriodicListTaskTwo, djangoCeleryBeatPeriodicListTaskDBTypes, false, djangoCeleryBeatPeriodicListTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = djangoCeleryBeatPeriodicListTaskOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = djangoCeleryBeatPeriodicListTaskTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DjangoCeleryBeatPeriodicListTasks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testDjangoCeleryBeatPeriodicListTasksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodicListTask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodicListTaskDBTypes, true, djangoCeleryBeatPeriodicListTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DjangoCeleryBeatPeriodicListTasks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDjangoCeleryBeatPeriodicListTasksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodicListTask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodicListTaskDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(djangoCeleryBeatPeriodicListTaskColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DjangoCeleryBeatPeriodicListTasks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDjangoCeleryBeatPeriodicListTasksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodicListTask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodicListTaskDBTypes, true, djangoCeleryBeatPeriodicListTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testDjangoCeleryBeatPeriodicListTasksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodicListTask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodicListTaskDBTypes, true, djangoCeleryBeatPeriodicListTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DjangoCeleryBeatPeriodicListTaskSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testDjangoCeleryBeatPeriodicListTasksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodicListTask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodicListTaskDBTypes, true, djangoCeleryBeatPeriodicListTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DjangoCeleryBeatPeriodicListTasks().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	djangoCeleryBeatPeriodicListTaskDBTypes = map[string]string{`Ident`: `smallint`, `LastUpdate`: `timestamp with time zone`}
	_                                       = bytes.MinRead
)

func testDjangoCeleryBeatPeriodicListTasksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(djangoCeleryBeatPeriodicListTaskPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(djangoCeleryBeatPeriodicListTaskAllColumns) == len(djangoCeleryBeatPeriodicListTaskPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodicListTask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodicListTaskDBTypes, true, djangoCeleryBeatPeriodicListTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DjangoCeleryBeatPeriodicListTasks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodicListTaskDBTypes, true, djangoCeleryBeatPeriodicListTaskPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDjangoCeleryBeatPeriodicListTasksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(djangoCeleryBeatPeriodicListTaskAllColumns) == len(djangoCeleryBeatPeriodicListTaskPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodicListTask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodicListTaskDBTypes, true, djangoCeleryBeatPeriodicListTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DjangoCeleryBeatPeriodicListTasks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodicListTaskDBTypes, true, djangoCeleryBeatPeriodicListTaskPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(djangoCeleryBeatPeriodicListTaskAllColumns, djangoCeleryBeatPeriodicListTaskPrimaryKeyColumns) {
		fields = djangoCeleryBeatPeriodicListTaskAllColumns
	} else {
		fields = strmangle.SetComplement(
			djangoCeleryBeatPeriodicListTaskAllColumns,
			djangoCeleryBeatPeriodicListTaskPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DjangoCeleryBeatPeriodicListTaskSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDjangoCeleryBeatPeriodicListTasksUpsert(t *testing.T) {
	t.Parallel()

	if len(djangoCeleryBeatPeriodicListTaskAllColumns) == len(djangoCeleryBeatPeriodicListTaskPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DjangoCeleryBeatPeriodicListTask{}
	if err = randomize.Struct(seed, &o, djangoCeleryBeatPeriodicListTaskDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DjangoCeleryBeatPeriodicListTask: %s", err)
	}

	count, err := DjangoCeleryBeatPeriodicListTasks().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, djangoCeleryBeatPeriodicListTaskDBTypes, false, djangoCeleryBeatPeriodicListTaskPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodicListTask struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DjangoCeleryBeatPeriodicListTask: %s", err)
	}

	count, err = DjangoCeleryBeatPeriodicListTasks().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
