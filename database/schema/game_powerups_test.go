// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGamePowerups(t *testing.T) {
	t.Parallel()

	query := GamePowerups()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGamePowerupsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePowerup{}
	if err = randomize.Struct(seed, o, gamePowerupDBTypes, true, gamePowerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GamePowerups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGamePowerupsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePowerup{}
	if err = randomize.Struct(seed, o, gamePowerupDBTypes, true, gamePowerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GamePowerups().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GamePowerups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGamePowerupsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePowerup{}
	if err = randomize.Struct(seed, o, gamePowerupDBTypes, true, gamePowerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GamePowerupSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GamePowerups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGamePowerupsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePowerup{}
	if err = randomize.Struct(seed, o, gamePowerupDBTypes, true, gamePowerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GamePowerupExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if GamePowerup exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GamePowerupExists to return true, but got false.")
	}
}

func testGamePowerupsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePowerup{}
	if err = randomize.Struct(seed, o, gamePowerupDBTypes, true, gamePowerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	gamePowerupFound, err := FindGamePowerup(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if gamePowerupFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGamePowerupsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePowerup{}
	if err = randomize.Struct(seed, o, gamePowerupDBTypes, true, gamePowerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GamePowerups().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testGamePowerupsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePowerup{}
	if err = randomize.Struct(seed, o, gamePowerupDBTypes, true, gamePowerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GamePowerups().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGamePowerupsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gamePowerupOne := &GamePowerup{}
	gamePowerupTwo := &GamePowerup{}
	if err = randomize.Struct(seed, gamePowerupOne, gamePowerupDBTypes, false, gamePowerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}
	if err = randomize.Struct(seed, gamePowerupTwo, gamePowerupDBTypes, false, gamePowerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = gamePowerupOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gamePowerupTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GamePowerups().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGamePowerupsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	gamePowerupOne := &GamePowerup{}
	gamePowerupTwo := &GamePowerup{}
	if err = randomize.Struct(seed, gamePowerupOne, gamePowerupDBTypes, false, gamePowerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}
	if err = randomize.Struct(seed, gamePowerupTwo, gamePowerupDBTypes, false, gamePowerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = gamePowerupOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gamePowerupTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GamePowerups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testGamePowerupsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePowerup{}
	if err = randomize.Struct(seed, o, gamePowerupDBTypes, true, gamePowerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GamePowerups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGamePowerupsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePowerup{}
	if err = randomize.Struct(seed, o, gamePowerupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(gamePowerupColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GamePowerups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGamePowerupToManyPowerupGameEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GamePowerup
	var b, c GameEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gamePowerupDBTypes, true, gamePowerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, gameEventDBTypes, false, gameEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameEventDBTypes, false, gameEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PowerupID, a.ID)
	queries.Assign(&c.PowerupID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PowerupGameEvents().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PowerupID, b.PowerupID) {
			bFound = true
		}
		if queries.Equal(v.PowerupID, c.PowerupID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GamePowerupSlice{&a}
	if err = a.L.LoadPowerupGameEvents(tx, false, (*[]*GamePowerup)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PowerupGameEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PowerupGameEvents = nil
	if err = a.L.LoadPowerupGameEvents(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PowerupGameEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGamePowerupToManyAddOpPowerupGameEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GamePowerup
	var b, c, d, e GameEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gamePowerupDBTypes, false, strmangle.SetComplement(gamePowerupPrimaryKeyColumns, gamePowerupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GameEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gameEventDBTypes, false, strmangle.SetComplement(gameEventPrimaryKeyColumns, gameEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GameEvent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPowerupGameEvents(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.PowerupID) {
			t.Error("foreign key was wrong value", a.ID, first.PowerupID)
		}
		if !queries.Equal(a.ID, second.PowerupID) {
			t.Error("foreign key was wrong value", a.ID, second.PowerupID)
		}

		if first.R.Powerup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Powerup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PowerupGameEvents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PowerupGameEvents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PowerupGameEvents().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testGamePowerupToManySetOpPowerupGameEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GamePowerup
	var b, c, d, e GameEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gamePowerupDBTypes, false, strmangle.SetComplement(gamePowerupPrimaryKeyColumns, gamePowerupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GameEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gameEventDBTypes, false, strmangle.SetComplement(gameEventPrimaryKeyColumns, gameEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPowerupGameEvents(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PowerupGameEvents().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPowerupGameEvents(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PowerupGameEvents().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PowerupID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PowerupID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.PowerupID) {
		t.Error("foreign key was wrong value", a.ID, d.PowerupID)
	}
	if !queries.Equal(a.ID, e.PowerupID) {
		t.Error("foreign key was wrong value", a.ID, e.PowerupID)
	}

	if b.R.Powerup != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Powerup != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Powerup != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Powerup != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PowerupGameEvents[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PowerupGameEvents[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testGamePowerupToManyRemoveOpPowerupGameEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GamePowerup
	var b, c, d, e GameEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gamePowerupDBTypes, false, strmangle.SetComplement(gamePowerupPrimaryKeyColumns, gamePowerupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GameEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gameEventDBTypes, false, strmangle.SetComplement(gameEventPrimaryKeyColumns, gameEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPowerupGameEvents(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PowerupGameEvents().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePowerupGameEvents(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PowerupGameEvents().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PowerupID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PowerupID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Powerup != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Powerup != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Powerup != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Powerup != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PowerupGameEvents) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PowerupGameEvents[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PowerupGameEvents[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testGamePowerupToOneGameUsingGame(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local GamePowerup
	var foreign Game

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gamePowerupDBTypes, false, gamePowerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, gameDBTypes, false, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GameID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Game().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GamePowerupSlice{&local}
	if err = local.L.LoadGame(tx, false, (*[]*GamePowerup)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Game == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Game = nil
	if err = local.L.LoadGame(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Game == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testGamePowerupToOnePowerupUsingPowerup(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local GamePowerup
	var foreign Powerup

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gamePowerupDBTypes, false, gamePowerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, powerupDBTypes, false, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PowerupID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Powerup().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GamePowerupSlice{&local}
	if err = local.L.LoadPowerup(tx, false, (*[]*GamePowerup)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Powerup == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Powerup = nil
	if err = local.L.LoadPowerup(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Powerup == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testGamePowerupToOneSetOpGameUsingGame(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GamePowerup
	var b, c Game

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gamePowerupDBTypes, false, strmangle.SetComplement(gamePowerupPrimaryKeyColumns, gamePowerupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Game{&b, &c} {
		err = a.SetGame(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Game != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GamePowerups[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GameID != x.ID {
			t.Error("foreign key was wrong value", a.GameID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GameID))
		reflect.Indirect(reflect.ValueOf(&a.GameID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GameID != x.ID {
			t.Error("foreign key was wrong value", a.GameID, x.ID)
		}
	}
}
func testGamePowerupToOneSetOpPowerupUsingPowerup(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GamePowerup
	var b, c Powerup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gamePowerupDBTypes, false, strmangle.SetComplement(gamePowerupPrimaryKeyColumns, gamePowerupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, powerupDBTypes, false, strmangle.SetComplement(powerupPrimaryKeyColumns, powerupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, powerupDBTypes, false, strmangle.SetComplement(powerupPrimaryKeyColumns, powerupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Powerup{&b, &c} {
		err = a.SetPowerup(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Powerup != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GamePowerups[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PowerupID != x.ID {
			t.Error("foreign key was wrong value", a.PowerupID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PowerupID))
		reflect.Indirect(reflect.ValueOf(&a.PowerupID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PowerupID != x.ID {
			t.Error("foreign key was wrong value", a.PowerupID, x.ID)
		}
	}
}

func testGamePowerupsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePowerup{}
	if err = randomize.Struct(seed, o, gamePowerupDBTypes, true, gamePowerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testGamePowerupsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePowerup{}
	if err = randomize.Struct(seed, o, gamePowerupDBTypes, true, gamePowerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GamePowerupSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testGamePowerupsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePowerup{}
	if err = randomize.Struct(seed, o, gamePowerupDBTypes, true, gamePowerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GamePowerups().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	gamePowerupDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `EndedAt`: `timestamp with time zone`, `Position`: `integer`, `Duration`: `integer`, `Multiplier`: `double precision`, `GameID`: `uuid`, `PowerupID`: `integer`, `Minute`: `integer`, `Second`: `integer`, `Bonus`: `boolean`}
	_                  = bytes.MinRead
)

func testGamePowerupsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(gamePowerupPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(gamePowerupAllColumns) == len(gamePowerupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GamePowerup{}
	if err = randomize.Struct(seed, o, gamePowerupDBTypes, true, gamePowerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GamePowerups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gamePowerupDBTypes, true, gamePowerupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGamePowerupsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(gamePowerupAllColumns) == len(gamePowerupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GamePowerup{}
	if err = randomize.Struct(seed, o, gamePowerupDBTypes, true, gamePowerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GamePowerups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gamePowerupDBTypes, true, gamePowerupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(gamePowerupAllColumns, gamePowerupPrimaryKeyColumns) {
		fields = gamePowerupAllColumns
	} else {
		fields = strmangle.SetComplement(
			gamePowerupAllColumns,
			gamePowerupPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GamePowerupSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGamePowerupsUpsert(t *testing.T) {
	t.Parallel()

	if len(gamePowerupAllColumns) == len(gamePowerupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GamePowerup{}
	if err = randomize.Struct(seed, &o, gamePowerupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GamePowerup: %s", err)
	}

	count, err := GamePowerups().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, gamePowerupDBTypes, false, gamePowerupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GamePowerup: %s", err)
	}

	count, err = GamePowerups().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
