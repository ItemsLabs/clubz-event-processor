// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserDivisions(t *testing.T) {
	t.Parallel()

	query := UserDivisions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserDivisionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDivision{}
	if err = randomize.Struct(seed, o, userDivisionDBTypes, true, userDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserDivisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserDivisionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDivision{}
	if err = randomize.Struct(seed, o, userDivisionDBTypes, true, userDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserDivisions().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserDivisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserDivisionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDivision{}
	if err = randomize.Struct(seed, o, userDivisionDBTypes, true, userDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserDivisionSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserDivisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserDivisionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDivision{}
	if err = randomize.Struct(seed, o, userDivisionDBTypes, true, userDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserDivisionExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UserDivision exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserDivisionExists to return true, but got false.")
	}
}

func testUserDivisionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDivision{}
	if err = randomize.Struct(seed, o, userDivisionDBTypes, true, userDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userDivisionFound, err := FindUserDivision(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if userDivisionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserDivisionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDivision{}
	if err = randomize.Struct(seed, o, userDivisionDBTypes, true, userDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserDivisions().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserDivisionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDivision{}
	if err = randomize.Struct(seed, o, userDivisionDBTypes, true, userDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserDivisions().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserDivisionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userDivisionOne := &UserDivision{}
	userDivisionTwo := &UserDivision{}
	if err = randomize.Struct(seed, userDivisionOne, userDivisionDBTypes, false, userDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}
	if err = randomize.Struct(seed, userDivisionTwo, userDivisionDBTypes, false, userDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = userDivisionOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userDivisionTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserDivisions().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserDivisionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userDivisionOne := &UserDivision{}
	userDivisionTwo := &UserDivision{}
	if err = randomize.Struct(seed, userDivisionOne, userDivisionDBTypes, false, userDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}
	if err = randomize.Struct(seed, userDivisionTwo, userDivisionDBTypes, false, userDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = userDivisionOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userDivisionTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserDivisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testUserDivisionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDivision{}
	if err = randomize.Struct(seed, o, userDivisionDBTypes, true, userDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserDivisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserDivisionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDivision{}
	if err = randomize.Struct(seed, o, userDivisionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(userDivisionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserDivisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserDivisionToOneDivisionUsingDivision(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local UserDivision
	var foreign Division

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userDivisionDBTypes, false, userDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, divisionDBTypes, false, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DivisionID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Division().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserDivisionSlice{&local}
	if err = local.L.LoadDivision(tx, false, (*[]*UserDivision)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Division == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Division = nil
	if err = local.L.LoadDivision(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Division == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testUserDivisionToOneGameWeekUsingGameWeek(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local UserDivision
	var foreign GameWeek

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userDivisionDBTypes, false, userDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, gameWeekDBTypes, false, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GameWeekID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.GameWeek().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserDivisionSlice{&local}
	if err = local.L.LoadGameWeek(tx, false, (*[]*UserDivision)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.GameWeek == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.GameWeek = nil
	if err = local.L.LoadGameWeek(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.GameWeek == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testUserDivisionToOneUserUsingUser(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local UserDivision
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userDivisionDBTypes, false, userDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserDivisionSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*UserDivision)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testUserDivisionToOneSetOpDivisionUsingDivision(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a UserDivision
	var b, c Division

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDivisionDBTypes, false, strmangle.SetComplement(userDivisionPrimaryKeyColumns, userDivisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Division{&b, &c} {
		err = a.SetDivision(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Division != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserDivisions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DivisionID != x.ID {
			t.Error("foreign key was wrong value", a.DivisionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DivisionID))
		reflect.Indirect(reflect.ValueOf(&a.DivisionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DivisionID != x.ID {
			t.Error("foreign key was wrong value", a.DivisionID, x.ID)
		}
	}
}
func testUserDivisionToOneSetOpGameWeekUsingGameWeek(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a UserDivision
	var b, c GameWeek

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDivisionDBTypes, false, strmangle.SetComplement(userDivisionPrimaryKeyColumns, userDivisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*GameWeek{&b, &c} {
		err = a.SetGameWeek(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.GameWeek != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserDivisions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GameWeekID != x.ID {
			t.Error("foreign key was wrong value", a.GameWeekID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GameWeekID))
		reflect.Indirect(reflect.ValueOf(&a.GameWeekID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GameWeekID != x.ID {
			t.Error("foreign key was wrong value", a.GameWeekID, x.ID)
		}
	}
}
func testUserDivisionToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a UserDivision
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDivisionDBTypes, false, strmangle.SetComplement(userDivisionPrimaryKeyColumns, userDivisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserDivisions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testUserDivisionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDivision{}
	if err = randomize.Struct(seed, o, userDivisionDBTypes, true, userDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testUserDivisionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDivision{}
	if err = randomize.Struct(seed, o, userDivisionDBTypes, true, userDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserDivisionSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testUserDivisionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDivision{}
	if err = randomize.Struct(seed, o, userDivisionDBTypes, true, userDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserDivisions().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userDivisionDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `JoinDate`: `timestamp with time zone`, `DivisionID`: `uuid`, `GameWeekID`: `uuid`, `UserID`: `uuid`}
	_                   = bytes.MinRead
)

func testUserDivisionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userDivisionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userDivisionAllColumns) == len(userDivisionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserDivision{}
	if err = randomize.Struct(seed, o, userDivisionDBTypes, true, userDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserDivisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userDivisionDBTypes, true, userDivisionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserDivisionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userDivisionAllColumns) == len(userDivisionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserDivision{}
	if err = randomize.Struct(seed, o, userDivisionDBTypes, true, userDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserDivisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userDivisionDBTypes, true, userDivisionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userDivisionAllColumns, userDivisionPrimaryKeyColumns) {
		fields = userDivisionAllColumns
	} else {
		fields = strmangle.SetComplement(
			userDivisionAllColumns,
			userDivisionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserDivisionSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserDivisionsUpsert(t *testing.T) {
	t.Parallel()

	if len(userDivisionAllColumns) == len(userDivisionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserDivision{}
	if err = randomize.Struct(seed, &o, userDivisionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserDivision: %s", err)
	}

	count, err := UserDivisions().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userDivisionDBTypes, false, userDivisionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserDivision struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserDivision: %s", err)
	}

	count, err = UserDivisions().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
