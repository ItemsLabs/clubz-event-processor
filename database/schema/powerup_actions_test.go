// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPowerupActions(t *testing.T) {
	t.Parallel()

	query := PowerupActions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPowerupActionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PowerupAction{}
	if err = randomize.Struct(seed, o, powerupActionDBTypes, true, powerupActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PowerupActions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPowerupActionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PowerupAction{}
	if err = randomize.Struct(seed, o, powerupActionDBTypes, true, powerupActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PowerupActions().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PowerupActions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPowerupActionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PowerupAction{}
	if err = randomize.Struct(seed, o, powerupActionDBTypes, true, powerupActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PowerupActionSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PowerupActions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPowerupActionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PowerupAction{}
	if err = randomize.Struct(seed, o, powerupActionDBTypes, true, powerupActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PowerupActionExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PowerupAction exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PowerupActionExists to return true, but got false.")
	}
}

func testPowerupActionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PowerupAction{}
	if err = randomize.Struct(seed, o, powerupActionDBTypes, true, powerupActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	powerupActionFound, err := FindPowerupAction(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if powerupActionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPowerupActionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PowerupAction{}
	if err = randomize.Struct(seed, o, powerupActionDBTypes, true, powerupActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PowerupActions().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testPowerupActionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PowerupAction{}
	if err = randomize.Struct(seed, o, powerupActionDBTypes, true, powerupActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PowerupActions().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPowerupActionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powerupActionOne := &PowerupAction{}
	powerupActionTwo := &PowerupAction{}
	if err = randomize.Struct(seed, powerupActionOne, powerupActionDBTypes, false, powerupActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}
	if err = randomize.Struct(seed, powerupActionTwo, powerupActionDBTypes, false, powerupActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = powerupActionOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = powerupActionTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PowerupActions().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPowerupActionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	powerupActionOne := &PowerupAction{}
	powerupActionTwo := &PowerupAction{}
	if err = randomize.Struct(seed, powerupActionOne, powerupActionDBTypes, false, powerupActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}
	if err = randomize.Struct(seed, powerupActionTwo, powerupActionDBTypes, false, powerupActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = powerupActionOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = powerupActionTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PowerupActions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testPowerupActionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PowerupAction{}
	if err = randomize.Struct(seed, o, powerupActionDBTypes, true, powerupActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PowerupActions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPowerupActionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PowerupAction{}
	if err = randomize.Struct(seed, o, powerupActionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(powerupActionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PowerupActions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPowerupActionToOneActionUsingAction(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local PowerupAction
	var foreign Action

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, powerupActionDBTypes, false, powerupActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, actionDBTypes, false, actionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Action struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ActionID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Action().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PowerupActionSlice{&local}
	if err = local.L.LoadAction(tx, false, (*[]*PowerupAction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Action == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Action = nil
	if err = local.L.LoadAction(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Action == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testPowerupActionToOnePowerupUsingPowerup(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local PowerupAction
	var foreign Powerup

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, powerupActionDBTypes, false, powerupActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, powerupDBTypes, false, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PowerupID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Powerup().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PowerupActionSlice{&local}
	if err = local.L.LoadPowerup(tx, false, (*[]*PowerupAction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Powerup == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Powerup = nil
	if err = local.L.LoadPowerup(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Powerup == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testPowerupActionToOneSetOpActionUsingAction(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a PowerupAction
	var b, c Action

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, powerupActionDBTypes, false, strmangle.SetComplement(powerupActionPrimaryKeyColumns, powerupActionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, actionDBTypes, false, strmangle.SetComplement(actionPrimaryKeyColumns, actionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, actionDBTypes, false, strmangle.SetComplement(actionPrimaryKeyColumns, actionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Action{&b, &c} {
		err = a.SetAction(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Action != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PowerupActions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ActionID != x.ID {
			t.Error("foreign key was wrong value", a.ActionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ActionID))
		reflect.Indirect(reflect.ValueOf(&a.ActionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ActionID != x.ID {
			t.Error("foreign key was wrong value", a.ActionID, x.ID)
		}
	}
}
func testPowerupActionToOneSetOpPowerupUsingPowerup(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a PowerupAction
	var b, c Powerup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, powerupActionDBTypes, false, strmangle.SetComplement(powerupActionPrimaryKeyColumns, powerupActionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, powerupDBTypes, false, strmangle.SetComplement(powerupPrimaryKeyColumns, powerupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, powerupDBTypes, false, strmangle.SetComplement(powerupPrimaryKeyColumns, powerupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Powerup{&b, &c} {
		err = a.SetPowerup(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Powerup != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PowerupActions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PowerupID != x.ID {
			t.Error("foreign key was wrong value", a.PowerupID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PowerupID))
		reflect.Indirect(reflect.ValueOf(&a.PowerupID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PowerupID != x.ID {
			t.Error("foreign key was wrong value", a.PowerupID, x.ID)
		}
	}
}

func testPowerupActionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PowerupAction{}
	if err = randomize.Struct(seed, o, powerupActionDBTypes, true, powerupActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPowerupActionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PowerupAction{}
	if err = randomize.Struct(seed, o, powerupActionDBTypes, true, powerupActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PowerupActionSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testPowerupActionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PowerupAction{}
	if err = randomize.Struct(seed, o, powerupActionDBTypes, true, powerupActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PowerupActions().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	powerupActionDBTypes = map[string]string{`ID`: `integer`, `Ordering`: `integer`, `ActionID`: `integer`, `PowerupID`: `integer`}
	_                    = bytes.MinRead
)

func testPowerupActionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(powerupActionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(powerupActionAllColumns) == len(powerupActionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PowerupAction{}
	if err = randomize.Struct(seed, o, powerupActionDBTypes, true, powerupActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PowerupActions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, powerupActionDBTypes, true, powerupActionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPowerupActionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(powerupActionAllColumns) == len(powerupActionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PowerupAction{}
	if err = randomize.Struct(seed, o, powerupActionDBTypes, true, powerupActionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PowerupActions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, powerupActionDBTypes, true, powerupActionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(powerupActionAllColumns, powerupActionPrimaryKeyColumns) {
		fields = powerupActionAllColumns
	} else {
		fields = strmangle.SetComplement(
			powerupActionAllColumns,
			powerupActionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PowerupActionSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPowerupActionsUpsert(t *testing.T) {
	t.Parallel()

	if len(powerupActionAllColumns) == len(powerupActionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PowerupAction{}
	if err = randomize.Struct(seed, &o, powerupActionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PowerupAction: %s", err)
	}

	count, err := PowerupActions().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, powerupActionDBTypes, false, powerupActionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PowerupAction struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PowerupAction: %s", err)
	}

	count, err = PowerupActions().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
