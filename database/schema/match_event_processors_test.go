// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMatchEventProcessors(t *testing.T) {
	t.Parallel()

	query := MatchEventProcessors()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMatchEventProcessorsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventProcessor{}
	if err = randomize.Struct(seed, o, matchEventProcessorDBTypes, true, matchEventProcessorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MatchEventProcessors().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMatchEventProcessorsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventProcessor{}
	if err = randomize.Struct(seed, o, matchEventProcessorDBTypes, true, matchEventProcessorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MatchEventProcessors().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MatchEventProcessors().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMatchEventProcessorsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventProcessor{}
	if err = randomize.Struct(seed, o, matchEventProcessorDBTypes, true, matchEventProcessorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MatchEventProcessorSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MatchEventProcessors().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMatchEventProcessorsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventProcessor{}
	if err = randomize.Struct(seed, o, matchEventProcessorDBTypes, true, matchEventProcessorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MatchEventProcessorExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MatchEventProcessor exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MatchEventProcessorExists to return true, but got false.")
	}
}

func testMatchEventProcessorsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventProcessor{}
	if err = randomize.Struct(seed, o, matchEventProcessorDBTypes, true, matchEventProcessorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	matchEventProcessorFound, err := FindMatchEventProcessor(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if matchEventProcessorFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMatchEventProcessorsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventProcessor{}
	if err = randomize.Struct(seed, o, matchEventProcessorDBTypes, true, matchEventProcessorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MatchEventProcessors().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testMatchEventProcessorsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventProcessor{}
	if err = randomize.Struct(seed, o, matchEventProcessorDBTypes, true, matchEventProcessorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MatchEventProcessors().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMatchEventProcessorsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	matchEventProcessorOne := &MatchEventProcessor{}
	matchEventProcessorTwo := &MatchEventProcessor{}
	if err = randomize.Struct(seed, matchEventProcessorOne, matchEventProcessorDBTypes, false, matchEventProcessorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}
	if err = randomize.Struct(seed, matchEventProcessorTwo, matchEventProcessorDBTypes, false, matchEventProcessorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = matchEventProcessorOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = matchEventProcessorTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MatchEventProcessors().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMatchEventProcessorsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	matchEventProcessorOne := &MatchEventProcessor{}
	matchEventProcessorTwo := &MatchEventProcessor{}
	if err = randomize.Struct(seed, matchEventProcessorOne, matchEventProcessorDBTypes, false, matchEventProcessorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}
	if err = randomize.Struct(seed, matchEventProcessorTwo, matchEventProcessorDBTypes, false, matchEventProcessorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = matchEventProcessorOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = matchEventProcessorTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MatchEventProcessors().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testMatchEventProcessorsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventProcessor{}
	if err = randomize.Struct(seed, o, matchEventProcessorDBTypes, true, matchEventProcessorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MatchEventProcessors().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMatchEventProcessorsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventProcessor{}
	if err = randomize.Struct(seed, o, matchEventProcessorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(matchEventProcessorColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MatchEventProcessors().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMatchEventProcessorToOneMatchUsingMatch(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local MatchEventProcessor
	var foreign Match

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchEventProcessorDBTypes, false, matchEventProcessorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MatchID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Match().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchEventProcessorSlice{&local}
	if err = local.L.LoadMatch(tx, false, (*[]*MatchEventProcessor)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Match == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Match = nil
	if err = local.L.LoadMatch(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Match == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchEventProcessorToOneSetOpMatchUsingMatch(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchEventProcessor
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchEventProcessorDBTypes, false, strmangle.SetComplement(matchEventProcessorPrimaryKeyColumns, matchEventProcessorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Match{&b, &c} {
		err = a.SetMatch(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Match != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MatchEventProcessors[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MatchID != x.ID {
			t.Error("foreign key was wrong value", a.MatchID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MatchID))
		reflect.Indirect(reflect.ValueOf(&a.MatchID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MatchID != x.ID {
			t.Error("foreign key was wrong value", a.MatchID, x.ID)
		}
	}
}

func testMatchEventProcessorsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventProcessor{}
	if err = randomize.Struct(seed, o, matchEventProcessorDBTypes, true, matchEventProcessorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testMatchEventProcessorsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventProcessor{}
	if err = randomize.Struct(seed, o, matchEventProcessorDBTypes, true, matchEventProcessorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MatchEventProcessorSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testMatchEventProcessorsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventProcessor{}
	if err = randomize.Struct(seed, o, matchEventProcessorDBTypes, true, matchEventProcessorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MatchEventProcessors().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	matchEventProcessorDBTypes = map[string]string{`ID`: `uuid`, `Type`: `integer`, `LastProcessedID`: `integer`, `MatchID`: `uuid`}
	_                          = bytes.MinRead
)

func testMatchEventProcessorsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(matchEventProcessorPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(matchEventProcessorAllColumns) == len(matchEventProcessorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventProcessor{}
	if err = randomize.Struct(seed, o, matchEventProcessorDBTypes, true, matchEventProcessorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MatchEventProcessors().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, matchEventProcessorDBTypes, true, matchEventProcessorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMatchEventProcessorsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(matchEventProcessorAllColumns) == len(matchEventProcessorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventProcessor{}
	if err = randomize.Struct(seed, o, matchEventProcessorDBTypes, true, matchEventProcessorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MatchEventProcessors().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, matchEventProcessorDBTypes, true, matchEventProcessorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(matchEventProcessorAllColumns, matchEventProcessorPrimaryKeyColumns) {
		fields = matchEventProcessorAllColumns
	} else {
		fields = strmangle.SetComplement(
			matchEventProcessorAllColumns,
			matchEventProcessorPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MatchEventProcessorSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMatchEventProcessorsUpsert(t *testing.T) {
	t.Parallel()

	if len(matchEventProcessorAllColumns) == len(matchEventProcessorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MatchEventProcessor{}
	if err = randomize.Struct(seed, &o, matchEventProcessorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MatchEventProcessor: %s", err)
	}

	count, err := MatchEventProcessors().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, matchEventProcessorDBTypes, false, matchEventProcessorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MatchEventProcessor struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MatchEventProcessor: %s", err)
	}

	count, err = MatchEventProcessors().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
