// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StoreProductTransaction is an object representing the database table.
type StoreProductTransaction struct {
	ID                    string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UpdatedAt             time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt             time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ProductID             string      `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	TransactionID         null.String `boil:"transaction_id" json:"transaction_id,omitempty" toml:"transaction_id" yaml:"transaction_id,omitempty"`
	UserID                null.String `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	Confirmed             bool        `boil:"confirmed" json:"confirmed" toml:"confirmed" yaml:"confirmed"`
	ConfirmedAt           null.Time   `boil:"confirmed_at" json:"confirmed_at,omitempty" toml:"confirmed_at" yaml:"confirmed_at,omitempty"`
	Initiated             bool        `boil:"initiated" json:"initiated" toml:"initiated" yaml:"initiated"`
	InitiatedAt           null.Time   `boil:"initiated_at" json:"initiated_at,omitempty" toml:"initiated_at" yaml:"initiated_at,omitempty"`
	ExternalTransactionID null.String `boil:"external_transaction_id" json:"external_transaction_id,omitempty" toml:"external_transaction_id" yaml:"external_transaction_id,omitempty"`
	OriginStore           null.String `boil:"origin_store" json:"origin_store,omitempty" toml:"origin_store" yaml:"origin_store,omitempty"`

	R *storeProductTransactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L storeProductTransactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StoreProductTransactionColumns = struct {
	ID                    string
	UpdatedAt             string
	CreatedAt             string
	ProductID             string
	TransactionID         string
	UserID                string
	Confirmed             string
	ConfirmedAt           string
	Initiated             string
	InitiatedAt           string
	ExternalTransactionID string
	OriginStore           string
}{
	ID:                    "id",
	UpdatedAt:             "updated_at",
	CreatedAt:             "created_at",
	ProductID:             "product_id",
	TransactionID:         "transaction_id",
	UserID:                "user_id",
	Confirmed:             "confirmed",
	ConfirmedAt:           "confirmed_at",
	Initiated:             "initiated",
	InitiatedAt:           "initiated_at",
	ExternalTransactionID: "external_transaction_id",
	OriginStore:           "origin_store",
}

var StoreProductTransactionTableColumns = struct {
	ID                    string
	UpdatedAt             string
	CreatedAt             string
	ProductID             string
	TransactionID         string
	UserID                string
	Confirmed             string
	ConfirmedAt           string
	Initiated             string
	InitiatedAt           string
	ExternalTransactionID string
	OriginStore           string
}{
	ID:                    "store_product_transactions.id",
	UpdatedAt:             "store_product_transactions.updated_at",
	CreatedAt:             "store_product_transactions.created_at",
	ProductID:             "store_product_transactions.product_id",
	TransactionID:         "store_product_transactions.transaction_id",
	UserID:                "store_product_transactions.user_id",
	Confirmed:             "store_product_transactions.confirmed",
	ConfirmedAt:           "store_product_transactions.confirmed_at",
	Initiated:             "store_product_transactions.initiated",
	InitiatedAt:           "store_product_transactions.initiated_at",
	ExternalTransactionID: "store_product_transactions.external_transaction_id",
	OriginStore:           "store_product_transactions.origin_store",
}

// Generated where

var StoreProductTransactionWhere = struct {
	ID                    whereHelperstring
	UpdatedAt             whereHelpertime_Time
	CreatedAt             whereHelpertime_Time
	ProductID             whereHelperstring
	TransactionID         whereHelpernull_String
	UserID                whereHelpernull_String
	Confirmed             whereHelperbool
	ConfirmedAt           whereHelpernull_Time
	Initiated             whereHelperbool
	InitiatedAt           whereHelpernull_Time
	ExternalTransactionID whereHelpernull_String
	OriginStore           whereHelpernull_String
}{
	ID:                    whereHelperstring{field: "\"store_product_transactions\".\"id\""},
	UpdatedAt:             whereHelpertime_Time{field: "\"store_product_transactions\".\"updated_at\""},
	CreatedAt:             whereHelpertime_Time{field: "\"store_product_transactions\".\"created_at\""},
	ProductID:             whereHelperstring{field: "\"store_product_transactions\".\"product_id\""},
	TransactionID:         whereHelpernull_String{field: "\"store_product_transactions\".\"transaction_id\""},
	UserID:                whereHelpernull_String{field: "\"store_product_transactions\".\"user_id\""},
	Confirmed:             whereHelperbool{field: "\"store_product_transactions\".\"confirmed\""},
	ConfirmedAt:           whereHelpernull_Time{field: "\"store_product_transactions\".\"confirmed_at\""},
	Initiated:             whereHelperbool{field: "\"store_product_transactions\".\"initiated\""},
	InitiatedAt:           whereHelpernull_Time{field: "\"store_product_transactions\".\"initiated_at\""},
	ExternalTransactionID: whereHelpernull_String{field: "\"store_product_transactions\".\"external_transaction_id\""},
	OriginStore:           whereHelpernull_String{field: "\"store_product_transactions\".\"origin_store\""},
}

// StoreProductTransactionRels is where relationship names are stored.
var StoreProductTransactionRels = struct {
	Product                           string
	Transaction                       string
	User                              string
	StoreTransactionAssignedCardPacks string
}{
	Product:                           "Product",
	Transaction:                       "Transaction",
	User:                              "User",
	StoreTransactionAssignedCardPacks: "StoreTransactionAssignedCardPacks",
}

// storeProductTransactionR is where relationships are stored.
type storeProductTransactionR struct {
	Product                           *StoreProduct         `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Transaction                       *Transaction          `boil:"Transaction" json:"Transaction" toml:"Transaction" yaml:"Transaction"`
	User                              *User                 `boil:"User" json:"User" toml:"User" yaml:"User"`
	StoreTransactionAssignedCardPacks AssignedCardPackSlice `boil:"StoreTransactionAssignedCardPacks" json:"StoreTransactionAssignedCardPacks" toml:"StoreTransactionAssignedCardPacks" yaml:"StoreTransactionAssignedCardPacks"`
}

// NewStruct creates a new relationship struct
func (*storeProductTransactionR) NewStruct() *storeProductTransactionR {
	return &storeProductTransactionR{}
}

func (r *storeProductTransactionR) GetProduct() *StoreProduct {
	if r == nil {
		return nil
	}
	return r.Product
}

func (r *storeProductTransactionR) GetTransaction() *Transaction {
	if r == nil {
		return nil
	}
	return r.Transaction
}

func (r *storeProductTransactionR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *storeProductTransactionR) GetStoreTransactionAssignedCardPacks() AssignedCardPackSlice {
	if r == nil {
		return nil
	}
	return r.StoreTransactionAssignedCardPacks
}

// storeProductTransactionL is where Load methods for each relationship are stored.
type storeProductTransactionL struct{}

var (
	storeProductTransactionAllColumns            = []string{"id", "updated_at", "created_at", "product_id", "transaction_id", "user_id", "confirmed", "confirmed_at", "initiated", "initiated_at", "external_transaction_id", "origin_store"}
	storeProductTransactionColumnsWithoutDefault = []string{"id", "updated_at", "created_at", "product_id", "confirmed", "initiated"}
	storeProductTransactionColumnsWithDefault    = []string{"transaction_id", "user_id", "confirmed_at", "initiated_at", "external_transaction_id", "origin_store"}
	storeProductTransactionPrimaryKeyColumns     = []string{"id"}
	storeProductTransactionGeneratedColumns      = []string{}
)

type (
	// StoreProductTransactionSlice is an alias for a slice of pointers to StoreProductTransaction.
	// This should almost always be used instead of []StoreProductTransaction.
	StoreProductTransactionSlice []*StoreProductTransaction

	storeProductTransactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	storeProductTransactionType                 = reflect.TypeOf(&StoreProductTransaction{})
	storeProductTransactionMapping              = queries.MakeStructMapping(storeProductTransactionType)
	storeProductTransactionPrimaryKeyMapping, _ = queries.BindMapping(storeProductTransactionType, storeProductTransactionMapping, storeProductTransactionPrimaryKeyColumns)
	storeProductTransactionInsertCacheMut       sync.RWMutex
	storeProductTransactionInsertCache          = make(map[string]insertCache)
	storeProductTransactionUpdateCacheMut       sync.RWMutex
	storeProductTransactionUpdateCache          = make(map[string]updateCache)
	storeProductTransactionUpsertCacheMut       sync.RWMutex
	storeProductTransactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single storeProductTransaction record from the query.
func (q storeProductTransactionQuery) One(exec boil.Executor) (*StoreProductTransaction, error) {
	o := &StoreProductTransaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for store_product_transactions")
	}

	return o, nil
}

// All returns all StoreProductTransaction records from the query.
func (q storeProductTransactionQuery) All(exec boil.Executor) (StoreProductTransactionSlice, error) {
	var o []*StoreProductTransaction

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to StoreProductTransaction slice")
	}

	return o, nil
}

// Count returns the count of all StoreProductTransaction records in the query.
func (q storeProductTransactionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count store_product_transactions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q storeProductTransactionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if store_product_transactions exists")
	}

	return count > 0, nil
}

// Product pointed to by the foreign key.
func (o *StoreProductTransaction) Product(mods ...qm.QueryMod) storeProductQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return StoreProducts(queryMods...)
}

// Transaction pointed to by the foreign key.
func (o *StoreProductTransaction) Transaction(mods ...qm.QueryMod) transactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TransactionID),
	}

	queryMods = append(queryMods, mods...)

	return Transactions(queryMods...)
}

// User pointed to by the foreign key.
func (o *StoreProductTransaction) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// StoreTransactionAssignedCardPacks retrieves all the assigned_card_pack's AssignedCardPacks with an executor via store_transaction_id column.
func (o *StoreProductTransaction) StoreTransactionAssignedCardPacks(mods ...qm.QueryMod) assignedCardPackQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assigned_card_packs\".\"store_transaction_id\"=?", o.ID),
	)

	return AssignedCardPacks(queryMods...)
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (storeProductTransactionL) LoadProduct(e boil.Executor, singular bool, maybeStoreProductTransaction interface{}, mods queries.Applicator) error {
	var slice []*StoreProductTransaction
	var object *StoreProductTransaction

	if singular {
		var ok bool
		object, ok = maybeStoreProductTransaction.(*StoreProductTransaction)
		if !ok {
			object = new(StoreProductTransaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStoreProductTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStoreProductTransaction))
			}
		}
	} else {
		s, ok := maybeStoreProductTransaction.(*[]*StoreProductTransaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStoreProductTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStoreProductTransaction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &storeProductTransactionR{}
		}
		args[object.ProductID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeProductTransactionR{}
			}

			args[obj.ProductID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`store_products`),
		qm.WhereIn(`store_products.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load StoreProduct")
	}

	var resultSlice []*StoreProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice StoreProduct")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for store_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for store_products")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &storeProductR{}
		}
		foreign.R.ProductStoreProductTransactions = append(foreign.R.ProductStoreProductTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &storeProductR{}
				}
				foreign.R.ProductStoreProductTransactions = append(foreign.R.ProductStoreProductTransactions, local)
				break
			}
		}
	}

	return nil
}

// LoadTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (storeProductTransactionL) LoadTransaction(e boil.Executor, singular bool, maybeStoreProductTransaction interface{}, mods queries.Applicator) error {
	var slice []*StoreProductTransaction
	var object *StoreProductTransaction

	if singular {
		var ok bool
		object, ok = maybeStoreProductTransaction.(*StoreProductTransaction)
		if !ok {
			object = new(StoreProductTransaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStoreProductTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStoreProductTransaction))
			}
		}
	} else {
		s, ok := maybeStoreProductTransaction.(*[]*StoreProductTransaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStoreProductTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStoreProductTransaction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &storeProductTransactionR{}
		}
		if !queries.IsNil(object.TransactionID) {
			args[object.TransactionID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeProductTransactionR{}
			}

			if !queries.IsNil(obj.TransactionID) {
				args[obj.TransactionID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`transactions`),
		qm.WhereIn(`transactions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transaction")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Transaction = foreign
		if foreign.R == nil {
			foreign.R = &transactionR{}
		}
		foreign.R.StoreProductTransactions = append(foreign.R.StoreProductTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TransactionID, foreign.ID) {
				local.R.Transaction = foreign
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.StoreProductTransactions = append(foreign.R.StoreProductTransactions, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (storeProductTransactionL) LoadUser(e boil.Executor, singular bool, maybeStoreProductTransaction interface{}, mods queries.Applicator) error {
	var slice []*StoreProductTransaction
	var object *StoreProductTransaction

	if singular {
		var ok bool
		object, ok = maybeStoreProductTransaction.(*StoreProductTransaction)
		if !ok {
			object = new(StoreProductTransaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStoreProductTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStoreProductTransaction))
			}
		}
	} else {
		s, ok := maybeStoreProductTransaction.(*[]*StoreProductTransaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStoreProductTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStoreProductTransaction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &storeProductTransactionR{}
		}
		if !queries.IsNil(object.UserID) {
			args[object.UserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeProductTransactionR{}
			}

			if !queries.IsNil(obj.UserID) {
				args[obj.UserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.StoreProductTransactions = append(foreign.R.StoreProductTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.StoreProductTransactions = append(foreign.R.StoreProductTransactions, local)
				break
			}
		}
	}

	return nil
}

// LoadStoreTransactionAssignedCardPacks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (storeProductTransactionL) LoadStoreTransactionAssignedCardPacks(e boil.Executor, singular bool, maybeStoreProductTransaction interface{}, mods queries.Applicator) error {
	var slice []*StoreProductTransaction
	var object *StoreProductTransaction

	if singular {
		var ok bool
		object, ok = maybeStoreProductTransaction.(*StoreProductTransaction)
		if !ok {
			object = new(StoreProductTransaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStoreProductTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStoreProductTransaction))
			}
		}
	} else {
		s, ok := maybeStoreProductTransaction.(*[]*StoreProductTransaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStoreProductTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStoreProductTransaction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &storeProductTransactionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeProductTransactionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`assigned_card_packs`),
		qm.WhereIn(`assigned_card_packs.store_transaction_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assigned_card_packs")
	}

	var resultSlice []*AssignedCardPack
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assigned_card_packs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assigned_card_packs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assigned_card_packs")
	}

	if singular {
		object.R.StoreTransactionAssignedCardPacks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assignedCardPackR{}
			}
			foreign.R.StoreTransaction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.StoreTransactionID) {
				local.R.StoreTransactionAssignedCardPacks = append(local.R.StoreTransactionAssignedCardPacks, foreign)
				if foreign.R == nil {
					foreign.R = &assignedCardPackR{}
				}
				foreign.R.StoreTransaction = local
				break
			}
		}
	}

	return nil
}

// SetProduct of the storeProductTransaction to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ProductStoreProductTransactions.
func (o *StoreProductTransaction) SetProduct(exec boil.Executor, insert bool, related *StoreProduct) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"store_product_transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, storeProductTransactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &storeProductTransactionR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &storeProductR{
			ProductStoreProductTransactions: StoreProductTransactionSlice{o},
		}
	} else {
		related.R.ProductStoreProductTransactions = append(related.R.ProductStoreProductTransactions, o)
	}

	return nil
}

// SetTransaction of the storeProductTransaction to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.StoreProductTransactions.
func (o *StoreProductTransaction) SetTransaction(exec boil.Executor, insert bool, related *Transaction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"store_product_transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"transaction_id"}),
		strmangle.WhereClause("\"", "\"", 2, storeProductTransactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TransactionID, related.ID)
	if o.R == nil {
		o.R = &storeProductTransactionR{
			Transaction: related,
		}
	} else {
		o.R.Transaction = related
	}

	if related.R == nil {
		related.R = &transactionR{
			StoreProductTransactions: StoreProductTransactionSlice{o},
		}
	} else {
		related.R.StoreProductTransactions = append(related.R.StoreProductTransactions, o)
	}

	return nil
}

// RemoveTransaction relationship.
// Sets o.R.Transaction to nil.
// Removes o from all passed in related items' relationships struct.
func (o *StoreProductTransaction) RemoveTransaction(exec boil.Executor, related *Transaction) error {
	var err error

	queries.SetScanner(&o.TransactionID, nil)
	if _, err = o.Update(exec, boil.Whitelist("transaction_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Transaction = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.StoreProductTransactions {
		if queries.Equal(o.TransactionID, ri.TransactionID) {
			continue
		}

		ln := len(related.R.StoreProductTransactions)
		if ln > 1 && i < ln-1 {
			related.R.StoreProductTransactions[i] = related.R.StoreProductTransactions[ln-1]
		}
		related.R.StoreProductTransactions = related.R.StoreProductTransactions[:ln-1]
		break
	}
	return nil
}

// SetUser of the storeProductTransaction to the related item.
// Sets o.R.User to related.
// Adds o to related.R.StoreProductTransactions.
func (o *StoreProductTransaction) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"store_product_transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, storeProductTransactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &storeProductTransactionR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			StoreProductTransactions: StoreProductTransactionSlice{o},
		}
	} else {
		related.R.StoreProductTransactions = append(related.R.StoreProductTransactions, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct.
func (o *StoreProductTransaction) RemoveUser(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.StoreProductTransactions {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.StoreProductTransactions)
		if ln > 1 && i < ln-1 {
			related.R.StoreProductTransactions[i] = related.R.StoreProductTransactions[ln-1]
		}
		related.R.StoreProductTransactions = related.R.StoreProductTransactions[:ln-1]
		break
	}
	return nil
}

// AddStoreTransactionAssignedCardPacks adds the given related objects to the existing relationships
// of the store_product_transaction, optionally inserting them as new records.
// Appends related to o.R.StoreTransactionAssignedCardPacks.
// Sets related.R.StoreTransaction appropriately.
func (o *StoreProductTransaction) AddStoreTransactionAssignedCardPacks(exec boil.Executor, insert bool, related ...*AssignedCardPack) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.StoreTransactionID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assigned_card_packs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"store_transaction_id"}),
				strmangle.WhereClause("\"", "\"", 2, assignedCardPackPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.StoreTransactionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &storeProductTransactionR{
			StoreTransactionAssignedCardPacks: related,
		}
	} else {
		o.R.StoreTransactionAssignedCardPacks = append(o.R.StoreTransactionAssignedCardPacks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assignedCardPackR{
				StoreTransaction: o,
			}
		} else {
			rel.R.StoreTransaction = o
		}
	}
	return nil
}

// SetStoreTransactionAssignedCardPacks removes all previously related items of the
// store_product_transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.StoreTransaction's StoreTransactionAssignedCardPacks accordingly.
// Replaces o.R.StoreTransactionAssignedCardPacks with related.
// Sets related.R.StoreTransaction's StoreTransactionAssignedCardPacks accordingly.
func (o *StoreProductTransaction) SetStoreTransactionAssignedCardPacks(exec boil.Executor, insert bool, related ...*AssignedCardPack) error {
	query := "update \"assigned_card_packs\" set \"store_transaction_id\" = null where \"store_transaction_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.StoreTransactionAssignedCardPacks {
			queries.SetScanner(&rel.StoreTransactionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.StoreTransaction = nil
		}
		o.R.StoreTransactionAssignedCardPacks = nil
	}

	return o.AddStoreTransactionAssignedCardPacks(exec, insert, related...)
}

// RemoveStoreTransactionAssignedCardPacks relationships from objects passed in.
// Removes related items from R.StoreTransactionAssignedCardPacks (uses pointer comparison, removal does not keep order)
// Sets related.R.StoreTransaction.
func (o *StoreProductTransaction) RemoveStoreTransactionAssignedCardPacks(exec boil.Executor, related ...*AssignedCardPack) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.StoreTransactionID, nil)
		if rel.R != nil {
			rel.R.StoreTransaction = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("store_transaction_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.StoreTransactionAssignedCardPacks {
			if rel != ri {
				continue
			}

			ln := len(o.R.StoreTransactionAssignedCardPacks)
			if ln > 1 && i < ln-1 {
				o.R.StoreTransactionAssignedCardPacks[i] = o.R.StoreTransactionAssignedCardPacks[ln-1]
			}
			o.R.StoreTransactionAssignedCardPacks = o.R.StoreTransactionAssignedCardPacks[:ln-1]
			break
		}
	}

	return nil
}

// StoreProductTransactions retrieves all the records using an executor.
func StoreProductTransactions(mods ...qm.QueryMod) storeProductTransactionQuery {
	mods = append(mods, qm.From("\"store_product_transactions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"store_product_transactions\".*"})
	}

	return storeProductTransactionQuery{q}
}

// FindStoreProductTransaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStoreProductTransaction(exec boil.Executor, iD string, selectCols ...string) (*StoreProductTransaction, error) {
	storeProductTransactionObj := &StoreProductTransaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"store_product_transactions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, storeProductTransactionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from store_product_transactions")
	}

	return storeProductTransactionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StoreProductTransaction) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no store_product_transactions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(storeProductTransactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	storeProductTransactionInsertCacheMut.RLock()
	cache, cached := storeProductTransactionInsertCache[key]
	storeProductTransactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			storeProductTransactionAllColumns,
			storeProductTransactionColumnsWithDefault,
			storeProductTransactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(storeProductTransactionType, storeProductTransactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(storeProductTransactionType, storeProductTransactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"store_product_transactions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"store_product_transactions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into store_product_transactions")
	}

	if !cached {
		storeProductTransactionInsertCacheMut.Lock()
		storeProductTransactionInsertCache[key] = cache
		storeProductTransactionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the StoreProductTransaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StoreProductTransaction) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	storeProductTransactionUpdateCacheMut.RLock()
	cache, cached := storeProductTransactionUpdateCache[key]
	storeProductTransactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			storeProductTransactionAllColumns,
			storeProductTransactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update store_product_transactions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"store_product_transactions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, storeProductTransactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(storeProductTransactionType, storeProductTransactionMapping, append(wl, storeProductTransactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update store_product_transactions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for store_product_transactions")
	}

	if !cached {
		storeProductTransactionUpdateCacheMut.Lock()
		storeProductTransactionUpdateCache[key] = cache
		storeProductTransactionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q storeProductTransactionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for store_product_transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for store_product_transactions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StoreProductTransactionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeProductTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"store_product_transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, storeProductTransactionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in storeProductTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all storeProductTransaction")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StoreProductTransaction) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no store_product_transactions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(storeProductTransactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	storeProductTransactionUpsertCacheMut.RLock()
	cache, cached := storeProductTransactionUpsertCache[key]
	storeProductTransactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			storeProductTransactionAllColumns,
			storeProductTransactionColumnsWithDefault,
			storeProductTransactionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			storeProductTransactionAllColumns,
			storeProductTransactionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert store_product_transactions, could not build update column list")
		}

		ret := strmangle.SetComplement(storeProductTransactionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(storeProductTransactionPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert store_product_transactions, could not build conflict column list")
			}

			conflict = make([]string, len(storeProductTransactionPrimaryKeyColumns))
			copy(conflict, storeProductTransactionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"store_product_transactions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(storeProductTransactionType, storeProductTransactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(storeProductTransactionType, storeProductTransactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert store_product_transactions")
	}

	if !cached {
		storeProductTransactionUpsertCacheMut.Lock()
		storeProductTransactionUpsertCache[key] = cache
		storeProductTransactionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single StoreProductTransaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StoreProductTransaction) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no StoreProductTransaction provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), storeProductTransactionPrimaryKeyMapping)
	sql := "DELETE FROM \"store_product_transactions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from store_product_transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for store_product_transactions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q storeProductTransactionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no storeProductTransactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from store_product_transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for store_product_transactions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StoreProductTransactionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeProductTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"store_product_transactions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storeProductTransactionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from storeProductTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for store_product_transactions")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StoreProductTransaction) Reload(exec boil.Executor) error {
	ret, err := FindStoreProductTransaction(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StoreProductTransactionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StoreProductTransactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeProductTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"store_product_transactions\".* FROM \"store_product_transactions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storeProductTransactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in StoreProductTransactionSlice")
	}

	*o = slice

	return nil
}

// StoreProductTransactionExists checks if the StoreProductTransaction row exists.
func StoreProductTransactionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"store_product_transactions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if store_product_transactions exists")
	}

	return exists, nil
}

// Exists checks if the StoreProductTransaction row exists.
func (o *StoreProductTransaction) Exists(exec boil.Executor) (bool, error) {
	return StoreProductTransactionExists(exec, o.ID)
}
