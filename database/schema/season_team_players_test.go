// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSeasonTeamPlayers(t *testing.T) {
	t.Parallel()

	query := SeasonTeamPlayers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSeasonTeamPlayersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeasonTeamPlayer{}
	if err = randomize.Struct(seed, o, seasonTeamPlayerDBTypes, true, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SeasonTeamPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSeasonTeamPlayersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeasonTeamPlayer{}
	if err = randomize.Struct(seed, o, seasonTeamPlayerDBTypes, true, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SeasonTeamPlayers().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SeasonTeamPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSeasonTeamPlayersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeasonTeamPlayer{}
	if err = randomize.Struct(seed, o, seasonTeamPlayerDBTypes, true, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SeasonTeamPlayerSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SeasonTeamPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSeasonTeamPlayersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeasonTeamPlayer{}
	if err = randomize.Struct(seed, o, seasonTeamPlayerDBTypes, true, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SeasonTeamPlayerExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SeasonTeamPlayer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SeasonTeamPlayerExists to return true, but got false.")
	}
}

func testSeasonTeamPlayersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeasonTeamPlayer{}
	if err = randomize.Struct(seed, o, seasonTeamPlayerDBTypes, true, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	seasonTeamPlayerFound, err := FindSeasonTeamPlayer(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if seasonTeamPlayerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSeasonTeamPlayersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeasonTeamPlayer{}
	if err = randomize.Struct(seed, o, seasonTeamPlayerDBTypes, true, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SeasonTeamPlayers().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testSeasonTeamPlayersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeasonTeamPlayer{}
	if err = randomize.Struct(seed, o, seasonTeamPlayerDBTypes, true, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SeasonTeamPlayers().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSeasonTeamPlayersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	seasonTeamPlayerOne := &SeasonTeamPlayer{}
	seasonTeamPlayerTwo := &SeasonTeamPlayer{}
	if err = randomize.Struct(seed, seasonTeamPlayerOne, seasonTeamPlayerDBTypes, false, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}
	if err = randomize.Struct(seed, seasonTeamPlayerTwo, seasonTeamPlayerDBTypes, false, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = seasonTeamPlayerOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = seasonTeamPlayerTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SeasonTeamPlayers().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSeasonTeamPlayersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	seasonTeamPlayerOne := &SeasonTeamPlayer{}
	seasonTeamPlayerTwo := &SeasonTeamPlayer{}
	if err = randomize.Struct(seed, seasonTeamPlayerOne, seasonTeamPlayerDBTypes, false, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}
	if err = randomize.Struct(seed, seasonTeamPlayerTwo, seasonTeamPlayerDBTypes, false, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = seasonTeamPlayerOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = seasonTeamPlayerTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SeasonTeamPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testSeasonTeamPlayersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeasonTeamPlayer{}
	if err = randomize.Struct(seed, o, seasonTeamPlayerDBTypes, true, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SeasonTeamPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSeasonTeamPlayersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeasonTeamPlayer{}
	if err = randomize.Struct(seed, o, seasonTeamPlayerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(seasonTeamPlayerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SeasonTeamPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSeasonTeamPlayerToOnePlayerUsingPlayer(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local SeasonTeamPlayer
	var foreign Player

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, seasonTeamPlayerDBTypes, false, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PlayerID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Player().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SeasonTeamPlayerSlice{&local}
	if err = local.L.LoadPlayer(tx, false, (*[]*SeasonTeamPlayer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Player == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Player = nil
	if err = local.L.LoadPlayer(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Player == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testSeasonTeamPlayerToOneSeasonUsingSeason(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local SeasonTeamPlayer
	var foreign Season

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, seasonTeamPlayerDBTypes, false, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, seasonDBTypes, false, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SeasonID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Season().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SeasonTeamPlayerSlice{&local}
	if err = local.L.LoadSeason(tx, false, (*[]*SeasonTeamPlayer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Season == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Season = nil
	if err = local.L.LoadSeason(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Season == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testSeasonTeamPlayerToOneTeamUsingTeam(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local SeasonTeamPlayer
	var foreign Team

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, seasonTeamPlayerDBTypes, false, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TeamID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Team().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SeasonTeamPlayerSlice{&local}
	if err = local.L.LoadTeam(tx, false, (*[]*SeasonTeamPlayer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Team = nil
	if err = local.L.LoadTeam(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testSeasonTeamPlayerToOneSetOpPlayerUsingPlayer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a SeasonTeamPlayer
	var b, c Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seasonTeamPlayerDBTypes, false, strmangle.SetComplement(seasonTeamPlayerPrimaryKeyColumns, seasonTeamPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Player{&b, &c} {
		err = a.SetPlayer(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Player != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SeasonTeamPlayers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PlayerID != x.ID {
			t.Error("foreign key was wrong value", a.PlayerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PlayerID))
		reflect.Indirect(reflect.ValueOf(&a.PlayerID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PlayerID != x.ID {
			t.Error("foreign key was wrong value", a.PlayerID, x.ID)
		}
	}
}
func testSeasonTeamPlayerToOneSetOpSeasonUsingSeason(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a SeasonTeamPlayer
	var b, c Season

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seasonTeamPlayerDBTypes, false, strmangle.SetComplement(seasonTeamPlayerPrimaryKeyColumns, seasonTeamPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, seasonDBTypes, false, strmangle.SetComplement(seasonPrimaryKeyColumns, seasonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, seasonDBTypes, false, strmangle.SetComplement(seasonPrimaryKeyColumns, seasonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Season{&b, &c} {
		err = a.SetSeason(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Season != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SeasonTeamPlayers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SeasonID != x.ID {
			t.Error("foreign key was wrong value", a.SeasonID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SeasonID))
		reflect.Indirect(reflect.ValueOf(&a.SeasonID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SeasonID != x.ID {
			t.Error("foreign key was wrong value", a.SeasonID, x.ID)
		}
	}
}
func testSeasonTeamPlayerToOneSetOpTeamUsingTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a SeasonTeamPlayer
	var b, c Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seasonTeamPlayerDBTypes, false, strmangle.SetComplement(seasonTeamPlayerPrimaryKeyColumns, seasonTeamPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Team{&b, &c} {
		err = a.SetTeam(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Team != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SeasonTeamPlayers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TeamID != x.ID {
			t.Error("foreign key was wrong value", a.TeamID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TeamID))
		reflect.Indirect(reflect.ValueOf(&a.TeamID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TeamID != x.ID {
			t.Error("foreign key was wrong value", a.TeamID, x.ID)
		}
	}
}

func testSeasonTeamPlayersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeasonTeamPlayer{}
	if err = randomize.Struct(seed, o, seasonTeamPlayerDBTypes, true, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSeasonTeamPlayersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeasonTeamPlayer{}
	if err = randomize.Struct(seed, o, seasonTeamPlayerDBTypes, true, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SeasonTeamPlayerSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testSeasonTeamPlayersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeasonTeamPlayer{}
	if err = randomize.Struct(seed, o, seasonTeamPlayerDBTypes, true, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SeasonTeamPlayers().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	seasonTeamPlayerDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `Position`: `character varying`, `JerseyNumber`: `integer`, `PlayerID`: `uuid`, `SeasonID`: `uuid`, `TeamID`: `uuid`}
	_                       = bytes.MinRead
)

func testSeasonTeamPlayersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(seasonTeamPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(seasonTeamPlayerAllColumns) == len(seasonTeamPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SeasonTeamPlayer{}
	if err = randomize.Struct(seed, o, seasonTeamPlayerDBTypes, true, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SeasonTeamPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, seasonTeamPlayerDBTypes, true, seasonTeamPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSeasonTeamPlayersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(seasonTeamPlayerAllColumns) == len(seasonTeamPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SeasonTeamPlayer{}
	if err = randomize.Struct(seed, o, seasonTeamPlayerDBTypes, true, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SeasonTeamPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, seasonTeamPlayerDBTypes, true, seasonTeamPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(seasonTeamPlayerAllColumns, seasonTeamPlayerPrimaryKeyColumns) {
		fields = seasonTeamPlayerAllColumns
	} else {
		fields = strmangle.SetComplement(
			seasonTeamPlayerAllColumns,
			seasonTeamPlayerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SeasonTeamPlayerSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSeasonTeamPlayersUpsert(t *testing.T) {
	t.Parallel()

	if len(seasonTeamPlayerAllColumns) == len(seasonTeamPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SeasonTeamPlayer{}
	if err = randomize.Struct(seed, &o, seasonTeamPlayerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SeasonTeamPlayer: %s", err)
	}

	count, err := SeasonTeamPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, seasonTeamPlayerDBTypes, false, seasonTeamPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SeasonTeamPlayer struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SeasonTeamPlayer: %s", err)
	}

	count, err = SeasonTeamPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
