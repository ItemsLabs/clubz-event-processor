// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCompetitionEditions(t *testing.T) {
	t.Parallel()

	query := CompetitionEditions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCompetitionEditionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionEdition{}
	if err = randomize.Struct(seed, o, competitionEditionDBTypes, true, competitionEditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CompetitionEditions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompetitionEditionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionEdition{}
	if err = randomize.Struct(seed, o, competitionEditionDBTypes, true, competitionEditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CompetitionEditions().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CompetitionEditions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompetitionEditionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionEdition{}
	if err = randomize.Struct(seed, o, competitionEditionDBTypes, true, competitionEditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompetitionEditionSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CompetitionEditions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompetitionEditionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionEdition{}
	if err = randomize.Struct(seed, o, competitionEditionDBTypes, true, competitionEditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CompetitionEditionExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CompetitionEdition exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CompetitionEditionExists to return true, but got false.")
	}
}

func testCompetitionEditionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionEdition{}
	if err = randomize.Struct(seed, o, competitionEditionDBTypes, true, competitionEditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	competitionEditionFound, err := FindCompetitionEdition(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if competitionEditionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCompetitionEditionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionEdition{}
	if err = randomize.Struct(seed, o, competitionEditionDBTypes, true, competitionEditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CompetitionEditions().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testCompetitionEditionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionEdition{}
	if err = randomize.Struct(seed, o, competitionEditionDBTypes, true, competitionEditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CompetitionEditions().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCompetitionEditionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	competitionEditionOne := &CompetitionEdition{}
	competitionEditionTwo := &CompetitionEdition{}
	if err = randomize.Struct(seed, competitionEditionOne, competitionEditionDBTypes, false, competitionEditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}
	if err = randomize.Struct(seed, competitionEditionTwo, competitionEditionDBTypes, false, competitionEditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = competitionEditionOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = competitionEditionTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CompetitionEditions().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCompetitionEditionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	competitionEditionOne := &CompetitionEdition{}
	competitionEditionTwo := &CompetitionEdition{}
	if err = randomize.Struct(seed, competitionEditionOne, competitionEditionDBTypes, false, competitionEditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}
	if err = randomize.Struct(seed, competitionEditionTwo, competitionEditionDBTypes, false, competitionEditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = competitionEditionOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = competitionEditionTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompetitionEditions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testCompetitionEditionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionEdition{}
	if err = randomize.Struct(seed, o, competitionEditionDBTypes, true, competitionEditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompetitionEditions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompetitionEditionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionEdition{}
	if err = randomize.Struct(seed, o, competitionEditionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(competitionEditionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CompetitionEditions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompetitionEditionToManyCompetitionPhases(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a CompetitionEdition
	var b, c CompetitionPhase

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, competitionEditionDBTypes, true, competitionEditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, competitionPhaseDBTypes, false, competitionPhaseColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, competitionPhaseDBTypes, false, competitionPhaseColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CompetitionEditionID = a.ID
	c.CompetitionEditionID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CompetitionPhases().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CompetitionEditionID == b.CompetitionEditionID {
			bFound = true
		}
		if v.CompetitionEditionID == c.CompetitionEditionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CompetitionEditionSlice{&a}
	if err = a.L.LoadCompetitionPhases(tx, false, (*[]*CompetitionEdition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CompetitionPhases); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CompetitionPhases = nil
	if err = a.L.LoadCompetitionPhases(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CompetitionPhases); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCompetitionEditionToManyEditionMatches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a CompetitionEdition
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, competitionEditionDBTypes, true, competitionEditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.EditionID, a.ID)
	queries.Assign(&c.EditionID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.EditionMatches().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.EditionID, b.EditionID) {
			bFound = true
		}
		if queries.Equal(v.EditionID, c.EditionID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CompetitionEditionSlice{&a}
	if err = a.L.LoadEditionMatches(tx, false, (*[]*CompetitionEdition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EditionMatches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.EditionMatches = nil
	if err = a.L.LoadEditionMatches(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EditionMatches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCompetitionEditionToManyAddOpCompetitionPhases(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a CompetitionEdition
	var b, c, d, e CompetitionPhase

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, competitionEditionDBTypes, false, strmangle.SetComplement(competitionEditionPrimaryKeyColumns, competitionEditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CompetitionPhase{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, competitionPhaseDBTypes, false, strmangle.SetComplement(competitionPhasePrimaryKeyColumns, competitionPhaseColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CompetitionPhase{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCompetitionPhases(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CompetitionEditionID {
			t.Error("foreign key was wrong value", a.ID, first.CompetitionEditionID)
		}
		if a.ID != second.CompetitionEditionID {
			t.Error("foreign key was wrong value", a.ID, second.CompetitionEditionID)
		}

		if first.R.CompetitionEdition != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CompetitionEdition != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CompetitionPhases[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CompetitionPhases[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CompetitionPhases().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCompetitionEditionToManyAddOpEditionMatches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a CompetitionEdition
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, competitionEditionDBTypes, false, strmangle.SetComplement(competitionEditionPrimaryKeyColumns, competitionEditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Match{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddEditionMatches(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.EditionID) {
			t.Error("foreign key was wrong value", a.ID, first.EditionID)
		}
		if !queries.Equal(a.ID, second.EditionID) {
			t.Error("foreign key was wrong value", a.ID, second.EditionID)
		}

		if first.R.Edition != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Edition != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.EditionMatches[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.EditionMatches[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.EditionMatches().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCompetitionEditionToManySetOpEditionMatches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a CompetitionEdition
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, competitionEditionDBTypes, false, strmangle.SetComplement(competitionEditionPrimaryKeyColumns, competitionEditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetEditionMatches(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.EditionMatches().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetEditionMatches(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.EditionMatches().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.EditionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.EditionID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.EditionID) {
		t.Error("foreign key was wrong value", a.ID, d.EditionID)
	}
	if !queries.Equal(a.ID, e.EditionID) {
		t.Error("foreign key was wrong value", a.ID, e.EditionID)
	}

	if b.R.Edition != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Edition != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Edition != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Edition != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.EditionMatches[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.EditionMatches[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCompetitionEditionToManyRemoveOpEditionMatches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a CompetitionEdition
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, competitionEditionDBTypes, false, strmangle.SetComplement(competitionEditionPrimaryKeyColumns, competitionEditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddEditionMatches(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.EditionMatches().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveEditionMatches(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.EditionMatches().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.EditionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.EditionID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Edition != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Edition != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Edition != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Edition != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.EditionMatches) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.EditionMatches[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.EditionMatches[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCompetitionEditionToOneCompetitionUsingCompetition(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local CompetitionEdition
	var foreign Competition

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, competitionEditionDBTypes, false, competitionEditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, competitionDBTypes, false, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CompetitionID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Competition().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CompetitionEditionSlice{&local}
	if err = local.L.LoadCompetition(tx, false, (*[]*CompetitionEdition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Competition == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Competition = nil
	if err = local.L.LoadCompetition(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Competition == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testCompetitionEditionToOneSetOpCompetitionUsingCompetition(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a CompetitionEdition
	var b, c Competition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, competitionEditionDBTypes, false, strmangle.SetComplement(competitionEditionPrimaryKeyColumns, competitionEditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, competitionDBTypes, false, strmangle.SetComplement(competitionPrimaryKeyColumns, competitionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, competitionDBTypes, false, strmangle.SetComplement(competitionPrimaryKeyColumns, competitionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Competition{&b, &c} {
		err = a.SetCompetition(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Competition != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CompetitionEditions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CompetitionID != x.ID {
			t.Error("foreign key was wrong value", a.CompetitionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CompetitionID))
		reflect.Indirect(reflect.ValueOf(&a.CompetitionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CompetitionID != x.ID {
			t.Error("foreign key was wrong value", a.CompetitionID, x.ID)
		}
	}
}

func testCompetitionEditionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionEdition{}
	if err = randomize.Struct(seed, o, competitionEditionDBTypes, true, competitionEditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testCompetitionEditionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionEdition{}
	if err = randomize.Struct(seed, o, competitionEditionDBTypes, true, competitionEditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompetitionEditionSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testCompetitionEditionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionEdition{}
	if err = randomize.Struct(seed, o, competitionEditionDBTypes, true, competitionEditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CompetitionEditions().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	competitionEditionDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `ImportID`: `character varying`, `Name`: `text`, `Enabled`: `boolean`, `CompetitionID`: `uuid`}
	_                         = bytes.MinRead
)

func testCompetitionEditionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(competitionEditionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(competitionEditionAllColumns) == len(competitionEditionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionEdition{}
	if err = randomize.Struct(seed, o, competitionEditionDBTypes, true, competitionEditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompetitionEditions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, competitionEditionDBTypes, true, competitionEditionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCompetitionEditionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(competitionEditionAllColumns) == len(competitionEditionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionEdition{}
	if err = randomize.Struct(seed, o, competitionEditionDBTypes, true, competitionEditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompetitionEditions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, competitionEditionDBTypes, true, competitionEditionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(competitionEditionAllColumns, competitionEditionPrimaryKeyColumns) {
		fields = competitionEditionAllColumns
	} else {
		fields = strmangle.SetComplement(
			competitionEditionAllColumns,
			competitionEditionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CompetitionEditionSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCompetitionEditionsUpsert(t *testing.T) {
	t.Parallel()

	if len(competitionEditionAllColumns) == len(competitionEditionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CompetitionEdition{}
	if err = randomize.Struct(seed, &o, competitionEditionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CompetitionEdition: %s", err)
	}

	count, err := CompetitionEditions().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, competitionEditionDBTypes, false, competitionEditionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CompetitionEdition: %s", err)
	}

	count, err = CompetitionEditions().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
