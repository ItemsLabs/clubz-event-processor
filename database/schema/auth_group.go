// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AuthGroup is an object representing the database table.
type AuthGroup struct {
	ID   int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *authGroupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authGroupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthGroupColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var AuthGroupTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "auth_group.id",
	Name: "auth_group.name",
}

// Generated where

var AuthGroupWhere = struct {
	ID   whereHelperint
	Name whereHelperstring
}{
	ID:   whereHelperint{field: "\"auth_group\".\"id\""},
	Name: whereHelperstring{field: "\"auth_group\".\"name\""},
}

// AuthGroupRels is where relationship names are stored.
var AuthGroupRels = struct {
	GroupAuthGroupPermissions string
	GroupAuthUserGroups       string
}{
	GroupAuthGroupPermissions: "GroupAuthGroupPermissions",
	GroupAuthUserGroups:       "GroupAuthUserGroups",
}

// authGroupR is where relationships are stored.
type authGroupR struct {
	GroupAuthGroupPermissions AuthGroupPermissionSlice `boil:"GroupAuthGroupPermissions" json:"GroupAuthGroupPermissions" toml:"GroupAuthGroupPermissions" yaml:"GroupAuthGroupPermissions"`
	GroupAuthUserGroups       AuthUserGroupSlice       `boil:"GroupAuthUserGroups" json:"GroupAuthUserGroups" toml:"GroupAuthUserGroups" yaml:"GroupAuthUserGroups"`
}

// NewStruct creates a new relationship struct
func (*authGroupR) NewStruct() *authGroupR {
	return &authGroupR{}
}

func (r *authGroupR) GetGroupAuthGroupPermissions() AuthGroupPermissionSlice {
	if r == nil {
		return nil
	}
	return r.GroupAuthGroupPermissions
}

func (r *authGroupR) GetGroupAuthUserGroups() AuthUserGroupSlice {
	if r == nil {
		return nil
	}
	return r.GroupAuthUserGroups
}

// authGroupL is where Load methods for each relationship are stored.
type authGroupL struct{}

var (
	authGroupAllColumns            = []string{"id", "name"}
	authGroupColumnsWithoutDefault = []string{"name"}
	authGroupColumnsWithDefault    = []string{"id"}
	authGroupPrimaryKeyColumns     = []string{"id"}
	authGroupGeneratedColumns      = []string{}
)

type (
	// AuthGroupSlice is an alias for a slice of pointers to AuthGroup.
	// This should almost always be used instead of []AuthGroup.
	AuthGroupSlice []*AuthGroup

	authGroupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authGroupType                 = reflect.TypeOf(&AuthGroup{})
	authGroupMapping              = queries.MakeStructMapping(authGroupType)
	authGroupPrimaryKeyMapping, _ = queries.BindMapping(authGroupType, authGroupMapping, authGroupPrimaryKeyColumns)
	authGroupInsertCacheMut       sync.RWMutex
	authGroupInsertCache          = make(map[string]insertCache)
	authGroupUpdateCacheMut       sync.RWMutex
	authGroupUpdateCache          = make(map[string]updateCache)
	authGroupUpsertCacheMut       sync.RWMutex
	authGroupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single authGroup record from the query.
func (q authGroupQuery) One(exec boil.Executor) (*AuthGroup, error) {
	o := &AuthGroup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for auth_group")
	}

	return o, nil
}

// All returns all AuthGroup records from the query.
func (q authGroupQuery) All(exec boil.Executor) (AuthGroupSlice, error) {
	var o []*AuthGroup

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to AuthGroup slice")
	}

	return o, nil
}

// Count returns the count of all AuthGroup records in the query.
func (q authGroupQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count auth_group rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q authGroupQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if auth_group exists")
	}

	return count > 0, nil
}

// GroupAuthGroupPermissions retrieves all the auth_group_permission's AuthGroupPermissions with an executor via group_id column.
func (o *AuthGroup) GroupAuthGroupPermissions(mods ...qm.QueryMod) authGroupPermissionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"auth_group_permissions\".\"group_id\"=?", o.ID),
	)

	return AuthGroupPermissions(queryMods...)
}

// GroupAuthUserGroups retrieves all the auth_user_group's AuthUserGroups with an executor via group_id column.
func (o *AuthGroup) GroupAuthUserGroups(mods ...qm.QueryMod) authUserGroupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"auth_user_groups\".\"group_id\"=?", o.ID),
	)

	return AuthUserGroups(queryMods...)
}

// LoadGroupAuthGroupPermissions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (authGroupL) LoadGroupAuthGroupPermissions(e boil.Executor, singular bool, maybeAuthGroup interface{}, mods queries.Applicator) error {
	var slice []*AuthGroup
	var object *AuthGroup

	if singular {
		var ok bool
		object, ok = maybeAuthGroup.(*AuthGroup)
		if !ok {
			object = new(AuthGroup)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuthGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuthGroup))
			}
		}
	} else {
		s, ok := maybeAuthGroup.(*[]*AuthGroup)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuthGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuthGroup))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &authGroupR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authGroupR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`auth_group_permissions`),
		qm.WhereIn(`auth_group_permissions.group_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auth_group_permissions")
	}

	var resultSlice []*AuthGroupPermission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auth_group_permissions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on auth_group_permissions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auth_group_permissions")
	}

	if singular {
		object.R.GroupAuthGroupPermissions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &authGroupPermissionR{}
			}
			foreign.R.Group = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GroupID {
				local.R.GroupAuthGroupPermissions = append(local.R.GroupAuthGroupPermissions, foreign)
				if foreign.R == nil {
					foreign.R = &authGroupPermissionR{}
				}
				foreign.R.Group = local
				break
			}
		}
	}

	return nil
}

// LoadGroupAuthUserGroups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (authGroupL) LoadGroupAuthUserGroups(e boil.Executor, singular bool, maybeAuthGroup interface{}, mods queries.Applicator) error {
	var slice []*AuthGroup
	var object *AuthGroup

	if singular {
		var ok bool
		object, ok = maybeAuthGroup.(*AuthGroup)
		if !ok {
			object = new(AuthGroup)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuthGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuthGroup))
			}
		}
	} else {
		s, ok := maybeAuthGroup.(*[]*AuthGroup)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuthGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuthGroup))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &authGroupR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authGroupR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`auth_user_groups`),
		qm.WhereIn(`auth_user_groups.group_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auth_user_groups")
	}

	var resultSlice []*AuthUserGroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auth_user_groups")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on auth_user_groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auth_user_groups")
	}

	if singular {
		object.R.GroupAuthUserGroups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &authUserGroupR{}
			}
			foreign.R.Group = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GroupID {
				local.R.GroupAuthUserGroups = append(local.R.GroupAuthUserGroups, foreign)
				if foreign.R == nil {
					foreign.R = &authUserGroupR{}
				}
				foreign.R.Group = local
				break
			}
		}
	}

	return nil
}

// AddGroupAuthGroupPermissions adds the given related objects to the existing relationships
// of the auth_group, optionally inserting them as new records.
// Appends related to o.R.GroupAuthGroupPermissions.
// Sets related.R.Group appropriately.
func (o *AuthGroup) AddGroupAuthGroupPermissions(exec boil.Executor, insert bool, related ...*AuthGroupPermission) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GroupID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"auth_group_permissions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"group_id"}),
				strmangle.WhereClause("\"", "\"", 2, authGroupPermissionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GroupID = o.ID
		}
	}

	if o.R == nil {
		o.R = &authGroupR{
			GroupAuthGroupPermissions: related,
		}
	} else {
		o.R.GroupAuthGroupPermissions = append(o.R.GroupAuthGroupPermissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authGroupPermissionR{
				Group: o,
			}
		} else {
			rel.R.Group = o
		}
	}
	return nil
}

// AddGroupAuthUserGroups adds the given related objects to the existing relationships
// of the auth_group, optionally inserting them as new records.
// Appends related to o.R.GroupAuthUserGroups.
// Sets related.R.Group appropriately.
func (o *AuthGroup) AddGroupAuthUserGroups(exec boil.Executor, insert bool, related ...*AuthUserGroup) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GroupID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"auth_user_groups\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"group_id"}),
				strmangle.WhereClause("\"", "\"", 2, authUserGroupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GroupID = o.ID
		}
	}

	if o.R == nil {
		o.R = &authGroupR{
			GroupAuthUserGroups: related,
		}
	} else {
		o.R.GroupAuthUserGroups = append(o.R.GroupAuthUserGroups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authUserGroupR{
				Group: o,
			}
		} else {
			rel.R.Group = o
		}
	}
	return nil
}

// AuthGroups retrieves all the records using an executor.
func AuthGroups(mods ...qm.QueryMod) authGroupQuery {
	mods = append(mods, qm.From("\"auth_group\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"auth_group\".*"})
	}

	return authGroupQuery{q}
}

// FindAuthGroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthGroup(exec boil.Executor, iD int, selectCols ...string) (*AuthGroup, error) {
	authGroupObj := &AuthGroup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"auth_group\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, authGroupObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from auth_group")
	}

	return authGroupObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuthGroup) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no auth_group provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(authGroupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authGroupInsertCacheMut.RLock()
	cache, cached := authGroupInsertCache[key]
	authGroupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authGroupAllColumns,
			authGroupColumnsWithDefault,
			authGroupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authGroupType, authGroupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authGroupType, authGroupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"auth_group\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"auth_group\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into auth_group")
	}

	if !cached {
		authGroupInsertCacheMut.Lock()
		authGroupInsertCache[key] = cache
		authGroupInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the AuthGroup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuthGroup) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	authGroupUpdateCacheMut.RLock()
	cache, cached := authGroupUpdateCache[key]
	authGroupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authGroupAllColumns,
			authGroupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update auth_group, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"auth_group\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, authGroupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authGroupType, authGroupMapping, append(wl, authGroupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update auth_group row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for auth_group")
	}

	if !cached {
		authGroupUpdateCacheMut.Lock()
		authGroupUpdateCache[key] = cache
		authGroupUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q authGroupQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for auth_group")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for auth_group")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthGroupSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"auth_group\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, authGroupPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in authGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all authGroup")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuthGroup) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no auth_group provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(authGroupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authGroupUpsertCacheMut.RLock()
	cache, cached := authGroupUpsertCache[key]
	authGroupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			authGroupAllColumns,
			authGroupColumnsWithDefault,
			authGroupColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			authGroupAllColumns,
			authGroupPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert auth_group, could not build update column list")
		}

		ret := strmangle.SetComplement(authGroupAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(authGroupPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert auth_group, could not build conflict column list")
			}

			conflict = make([]string, len(authGroupPrimaryKeyColumns))
			copy(conflict, authGroupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"auth_group\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(authGroupType, authGroupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authGroupType, authGroupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert auth_group")
	}

	if !cached {
		authGroupUpsertCacheMut.Lock()
		authGroupUpsertCache[key] = cache
		authGroupUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single AuthGroup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthGroup) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no AuthGroup provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authGroupPrimaryKeyMapping)
	sql := "DELETE FROM \"auth_group\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from auth_group")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for auth_group")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q authGroupQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no authGroupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from auth_group")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for auth_group")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthGroupSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"auth_group\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authGroupPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from authGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for auth_group")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthGroup) Reload(exec boil.Executor) error {
	ret, err := FindAuthGroup(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthGroupSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthGroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"auth_group\".* FROM \"auth_group\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authGroupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in AuthGroupSlice")
	}

	*o = slice

	return nil
}

// AuthGroupExists checks if the AuthGroup row exists.
func AuthGroupExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"auth_group\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if auth_group exists")
	}

	return exists, nil
}

// Exists checks if the AuthGroup row exists.
func (o *AuthGroup) Exists(exec boil.Executor) (bool, error) {
	return AuthGroupExists(exec, o.ID)
}
