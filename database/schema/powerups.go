// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Powerup is an object representing the database table.
type Powerup struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Duration    int         `boil:"duration" json:"duration" toml:"duration" yaml:"duration"`
	Multiplier  float64     `boil:"multiplier" json:"multiplier" toml:"multiplier" yaml:"multiplier"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	IconURL     null.String `boil:"icon_url" json:"icon_url,omitempty" toml:"icon_url" yaml:"icon_url,omitempty"`
	Cost        float64     `boil:"cost" json:"cost" toml:"cost" yaml:"cost"`
	Type        null.Int    `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	SportID     null.String `boil:"sport_id" json:"sport_id,omitempty" toml:"sport_id" yaml:"sport_id,omitempty"`
	Enabled     bool        `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`
	Conditions  null.JSON   `boil:"conditions" json:"conditions,omitempty" toml:"conditions" yaml:"conditions,omitempty"`

	R *powerupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L powerupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PowerupColumns = struct {
	ID          string
	Name        string
	Duration    string
	Multiplier  string
	Description string
	IconURL     string
	Cost        string
	Type        string
	SportID     string
	Enabled     string
	Conditions  string
}{
	ID:          "id",
	Name:        "name",
	Duration:    "duration",
	Multiplier:  "multiplier",
	Description: "description",
	IconURL:     "icon_url",
	Cost:        "cost",
	Type:        "type",
	SportID:     "sport_id",
	Enabled:     "enabled",
	Conditions:  "conditions",
}

var PowerupTableColumns = struct {
	ID          string
	Name        string
	Duration    string
	Multiplier  string
	Description string
	IconURL     string
	Cost        string
	Type        string
	SportID     string
	Enabled     string
	Conditions  string
}{
	ID:          "powerups.id",
	Name:        "powerups.name",
	Duration:    "powerups.duration",
	Multiplier:  "powerups.multiplier",
	Description: "powerups.description",
	IconURL:     "powerups.icon_url",
	Cost:        "powerups.cost",
	Type:        "powerups.type",
	SportID:     "powerups.sport_id",
	Enabled:     "powerups.enabled",
	Conditions:  "powerups.conditions",
}

// Generated where

var PowerupWhere = struct {
	ID          whereHelperint
	Name        whereHelperstring
	Duration    whereHelperint
	Multiplier  whereHelperfloat64
	Description whereHelpernull_String
	IconURL     whereHelpernull_String
	Cost        whereHelperfloat64
	Type        whereHelpernull_Int
	SportID     whereHelpernull_String
	Enabled     whereHelperbool
	Conditions  whereHelpernull_JSON
}{
	ID:          whereHelperint{field: "\"powerups\".\"id\""},
	Name:        whereHelperstring{field: "\"powerups\".\"name\""},
	Duration:    whereHelperint{field: "\"powerups\".\"duration\""},
	Multiplier:  whereHelperfloat64{field: "\"powerups\".\"multiplier\""},
	Description: whereHelpernull_String{field: "\"powerups\".\"description\""},
	IconURL:     whereHelpernull_String{field: "\"powerups\".\"icon_url\""},
	Cost:        whereHelperfloat64{field: "\"powerups\".\"cost\""},
	Type:        whereHelpernull_Int{field: "\"powerups\".\"type\""},
	SportID:     whereHelpernull_String{field: "\"powerups\".\"sport_id\""},
	Enabled:     whereHelperbool{field: "\"powerups\".\"enabled\""},
	Conditions:  whereHelpernull_JSON{field: "\"powerups\".\"conditions\""},
}

// PowerupRels is where relationship names are stored.
var PowerupRels = struct {
	Sport          string
	GamePowerups   string
	PowerupActions string
}{
	Sport:          "Sport",
	GamePowerups:   "GamePowerups",
	PowerupActions: "PowerupActions",
}

// powerupR is where relationships are stored.
type powerupR struct {
	Sport          *Sport             `boil:"Sport" json:"Sport" toml:"Sport" yaml:"Sport"`
	GamePowerups   GamePowerupSlice   `boil:"GamePowerups" json:"GamePowerups" toml:"GamePowerups" yaml:"GamePowerups"`
	PowerupActions PowerupActionSlice `boil:"PowerupActions" json:"PowerupActions" toml:"PowerupActions" yaml:"PowerupActions"`
}

// NewStruct creates a new relationship struct
func (*powerupR) NewStruct() *powerupR {
	return &powerupR{}
}

func (r *powerupR) GetSport() *Sport {
	if r == nil {
		return nil
	}
	return r.Sport
}

func (r *powerupR) GetGamePowerups() GamePowerupSlice {
	if r == nil {
		return nil
	}
	return r.GamePowerups
}

func (r *powerupR) GetPowerupActions() PowerupActionSlice {
	if r == nil {
		return nil
	}
	return r.PowerupActions
}

// powerupL is where Load methods for each relationship are stored.
type powerupL struct{}

var (
	powerupAllColumns            = []string{"id", "name", "duration", "multiplier", "description", "icon_url", "cost", "type", "sport_id", "enabled", "conditions"}
	powerupColumnsWithoutDefault = []string{"name", "duration", "multiplier"}
	powerupColumnsWithDefault    = []string{"id", "description", "icon_url", "cost", "type", "sport_id", "enabled", "conditions"}
	powerupPrimaryKeyColumns     = []string{"id"}
	powerupGeneratedColumns      = []string{}
)

type (
	// PowerupSlice is an alias for a slice of pointers to Powerup.
	// This should almost always be used instead of []Powerup.
	PowerupSlice []*Powerup

	powerupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	powerupType                 = reflect.TypeOf(&Powerup{})
	powerupMapping              = queries.MakeStructMapping(powerupType)
	powerupPrimaryKeyMapping, _ = queries.BindMapping(powerupType, powerupMapping, powerupPrimaryKeyColumns)
	powerupInsertCacheMut       sync.RWMutex
	powerupInsertCache          = make(map[string]insertCache)
	powerupUpdateCacheMut       sync.RWMutex
	powerupUpdateCache          = make(map[string]updateCache)
	powerupUpsertCacheMut       sync.RWMutex
	powerupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single powerup record from the query.
func (q powerupQuery) One(exec boil.Executor) (*Powerup, error) {
	o := &Powerup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for powerups")
	}

	return o, nil
}

// All returns all Powerup records from the query.
func (q powerupQuery) All(exec boil.Executor) (PowerupSlice, error) {
	var o []*Powerup

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to Powerup slice")
	}

	return o, nil
}

// Count returns the count of all Powerup records in the query.
func (q powerupQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count powerups rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q powerupQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if powerups exists")
	}

	return count > 0, nil
}

// Sport pointed to by the foreign key.
func (o *Powerup) Sport(mods ...qm.QueryMod) sportQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SportID),
	}

	queryMods = append(queryMods, mods...)

	return Sports(queryMods...)
}

// GamePowerups retrieves all the game_powerup's GamePowerups with an executor.
func (o *Powerup) GamePowerups(mods ...qm.QueryMod) gamePowerupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"game_powerups\".\"powerup_id\"=?", o.ID),
	)

	return GamePowerups(queryMods...)
}

// PowerupActions retrieves all the powerup_action's PowerupActions with an executor.
func (o *Powerup) PowerupActions(mods ...qm.QueryMod) powerupActionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"powerup_actions\".\"powerup_id\"=?", o.ID),
	)

	return PowerupActions(queryMods...)
}

// LoadSport allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (powerupL) LoadSport(e boil.Executor, singular bool, maybePowerup interface{}, mods queries.Applicator) error {
	var slice []*Powerup
	var object *Powerup

	if singular {
		var ok bool
		object, ok = maybePowerup.(*Powerup)
		if !ok {
			object = new(Powerup)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePowerup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePowerup))
			}
		}
	} else {
		s, ok := maybePowerup.(*[]*Powerup)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePowerup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePowerup))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &powerupR{}
		}
		if !queries.IsNil(object.SportID) {
			args[object.SportID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &powerupR{}
			}

			if !queries.IsNil(obj.SportID) {
				args[obj.SportID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sports`),
		qm.WhereIn(`sports.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Sport")
	}

	var resultSlice []*Sport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Sport")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sports")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sports")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Sport = foreign
		if foreign.R == nil {
			foreign.R = &sportR{}
		}
		foreign.R.Powerups = append(foreign.R.Powerups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SportID, foreign.ID) {
				local.R.Sport = foreign
				if foreign.R == nil {
					foreign.R = &sportR{}
				}
				foreign.R.Powerups = append(foreign.R.Powerups, local)
				break
			}
		}
	}

	return nil
}

// LoadGamePowerups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (powerupL) LoadGamePowerups(e boil.Executor, singular bool, maybePowerup interface{}, mods queries.Applicator) error {
	var slice []*Powerup
	var object *Powerup

	if singular {
		var ok bool
		object, ok = maybePowerup.(*Powerup)
		if !ok {
			object = new(Powerup)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePowerup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePowerup))
			}
		}
	} else {
		s, ok := maybePowerup.(*[]*Powerup)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePowerup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePowerup))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &powerupR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &powerupR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`game_powerups`),
		qm.WhereIn(`game_powerups.powerup_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load game_powerups")
	}

	var resultSlice []*GamePowerup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice game_powerups")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on game_powerups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_powerups")
	}

	if singular {
		object.R.GamePowerups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gamePowerupR{}
			}
			foreign.R.Powerup = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PowerupID {
				local.R.GamePowerups = append(local.R.GamePowerups, foreign)
				if foreign.R == nil {
					foreign.R = &gamePowerupR{}
				}
				foreign.R.Powerup = local
				break
			}
		}
	}

	return nil
}

// LoadPowerupActions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (powerupL) LoadPowerupActions(e boil.Executor, singular bool, maybePowerup interface{}, mods queries.Applicator) error {
	var slice []*Powerup
	var object *Powerup

	if singular {
		var ok bool
		object, ok = maybePowerup.(*Powerup)
		if !ok {
			object = new(Powerup)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePowerup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePowerup))
			}
		}
	} else {
		s, ok := maybePowerup.(*[]*Powerup)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePowerup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePowerup))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &powerupR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &powerupR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`powerup_actions`),
		qm.WhereIn(`powerup_actions.powerup_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load powerup_actions")
	}

	var resultSlice []*PowerupAction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice powerup_actions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on powerup_actions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for powerup_actions")
	}

	if singular {
		object.R.PowerupActions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &powerupActionR{}
			}
			foreign.R.Powerup = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PowerupID {
				local.R.PowerupActions = append(local.R.PowerupActions, foreign)
				if foreign.R == nil {
					foreign.R = &powerupActionR{}
				}
				foreign.R.Powerup = local
				break
			}
		}
	}

	return nil
}

// SetSport of the powerup to the related item.
// Sets o.R.Sport to related.
// Adds o to related.R.Powerups.
func (o *Powerup) SetSport(exec boil.Executor, insert bool, related *Sport) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"powerups\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sport_id"}),
		strmangle.WhereClause("\"", "\"", 2, powerupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SportID, related.ID)
	if o.R == nil {
		o.R = &powerupR{
			Sport: related,
		}
	} else {
		o.R.Sport = related
	}

	if related.R == nil {
		related.R = &sportR{
			Powerups: PowerupSlice{o},
		}
	} else {
		related.R.Powerups = append(related.R.Powerups, o)
	}

	return nil
}

// RemoveSport relationship.
// Sets o.R.Sport to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Powerup) RemoveSport(exec boil.Executor, related *Sport) error {
	var err error

	queries.SetScanner(&o.SportID, nil)
	if _, err = o.Update(exec, boil.Whitelist("sport_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Sport = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Powerups {
		if queries.Equal(o.SportID, ri.SportID) {
			continue
		}

		ln := len(related.R.Powerups)
		if ln > 1 && i < ln-1 {
			related.R.Powerups[i] = related.R.Powerups[ln-1]
		}
		related.R.Powerups = related.R.Powerups[:ln-1]
		break
	}
	return nil
}

// AddGamePowerups adds the given related objects to the existing relationships
// of the powerup, optionally inserting them as new records.
// Appends related to o.R.GamePowerups.
// Sets related.R.Powerup appropriately.
func (o *Powerup) AddGamePowerups(exec boil.Executor, insert bool, related ...*GamePowerup) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PowerupID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"game_powerups\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"powerup_id"}),
				strmangle.WhereClause("\"", "\"", 2, gamePowerupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PowerupID = o.ID
		}
	}

	if o.R == nil {
		o.R = &powerupR{
			GamePowerups: related,
		}
	} else {
		o.R.GamePowerups = append(o.R.GamePowerups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gamePowerupR{
				Powerup: o,
			}
		} else {
			rel.R.Powerup = o
		}
	}
	return nil
}

// AddPowerupActions adds the given related objects to the existing relationships
// of the powerup, optionally inserting them as new records.
// Appends related to o.R.PowerupActions.
// Sets related.R.Powerup appropriately.
func (o *Powerup) AddPowerupActions(exec boil.Executor, insert bool, related ...*PowerupAction) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PowerupID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"powerup_actions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"powerup_id"}),
				strmangle.WhereClause("\"", "\"", 2, powerupActionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PowerupID = o.ID
		}
	}

	if o.R == nil {
		o.R = &powerupR{
			PowerupActions: related,
		}
	} else {
		o.R.PowerupActions = append(o.R.PowerupActions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &powerupActionR{
				Powerup: o,
			}
		} else {
			rel.R.Powerup = o
		}
	}
	return nil
}

// Powerups retrieves all the records using an executor.
func Powerups(mods ...qm.QueryMod) powerupQuery {
	mods = append(mods, qm.From("\"powerups\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"powerups\".*"})
	}

	return powerupQuery{q}
}

// FindPowerup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPowerup(exec boil.Executor, iD int, selectCols ...string) (*Powerup, error) {
	powerupObj := &Powerup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"powerups\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, powerupObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from powerups")
	}

	return powerupObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Powerup) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no powerups provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(powerupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	powerupInsertCacheMut.RLock()
	cache, cached := powerupInsertCache[key]
	powerupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			powerupAllColumns,
			powerupColumnsWithDefault,
			powerupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(powerupType, powerupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(powerupType, powerupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"powerups\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"powerups\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into powerups")
	}

	if !cached {
		powerupInsertCacheMut.Lock()
		powerupInsertCache[key] = cache
		powerupInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Powerup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Powerup) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	powerupUpdateCacheMut.RLock()
	cache, cached := powerupUpdateCache[key]
	powerupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			powerupAllColumns,
			powerupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update powerups, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"powerups\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, powerupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(powerupType, powerupMapping, append(wl, powerupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update powerups row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for powerups")
	}

	if !cached {
		powerupUpdateCacheMut.Lock()
		powerupUpdateCache[key] = cache
		powerupUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q powerupQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for powerups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for powerups")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PowerupSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), powerupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"powerups\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, powerupPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in powerup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all powerup")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Powerup) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no powerups provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(powerupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	powerupUpsertCacheMut.RLock()
	cache, cached := powerupUpsertCache[key]
	powerupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			powerupAllColumns,
			powerupColumnsWithDefault,
			powerupColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			powerupAllColumns,
			powerupPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert powerups, could not build update column list")
		}

		ret := strmangle.SetComplement(powerupAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(powerupPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert powerups, could not build conflict column list")
			}

			conflict = make([]string, len(powerupPrimaryKeyColumns))
			copy(conflict, powerupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"powerups\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(powerupType, powerupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(powerupType, powerupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert powerups")
	}

	if !cached {
		powerupUpsertCacheMut.Lock()
		powerupUpsertCache[key] = cache
		powerupUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Powerup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Powerup) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no Powerup provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), powerupPrimaryKeyMapping)
	sql := "DELETE FROM \"powerups\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from powerups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for powerups")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q powerupQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no powerupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from powerups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for powerups")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PowerupSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), powerupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"powerups\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, powerupPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from powerup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for powerups")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Powerup) Reload(exec boil.Executor) error {
	ret, err := FindPowerup(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PowerupSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PowerupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), powerupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"powerups\".* FROM \"powerups\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, powerupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in PowerupSlice")
	}

	*o = slice

	return nil
}

// PowerupExists checks if the Powerup row exists.
func PowerupExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"powerups\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if powerups exists")
	}

	return exists, nil
}

// Exists checks if the Powerup row exists.
func (o *Powerup) Exists(exec boil.Executor) (bool, error) {
	return PowerupExists(exec, o.ID)
}
