// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DjangoCeleryBeatIntervalschedule is an object representing the database table.
type DjangoCeleryBeatIntervalschedule struct {
	ID     int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Every  int    `boil:"every" json:"every" toml:"every" yaml:"every"`
	Period string `boil:"period" json:"period" toml:"period" yaml:"period"`

	R *djangoCeleryBeatIntervalscheduleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L djangoCeleryBeatIntervalscheduleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DjangoCeleryBeatIntervalscheduleColumns = struct {
	ID     string
	Every  string
	Period string
}{
	ID:     "id",
	Every:  "every",
	Period: "period",
}

var DjangoCeleryBeatIntervalscheduleTableColumns = struct {
	ID     string
	Every  string
	Period string
}{
	ID:     "django_celery_beat_intervalschedule.id",
	Every:  "django_celery_beat_intervalschedule.every",
	Period: "django_celery_beat_intervalschedule.period",
}

// Generated where

var DjangoCeleryBeatIntervalscheduleWhere = struct {
	ID     whereHelperint
	Every  whereHelperint
	Period whereHelperstring
}{
	ID:     whereHelperint{field: "\"django_celery_beat_intervalschedule\".\"id\""},
	Every:  whereHelperint{field: "\"django_celery_beat_intervalschedule\".\"every\""},
	Period: whereHelperstring{field: "\"django_celery_beat_intervalschedule\".\"period\""},
}

// DjangoCeleryBeatIntervalscheduleRels is where relationship names are stored.
var DjangoCeleryBeatIntervalscheduleRels = struct {
	IntervalDjangoCeleryBeatPeriodictasks string
}{
	IntervalDjangoCeleryBeatPeriodictasks: "IntervalDjangoCeleryBeatPeriodictasks",
}

// djangoCeleryBeatIntervalscheduleR is where relationships are stored.
type djangoCeleryBeatIntervalscheduleR struct {
	IntervalDjangoCeleryBeatPeriodictasks DjangoCeleryBeatPeriodictaskSlice `boil:"IntervalDjangoCeleryBeatPeriodictasks" json:"IntervalDjangoCeleryBeatPeriodictasks" toml:"IntervalDjangoCeleryBeatPeriodictasks" yaml:"IntervalDjangoCeleryBeatPeriodictasks"`
}

// NewStruct creates a new relationship struct
func (*djangoCeleryBeatIntervalscheduleR) NewStruct() *djangoCeleryBeatIntervalscheduleR {
	return &djangoCeleryBeatIntervalscheduleR{}
}

func (r *djangoCeleryBeatIntervalscheduleR) GetIntervalDjangoCeleryBeatPeriodictasks() DjangoCeleryBeatPeriodictaskSlice {
	if r == nil {
		return nil
	}
	return r.IntervalDjangoCeleryBeatPeriodictasks
}

// djangoCeleryBeatIntervalscheduleL is where Load methods for each relationship are stored.
type djangoCeleryBeatIntervalscheduleL struct{}

var (
	djangoCeleryBeatIntervalscheduleAllColumns            = []string{"id", "every", "period"}
	djangoCeleryBeatIntervalscheduleColumnsWithoutDefault = []string{"every", "period"}
	djangoCeleryBeatIntervalscheduleColumnsWithDefault    = []string{"id"}
	djangoCeleryBeatIntervalschedulePrimaryKeyColumns     = []string{"id"}
	djangoCeleryBeatIntervalscheduleGeneratedColumns      = []string{}
)

type (
	// DjangoCeleryBeatIntervalscheduleSlice is an alias for a slice of pointers to DjangoCeleryBeatIntervalschedule.
	// This should almost always be used instead of []DjangoCeleryBeatIntervalschedule.
	DjangoCeleryBeatIntervalscheduleSlice []*DjangoCeleryBeatIntervalschedule

	djangoCeleryBeatIntervalscheduleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	djangoCeleryBeatIntervalscheduleType                 = reflect.TypeOf(&DjangoCeleryBeatIntervalschedule{})
	djangoCeleryBeatIntervalscheduleMapping              = queries.MakeStructMapping(djangoCeleryBeatIntervalscheduleType)
	djangoCeleryBeatIntervalschedulePrimaryKeyMapping, _ = queries.BindMapping(djangoCeleryBeatIntervalscheduleType, djangoCeleryBeatIntervalscheduleMapping, djangoCeleryBeatIntervalschedulePrimaryKeyColumns)
	djangoCeleryBeatIntervalscheduleInsertCacheMut       sync.RWMutex
	djangoCeleryBeatIntervalscheduleInsertCache          = make(map[string]insertCache)
	djangoCeleryBeatIntervalscheduleUpdateCacheMut       sync.RWMutex
	djangoCeleryBeatIntervalscheduleUpdateCache          = make(map[string]updateCache)
	djangoCeleryBeatIntervalscheduleUpsertCacheMut       sync.RWMutex
	djangoCeleryBeatIntervalscheduleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single djangoCeleryBeatIntervalschedule record from the query.
func (q djangoCeleryBeatIntervalscheduleQuery) One(exec boil.Executor) (*DjangoCeleryBeatIntervalschedule, error) {
	o := &DjangoCeleryBeatIntervalschedule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for django_celery_beat_intervalschedule")
	}

	return o, nil
}

// All returns all DjangoCeleryBeatIntervalschedule records from the query.
func (q djangoCeleryBeatIntervalscheduleQuery) All(exec boil.Executor) (DjangoCeleryBeatIntervalscheduleSlice, error) {
	var o []*DjangoCeleryBeatIntervalschedule

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to DjangoCeleryBeatIntervalschedule slice")
	}

	return o, nil
}

// Count returns the count of all DjangoCeleryBeatIntervalschedule records in the query.
func (q djangoCeleryBeatIntervalscheduleQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count django_celery_beat_intervalschedule rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q djangoCeleryBeatIntervalscheduleQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if django_celery_beat_intervalschedule exists")
	}

	return count > 0, nil
}

// IntervalDjangoCeleryBeatPeriodictasks retrieves all the django_celery_beat_periodictask's DjangoCeleryBeatPeriodictasks with an executor via interval_id column.
func (o *DjangoCeleryBeatIntervalschedule) IntervalDjangoCeleryBeatPeriodictasks(mods ...qm.QueryMod) djangoCeleryBeatPeriodictaskQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"django_celery_beat_periodictask\".\"interval_id\"=?", o.ID),
	)

	return DjangoCeleryBeatPeriodictasks(queryMods...)
}

// LoadIntervalDjangoCeleryBeatPeriodictasks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (djangoCeleryBeatIntervalscheduleL) LoadIntervalDjangoCeleryBeatPeriodictasks(e boil.Executor, singular bool, maybeDjangoCeleryBeatIntervalschedule interface{}, mods queries.Applicator) error {
	var slice []*DjangoCeleryBeatIntervalschedule
	var object *DjangoCeleryBeatIntervalschedule

	if singular {
		var ok bool
		object, ok = maybeDjangoCeleryBeatIntervalschedule.(*DjangoCeleryBeatIntervalschedule)
		if !ok {
			object = new(DjangoCeleryBeatIntervalschedule)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDjangoCeleryBeatIntervalschedule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDjangoCeleryBeatIntervalschedule))
			}
		}
	} else {
		s, ok := maybeDjangoCeleryBeatIntervalschedule.(*[]*DjangoCeleryBeatIntervalschedule)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDjangoCeleryBeatIntervalschedule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDjangoCeleryBeatIntervalschedule))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &djangoCeleryBeatIntervalscheduleR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &djangoCeleryBeatIntervalscheduleR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`django_celery_beat_periodictask`),
		qm.WhereIn(`django_celery_beat_periodictask.interval_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load django_celery_beat_periodictask")
	}

	var resultSlice []*DjangoCeleryBeatPeriodictask
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice django_celery_beat_periodictask")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on django_celery_beat_periodictask")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for django_celery_beat_periodictask")
	}

	if singular {
		object.R.IntervalDjangoCeleryBeatPeriodictasks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &djangoCeleryBeatPeriodictaskR{}
			}
			foreign.R.Interval = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IntervalID) {
				local.R.IntervalDjangoCeleryBeatPeriodictasks = append(local.R.IntervalDjangoCeleryBeatPeriodictasks, foreign)
				if foreign.R == nil {
					foreign.R = &djangoCeleryBeatPeriodictaskR{}
				}
				foreign.R.Interval = local
				break
			}
		}
	}

	return nil
}

// AddIntervalDjangoCeleryBeatPeriodictasks adds the given related objects to the existing relationships
// of the django_celery_beat_intervalschedule, optionally inserting them as new records.
// Appends related to o.R.IntervalDjangoCeleryBeatPeriodictasks.
// Sets related.R.Interval appropriately.
func (o *DjangoCeleryBeatIntervalschedule) AddIntervalDjangoCeleryBeatPeriodictasks(exec boil.Executor, insert bool, related ...*DjangoCeleryBeatPeriodictask) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IntervalID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"django_celery_beat_periodictask\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"interval_id"}),
				strmangle.WhereClause("\"", "\"", 2, djangoCeleryBeatPeriodictaskPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IntervalID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &djangoCeleryBeatIntervalscheduleR{
			IntervalDjangoCeleryBeatPeriodictasks: related,
		}
	} else {
		o.R.IntervalDjangoCeleryBeatPeriodictasks = append(o.R.IntervalDjangoCeleryBeatPeriodictasks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &djangoCeleryBeatPeriodictaskR{
				Interval: o,
			}
		} else {
			rel.R.Interval = o
		}
	}
	return nil
}

// SetIntervalDjangoCeleryBeatPeriodictasks removes all previously related items of the
// django_celery_beat_intervalschedule replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Interval's IntervalDjangoCeleryBeatPeriodictasks accordingly.
// Replaces o.R.IntervalDjangoCeleryBeatPeriodictasks with related.
// Sets related.R.Interval's IntervalDjangoCeleryBeatPeriodictasks accordingly.
func (o *DjangoCeleryBeatIntervalschedule) SetIntervalDjangoCeleryBeatPeriodictasks(exec boil.Executor, insert bool, related ...*DjangoCeleryBeatPeriodictask) error {
	query := "update \"django_celery_beat_periodictask\" set \"interval_id\" = null where \"interval_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IntervalDjangoCeleryBeatPeriodictasks {
			queries.SetScanner(&rel.IntervalID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Interval = nil
		}
		o.R.IntervalDjangoCeleryBeatPeriodictasks = nil
	}

	return o.AddIntervalDjangoCeleryBeatPeriodictasks(exec, insert, related...)
}

// RemoveIntervalDjangoCeleryBeatPeriodictasks relationships from objects passed in.
// Removes related items from R.IntervalDjangoCeleryBeatPeriodictasks (uses pointer comparison, removal does not keep order)
// Sets related.R.Interval.
func (o *DjangoCeleryBeatIntervalschedule) RemoveIntervalDjangoCeleryBeatPeriodictasks(exec boil.Executor, related ...*DjangoCeleryBeatPeriodictask) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IntervalID, nil)
		if rel.R != nil {
			rel.R.Interval = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("interval_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IntervalDjangoCeleryBeatPeriodictasks {
			if rel != ri {
				continue
			}

			ln := len(o.R.IntervalDjangoCeleryBeatPeriodictasks)
			if ln > 1 && i < ln-1 {
				o.R.IntervalDjangoCeleryBeatPeriodictasks[i] = o.R.IntervalDjangoCeleryBeatPeriodictasks[ln-1]
			}
			o.R.IntervalDjangoCeleryBeatPeriodictasks = o.R.IntervalDjangoCeleryBeatPeriodictasks[:ln-1]
			break
		}
	}

	return nil
}

// DjangoCeleryBeatIntervalschedules retrieves all the records using an executor.
func DjangoCeleryBeatIntervalschedules(mods ...qm.QueryMod) djangoCeleryBeatIntervalscheduleQuery {
	mods = append(mods, qm.From("\"django_celery_beat_intervalschedule\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"django_celery_beat_intervalschedule\".*"})
	}

	return djangoCeleryBeatIntervalscheduleQuery{q}
}

// FindDjangoCeleryBeatIntervalschedule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDjangoCeleryBeatIntervalschedule(exec boil.Executor, iD int, selectCols ...string) (*DjangoCeleryBeatIntervalschedule, error) {
	djangoCeleryBeatIntervalscheduleObj := &DjangoCeleryBeatIntervalschedule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"django_celery_beat_intervalschedule\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, djangoCeleryBeatIntervalscheduleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from django_celery_beat_intervalschedule")
	}

	return djangoCeleryBeatIntervalscheduleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DjangoCeleryBeatIntervalschedule) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no django_celery_beat_intervalschedule provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(djangoCeleryBeatIntervalscheduleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	djangoCeleryBeatIntervalscheduleInsertCacheMut.RLock()
	cache, cached := djangoCeleryBeatIntervalscheduleInsertCache[key]
	djangoCeleryBeatIntervalscheduleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			djangoCeleryBeatIntervalscheduleAllColumns,
			djangoCeleryBeatIntervalscheduleColumnsWithDefault,
			djangoCeleryBeatIntervalscheduleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(djangoCeleryBeatIntervalscheduleType, djangoCeleryBeatIntervalscheduleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(djangoCeleryBeatIntervalscheduleType, djangoCeleryBeatIntervalscheduleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"django_celery_beat_intervalschedule\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"django_celery_beat_intervalschedule\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into django_celery_beat_intervalschedule")
	}

	if !cached {
		djangoCeleryBeatIntervalscheduleInsertCacheMut.Lock()
		djangoCeleryBeatIntervalscheduleInsertCache[key] = cache
		djangoCeleryBeatIntervalscheduleInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DjangoCeleryBeatIntervalschedule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DjangoCeleryBeatIntervalschedule) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	djangoCeleryBeatIntervalscheduleUpdateCacheMut.RLock()
	cache, cached := djangoCeleryBeatIntervalscheduleUpdateCache[key]
	djangoCeleryBeatIntervalscheduleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			djangoCeleryBeatIntervalscheduleAllColumns,
			djangoCeleryBeatIntervalschedulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update django_celery_beat_intervalschedule, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"django_celery_beat_intervalschedule\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, djangoCeleryBeatIntervalschedulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(djangoCeleryBeatIntervalscheduleType, djangoCeleryBeatIntervalscheduleMapping, append(wl, djangoCeleryBeatIntervalschedulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update django_celery_beat_intervalschedule row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for django_celery_beat_intervalschedule")
	}

	if !cached {
		djangoCeleryBeatIntervalscheduleUpdateCacheMut.Lock()
		djangoCeleryBeatIntervalscheduleUpdateCache[key] = cache
		djangoCeleryBeatIntervalscheduleUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q djangoCeleryBeatIntervalscheduleQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for django_celery_beat_intervalschedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for django_celery_beat_intervalschedule")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DjangoCeleryBeatIntervalscheduleSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoCeleryBeatIntervalschedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"django_celery_beat_intervalschedule\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, djangoCeleryBeatIntervalschedulePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in djangoCeleryBeatIntervalschedule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all djangoCeleryBeatIntervalschedule")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DjangoCeleryBeatIntervalschedule) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no django_celery_beat_intervalschedule provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(djangoCeleryBeatIntervalscheduleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	djangoCeleryBeatIntervalscheduleUpsertCacheMut.RLock()
	cache, cached := djangoCeleryBeatIntervalscheduleUpsertCache[key]
	djangoCeleryBeatIntervalscheduleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			djangoCeleryBeatIntervalscheduleAllColumns,
			djangoCeleryBeatIntervalscheduleColumnsWithDefault,
			djangoCeleryBeatIntervalscheduleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			djangoCeleryBeatIntervalscheduleAllColumns,
			djangoCeleryBeatIntervalschedulePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert django_celery_beat_intervalschedule, could not build update column list")
		}

		ret := strmangle.SetComplement(djangoCeleryBeatIntervalscheduleAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(djangoCeleryBeatIntervalschedulePrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert django_celery_beat_intervalschedule, could not build conflict column list")
			}

			conflict = make([]string, len(djangoCeleryBeatIntervalschedulePrimaryKeyColumns))
			copy(conflict, djangoCeleryBeatIntervalschedulePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"django_celery_beat_intervalschedule\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(djangoCeleryBeatIntervalscheduleType, djangoCeleryBeatIntervalscheduleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(djangoCeleryBeatIntervalscheduleType, djangoCeleryBeatIntervalscheduleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert django_celery_beat_intervalschedule")
	}

	if !cached {
		djangoCeleryBeatIntervalscheduleUpsertCacheMut.Lock()
		djangoCeleryBeatIntervalscheduleUpsertCache[key] = cache
		djangoCeleryBeatIntervalscheduleUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DjangoCeleryBeatIntervalschedule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DjangoCeleryBeatIntervalschedule) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no DjangoCeleryBeatIntervalschedule provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), djangoCeleryBeatIntervalschedulePrimaryKeyMapping)
	sql := "DELETE FROM \"django_celery_beat_intervalschedule\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from django_celery_beat_intervalschedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for django_celery_beat_intervalschedule")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q djangoCeleryBeatIntervalscheduleQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no djangoCeleryBeatIntervalscheduleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from django_celery_beat_intervalschedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for django_celery_beat_intervalschedule")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DjangoCeleryBeatIntervalscheduleSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoCeleryBeatIntervalschedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"django_celery_beat_intervalschedule\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, djangoCeleryBeatIntervalschedulePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from djangoCeleryBeatIntervalschedule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for django_celery_beat_intervalschedule")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DjangoCeleryBeatIntervalschedule) Reload(exec boil.Executor) error {
	ret, err := FindDjangoCeleryBeatIntervalschedule(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DjangoCeleryBeatIntervalscheduleSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DjangoCeleryBeatIntervalscheduleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoCeleryBeatIntervalschedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"django_celery_beat_intervalschedule\".* FROM \"django_celery_beat_intervalschedule\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, djangoCeleryBeatIntervalschedulePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in DjangoCeleryBeatIntervalscheduleSlice")
	}

	*o = slice

	return nil
}

// DjangoCeleryBeatIntervalscheduleExists checks if the DjangoCeleryBeatIntervalschedule row exists.
func DjangoCeleryBeatIntervalscheduleExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"django_celery_beat_intervalschedule\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if django_celery_beat_intervalschedule exists")
	}

	return exists, nil
}

// Exists checks if the DjangoCeleryBeatIntervalschedule row exists.
func (o *DjangoCeleryBeatIntervalschedule) Exists(exec boil.Executor) (bool, error) {
	return DjangoCeleryBeatIntervalscheduleExists(exec, o.ID)
}
