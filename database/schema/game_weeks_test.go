// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGameWeeks(t *testing.T) {
	t.Parallel()

	query := GameWeeks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGameWeeksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeek{}
	if err = randomize.Struct(seed, o, gameWeekDBTypes, true, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GameWeeks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGameWeeksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeek{}
	if err = randomize.Struct(seed, o, gameWeekDBTypes, true, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GameWeeks().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GameWeeks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGameWeeksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeek{}
	if err = randomize.Struct(seed, o, gameWeekDBTypes, true, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GameWeekSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GameWeeks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGameWeeksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeek{}
	if err = randomize.Struct(seed, o, gameWeekDBTypes, true, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GameWeekExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if GameWeek exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GameWeekExists to return true, but got false.")
	}
}

func testGameWeeksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeek{}
	if err = randomize.Struct(seed, o, gameWeekDBTypes, true, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	gameWeekFound, err := FindGameWeek(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if gameWeekFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGameWeeksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeek{}
	if err = randomize.Struct(seed, o, gameWeekDBTypes, true, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GameWeeks().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testGameWeeksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeek{}
	if err = randomize.Struct(seed, o, gameWeekDBTypes, true, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GameWeeks().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGameWeeksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gameWeekOne := &GameWeek{}
	gameWeekTwo := &GameWeek{}
	if err = randomize.Struct(seed, gameWeekOne, gameWeekDBTypes, false, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}
	if err = randomize.Struct(seed, gameWeekTwo, gameWeekDBTypes, false, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = gameWeekOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gameWeekTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GameWeeks().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGameWeeksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	gameWeekOne := &GameWeek{}
	gameWeekTwo := &GameWeek{}
	if err = randomize.Struct(seed, gameWeekOne, gameWeekDBTypes, false, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}
	if err = randomize.Struct(seed, gameWeekTwo, gameWeekDBTypes, false, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = gameWeekOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gameWeekTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GameWeeks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testGameWeeksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeek{}
	if err = randomize.Struct(seed, o, gameWeekDBTypes, true, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GameWeeks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGameWeeksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeek{}
	if err = randomize.Struct(seed, o, gameWeekDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(gameWeekColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GameWeeks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGameWeekToManyGameWeekIDAppInboxes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeek
	var b, c AppInbox

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDBTypes, true, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, appInboxDBTypes, false, appInboxColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, appInboxDBTypes, false, appInboxColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.GameWeekIDID, a.ID)
	queries.Assign(&c.GameWeekIDID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GameWeekIDAppInboxes().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.GameWeekIDID, b.GameWeekIDID) {
			bFound = true
		}
		if queries.Equal(v.GameWeekIDID, c.GameWeekIDID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GameWeekSlice{&a}
	if err = a.L.LoadGameWeekIDAppInboxes(tx, false, (*[]*GameWeek)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GameWeekIDAppInboxes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GameWeekIDAppInboxes = nil
	if err = a.L.LoadGameWeekIDAppInboxes(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GameWeekIDAppInboxes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGameWeekToManyWeekDivisionRewards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeek
	var b, c DivisionReward

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDBTypes, true, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, divisionRewardDBTypes, false, divisionRewardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, divisionRewardDBTypes, false, divisionRewardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.WeekID = a.ID
	c.WeekID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.WeekDivisionRewards().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.WeekID == b.WeekID {
			bFound = true
		}
		if v.WeekID == c.WeekID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GameWeekSlice{&a}
	if err = a.L.LoadWeekDivisionRewards(tx, false, (*[]*GameWeek)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WeekDivisionRewards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.WeekDivisionRewards = nil
	if err = a.L.LoadWeekDivisionRewards(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WeekDivisionRewards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGameWeekToManyWeekGameWeekDivisions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeek
	var b, c GameWeekDivision

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDBTypes, true, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, gameWeekDivisionDBTypes, false, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameWeekDivisionDBTypes, false, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.WeekID = a.ID
	c.WeekID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.WeekGameWeekDivisions().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.WeekID == b.WeekID {
			bFound = true
		}
		if v.WeekID == c.WeekID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GameWeekSlice{&a}
	if err = a.L.LoadWeekGameWeekDivisions(tx, false, (*[]*GameWeek)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WeekGameWeekDivisions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.WeekGameWeekDivisions = nil
	if err = a.L.LoadWeekGameWeekDivisions(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WeekGameWeekDivisions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGameWeekToManyWeekTransactions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeek
	var b, c Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDBTypes, true, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.WeekID, a.ID)
	queries.Assign(&c.WeekID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.WeekTransactions().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.WeekID, b.WeekID) {
			bFound = true
		}
		if queries.Equal(v.WeekID, c.WeekID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GameWeekSlice{&a}
	if err = a.L.LoadWeekTransactions(tx, false, (*[]*GameWeek)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WeekTransactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.WeekTransactions = nil
	if err = a.L.LoadWeekTransactions(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WeekTransactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGameWeekToManyUserDivisions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeek
	var b, c UserDivision

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDBTypes, true, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userDivisionDBTypes, false, userDivisionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDivisionDBTypes, false, userDivisionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GameWeekID = a.ID
	c.GameWeekID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserDivisions().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GameWeekID == b.GameWeekID {
			bFound = true
		}
		if v.GameWeekID == c.GameWeekID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GameWeekSlice{&a}
	if err = a.L.LoadUserDivisions(tx, false, (*[]*GameWeek)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserDivisions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserDivisions = nil
	if err = a.L.LoadUserDivisions(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserDivisions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGameWeekToManyUserGameWeekHistories(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeek
	var b, c UserGameWeekHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDBTypes, true, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userGameWeekHistoryDBTypes, false, userGameWeekHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userGameWeekHistoryDBTypes, false, userGameWeekHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GameWeekID = a.ID
	c.GameWeekID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserGameWeekHistories().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GameWeekID == b.GameWeekID {
			bFound = true
		}
		if v.GameWeekID == c.GameWeekID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GameWeekSlice{&a}
	if err = a.L.LoadUserGameWeekHistories(tx, false, (*[]*GameWeek)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserGameWeekHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserGameWeekHistories = nil
	if err = a.L.LoadUserGameWeekHistories(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserGameWeekHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGameWeekToManyAddOpGameWeekIDAppInboxes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeek
	var b, c, d, e AppInbox

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AppInbox{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AppInbox{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGameWeekIDAppInboxes(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.GameWeekIDID) {
			t.Error("foreign key was wrong value", a.ID, first.GameWeekIDID)
		}
		if !queries.Equal(a.ID, second.GameWeekIDID) {
			t.Error("foreign key was wrong value", a.ID, second.GameWeekIDID)
		}

		if first.R.GameWeekID != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.GameWeekID != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GameWeekIDAppInboxes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GameWeekIDAppInboxes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GameWeekIDAppInboxes().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testGameWeekToManySetOpGameWeekIDAppInboxes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeek
	var b, c, d, e AppInbox

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AppInbox{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetGameWeekIDAppInboxes(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.GameWeekIDAppInboxes().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetGameWeekIDAppInboxes(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.GameWeekIDAppInboxes().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.GameWeekIDID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.GameWeekIDID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.GameWeekIDID) {
		t.Error("foreign key was wrong value", a.ID, d.GameWeekIDID)
	}
	if !queries.Equal(a.ID, e.GameWeekIDID) {
		t.Error("foreign key was wrong value", a.ID, e.GameWeekIDID)
	}

	if b.R.GameWeekID != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.GameWeekID != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.GameWeekID != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.GameWeekID != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.GameWeekIDAppInboxes[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.GameWeekIDAppInboxes[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testGameWeekToManyRemoveOpGameWeekIDAppInboxes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeek
	var b, c, d, e AppInbox

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AppInbox{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddGameWeekIDAppInboxes(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.GameWeekIDAppInboxes().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveGameWeekIDAppInboxes(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.GameWeekIDAppInboxes().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.GameWeekIDID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.GameWeekIDID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.GameWeekID != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.GameWeekID != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.GameWeekID != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.GameWeekID != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.GameWeekIDAppInboxes) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.GameWeekIDAppInboxes[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.GameWeekIDAppInboxes[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testGameWeekToManyAddOpWeekDivisionRewards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeek
	var b, c, d, e DivisionReward

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DivisionReward{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, divisionRewardDBTypes, false, strmangle.SetComplement(divisionRewardPrimaryKeyColumns, divisionRewardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DivisionReward{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddWeekDivisionRewards(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.WeekID {
			t.Error("foreign key was wrong value", a.ID, first.WeekID)
		}
		if a.ID != second.WeekID {
			t.Error("foreign key was wrong value", a.ID, second.WeekID)
		}

		if first.R.Week != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Week != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.WeekDivisionRewards[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.WeekDivisionRewards[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.WeekDivisionRewards().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGameWeekToManyAddOpWeekGameWeekDivisions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeek
	var b, c, d, e GameWeekDivision

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GameWeekDivision{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gameWeekDivisionDBTypes, false, strmangle.SetComplement(gameWeekDivisionPrimaryKeyColumns, gameWeekDivisionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GameWeekDivision{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddWeekGameWeekDivisions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.WeekID {
			t.Error("foreign key was wrong value", a.ID, first.WeekID)
		}
		if a.ID != second.WeekID {
			t.Error("foreign key was wrong value", a.ID, second.WeekID)
		}

		if first.R.Week != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Week != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.WeekGameWeekDivisions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.WeekGameWeekDivisions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.WeekGameWeekDivisions().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGameWeekToManyAddOpWeekTransactions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeek
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Transaction{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddWeekTransactions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.WeekID) {
			t.Error("foreign key was wrong value", a.ID, first.WeekID)
		}
		if !queries.Equal(a.ID, second.WeekID) {
			t.Error("foreign key was wrong value", a.ID, second.WeekID)
		}

		if first.R.Week != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Week != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.WeekTransactions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.WeekTransactions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.WeekTransactions().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testGameWeekToManySetOpWeekTransactions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeek
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetWeekTransactions(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.WeekTransactions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetWeekTransactions(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.WeekTransactions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.WeekID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.WeekID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.WeekID) {
		t.Error("foreign key was wrong value", a.ID, d.WeekID)
	}
	if !queries.Equal(a.ID, e.WeekID) {
		t.Error("foreign key was wrong value", a.ID, e.WeekID)
	}

	if b.R.Week != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Week != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Week != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Week != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.WeekTransactions[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.WeekTransactions[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testGameWeekToManyRemoveOpWeekTransactions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeek
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddWeekTransactions(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.WeekTransactions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveWeekTransactions(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.WeekTransactions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.WeekID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.WeekID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Week != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Week != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Week != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Week != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.WeekTransactions) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.WeekTransactions[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.WeekTransactions[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testGameWeekToManyAddOpUserDivisions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeek
	var b, c, d, e UserDivision

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserDivision{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDivisionDBTypes, false, strmangle.SetComplement(userDivisionPrimaryKeyColumns, userDivisionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserDivision{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserDivisions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GameWeekID {
			t.Error("foreign key was wrong value", a.ID, first.GameWeekID)
		}
		if a.ID != second.GameWeekID {
			t.Error("foreign key was wrong value", a.ID, second.GameWeekID)
		}

		if first.R.GameWeek != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.GameWeek != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserDivisions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserDivisions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserDivisions().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGameWeekToManyAddOpUserGameWeekHistories(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeek
	var b, c, d, e UserGameWeekHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserGameWeekHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userGameWeekHistoryDBTypes, false, strmangle.SetComplement(userGameWeekHistoryPrimaryKeyColumns, userGameWeekHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserGameWeekHistory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserGameWeekHistories(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GameWeekID {
			t.Error("foreign key was wrong value", a.ID, first.GameWeekID)
		}
		if a.ID != second.GameWeekID {
			t.Error("foreign key was wrong value", a.ID, second.GameWeekID)
		}

		if first.R.GameWeek != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.GameWeek != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserGameWeekHistories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserGameWeekHistories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserGameWeekHistories().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGameWeekToOneMatchLeaderboardUsingLeaderboard(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local GameWeek
	var foreign MatchLeaderboard

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gameWeekDBTypes, true, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, matchLeaderboardDBTypes, false, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.LeaderboardsID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Leaderboard().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GameWeekSlice{&local}
	if err = local.L.LoadLeaderboard(tx, false, (*[]*GameWeek)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Leaderboard == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Leaderboard = nil
	if err = local.L.LoadLeaderboard(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Leaderboard == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testGameWeekToOneGameSeasonUsingSeason(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local GameWeek
	var foreign GameSeason

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gameWeekDBTypes, true, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, gameSeasonDBTypes, false, gameSeasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameSeason struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SeasonID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Season().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GameWeekSlice{&local}
	if err = local.L.LoadSeason(tx, false, (*[]*GameWeek)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Season == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Season = nil
	if err = local.L.LoadSeason(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Season == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testGameWeekToOneSetOpMatchLeaderboardUsingLeaderboard(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeek
	var b, c MatchLeaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MatchLeaderboard{&b, &c} {
		err = a.SetLeaderboard(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Leaderboard != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LeaderboardGameWeeks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.LeaderboardsID, x.ID) {
			t.Error("foreign key was wrong value", a.LeaderboardsID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LeaderboardsID))
		reflect.Indirect(reflect.ValueOf(&a.LeaderboardsID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.LeaderboardsID, x.ID) {
			t.Error("foreign key was wrong value", a.LeaderboardsID, x.ID)
		}
	}
}

func testGameWeekToOneRemoveOpMatchLeaderboardUsingLeaderboard(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeek
	var b MatchLeaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetLeaderboard(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveLeaderboard(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Leaderboard().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Leaderboard != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.LeaderboardsID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.LeaderboardGameWeeks) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testGameWeekToOneSetOpGameSeasonUsingSeason(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeek
	var b, c GameSeason

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gameSeasonDBTypes, false, strmangle.SetComplement(gameSeasonPrimaryKeyColumns, gameSeasonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameSeasonDBTypes, false, strmangle.SetComplement(gameSeasonPrimaryKeyColumns, gameSeasonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*GameSeason{&b, &c} {
		err = a.SetSeason(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Season != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SeasonGameWeeks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SeasonID, x.ID) {
			t.Error("foreign key was wrong value", a.SeasonID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SeasonID))
		reflect.Indirect(reflect.ValueOf(&a.SeasonID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SeasonID, x.ID) {
			t.Error("foreign key was wrong value", a.SeasonID, x.ID)
		}
	}
}

func testGameWeekToOneRemoveOpGameSeasonUsingSeason(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeek
	var b GameSeason

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gameSeasonDBTypes, false, strmangle.SetComplement(gameSeasonPrimaryKeyColumns, gameSeasonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSeason(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSeason(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Season().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Season != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SeasonID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SeasonGameWeeks) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testGameWeeksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeek{}
	if err = randomize.Struct(seed, o, gameWeekDBTypes, true, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testGameWeeksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeek{}
	if err = randomize.Struct(seed, o, gameWeekDBTypes, true, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GameWeekSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testGameWeeksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeek{}
	if err = randomize.Struct(seed, o, gameWeekDBTypes, true, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GameWeeks().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	gameWeekDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `Name`: `character varying`, `StartAt`: `timestamp with time zone`, `EndAt`: `timestamp with time zone`, `ScoredAt`: `timestamp with time zone`, `Status`: `character varying`, `LeaderboardsID`: `integer`, `SeasonID`: `uuid`}
	_               = bytes.MinRead
)

func testGameWeeksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(gameWeekPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(gameWeekAllColumns) == len(gameWeekPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GameWeek{}
	if err = randomize.Struct(seed, o, gameWeekDBTypes, true, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GameWeeks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gameWeekDBTypes, true, gameWeekPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGameWeeksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(gameWeekAllColumns) == len(gameWeekPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GameWeek{}
	if err = randomize.Struct(seed, o, gameWeekDBTypes, true, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GameWeeks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gameWeekDBTypes, true, gameWeekPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(gameWeekAllColumns, gameWeekPrimaryKeyColumns) {
		fields = gameWeekAllColumns
	} else {
		fields = strmangle.SetComplement(
			gameWeekAllColumns,
			gameWeekPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GameWeekSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGameWeeksUpsert(t *testing.T) {
	t.Parallel()

	if len(gameWeekAllColumns) == len(gameWeekPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GameWeek{}
	if err = randomize.Struct(seed, &o, gameWeekDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GameWeek: %s", err)
	}

	count, err := GameWeeks().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, gameWeekDBTypes, false, gameWeekPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GameWeek: %s", err)
	}

	count, err = GameWeeks().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
