// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DivisionReward is an object representing the database table.
type DivisionReward struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	MinPosition int         `boil:"min_position" json:"min_position" toml:"min_position" yaml:"min_position"`
	MaxPosition null.Int    `boil:"max_position" json:"max_position,omitempty" toml:"max_position" yaml:"max_position,omitempty"`
	DivisionID  null.String `boil:"division_id" json:"division_id,omitempty" toml:"division_id" yaml:"division_id,omitempty"`
	WeekID      string      `boil:"week_id" json:"week_id" toml:"week_id" yaml:"week_id"`
	RewardID    null.String `boil:"reward_id" json:"reward_id,omitempty" toml:"reward_id" yaml:"reward_id,omitempty"`

	R *divisionRewardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L divisionRewardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DivisionRewardColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	MinPosition string
	MaxPosition string
	DivisionID  string
	WeekID      string
	RewardID    string
}{
	ID:          "id",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	MinPosition: "min_position",
	MaxPosition: "max_position",
	DivisionID:  "division_id",
	WeekID:      "week_id",
	RewardID:    "reward_id",
}

var DivisionRewardTableColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	MinPosition string
	MaxPosition string
	DivisionID  string
	WeekID      string
	RewardID    string
}{
	ID:          "division_rewards.id",
	CreatedAt:   "division_rewards.created_at",
	UpdatedAt:   "division_rewards.updated_at",
	MinPosition: "division_rewards.min_position",
	MaxPosition: "division_rewards.max_position",
	DivisionID:  "division_rewards.division_id",
	WeekID:      "division_rewards.week_id",
	RewardID:    "division_rewards.reward_id",
}

// Generated where

var DivisionRewardWhere = struct {
	ID          whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	MinPosition whereHelperint
	MaxPosition whereHelpernull_Int
	DivisionID  whereHelpernull_String
	WeekID      whereHelperstring
	RewardID    whereHelpernull_String
}{
	ID:          whereHelperstring{field: "\"division_rewards\".\"id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"division_rewards\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"division_rewards\".\"updated_at\""},
	MinPosition: whereHelperint{field: "\"division_rewards\".\"min_position\""},
	MaxPosition: whereHelpernull_Int{field: "\"division_rewards\".\"max_position\""},
	DivisionID:  whereHelpernull_String{field: "\"division_rewards\".\"division_id\""},
	WeekID:      whereHelperstring{field: "\"division_rewards\".\"week_id\""},
	RewardID:    whereHelpernull_String{field: "\"division_rewards\".\"reward_id\""},
}

// DivisionRewardRels is where relationship names are stored.
var DivisionRewardRels = struct {
	Division string
	Reward   string
	Week     string
}{
	Division: "Division",
	Reward:   "Reward",
	Week:     "Week",
}

// divisionRewardR is where relationships are stored.
type divisionRewardR struct {
	Division *Division `boil:"Division" json:"Division" toml:"Division" yaml:"Division"`
	Reward   *Reward   `boil:"Reward" json:"Reward" toml:"Reward" yaml:"Reward"`
	Week     *GameWeek `boil:"Week" json:"Week" toml:"Week" yaml:"Week"`
}

// NewStruct creates a new relationship struct
func (*divisionRewardR) NewStruct() *divisionRewardR {
	return &divisionRewardR{}
}

func (r *divisionRewardR) GetDivision() *Division {
	if r == nil {
		return nil
	}
	return r.Division
}

func (r *divisionRewardR) GetReward() *Reward {
	if r == nil {
		return nil
	}
	return r.Reward
}

func (r *divisionRewardR) GetWeek() *GameWeek {
	if r == nil {
		return nil
	}
	return r.Week
}

// divisionRewardL is where Load methods for each relationship are stored.
type divisionRewardL struct{}

var (
	divisionRewardAllColumns            = []string{"id", "created_at", "updated_at", "min_position", "max_position", "division_id", "week_id", "reward_id"}
	divisionRewardColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "min_position", "week_id"}
	divisionRewardColumnsWithDefault    = []string{"max_position", "division_id", "reward_id"}
	divisionRewardPrimaryKeyColumns     = []string{"id"}
	divisionRewardGeneratedColumns      = []string{}
)

type (
	// DivisionRewardSlice is an alias for a slice of pointers to DivisionReward.
	// This should almost always be used instead of []DivisionReward.
	DivisionRewardSlice []*DivisionReward

	divisionRewardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	divisionRewardType                 = reflect.TypeOf(&DivisionReward{})
	divisionRewardMapping              = queries.MakeStructMapping(divisionRewardType)
	divisionRewardPrimaryKeyMapping, _ = queries.BindMapping(divisionRewardType, divisionRewardMapping, divisionRewardPrimaryKeyColumns)
	divisionRewardInsertCacheMut       sync.RWMutex
	divisionRewardInsertCache          = make(map[string]insertCache)
	divisionRewardUpdateCacheMut       sync.RWMutex
	divisionRewardUpdateCache          = make(map[string]updateCache)
	divisionRewardUpsertCacheMut       sync.RWMutex
	divisionRewardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single divisionReward record from the query.
func (q divisionRewardQuery) One(exec boil.Executor) (*DivisionReward, error) {
	o := &DivisionReward{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for division_rewards")
	}

	return o, nil
}

// All returns all DivisionReward records from the query.
func (q divisionRewardQuery) All(exec boil.Executor) (DivisionRewardSlice, error) {
	var o []*DivisionReward

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to DivisionReward slice")
	}

	return o, nil
}

// Count returns the count of all DivisionReward records in the query.
func (q divisionRewardQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count division_rewards rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q divisionRewardQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if division_rewards exists")
	}

	return count > 0, nil
}

// Division pointed to by the foreign key.
func (o *DivisionReward) Division(mods ...qm.QueryMod) divisionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DivisionID),
	}

	queryMods = append(queryMods, mods...)

	return Divisions(queryMods...)
}

// Reward pointed to by the foreign key.
func (o *DivisionReward) Reward(mods ...qm.QueryMod) rewardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RewardID),
	}

	queryMods = append(queryMods, mods...)

	return Rewards(queryMods...)
}

// Week pointed to by the foreign key.
func (o *DivisionReward) Week(mods ...qm.QueryMod) gameWeekQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WeekID),
	}

	queryMods = append(queryMods, mods...)

	return GameWeeks(queryMods...)
}

// LoadDivision allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (divisionRewardL) LoadDivision(e boil.Executor, singular bool, maybeDivisionReward interface{}, mods queries.Applicator) error {
	var slice []*DivisionReward
	var object *DivisionReward

	if singular {
		var ok bool
		object, ok = maybeDivisionReward.(*DivisionReward)
		if !ok {
			object = new(DivisionReward)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDivisionReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDivisionReward))
			}
		}
	} else {
		s, ok := maybeDivisionReward.(*[]*DivisionReward)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDivisionReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDivisionReward))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &divisionRewardR{}
		}
		if !queries.IsNil(object.DivisionID) {
			args[object.DivisionID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &divisionRewardR{}
			}

			if !queries.IsNil(obj.DivisionID) {
				args[obj.DivisionID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`divisions`),
		qm.WhereIn(`divisions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Division")
	}

	var resultSlice []*Division
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Division")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for divisions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for divisions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Division = foreign
		if foreign.R == nil {
			foreign.R = &divisionR{}
		}
		foreign.R.DivisionRewards = append(foreign.R.DivisionRewards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DivisionID, foreign.ID) {
				local.R.Division = foreign
				if foreign.R == nil {
					foreign.R = &divisionR{}
				}
				foreign.R.DivisionRewards = append(foreign.R.DivisionRewards, local)
				break
			}
		}
	}

	return nil
}

// LoadReward allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (divisionRewardL) LoadReward(e boil.Executor, singular bool, maybeDivisionReward interface{}, mods queries.Applicator) error {
	var slice []*DivisionReward
	var object *DivisionReward

	if singular {
		var ok bool
		object, ok = maybeDivisionReward.(*DivisionReward)
		if !ok {
			object = new(DivisionReward)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDivisionReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDivisionReward))
			}
		}
	} else {
		s, ok := maybeDivisionReward.(*[]*DivisionReward)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDivisionReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDivisionReward))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &divisionRewardR{}
		}
		if !queries.IsNil(object.RewardID) {
			args[object.RewardID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &divisionRewardR{}
			}

			if !queries.IsNil(obj.RewardID) {
				args[obj.RewardID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`rewards`),
		qm.WhereIn(`rewards.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Reward")
	}

	var resultSlice []*Reward
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Reward")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for rewards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rewards")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Reward = foreign
		if foreign.R == nil {
			foreign.R = &rewardR{}
		}
		foreign.R.DivisionRewards = append(foreign.R.DivisionRewards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RewardID, foreign.ID) {
				local.R.Reward = foreign
				if foreign.R == nil {
					foreign.R = &rewardR{}
				}
				foreign.R.DivisionRewards = append(foreign.R.DivisionRewards, local)
				break
			}
		}
	}

	return nil
}

// LoadWeek allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (divisionRewardL) LoadWeek(e boil.Executor, singular bool, maybeDivisionReward interface{}, mods queries.Applicator) error {
	var slice []*DivisionReward
	var object *DivisionReward

	if singular {
		var ok bool
		object, ok = maybeDivisionReward.(*DivisionReward)
		if !ok {
			object = new(DivisionReward)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDivisionReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDivisionReward))
			}
		}
	} else {
		s, ok := maybeDivisionReward.(*[]*DivisionReward)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDivisionReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDivisionReward))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &divisionRewardR{}
		}
		args[object.WeekID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &divisionRewardR{}
			}

			args[obj.WeekID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`game_weeks`),
		qm.WhereIn(`game_weeks.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GameWeek")
	}

	var resultSlice []*GameWeek
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GameWeek")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for game_weeks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_weeks")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Week = foreign
		if foreign.R == nil {
			foreign.R = &gameWeekR{}
		}
		foreign.R.WeekDivisionRewards = append(foreign.R.WeekDivisionRewards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WeekID == foreign.ID {
				local.R.Week = foreign
				if foreign.R == nil {
					foreign.R = &gameWeekR{}
				}
				foreign.R.WeekDivisionRewards = append(foreign.R.WeekDivisionRewards, local)
				break
			}
		}
	}

	return nil
}

// SetDivision of the divisionReward to the related item.
// Sets o.R.Division to related.
// Adds o to related.R.DivisionRewards.
func (o *DivisionReward) SetDivision(exec boil.Executor, insert bool, related *Division) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"division_rewards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"division_id"}),
		strmangle.WhereClause("\"", "\"", 2, divisionRewardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DivisionID, related.ID)
	if o.R == nil {
		o.R = &divisionRewardR{
			Division: related,
		}
	} else {
		o.R.Division = related
	}

	if related.R == nil {
		related.R = &divisionR{
			DivisionRewards: DivisionRewardSlice{o},
		}
	} else {
		related.R.DivisionRewards = append(related.R.DivisionRewards, o)
	}

	return nil
}

// RemoveDivision relationship.
// Sets o.R.Division to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DivisionReward) RemoveDivision(exec boil.Executor, related *Division) error {
	var err error

	queries.SetScanner(&o.DivisionID, nil)
	if _, err = o.Update(exec, boil.Whitelist("division_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Division = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DivisionRewards {
		if queries.Equal(o.DivisionID, ri.DivisionID) {
			continue
		}

		ln := len(related.R.DivisionRewards)
		if ln > 1 && i < ln-1 {
			related.R.DivisionRewards[i] = related.R.DivisionRewards[ln-1]
		}
		related.R.DivisionRewards = related.R.DivisionRewards[:ln-1]
		break
	}
	return nil
}

// SetReward of the divisionReward to the related item.
// Sets o.R.Reward to related.
// Adds o to related.R.DivisionRewards.
func (o *DivisionReward) SetReward(exec boil.Executor, insert bool, related *Reward) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"division_rewards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"reward_id"}),
		strmangle.WhereClause("\"", "\"", 2, divisionRewardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RewardID, related.ID)
	if o.R == nil {
		o.R = &divisionRewardR{
			Reward: related,
		}
	} else {
		o.R.Reward = related
	}

	if related.R == nil {
		related.R = &rewardR{
			DivisionRewards: DivisionRewardSlice{o},
		}
	} else {
		related.R.DivisionRewards = append(related.R.DivisionRewards, o)
	}

	return nil
}

// RemoveReward relationship.
// Sets o.R.Reward to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DivisionReward) RemoveReward(exec boil.Executor, related *Reward) error {
	var err error

	queries.SetScanner(&o.RewardID, nil)
	if _, err = o.Update(exec, boil.Whitelist("reward_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Reward = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DivisionRewards {
		if queries.Equal(o.RewardID, ri.RewardID) {
			continue
		}

		ln := len(related.R.DivisionRewards)
		if ln > 1 && i < ln-1 {
			related.R.DivisionRewards[i] = related.R.DivisionRewards[ln-1]
		}
		related.R.DivisionRewards = related.R.DivisionRewards[:ln-1]
		break
	}
	return nil
}

// SetWeek of the divisionReward to the related item.
// Sets o.R.Week to related.
// Adds o to related.R.WeekDivisionRewards.
func (o *DivisionReward) SetWeek(exec boil.Executor, insert bool, related *GameWeek) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"division_rewards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"week_id"}),
		strmangle.WhereClause("\"", "\"", 2, divisionRewardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WeekID = related.ID
	if o.R == nil {
		o.R = &divisionRewardR{
			Week: related,
		}
	} else {
		o.R.Week = related
	}

	if related.R == nil {
		related.R = &gameWeekR{
			WeekDivisionRewards: DivisionRewardSlice{o},
		}
	} else {
		related.R.WeekDivisionRewards = append(related.R.WeekDivisionRewards, o)
	}

	return nil
}

// DivisionRewards retrieves all the records using an executor.
func DivisionRewards(mods ...qm.QueryMod) divisionRewardQuery {
	mods = append(mods, qm.From("\"division_rewards\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"division_rewards\".*"})
	}

	return divisionRewardQuery{q}
}

// FindDivisionReward retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDivisionReward(exec boil.Executor, iD string, selectCols ...string) (*DivisionReward, error) {
	divisionRewardObj := &DivisionReward{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"division_rewards\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, divisionRewardObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from division_rewards")
	}

	return divisionRewardObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DivisionReward) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no division_rewards provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(divisionRewardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	divisionRewardInsertCacheMut.RLock()
	cache, cached := divisionRewardInsertCache[key]
	divisionRewardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			divisionRewardAllColumns,
			divisionRewardColumnsWithDefault,
			divisionRewardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(divisionRewardType, divisionRewardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(divisionRewardType, divisionRewardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"division_rewards\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"division_rewards\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into division_rewards")
	}

	if !cached {
		divisionRewardInsertCacheMut.Lock()
		divisionRewardInsertCache[key] = cache
		divisionRewardInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DivisionReward.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DivisionReward) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	divisionRewardUpdateCacheMut.RLock()
	cache, cached := divisionRewardUpdateCache[key]
	divisionRewardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			divisionRewardAllColumns,
			divisionRewardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update division_rewards, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"division_rewards\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, divisionRewardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(divisionRewardType, divisionRewardMapping, append(wl, divisionRewardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update division_rewards row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for division_rewards")
	}

	if !cached {
		divisionRewardUpdateCacheMut.Lock()
		divisionRewardUpdateCache[key] = cache
		divisionRewardUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q divisionRewardQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for division_rewards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for division_rewards")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DivisionRewardSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), divisionRewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"division_rewards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, divisionRewardPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in divisionReward slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all divisionReward")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DivisionReward) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no division_rewards provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(divisionRewardColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	divisionRewardUpsertCacheMut.RLock()
	cache, cached := divisionRewardUpsertCache[key]
	divisionRewardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			divisionRewardAllColumns,
			divisionRewardColumnsWithDefault,
			divisionRewardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			divisionRewardAllColumns,
			divisionRewardPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert division_rewards, could not build update column list")
		}

		ret := strmangle.SetComplement(divisionRewardAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(divisionRewardPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert division_rewards, could not build conflict column list")
			}

			conflict = make([]string, len(divisionRewardPrimaryKeyColumns))
			copy(conflict, divisionRewardPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"division_rewards\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(divisionRewardType, divisionRewardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(divisionRewardType, divisionRewardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert division_rewards")
	}

	if !cached {
		divisionRewardUpsertCacheMut.Lock()
		divisionRewardUpsertCache[key] = cache
		divisionRewardUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DivisionReward record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DivisionReward) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no DivisionReward provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), divisionRewardPrimaryKeyMapping)
	sql := "DELETE FROM \"division_rewards\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from division_rewards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for division_rewards")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q divisionRewardQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no divisionRewardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from division_rewards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for division_rewards")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DivisionRewardSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), divisionRewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"division_rewards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, divisionRewardPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from divisionReward slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for division_rewards")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DivisionReward) Reload(exec boil.Executor) error {
	ret, err := FindDivisionReward(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DivisionRewardSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DivisionRewardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), divisionRewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"division_rewards\".* FROM \"division_rewards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, divisionRewardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in DivisionRewardSlice")
	}

	*o = slice

	return nil
}

// DivisionRewardExists checks if the DivisionReward row exists.
func DivisionRewardExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"division_rewards\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if division_rewards exists")
	}

	return exists, nil
}

// Exists checks if the DivisionReward row exists.
func (o *DivisionReward) Exists(exec boil.Executor) (bool, error) {
	return DivisionRewardExists(exec, o.ID)
}
