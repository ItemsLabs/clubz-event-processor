// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testChatRooms(t *testing.T) {
	t.Parallel()

	query := ChatRooms()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testChatRoomsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoom{}
	if err = randomize.Struct(seed, o, chatRoomDBTypes, true, chatRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ChatRooms().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChatRoomsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoom{}
	if err = randomize.Struct(seed, o, chatRoomDBTypes, true, chatRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ChatRooms().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ChatRooms().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChatRoomsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoom{}
	if err = randomize.Struct(seed, o, chatRoomDBTypes, true, chatRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChatRoomSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ChatRooms().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChatRoomsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoom{}
	if err = randomize.Struct(seed, o, chatRoomDBTypes, true, chatRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ChatRoomExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ChatRoom exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ChatRoomExists to return true, but got false.")
	}
}

func testChatRoomsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoom{}
	if err = randomize.Struct(seed, o, chatRoomDBTypes, true, chatRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	chatRoomFound, err := FindChatRoom(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if chatRoomFound == nil {
		t.Error("want a record, got nil")
	}
}

func testChatRoomsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoom{}
	if err = randomize.Struct(seed, o, chatRoomDBTypes, true, chatRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ChatRooms().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testChatRoomsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoom{}
	if err = randomize.Struct(seed, o, chatRoomDBTypes, true, chatRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ChatRooms().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testChatRoomsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chatRoomOne := &ChatRoom{}
	chatRoomTwo := &ChatRoom{}
	if err = randomize.Struct(seed, chatRoomOne, chatRoomDBTypes, false, chatRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}
	if err = randomize.Struct(seed, chatRoomTwo, chatRoomDBTypes, false, chatRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = chatRoomOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = chatRoomTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ChatRooms().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testChatRoomsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	chatRoomOne := &ChatRoom{}
	chatRoomTwo := &ChatRoom{}
	if err = randomize.Struct(seed, chatRoomOne, chatRoomDBTypes, false, chatRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}
	if err = randomize.Struct(seed, chatRoomTwo, chatRoomDBTypes, false, chatRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = chatRoomOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = chatRoomTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChatRooms().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testChatRoomsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoom{}
	if err = randomize.Struct(seed, o, chatRoomDBTypes, true, chatRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChatRooms().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChatRoomsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoom{}
	if err = randomize.Struct(seed, o, chatRoomDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(chatRoomColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ChatRooms().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChatRoomOneToOneChatRoomMemberUsingRoomChatRoomMember(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var foreign ChatRoomMember
	var local ChatRoom

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, chatRoomMemberDBTypes, true, chatRoomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, chatRoomDBTypes, true, chatRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.RoomID = local.ID
	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.RoomChatRoomMember().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.RoomID != foreign.RoomID {
		t.Errorf("want: %v, got %v", foreign.RoomID, check.RoomID)
	}

	slice := ChatRoomSlice{&local}
	if err = local.L.LoadRoomChatRoomMember(tx, false, (*[]*ChatRoom)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RoomChatRoomMember == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RoomChatRoomMember = nil
	if err = local.L.LoadRoomChatRoomMember(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RoomChatRoomMember == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testChatRoomOneToOneSetOpChatRoomMemberUsingRoomChatRoomMember(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ChatRoom
	var b, c ChatRoomMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chatRoomDBTypes, false, strmangle.SetComplement(chatRoomPrimaryKeyColumns, chatRoomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, chatRoomMemberDBTypes, false, strmangle.SetComplement(chatRoomMemberPrimaryKeyColumns, chatRoomMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, chatRoomMemberDBTypes, false, strmangle.SetComplement(chatRoomMemberPrimaryKeyColumns, chatRoomMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ChatRoomMember{&b, &c} {
		err = a.SetRoomChatRoomMember(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RoomChatRoomMember != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Room != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.RoomID {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.RoomID))
		reflect.Indirect(reflect.ValueOf(&x.RoomID)).Set(zero)

		if err = x.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ID != x.RoomID {
			t.Error("foreign key was wrong value", a.ID, x.RoomID)
		}

		if _, err = x.Delete(tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testChatRoomToManyRoomChatMessages(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ChatRoom
	var b, c ChatMessage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chatRoomDBTypes, true, chatRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, chatMessageDBTypes, false, chatMessageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, chatMessageDBTypes, false, chatMessageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.RoomID = a.ID
	c.RoomID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RoomChatMessages().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.RoomID == b.RoomID {
			bFound = true
		}
		if v.RoomID == c.RoomID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ChatRoomSlice{&a}
	if err = a.L.LoadRoomChatMessages(tx, false, (*[]*ChatRoom)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoomChatMessages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RoomChatMessages = nil
	if err = a.L.LoadRoomChatMessages(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoomChatMessages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testChatRoomToManyAddOpRoomChatMessages(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ChatRoom
	var b, c, d, e ChatMessage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chatRoomDBTypes, false, strmangle.SetComplement(chatRoomPrimaryKeyColumns, chatRoomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ChatMessage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chatMessageDBTypes, false, strmangle.SetComplement(chatMessagePrimaryKeyColumns, chatMessageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ChatMessage{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRoomChatMessages(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RoomID {
			t.Error("foreign key was wrong value", a.ID, first.RoomID)
		}
		if a.ID != second.RoomID {
			t.Error("foreign key was wrong value", a.ID, second.RoomID)
		}

		if first.R.Room != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Room != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RoomChatMessages[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RoomChatMessages[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RoomChatMessages().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testChatRoomToOneMatchUsingMatch(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local ChatRoom
	var foreign Match

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, chatRoomDBTypes, true, chatRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.MatchID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Match().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ChatRoomSlice{&local}
	if err = local.L.LoadMatch(tx, false, (*[]*ChatRoom)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Match == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Match = nil
	if err = local.L.LoadMatch(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Match == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testChatRoomToOneSetOpMatchUsingMatch(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ChatRoom
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chatRoomDBTypes, false, strmangle.SetComplement(chatRoomPrimaryKeyColumns, chatRoomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Match{&b, &c} {
		err = a.SetMatch(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Match != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ChatRooms[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.MatchID, x.ID) {
			t.Error("foreign key was wrong value", a.MatchID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MatchID))
		reflect.Indirect(reflect.ValueOf(&a.MatchID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.MatchID, x.ID) {
			t.Error("foreign key was wrong value", a.MatchID, x.ID)
		}
	}
}

func testChatRoomToOneRemoveOpMatchUsingMatch(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ChatRoom
	var b Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chatRoomDBTypes, false, strmangle.SetComplement(chatRoomPrimaryKeyColumns, chatRoomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetMatch(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveMatch(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Match().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Match != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.MatchID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ChatRooms) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testChatRoomsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoom{}
	if err = randomize.Struct(seed, o, chatRoomDBTypes, true, chatRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testChatRoomsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoom{}
	if err = randomize.Struct(seed, o, chatRoomDBTypes, true, chatRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChatRoomSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testChatRoomsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoom{}
	if err = randomize.Struct(seed, o, chatRoomDBTypes, true, chatRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ChatRooms().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	chatRoomDBTypes = map[string]string{`ID`: `uuid`, `Name`: `character varying`, `Description`: `text`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `MatchID`: `uuid`, `ImportID`: `character varying`}
	_               = bytes.MinRead
)

func testChatRoomsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(chatRoomPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(chatRoomAllColumns) == len(chatRoomPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoom{}
	if err = randomize.Struct(seed, o, chatRoomDBTypes, true, chatRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChatRooms().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, chatRoomDBTypes, true, chatRoomPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testChatRoomsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(chatRoomAllColumns) == len(chatRoomPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoom{}
	if err = randomize.Struct(seed, o, chatRoomDBTypes, true, chatRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChatRooms().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, chatRoomDBTypes, true, chatRoomPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(chatRoomAllColumns, chatRoomPrimaryKeyColumns) {
		fields = chatRoomAllColumns
	} else {
		fields = strmangle.SetComplement(
			chatRoomAllColumns,
			chatRoomPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ChatRoomSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testChatRoomsUpsert(t *testing.T) {
	t.Parallel()

	if len(chatRoomAllColumns) == len(chatRoomPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ChatRoom{}
	if err = randomize.Struct(seed, &o, chatRoomDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ChatRoom: %s", err)
	}

	count, err := ChatRooms().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, chatRoomDBTypes, false, chatRoomPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ChatRoom: %s", err)
	}

	count, err = ChatRooms().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
