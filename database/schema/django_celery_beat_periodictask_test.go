// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDjangoCeleryBeatPeriodictasks(t *testing.T) {
	t.Parallel()

	query := DjangoCeleryBeatPeriodictasks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDjangoCeleryBeatPeriodictasksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodictask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodictaskDBTypes, true, djangoCeleryBeatPeriodictaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DjangoCeleryBeatPeriodictasks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDjangoCeleryBeatPeriodictasksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodictask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodictaskDBTypes, true, djangoCeleryBeatPeriodictaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DjangoCeleryBeatPeriodictasks().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DjangoCeleryBeatPeriodictasks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDjangoCeleryBeatPeriodictasksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodictask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodictaskDBTypes, true, djangoCeleryBeatPeriodictaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DjangoCeleryBeatPeriodictaskSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DjangoCeleryBeatPeriodictasks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDjangoCeleryBeatPeriodictasksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodictask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodictaskDBTypes, true, djangoCeleryBeatPeriodictaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DjangoCeleryBeatPeriodictaskExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DjangoCeleryBeatPeriodictask exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DjangoCeleryBeatPeriodictaskExists to return true, but got false.")
	}
}

func testDjangoCeleryBeatPeriodictasksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodictask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodictaskDBTypes, true, djangoCeleryBeatPeriodictaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	djangoCeleryBeatPeriodictaskFound, err := FindDjangoCeleryBeatPeriodictask(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if djangoCeleryBeatPeriodictaskFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDjangoCeleryBeatPeriodictasksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodictask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodictaskDBTypes, true, djangoCeleryBeatPeriodictaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DjangoCeleryBeatPeriodictasks().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testDjangoCeleryBeatPeriodictasksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodictask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodictaskDBTypes, true, djangoCeleryBeatPeriodictaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DjangoCeleryBeatPeriodictasks().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDjangoCeleryBeatPeriodictasksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	djangoCeleryBeatPeriodictaskOne := &DjangoCeleryBeatPeriodictask{}
	djangoCeleryBeatPeriodictaskTwo := &DjangoCeleryBeatPeriodictask{}
	if err = randomize.Struct(seed, djangoCeleryBeatPeriodictaskOne, djangoCeleryBeatPeriodictaskDBTypes, false, djangoCeleryBeatPeriodictaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}
	if err = randomize.Struct(seed, djangoCeleryBeatPeriodictaskTwo, djangoCeleryBeatPeriodictaskDBTypes, false, djangoCeleryBeatPeriodictaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = djangoCeleryBeatPeriodictaskOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = djangoCeleryBeatPeriodictaskTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DjangoCeleryBeatPeriodictasks().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDjangoCeleryBeatPeriodictasksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	djangoCeleryBeatPeriodictaskOne := &DjangoCeleryBeatPeriodictask{}
	djangoCeleryBeatPeriodictaskTwo := &DjangoCeleryBeatPeriodictask{}
	if err = randomize.Struct(seed, djangoCeleryBeatPeriodictaskOne, djangoCeleryBeatPeriodictaskDBTypes, false, djangoCeleryBeatPeriodictaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}
	if err = randomize.Struct(seed, djangoCeleryBeatPeriodictaskTwo, djangoCeleryBeatPeriodictaskDBTypes, false, djangoCeleryBeatPeriodictaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = djangoCeleryBeatPeriodictaskOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = djangoCeleryBeatPeriodictaskTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DjangoCeleryBeatPeriodictasks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testDjangoCeleryBeatPeriodictasksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodictask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodictaskDBTypes, true, djangoCeleryBeatPeriodictaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DjangoCeleryBeatPeriodictasks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDjangoCeleryBeatPeriodictasksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodictask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodictaskDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(djangoCeleryBeatPeriodictaskColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DjangoCeleryBeatPeriodictasks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDjangoCeleryBeatPeriodictaskToOneDjangoCeleryBeatClockedscheduleUsingClocked(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local DjangoCeleryBeatPeriodictask
	var foreign DjangoCeleryBeatClockedschedule

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, djangoCeleryBeatPeriodictaskDBTypes, true, djangoCeleryBeatPeriodictaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, djangoCeleryBeatClockedscheduleDBTypes, false, djangoCeleryBeatClockedscheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatClockedschedule struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ClockedID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Clocked().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DjangoCeleryBeatPeriodictaskSlice{&local}
	if err = local.L.LoadClocked(tx, false, (*[]*DjangoCeleryBeatPeriodictask)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Clocked == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Clocked = nil
	if err = local.L.LoadClocked(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Clocked == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testDjangoCeleryBeatPeriodictaskToOneDjangoCeleryBeatCrontabscheduleUsingCrontab(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local DjangoCeleryBeatPeriodictask
	var foreign DjangoCeleryBeatCrontabschedule

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, djangoCeleryBeatPeriodictaskDBTypes, true, djangoCeleryBeatPeriodictaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, djangoCeleryBeatCrontabscheduleDBTypes, false, djangoCeleryBeatCrontabscheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatCrontabschedule struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CrontabID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Crontab().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DjangoCeleryBeatPeriodictaskSlice{&local}
	if err = local.L.LoadCrontab(tx, false, (*[]*DjangoCeleryBeatPeriodictask)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Crontab == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Crontab = nil
	if err = local.L.LoadCrontab(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Crontab == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testDjangoCeleryBeatPeriodictaskToOneDjangoCeleryBeatIntervalscheduleUsingInterval(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local DjangoCeleryBeatPeriodictask
	var foreign DjangoCeleryBeatIntervalschedule

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, djangoCeleryBeatPeriodictaskDBTypes, true, djangoCeleryBeatPeriodictaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, djangoCeleryBeatIntervalscheduleDBTypes, false, djangoCeleryBeatIntervalscheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatIntervalschedule struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.IntervalID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Interval().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DjangoCeleryBeatPeriodictaskSlice{&local}
	if err = local.L.LoadInterval(tx, false, (*[]*DjangoCeleryBeatPeriodictask)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Interval == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Interval = nil
	if err = local.L.LoadInterval(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Interval == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testDjangoCeleryBeatPeriodictaskToOneDjangoCeleryBeatSolarscheduleUsingSolar(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local DjangoCeleryBeatPeriodictask
	var foreign DjangoCeleryBeatSolarschedule

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, djangoCeleryBeatPeriodictaskDBTypes, true, djangoCeleryBeatPeriodictaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, djangoCeleryBeatSolarscheduleDBTypes, false, djangoCeleryBeatSolarscheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatSolarschedule struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SolarID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Solar().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DjangoCeleryBeatPeriodictaskSlice{&local}
	if err = local.L.LoadSolar(tx, false, (*[]*DjangoCeleryBeatPeriodictask)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Solar == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Solar = nil
	if err = local.L.LoadSolar(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Solar == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testDjangoCeleryBeatPeriodictaskToOneSetOpDjangoCeleryBeatClockedscheduleUsingClocked(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a DjangoCeleryBeatPeriodictask
	var b, c DjangoCeleryBeatClockedschedule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, djangoCeleryBeatPeriodictaskDBTypes, false, strmangle.SetComplement(djangoCeleryBeatPeriodictaskPrimaryKeyColumns, djangoCeleryBeatPeriodictaskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, djangoCeleryBeatClockedscheduleDBTypes, false, strmangle.SetComplement(djangoCeleryBeatClockedschedulePrimaryKeyColumns, djangoCeleryBeatClockedscheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, djangoCeleryBeatClockedscheduleDBTypes, false, strmangle.SetComplement(djangoCeleryBeatClockedschedulePrimaryKeyColumns, djangoCeleryBeatClockedscheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DjangoCeleryBeatClockedschedule{&b, &c} {
		err = a.SetClocked(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Clocked != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ClockedDjangoCeleryBeatPeriodictasks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ClockedID, x.ID) {
			t.Error("foreign key was wrong value", a.ClockedID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ClockedID))
		reflect.Indirect(reflect.ValueOf(&a.ClockedID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ClockedID, x.ID) {
			t.Error("foreign key was wrong value", a.ClockedID, x.ID)
		}
	}
}

func testDjangoCeleryBeatPeriodictaskToOneRemoveOpDjangoCeleryBeatClockedscheduleUsingClocked(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a DjangoCeleryBeatPeriodictask
	var b DjangoCeleryBeatClockedschedule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, djangoCeleryBeatPeriodictaskDBTypes, false, strmangle.SetComplement(djangoCeleryBeatPeriodictaskPrimaryKeyColumns, djangoCeleryBeatPeriodictaskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, djangoCeleryBeatClockedscheduleDBTypes, false, strmangle.SetComplement(djangoCeleryBeatClockedschedulePrimaryKeyColumns, djangoCeleryBeatClockedscheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetClocked(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveClocked(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Clocked().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Clocked != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ClockedID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ClockedDjangoCeleryBeatPeriodictasks) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDjangoCeleryBeatPeriodictaskToOneSetOpDjangoCeleryBeatCrontabscheduleUsingCrontab(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a DjangoCeleryBeatPeriodictask
	var b, c DjangoCeleryBeatCrontabschedule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, djangoCeleryBeatPeriodictaskDBTypes, false, strmangle.SetComplement(djangoCeleryBeatPeriodictaskPrimaryKeyColumns, djangoCeleryBeatPeriodictaskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, djangoCeleryBeatCrontabscheduleDBTypes, false, strmangle.SetComplement(djangoCeleryBeatCrontabschedulePrimaryKeyColumns, djangoCeleryBeatCrontabscheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, djangoCeleryBeatCrontabscheduleDBTypes, false, strmangle.SetComplement(djangoCeleryBeatCrontabschedulePrimaryKeyColumns, djangoCeleryBeatCrontabscheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DjangoCeleryBeatCrontabschedule{&b, &c} {
		err = a.SetCrontab(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Crontab != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CrontabDjangoCeleryBeatPeriodictasks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CrontabID, x.ID) {
			t.Error("foreign key was wrong value", a.CrontabID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CrontabID))
		reflect.Indirect(reflect.ValueOf(&a.CrontabID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CrontabID, x.ID) {
			t.Error("foreign key was wrong value", a.CrontabID, x.ID)
		}
	}
}

func testDjangoCeleryBeatPeriodictaskToOneRemoveOpDjangoCeleryBeatCrontabscheduleUsingCrontab(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a DjangoCeleryBeatPeriodictask
	var b DjangoCeleryBeatCrontabschedule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, djangoCeleryBeatPeriodictaskDBTypes, false, strmangle.SetComplement(djangoCeleryBeatPeriodictaskPrimaryKeyColumns, djangoCeleryBeatPeriodictaskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, djangoCeleryBeatCrontabscheduleDBTypes, false, strmangle.SetComplement(djangoCeleryBeatCrontabschedulePrimaryKeyColumns, djangoCeleryBeatCrontabscheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCrontab(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCrontab(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Crontab().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Crontab != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CrontabID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CrontabDjangoCeleryBeatPeriodictasks) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDjangoCeleryBeatPeriodictaskToOneSetOpDjangoCeleryBeatIntervalscheduleUsingInterval(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a DjangoCeleryBeatPeriodictask
	var b, c DjangoCeleryBeatIntervalschedule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, djangoCeleryBeatPeriodictaskDBTypes, false, strmangle.SetComplement(djangoCeleryBeatPeriodictaskPrimaryKeyColumns, djangoCeleryBeatPeriodictaskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, djangoCeleryBeatIntervalscheduleDBTypes, false, strmangle.SetComplement(djangoCeleryBeatIntervalschedulePrimaryKeyColumns, djangoCeleryBeatIntervalscheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, djangoCeleryBeatIntervalscheduleDBTypes, false, strmangle.SetComplement(djangoCeleryBeatIntervalschedulePrimaryKeyColumns, djangoCeleryBeatIntervalscheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DjangoCeleryBeatIntervalschedule{&b, &c} {
		err = a.SetInterval(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Interval != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IntervalDjangoCeleryBeatPeriodictasks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.IntervalID, x.ID) {
			t.Error("foreign key was wrong value", a.IntervalID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IntervalID))
		reflect.Indirect(reflect.ValueOf(&a.IntervalID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.IntervalID, x.ID) {
			t.Error("foreign key was wrong value", a.IntervalID, x.ID)
		}
	}
}

func testDjangoCeleryBeatPeriodictaskToOneRemoveOpDjangoCeleryBeatIntervalscheduleUsingInterval(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a DjangoCeleryBeatPeriodictask
	var b DjangoCeleryBeatIntervalschedule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, djangoCeleryBeatPeriodictaskDBTypes, false, strmangle.SetComplement(djangoCeleryBeatPeriodictaskPrimaryKeyColumns, djangoCeleryBeatPeriodictaskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, djangoCeleryBeatIntervalscheduleDBTypes, false, strmangle.SetComplement(djangoCeleryBeatIntervalschedulePrimaryKeyColumns, djangoCeleryBeatIntervalscheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetInterval(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveInterval(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Interval().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Interval != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.IntervalID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.IntervalDjangoCeleryBeatPeriodictasks) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDjangoCeleryBeatPeriodictaskToOneSetOpDjangoCeleryBeatSolarscheduleUsingSolar(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a DjangoCeleryBeatPeriodictask
	var b, c DjangoCeleryBeatSolarschedule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, djangoCeleryBeatPeriodictaskDBTypes, false, strmangle.SetComplement(djangoCeleryBeatPeriodictaskPrimaryKeyColumns, djangoCeleryBeatPeriodictaskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, djangoCeleryBeatSolarscheduleDBTypes, false, strmangle.SetComplement(djangoCeleryBeatSolarschedulePrimaryKeyColumns, djangoCeleryBeatSolarscheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, djangoCeleryBeatSolarscheduleDBTypes, false, strmangle.SetComplement(djangoCeleryBeatSolarschedulePrimaryKeyColumns, djangoCeleryBeatSolarscheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DjangoCeleryBeatSolarschedule{&b, &c} {
		err = a.SetSolar(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Solar != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SolarDjangoCeleryBeatPeriodictasks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SolarID, x.ID) {
			t.Error("foreign key was wrong value", a.SolarID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SolarID))
		reflect.Indirect(reflect.ValueOf(&a.SolarID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SolarID, x.ID) {
			t.Error("foreign key was wrong value", a.SolarID, x.ID)
		}
	}
}

func testDjangoCeleryBeatPeriodictaskToOneRemoveOpDjangoCeleryBeatSolarscheduleUsingSolar(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a DjangoCeleryBeatPeriodictask
	var b DjangoCeleryBeatSolarschedule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, djangoCeleryBeatPeriodictaskDBTypes, false, strmangle.SetComplement(djangoCeleryBeatPeriodictaskPrimaryKeyColumns, djangoCeleryBeatPeriodictaskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, djangoCeleryBeatSolarscheduleDBTypes, false, strmangle.SetComplement(djangoCeleryBeatSolarschedulePrimaryKeyColumns, djangoCeleryBeatSolarscheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSolar(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSolar(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Solar().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Solar != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SolarID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SolarDjangoCeleryBeatPeriodictasks) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDjangoCeleryBeatPeriodictasksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodictask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodictaskDBTypes, true, djangoCeleryBeatPeriodictaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testDjangoCeleryBeatPeriodictasksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodictask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodictaskDBTypes, true, djangoCeleryBeatPeriodictaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DjangoCeleryBeatPeriodictaskSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testDjangoCeleryBeatPeriodictasksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodictask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodictaskDBTypes, true, djangoCeleryBeatPeriodictaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DjangoCeleryBeatPeriodictasks().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	djangoCeleryBeatPeriodictaskDBTypes = map[string]string{`ID`: `integer`, `Name`: `character varying`, `Task`: `character varying`, `Args`: `text`, `Kwargs`: `text`, `Queue`: `character varying`, `Exchange`: `character varying`, `RoutingKey`: `character varying`, `Expires`: `timestamp with time zone`, `Enabled`: `boolean`, `LastRunAt`: `timestamp with time zone`, `TotalRunCount`: `integer`, `DateChanged`: `timestamp with time zone`, `Description`: `text`, `CrontabID`: `integer`, `IntervalID`: `integer`, `SolarID`: `integer`, `OneOff`: `boolean`, `StartTime`: `timestamp with time zone`, `Priority`: `integer`, `Headers`: `text`, `ClockedID`: `integer`, `ExpireSeconds`: `integer`}
	_                                   = bytes.MinRead
)

func testDjangoCeleryBeatPeriodictasksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(djangoCeleryBeatPeriodictaskPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(djangoCeleryBeatPeriodictaskAllColumns) == len(djangoCeleryBeatPeriodictaskPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodictask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodictaskDBTypes, true, djangoCeleryBeatPeriodictaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DjangoCeleryBeatPeriodictasks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodictaskDBTypes, true, djangoCeleryBeatPeriodictaskPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDjangoCeleryBeatPeriodictasksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(djangoCeleryBeatPeriodictaskAllColumns) == len(djangoCeleryBeatPeriodictaskPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DjangoCeleryBeatPeriodictask{}
	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodictaskDBTypes, true, djangoCeleryBeatPeriodictaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DjangoCeleryBeatPeriodictasks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, djangoCeleryBeatPeriodictaskDBTypes, true, djangoCeleryBeatPeriodictaskPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(djangoCeleryBeatPeriodictaskAllColumns, djangoCeleryBeatPeriodictaskPrimaryKeyColumns) {
		fields = djangoCeleryBeatPeriodictaskAllColumns
	} else {
		fields = strmangle.SetComplement(
			djangoCeleryBeatPeriodictaskAllColumns,
			djangoCeleryBeatPeriodictaskPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DjangoCeleryBeatPeriodictaskSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDjangoCeleryBeatPeriodictasksUpsert(t *testing.T) {
	t.Parallel()

	if len(djangoCeleryBeatPeriodictaskAllColumns) == len(djangoCeleryBeatPeriodictaskPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DjangoCeleryBeatPeriodictask{}
	if err = randomize.Struct(seed, &o, djangoCeleryBeatPeriodictaskDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DjangoCeleryBeatPeriodictask: %s", err)
	}

	count, err := DjangoCeleryBeatPeriodictasks().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, djangoCeleryBeatPeriodictaskDBTypes, false, djangoCeleryBeatPeriodictaskPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DjangoCeleryBeatPeriodictask struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DjangoCeleryBeatPeriodictask: %s", err)
	}

	count, err = DjangoCeleryBeatPeriodictasks().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
