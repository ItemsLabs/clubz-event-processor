// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DjangoCeleryBeatPeriodicListTask is an object representing the database table.
type DjangoCeleryBeatPeriodicListTask struct {
	Ident      int16     `boil:"ident" json:"ident" toml:"ident" yaml:"ident"`
	LastUpdate time.Time `boil:"last_update" json:"last_update" toml:"last_update" yaml:"last_update"`

	R *djangoCeleryBeatPeriodicListTaskR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L djangoCeleryBeatPeriodicListTaskL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DjangoCeleryBeatPeriodicListTaskColumns = struct {
	Ident      string
	LastUpdate string
}{
	Ident:      "ident",
	LastUpdate: "last_update",
}

var DjangoCeleryBeatPeriodicListTaskTableColumns = struct {
	Ident      string
	LastUpdate string
}{
	Ident:      "django_celery_beat_periodictasks.ident",
	LastUpdate: "django_celery_beat_periodictasks.last_update",
}

// Generated where

var DjangoCeleryBeatPeriodicListTaskWhere = struct {
	Ident      whereHelperint16
	LastUpdate whereHelpertime_Time
}{
	Ident:      whereHelperint16{field: "\"django_celery_beat_periodictasks\".\"ident\""},
	LastUpdate: whereHelpertime_Time{field: "\"django_celery_beat_periodictasks\".\"last_update\""},
}

// DjangoCeleryBeatPeriodicListTaskRels is where relationship names are stored.
var DjangoCeleryBeatPeriodicListTaskRels = struct {
}{}

// djangoCeleryBeatPeriodicListTaskR is where relationships are stored.
type djangoCeleryBeatPeriodicListTaskR struct {
}

// NewStruct creates a new relationship struct
func (*djangoCeleryBeatPeriodicListTaskR) NewStruct() *djangoCeleryBeatPeriodicListTaskR {
	return &djangoCeleryBeatPeriodicListTaskR{}
}

// djangoCeleryBeatPeriodicListTaskL is where Load methods for each relationship are stored.
type djangoCeleryBeatPeriodicListTaskL struct{}

var (
	djangoCeleryBeatPeriodicListTaskAllColumns            = []string{"ident", "last_update"}
	djangoCeleryBeatPeriodicListTaskColumnsWithoutDefault = []string{"ident", "last_update"}
	djangoCeleryBeatPeriodicListTaskColumnsWithDefault    = []string{}
	djangoCeleryBeatPeriodicListTaskPrimaryKeyColumns     = []string{"ident"}
	djangoCeleryBeatPeriodicListTaskGeneratedColumns      = []string{}
)

type (
	// DjangoCeleryBeatPeriodicListTaskSlice is an alias for a slice of pointers to DjangoCeleryBeatPeriodicListTask.
	// This should almost always be used instead of []DjangoCeleryBeatPeriodicListTask.
	DjangoCeleryBeatPeriodicListTaskSlice []*DjangoCeleryBeatPeriodicListTask

	djangoCeleryBeatPeriodicListTaskQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	djangoCeleryBeatPeriodicListTaskType                 = reflect.TypeOf(&DjangoCeleryBeatPeriodicListTask{})
	djangoCeleryBeatPeriodicListTaskMapping              = queries.MakeStructMapping(djangoCeleryBeatPeriodicListTaskType)
	djangoCeleryBeatPeriodicListTaskPrimaryKeyMapping, _ = queries.BindMapping(djangoCeleryBeatPeriodicListTaskType, djangoCeleryBeatPeriodicListTaskMapping, djangoCeleryBeatPeriodicListTaskPrimaryKeyColumns)
	djangoCeleryBeatPeriodicListTaskInsertCacheMut       sync.RWMutex
	djangoCeleryBeatPeriodicListTaskInsertCache          = make(map[string]insertCache)
	djangoCeleryBeatPeriodicListTaskUpdateCacheMut       sync.RWMutex
	djangoCeleryBeatPeriodicListTaskUpdateCache          = make(map[string]updateCache)
	djangoCeleryBeatPeriodicListTaskUpsertCacheMut       sync.RWMutex
	djangoCeleryBeatPeriodicListTaskUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single djangoCeleryBeatPeriodicListTask record from the query.
func (q djangoCeleryBeatPeriodicListTaskQuery) One(exec boil.Executor) (*DjangoCeleryBeatPeriodicListTask, error) {
	o := &DjangoCeleryBeatPeriodicListTask{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for django_celery_beat_periodictasks")
	}

	return o, nil
}

// All returns all DjangoCeleryBeatPeriodicListTask records from the query.
func (q djangoCeleryBeatPeriodicListTaskQuery) All(exec boil.Executor) (DjangoCeleryBeatPeriodicListTaskSlice, error) {
	var o []*DjangoCeleryBeatPeriodicListTask

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to DjangoCeleryBeatPeriodicListTask slice")
	}

	return o, nil
}

// Count returns the count of all DjangoCeleryBeatPeriodicListTask records in the query.
func (q djangoCeleryBeatPeriodicListTaskQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count django_celery_beat_periodictasks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q djangoCeleryBeatPeriodicListTaskQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if django_celery_beat_periodictasks exists")
	}

	return count > 0, nil
}

// DjangoCeleryBeatPeriodicListTasks retrieves all the records using an executor.
func DjangoCeleryBeatPeriodicListTasks(mods ...qm.QueryMod) djangoCeleryBeatPeriodicListTaskQuery {
	mods = append(mods, qm.From("\"django_celery_beat_periodictasks\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"django_celery_beat_periodictasks\".*"})
	}

	return djangoCeleryBeatPeriodicListTaskQuery{q}
}

// FindDjangoCeleryBeatPeriodicListTask retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDjangoCeleryBeatPeriodicListTask(exec boil.Executor, ident int16, selectCols ...string) (*DjangoCeleryBeatPeriodicListTask, error) {
	djangoCeleryBeatPeriodicListTaskObj := &DjangoCeleryBeatPeriodicListTask{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"django_celery_beat_periodictasks\" where \"ident\"=$1", sel,
	)

	q := queries.Raw(query, ident)

	err := q.Bind(nil, exec, djangoCeleryBeatPeriodicListTaskObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from django_celery_beat_periodictasks")
	}

	return djangoCeleryBeatPeriodicListTaskObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DjangoCeleryBeatPeriodicListTask) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no django_celery_beat_periodictasks provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(djangoCeleryBeatPeriodicListTaskColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	djangoCeleryBeatPeriodicListTaskInsertCacheMut.RLock()
	cache, cached := djangoCeleryBeatPeriodicListTaskInsertCache[key]
	djangoCeleryBeatPeriodicListTaskInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			djangoCeleryBeatPeriodicListTaskAllColumns,
			djangoCeleryBeatPeriodicListTaskColumnsWithDefault,
			djangoCeleryBeatPeriodicListTaskColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(djangoCeleryBeatPeriodicListTaskType, djangoCeleryBeatPeriodicListTaskMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(djangoCeleryBeatPeriodicListTaskType, djangoCeleryBeatPeriodicListTaskMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"django_celery_beat_periodictasks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"django_celery_beat_periodictasks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into django_celery_beat_periodictasks")
	}

	if !cached {
		djangoCeleryBeatPeriodicListTaskInsertCacheMut.Lock()
		djangoCeleryBeatPeriodicListTaskInsertCache[key] = cache
		djangoCeleryBeatPeriodicListTaskInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DjangoCeleryBeatPeriodicListTask.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DjangoCeleryBeatPeriodicListTask) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	djangoCeleryBeatPeriodicListTaskUpdateCacheMut.RLock()
	cache, cached := djangoCeleryBeatPeriodicListTaskUpdateCache[key]
	djangoCeleryBeatPeriodicListTaskUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			djangoCeleryBeatPeriodicListTaskAllColumns,
			djangoCeleryBeatPeriodicListTaskPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update django_celery_beat_periodictasks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"django_celery_beat_periodictasks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, djangoCeleryBeatPeriodicListTaskPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(djangoCeleryBeatPeriodicListTaskType, djangoCeleryBeatPeriodicListTaskMapping, append(wl, djangoCeleryBeatPeriodicListTaskPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update django_celery_beat_periodictasks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for django_celery_beat_periodictasks")
	}

	if !cached {
		djangoCeleryBeatPeriodicListTaskUpdateCacheMut.Lock()
		djangoCeleryBeatPeriodicListTaskUpdateCache[key] = cache
		djangoCeleryBeatPeriodicListTaskUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q djangoCeleryBeatPeriodicListTaskQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for django_celery_beat_periodictasks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for django_celery_beat_periodictasks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DjangoCeleryBeatPeriodicListTaskSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoCeleryBeatPeriodicListTaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"django_celery_beat_periodictasks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, djangoCeleryBeatPeriodicListTaskPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in djangoCeleryBeatPeriodicListTask slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all djangoCeleryBeatPeriodicListTask")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DjangoCeleryBeatPeriodicListTask) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no django_celery_beat_periodictasks provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(djangoCeleryBeatPeriodicListTaskColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	djangoCeleryBeatPeriodicListTaskUpsertCacheMut.RLock()
	cache, cached := djangoCeleryBeatPeriodicListTaskUpsertCache[key]
	djangoCeleryBeatPeriodicListTaskUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			djangoCeleryBeatPeriodicListTaskAllColumns,
			djangoCeleryBeatPeriodicListTaskColumnsWithDefault,
			djangoCeleryBeatPeriodicListTaskColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			djangoCeleryBeatPeriodicListTaskAllColumns,
			djangoCeleryBeatPeriodicListTaskPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert django_celery_beat_periodictasks, could not build update column list")
		}

		ret := strmangle.SetComplement(djangoCeleryBeatPeriodicListTaskAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(djangoCeleryBeatPeriodicListTaskPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert django_celery_beat_periodictasks, could not build conflict column list")
			}

			conflict = make([]string, len(djangoCeleryBeatPeriodicListTaskPrimaryKeyColumns))
			copy(conflict, djangoCeleryBeatPeriodicListTaskPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"django_celery_beat_periodictasks\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(djangoCeleryBeatPeriodicListTaskType, djangoCeleryBeatPeriodicListTaskMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(djangoCeleryBeatPeriodicListTaskType, djangoCeleryBeatPeriodicListTaskMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert django_celery_beat_periodictasks")
	}

	if !cached {
		djangoCeleryBeatPeriodicListTaskUpsertCacheMut.Lock()
		djangoCeleryBeatPeriodicListTaskUpsertCache[key] = cache
		djangoCeleryBeatPeriodicListTaskUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DjangoCeleryBeatPeriodicListTask record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DjangoCeleryBeatPeriodicListTask) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no DjangoCeleryBeatPeriodicListTask provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), djangoCeleryBeatPeriodicListTaskPrimaryKeyMapping)
	sql := "DELETE FROM \"django_celery_beat_periodictasks\" WHERE \"ident\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from django_celery_beat_periodictasks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for django_celery_beat_periodictasks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q djangoCeleryBeatPeriodicListTaskQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no djangoCeleryBeatPeriodicListTaskQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from django_celery_beat_periodictasks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for django_celery_beat_periodictasks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DjangoCeleryBeatPeriodicListTaskSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoCeleryBeatPeriodicListTaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"django_celery_beat_periodictasks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, djangoCeleryBeatPeriodicListTaskPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from djangoCeleryBeatPeriodicListTask slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for django_celery_beat_periodictasks")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DjangoCeleryBeatPeriodicListTask) Reload(exec boil.Executor) error {
	ret, err := FindDjangoCeleryBeatPeriodicListTask(exec, o.Ident)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DjangoCeleryBeatPeriodicListTaskSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DjangoCeleryBeatPeriodicListTaskSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoCeleryBeatPeriodicListTaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"django_celery_beat_periodictasks\".* FROM \"django_celery_beat_periodictasks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, djangoCeleryBeatPeriodicListTaskPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in DjangoCeleryBeatPeriodicListTaskSlice")
	}

	*o = slice

	return nil
}

// DjangoCeleryBeatPeriodicListTaskExists checks if the DjangoCeleryBeatPeriodicListTask row exists.
func DjangoCeleryBeatPeriodicListTaskExists(exec boil.Executor, ident int16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"django_celery_beat_periodictasks\" where \"ident\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, ident)
	}
	row := exec.QueryRow(sql, ident)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if django_celery_beat_periodictasks exists")
	}

	return exists, nil
}

// Exists checks if the DjangoCeleryBeatPeriodicListTask row exists.
func (o *DjangoCeleryBeatPeriodicListTask) Exists(exec boil.Executor) (bool, error) {
	return DjangoCeleryBeatPeriodicListTaskExists(exec, o.Ident)
}
