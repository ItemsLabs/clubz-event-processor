// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDjangoSessions(t *testing.T) {
	t.Parallel()

	query := DjangoSessions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDjangoSessionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoSession{}
	if err = randomize.Struct(seed, o, djangoSessionDBTypes, true, djangoSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DjangoSessions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDjangoSessionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoSession{}
	if err = randomize.Struct(seed, o, djangoSessionDBTypes, true, djangoSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DjangoSessions().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DjangoSessions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDjangoSessionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoSession{}
	if err = randomize.Struct(seed, o, djangoSessionDBTypes, true, djangoSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DjangoSessionSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DjangoSessions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDjangoSessionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoSession{}
	if err = randomize.Struct(seed, o, djangoSessionDBTypes, true, djangoSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DjangoSessionExists(tx, o.SessionKey)
	if err != nil {
		t.Errorf("Unable to check if DjangoSession exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DjangoSessionExists to return true, but got false.")
	}
}

func testDjangoSessionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoSession{}
	if err = randomize.Struct(seed, o, djangoSessionDBTypes, true, djangoSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	djangoSessionFound, err := FindDjangoSession(tx, o.SessionKey)
	if err != nil {
		t.Error(err)
	}

	if djangoSessionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDjangoSessionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoSession{}
	if err = randomize.Struct(seed, o, djangoSessionDBTypes, true, djangoSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DjangoSessions().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testDjangoSessionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoSession{}
	if err = randomize.Struct(seed, o, djangoSessionDBTypes, true, djangoSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DjangoSessions().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDjangoSessionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	djangoSessionOne := &DjangoSession{}
	djangoSessionTwo := &DjangoSession{}
	if err = randomize.Struct(seed, djangoSessionOne, djangoSessionDBTypes, false, djangoSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}
	if err = randomize.Struct(seed, djangoSessionTwo, djangoSessionDBTypes, false, djangoSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = djangoSessionOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = djangoSessionTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DjangoSessions().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDjangoSessionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	djangoSessionOne := &DjangoSession{}
	djangoSessionTwo := &DjangoSession{}
	if err = randomize.Struct(seed, djangoSessionOne, djangoSessionDBTypes, false, djangoSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}
	if err = randomize.Struct(seed, djangoSessionTwo, djangoSessionDBTypes, false, djangoSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = djangoSessionOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = djangoSessionTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DjangoSessions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testDjangoSessionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoSession{}
	if err = randomize.Struct(seed, o, djangoSessionDBTypes, true, djangoSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DjangoSessions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDjangoSessionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoSession{}
	if err = randomize.Struct(seed, o, djangoSessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(djangoSessionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DjangoSessions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDjangoSessionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoSession{}
	if err = randomize.Struct(seed, o, djangoSessionDBTypes, true, djangoSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testDjangoSessionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoSession{}
	if err = randomize.Struct(seed, o, djangoSessionDBTypes, true, djangoSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DjangoSessionSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testDjangoSessionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoSession{}
	if err = randomize.Struct(seed, o, djangoSessionDBTypes, true, djangoSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DjangoSessions().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	djangoSessionDBTypes = map[string]string{`SessionKey`: `character varying`, `SessionData`: `text`, `ExpireDate`: `timestamp with time zone`}
	_                    = bytes.MinRead
)

func testDjangoSessionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(djangoSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(djangoSessionAllColumns) == len(djangoSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DjangoSession{}
	if err = randomize.Struct(seed, o, djangoSessionDBTypes, true, djangoSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DjangoSessions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, djangoSessionDBTypes, true, djangoSessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDjangoSessionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(djangoSessionAllColumns) == len(djangoSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DjangoSession{}
	if err = randomize.Struct(seed, o, djangoSessionDBTypes, true, djangoSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DjangoSessions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, djangoSessionDBTypes, true, djangoSessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(djangoSessionAllColumns, djangoSessionPrimaryKeyColumns) {
		fields = djangoSessionAllColumns
	} else {
		fields = strmangle.SetComplement(
			djangoSessionAllColumns,
			djangoSessionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DjangoSessionSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDjangoSessionsUpsert(t *testing.T) {
	t.Parallel()

	if len(djangoSessionAllColumns) == len(djangoSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DjangoSession{}
	if err = randomize.Struct(seed, &o, djangoSessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DjangoSession: %s", err)
	}

	count, err := DjangoSessions().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, djangoSessionDBTypes, false, djangoSessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DjangoSession struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DjangoSession: %s", err)
	}

	count, err = DjangoSessions().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
