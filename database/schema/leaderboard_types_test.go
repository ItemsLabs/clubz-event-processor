// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLeaderboardTypes(t *testing.T) {
	t.Parallel()

	query := LeaderboardTypes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLeaderboardTypesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LeaderboardType{}
	if err = randomize.Struct(seed, o, leaderboardTypeDBTypes, true, leaderboardTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LeaderboardTypes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLeaderboardTypesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LeaderboardType{}
	if err = randomize.Struct(seed, o, leaderboardTypeDBTypes, true, leaderboardTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := LeaderboardTypes().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LeaderboardTypes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLeaderboardTypesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LeaderboardType{}
	if err = randomize.Struct(seed, o, leaderboardTypeDBTypes, true, leaderboardTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LeaderboardTypeSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LeaderboardTypes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLeaderboardTypesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LeaderboardType{}
	if err = randomize.Struct(seed, o, leaderboardTypeDBTypes, true, leaderboardTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LeaderboardTypeExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if LeaderboardType exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LeaderboardTypeExists to return true, but got false.")
	}
}

func testLeaderboardTypesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LeaderboardType{}
	if err = randomize.Struct(seed, o, leaderboardTypeDBTypes, true, leaderboardTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	leaderboardTypeFound, err := FindLeaderboardType(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if leaderboardTypeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLeaderboardTypesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LeaderboardType{}
	if err = randomize.Struct(seed, o, leaderboardTypeDBTypes, true, leaderboardTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = LeaderboardTypes().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testLeaderboardTypesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LeaderboardType{}
	if err = randomize.Struct(seed, o, leaderboardTypeDBTypes, true, leaderboardTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := LeaderboardTypes().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLeaderboardTypesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	leaderboardTypeOne := &LeaderboardType{}
	leaderboardTypeTwo := &LeaderboardType{}
	if err = randomize.Struct(seed, leaderboardTypeOne, leaderboardTypeDBTypes, false, leaderboardTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}
	if err = randomize.Struct(seed, leaderboardTypeTwo, leaderboardTypeDBTypes, false, leaderboardTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = leaderboardTypeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = leaderboardTypeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LeaderboardTypes().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLeaderboardTypesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	leaderboardTypeOne := &LeaderboardType{}
	leaderboardTypeTwo := &LeaderboardType{}
	if err = randomize.Struct(seed, leaderboardTypeOne, leaderboardTypeDBTypes, false, leaderboardTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}
	if err = randomize.Struct(seed, leaderboardTypeTwo, leaderboardTypeDBTypes, false, leaderboardTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = leaderboardTypeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = leaderboardTypeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LeaderboardTypes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testLeaderboardTypesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LeaderboardType{}
	if err = randomize.Struct(seed, o, leaderboardTypeDBTypes, true, leaderboardTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LeaderboardTypes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLeaderboardTypesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LeaderboardType{}
	if err = randomize.Struct(seed, o, leaderboardTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(leaderboardTypeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := LeaderboardTypes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLeaderboardTypeToManyMatchLeaderboards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a LeaderboardType
	var b, c MatchLeaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, leaderboardTypeDBTypes, true, leaderboardTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchLeaderboardDBTypes, false, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchLeaderboardDBTypes, false, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.LeaderboardTypeID, a.ID)
	queries.Assign(&c.LeaderboardTypeID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MatchLeaderboards().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.LeaderboardTypeID, b.LeaderboardTypeID) {
			bFound = true
		}
		if queries.Equal(v.LeaderboardTypeID, c.LeaderboardTypeID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := LeaderboardTypeSlice{&a}
	if err = a.L.LoadMatchLeaderboards(tx, false, (*[]*LeaderboardType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchLeaderboards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MatchLeaderboards = nil
	if err = a.L.LoadMatchLeaderboards(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchLeaderboards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testLeaderboardTypeToManyAddOpMatchLeaderboards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a LeaderboardType
	var b, c, d, e MatchLeaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, leaderboardTypeDBTypes, false, strmangle.SetComplement(leaderboardTypePrimaryKeyColumns, leaderboardTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchLeaderboard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MatchLeaderboard{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMatchLeaderboards(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.LeaderboardTypeID) {
			t.Error("foreign key was wrong value", a.ID, first.LeaderboardTypeID)
		}
		if !queries.Equal(a.ID, second.LeaderboardTypeID) {
			t.Error("foreign key was wrong value", a.ID, second.LeaderboardTypeID)
		}

		if first.R.LeaderboardType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.LeaderboardType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MatchLeaderboards[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MatchLeaderboards[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MatchLeaderboards().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testLeaderboardTypeToManySetOpMatchLeaderboards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a LeaderboardType
	var b, c, d, e MatchLeaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, leaderboardTypeDBTypes, false, strmangle.SetComplement(leaderboardTypePrimaryKeyColumns, leaderboardTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchLeaderboard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMatchLeaderboards(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MatchLeaderboards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMatchLeaderboards(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MatchLeaderboards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.LeaderboardTypeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.LeaderboardTypeID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.LeaderboardTypeID) {
		t.Error("foreign key was wrong value", a.ID, d.LeaderboardTypeID)
	}
	if !queries.Equal(a.ID, e.LeaderboardTypeID) {
		t.Error("foreign key was wrong value", a.ID, e.LeaderboardTypeID)
	}

	if b.R.LeaderboardType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.LeaderboardType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.LeaderboardType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.LeaderboardType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.MatchLeaderboards[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.MatchLeaderboards[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testLeaderboardTypeToManyRemoveOpMatchLeaderboards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a LeaderboardType
	var b, c, d, e MatchLeaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, leaderboardTypeDBTypes, false, strmangle.SetComplement(leaderboardTypePrimaryKeyColumns, leaderboardTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchLeaderboard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMatchLeaderboards(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MatchLeaderboards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMatchLeaderboards(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MatchLeaderboards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.LeaderboardTypeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.LeaderboardTypeID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.LeaderboardType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.LeaderboardType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.LeaderboardType != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.LeaderboardType != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.MatchLeaderboards) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.MatchLeaderboards[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.MatchLeaderboards[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testLeaderboardTypesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LeaderboardType{}
	if err = randomize.Struct(seed, o, leaderboardTypeDBTypes, true, leaderboardTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testLeaderboardTypesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LeaderboardType{}
	if err = randomize.Struct(seed, o, leaderboardTypeDBTypes, true, leaderboardTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LeaderboardTypeSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testLeaderboardTypesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LeaderboardType{}
	if err = randomize.Struct(seed, o, leaderboardTypeDBTypes, true, leaderboardTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LeaderboardTypes().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	leaderboardTypeDBTypes = map[string]string{`ID`: `integer`, `Name`: `character varying`, `Description`: `text`}
	_                      = bytes.MinRead
)

func testLeaderboardTypesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(leaderboardTypePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(leaderboardTypeAllColumns) == len(leaderboardTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LeaderboardType{}
	if err = randomize.Struct(seed, o, leaderboardTypeDBTypes, true, leaderboardTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LeaderboardTypes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, leaderboardTypeDBTypes, true, leaderboardTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLeaderboardTypesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(leaderboardTypeAllColumns) == len(leaderboardTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LeaderboardType{}
	if err = randomize.Struct(seed, o, leaderboardTypeDBTypes, true, leaderboardTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LeaderboardTypes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, leaderboardTypeDBTypes, true, leaderboardTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(leaderboardTypeAllColumns, leaderboardTypePrimaryKeyColumns) {
		fields = leaderboardTypeAllColumns
	} else {
		fields = strmangle.SetComplement(
			leaderboardTypeAllColumns,
			leaderboardTypePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LeaderboardTypeSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLeaderboardTypesUpsert(t *testing.T) {
	t.Parallel()

	if len(leaderboardTypeAllColumns) == len(leaderboardTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := LeaderboardType{}
	if err = randomize.Struct(seed, &o, leaderboardTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LeaderboardType: %s", err)
	}

	count, err := LeaderboardTypes().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, leaderboardTypeDBTypes, false, leaderboardTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LeaderboardType: %s", err)
	}

	count, err = LeaderboardTypes().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
