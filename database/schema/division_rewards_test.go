// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDivisionRewards(t *testing.T) {
	t.Parallel()

	query := DivisionRewards()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDivisionRewardsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DivisionReward{}
	if err = randomize.Struct(seed, o, divisionRewardDBTypes, true, divisionRewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DivisionRewards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDivisionRewardsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DivisionReward{}
	if err = randomize.Struct(seed, o, divisionRewardDBTypes, true, divisionRewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DivisionRewards().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DivisionRewards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDivisionRewardsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DivisionReward{}
	if err = randomize.Struct(seed, o, divisionRewardDBTypes, true, divisionRewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DivisionRewardSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DivisionRewards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDivisionRewardsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DivisionReward{}
	if err = randomize.Struct(seed, o, divisionRewardDBTypes, true, divisionRewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DivisionRewardExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DivisionReward exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DivisionRewardExists to return true, but got false.")
	}
}

func testDivisionRewardsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DivisionReward{}
	if err = randomize.Struct(seed, o, divisionRewardDBTypes, true, divisionRewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	divisionRewardFound, err := FindDivisionReward(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if divisionRewardFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDivisionRewardsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DivisionReward{}
	if err = randomize.Struct(seed, o, divisionRewardDBTypes, true, divisionRewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DivisionRewards().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testDivisionRewardsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DivisionReward{}
	if err = randomize.Struct(seed, o, divisionRewardDBTypes, true, divisionRewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DivisionRewards().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDivisionRewardsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	divisionRewardOne := &DivisionReward{}
	divisionRewardTwo := &DivisionReward{}
	if err = randomize.Struct(seed, divisionRewardOne, divisionRewardDBTypes, false, divisionRewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}
	if err = randomize.Struct(seed, divisionRewardTwo, divisionRewardDBTypes, false, divisionRewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = divisionRewardOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = divisionRewardTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DivisionRewards().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDivisionRewardsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	divisionRewardOne := &DivisionReward{}
	divisionRewardTwo := &DivisionReward{}
	if err = randomize.Struct(seed, divisionRewardOne, divisionRewardDBTypes, false, divisionRewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}
	if err = randomize.Struct(seed, divisionRewardTwo, divisionRewardDBTypes, false, divisionRewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = divisionRewardOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = divisionRewardTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DivisionRewards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testDivisionRewardsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DivisionReward{}
	if err = randomize.Struct(seed, o, divisionRewardDBTypes, true, divisionRewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DivisionRewards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDivisionRewardsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DivisionReward{}
	if err = randomize.Struct(seed, o, divisionRewardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(divisionRewardColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DivisionRewards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDivisionRewardToOneDivisionUsingDivision(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local DivisionReward
	var foreign Division

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, divisionRewardDBTypes, true, divisionRewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, divisionDBTypes, false, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DivisionID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Division().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DivisionRewardSlice{&local}
	if err = local.L.LoadDivision(tx, false, (*[]*DivisionReward)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Division == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Division = nil
	if err = local.L.LoadDivision(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Division == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testDivisionRewardToOneRewardUsingReward(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local DivisionReward
	var foreign Reward

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, divisionRewardDBTypes, true, divisionRewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, rewardDBTypes, false, rewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.RewardID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Reward().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DivisionRewardSlice{&local}
	if err = local.L.LoadReward(tx, false, (*[]*DivisionReward)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Reward == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Reward = nil
	if err = local.L.LoadReward(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Reward == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testDivisionRewardToOneGameWeekUsingWeek(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local DivisionReward
	var foreign GameWeek

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, divisionRewardDBTypes, false, divisionRewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, gameWeekDBTypes, false, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.WeekID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Week().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DivisionRewardSlice{&local}
	if err = local.L.LoadWeek(tx, false, (*[]*DivisionReward)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Week == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Week = nil
	if err = local.L.LoadWeek(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Week == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testDivisionRewardToOneSetOpDivisionUsingDivision(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a DivisionReward
	var b, c Division

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionRewardDBTypes, false, strmangle.SetComplement(divisionRewardPrimaryKeyColumns, divisionRewardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Division{&b, &c} {
		err = a.SetDivision(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Division != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DivisionRewards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DivisionID, x.ID) {
			t.Error("foreign key was wrong value", a.DivisionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DivisionID))
		reflect.Indirect(reflect.ValueOf(&a.DivisionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DivisionID, x.ID) {
			t.Error("foreign key was wrong value", a.DivisionID, x.ID)
		}
	}
}

func testDivisionRewardToOneRemoveOpDivisionUsingDivision(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a DivisionReward
	var b Division

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionRewardDBTypes, false, strmangle.SetComplement(divisionRewardPrimaryKeyColumns, divisionRewardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDivision(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDivision(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Division().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Division != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.DivisionID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.DivisionRewards) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDivisionRewardToOneSetOpRewardUsingReward(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a DivisionReward
	var b, c Reward

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionRewardDBTypes, false, strmangle.SetComplement(divisionRewardPrimaryKeyColumns, divisionRewardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, rewardDBTypes, false, strmangle.SetComplement(rewardPrimaryKeyColumns, rewardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, rewardDBTypes, false, strmangle.SetComplement(rewardPrimaryKeyColumns, rewardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Reward{&b, &c} {
		err = a.SetReward(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Reward != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DivisionRewards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.RewardID, x.ID) {
			t.Error("foreign key was wrong value", a.RewardID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RewardID))
		reflect.Indirect(reflect.ValueOf(&a.RewardID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.RewardID, x.ID) {
			t.Error("foreign key was wrong value", a.RewardID, x.ID)
		}
	}
}

func testDivisionRewardToOneRemoveOpRewardUsingReward(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a DivisionReward
	var b Reward

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionRewardDBTypes, false, strmangle.SetComplement(divisionRewardPrimaryKeyColumns, divisionRewardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, rewardDBTypes, false, strmangle.SetComplement(rewardPrimaryKeyColumns, rewardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetReward(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveReward(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Reward().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Reward != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.RewardID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.DivisionRewards) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDivisionRewardToOneSetOpGameWeekUsingWeek(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a DivisionReward
	var b, c GameWeek

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionRewardDBTypes, false, strmangle.SetComplement(divisionRewardPrimaryKeyColumns, divisionRewardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*GameWeek{&b, &c} {
		err = a.SetWeek(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Week != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.WeekDivisionRewards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.WeekID != x.ID {
			t.Error("foreign key was wrong value", a.WeekID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.WeekID))
		reflect.Indirect(reflect.ValueOf(&a.WeekID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.WeekID != x.ID {
			t.Error("foreign key was wrong value", a.WeekID, x.ID)
		}
	}
}

func testDivisionRewardsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DivisionReward{}
	if err = randomize.Struct(seed, o, divisionRewardDBTypes, true, divisionRewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testDivisionRewardsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DivisionReward{}
	if err = randomize.Struct(seed, o, divisionRewardDBTypes, true, divisionRewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DivisionRewardSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testDivisionRewardsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DivisionReward{}
	if err = randomize.Struct(seed, o, divisionRewardDBTypes, true, divisionRewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DivisionRewards().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	divisionRewardDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `MinPosition`: `integer`, `MaxPosition`: `integer`, `DivisionID`: `uuid`, `WeekID`: `uuid`, `RewardID`: `uuid`}
	_                     = bytes.MinRead
)

func testDivisionRewardsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(divisionRewardPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(divisionRewardAllColumns) == len(divisionRewardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DivisionReward{}
	if err = randomize.Struct(seed, o, divisionRewardDBTypes, true, divisionRewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DivisionRewards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, divisionRewardDBTypes, true, divisionRewardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDivisionRewardsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(divisionRewardAllColumns) == len(divisionRewardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DivisionReward{}
	if err = randomize.Struct(seed, o, divisionRewardDBTypes, true, divisionRewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DivisionRewards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, divisionRewardDBTypes, true, divisionRewardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(divisionRewardAllColumns, divisionRewardPrimaryKeyColumns) {
		fields = divisionRewardAllColumns
	} else {
		fields = strmangle.SetComplement(
			divisionRewardAllColumns,
			divisionRewardPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DivisionRewardSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDivisionRewardsUpsert(t *testing.T) {
	t.Parallel()

	if len(divisionRewardAllColumns) == len(divisionRewardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DivisionReward{}
	if err = randomize.Struct(seed, &o, divisionRewardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DivisionReward: %s", err)
	}

	count, err := DivisionRewards().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, divisionRewardDBTypes, false, divisionRewardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DivisionReward struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DivisionReward: %s", err)
	}

	count, err = DivisionRewards().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
