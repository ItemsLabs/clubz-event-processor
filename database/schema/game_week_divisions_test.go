// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGameWeekDivisions(t *testing.T) {
	t.Parallel()

	query := GameWeekDivisions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGameWeekDivisionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeekDivision{}
	if err = randomize.Struct(seed, o, gameWeekDivisionDBTypes, true, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GameWeekDivisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGameWeekDivisionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeekDivision{}
	if err = randomize.Struct(seed, o, gameWeekDivisionDBTypes, true, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GameWeekDivisions().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GameWeekDivisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGameWeekDivisionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeekDivision{}
	if err = randomize.Struct(seed, o, gameWeekDivisionDBTypes, true, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GameWeekDivisionSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GameWeekDivisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGameWeekDivisionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeekDivision{}
	if err = randomize.Struct(seed, o, gameWeekDivisionDBTypes, true, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GameWeekDivisionExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if GameWeekDivision exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GameWeekDivisionExists to return true, but got false.")
	}
}

func testGameWeekDivisionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeekDivision{}
	if err = randomize.Struct(seed, o, gameWeekDivisionDBTypes, true, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	gameWeekDivisionFound, err := FindGameWeekDivision(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if gameWeekDivisionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGameWeekDivisionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeekDivision{}
	if err = randomize.Struct(seed, o, gameWeekDivisionDBTypes, true, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GameWeekDivisions().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testGameWeekDivisionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeekDivision{}
	if err = randomize.Struct(seed, o, gameWeekDivisionDBTypes, true, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GameWeekDivisions().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGameWeekDivisionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gameWeekDivisionOne := &GameWeekDivision{}
	gameWeekDivisionTwo := &GameWeekDivision{}
	if err = randomize.Struct(seed, gameWeekDivisionOne, gameWeekDivisionDBTypes, false, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}
	if err = randomize.Struct(seed, gameWeekDivisionTwo, gameWeekDivisionDBTypes, false, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = gameWeekDivisionOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gameWeekDivisionTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GameWeekDivisions().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGameWeekDivisionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	gameWeekDivisionOne := &GameWeekDivision{}
	gameWeekDivisionTwo := &GameWeekDivision{}
	if err = randomize.Struct(seed, gameWeekDivisionOne, gameWeekDivisionDBTypes, false, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}
	if err = randomize.Struct(seed, gameWeekDivisionTwo, gameWeekDivisionDBTypes, false, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = gameWeekDivisionOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gameWeekDivisionTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GameWeekDivisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testGameWeekDivisionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeekDivision{}
	if err = randomize.Struct(seed, o, gameWeekDivisionDBTypes, true, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GameWeekDivisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGameWeekDivisionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeekDivision{}
	if err = randomize.Struct(seed, o, gameWeekDivisionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(gameWeekDivisionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GameWeekDivisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGameWeekDivisionToOneDivisionUsingDivision(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local GameWeekDivision
	var foreign Division

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gameWeekDivisionDBTypes, false, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, divisionDBTypes, false, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DivisionID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Division().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GameWeekDivisionSlice{&local}
	if err = local.L.LoadDivision(tx, false, (*[]*GameWeekDivision)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Division == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Division = nil
	if err = local.L.LoadDivision(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Division == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testGameWeekDivisionToOneGameWeekUsingWeek(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local GameWeekDivision
	var foreign GameWeek

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gameWeekDivisionDBTypes, false, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, gameWeekDBTypes, false, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.WeekID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Week().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GameWeekDivisionSlice{&local}
	if err = local.L.LoadWeek(tx, false, (*[]*GameWeekDivision)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Week == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Week = nil
	if err = local.L.LoadWeek(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Week == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testGameWeekDivisionToOneSetOpDivisionUsingDivision(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeekDivision
	var b, c Division

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDivisionDBTypes, false, strmangle.SetComplement(gameWeekDivisionPrimaryKeyColumns, gameWeekDivisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Division{&b, &c} {
		err = a.SetDivision(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Division != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GameWeekDivisions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DivisionID != x.ID {
			t.Error("foreign key was wrong value", a.DivisionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DivisionID))
		reflect.Indirect(reflect.ValueOf(&a.DivisionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DivisionID != x.ID {
			t.Error("foreign key was wrong value", a.DivisionID, x.ID)
		}
	}
}
func testGameWeekDivisionToOneSetOpGameWeekUsingWeek(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameWeekDivision
	var b, c GameWeek

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameWeekDivisionDBTypes, false, strmangle.SetComplement(gameWeekDivisionPrimaryKeyColumns, gameWeekDivisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*GameWeek{&b, &c} {
		err = a.SetWeek(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Week != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.WeekGameWeekDivisions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.WeekID != x.ID {
			t.Error("foreign key was wrong value", a.WeekID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.WeekID))
		reflect.Indirect(reflect.ValueOf(&a.WeekID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.WeekID != x.ID {
			t.Error("foreign key was wrong value", a.WeekID, x.ID)
		}
	}
}

func testGameWeekDivisionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeekDivision{}
	if err = randomize.Struct(seed, o, gameWeekDivisionDBTypes, true, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testGameWeekDivisionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeekDivision{}
	if err = randomize.Struct(seed, o, gameWeekDivisionDBTypes, true, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GameWeekDivisionSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testGameWeekDivisionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameWeekDivision{}
	if err = randomize.Struct(seed, o, gameWeekDivisionDBTypes, true, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GameWeekDivisions().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	gameWeekDivisionDBTypes = map[string]string{`ID`: `integer`, `Capacity`: `integer`, `PromotionCount`: `double precision`, `RelegationCount`: `double precision`, `DivisionID`: `uuid`, `WeekID`: `uuid`}
	_                       = bytes.MinRead
)

func testGameWeekDivisionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(gameWeekDivisionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(gameWeekDivisionAllColumns) == len(gameWeekDivisionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GameWeekDivision{}
	if err = randomize.Struct(seed, o, gameWeekDivisionDBTypes, true, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GameWeekDivisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gameWeekDivisionDBTypes, true, gameWeekDivisionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGameWeekDivisionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(gameWeekDivisionAllColumns) == len(gameWeekDivisionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GameWeekDivision{}
	if err = randomize.Struct(seed, o, gameWeekDivisionDBTypes, true, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GameWeekDivisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gameWeekDivisionDBTypes, true, gameWeekDivisionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(gameWeekDivisionAllColumns, gameWeekDivisionPrimaryKeyColumns) {
		fields = gameWeekDivisionAllColumns
	} else {
		fields = strmangle.SetComplement(
			gameWeekDivisionAllColumns,
			gameWeekDivisionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GameWeekDivisionSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGameWeekDivisionsUpsert(t *testing.T) {
	t.Parallel()

	if len(gameWeekDivisionAllColumns) == len(gameWeekDivisionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GameWeekDivision{}
	if err = randomize.Struct(seed, &o, gameWeekDivisionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GameWeekDivision: %s", err)
	}

	count, err := GameWeekDivisions().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, gameWeekDivisionDBTypes, false, gameWeekDivisionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GameWeekDivision struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GameWeekDivision: %s", err)
	}

	count, err = GameWeekDivisions().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
