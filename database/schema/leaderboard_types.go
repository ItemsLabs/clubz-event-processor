// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LeaderboardType is an object representing the database table.
type LeaderboardType struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`

	R *leaderboardTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L leaderboardTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LeaderboardTypeColumns = struct {
	ID          string
	Name        string
	Description string
}{
	ID:          "id",
	Name:        "name",
	Description: "description",
}

var LeaderboardTypeTableColumns = struct {
	ID          string
	Name        string
	Description string
}{
	ID:          "leaderboard_types.id",
	Name:        "leaderboard_types.name",
	Description: "leaderboard_types.description",
}

// Generated where

var LeaderboardTypeWhere = struct {
	ID          whereHelperint
	Name        whereHelperstring
	Description whereHelpernull_String
}{
	ID:          whereHelperint{field: "\"leaderboard_types\".\"id\""},
	Name:        whereHelperstring{field: "\"leaderboard_types\".\"name\""},
	Description: whereHelpernull_String{field: "\"leaderboard_types\".\"description\""},
}

// LeaderboardTypeRels is where relationship names are stored.
var LeaderboardTypeRels = struct {
	MatchLeaderboards string
}{
	MatchLeaderboards: "MatchLeaderboards",
}

// leaderboardTypeR is where relationships are stored.
type leaderboardTypeR struct {
	MatchLeaderboards MatchLeaderboardSlice `boil:"MatchLeaderboards" json:"MatchLeaderboards" toml:"MatchLeaderboards" yaml:"MatchLeaderboards"`
}

// NewStruct creates a new relationship struct
func (*leaderboardTypeR) NewStruct() *leaderboardTypeR {
	return &leaderboardTypeR{}
}

func (r *leaderboardTypeR) GetMatchLeaderboards() MatchLeaderboardSlice {
	if r == nil {
		return nil
	}
	return r.MatchLeaderboards
}

// leaderboardTypeL is where Load methods for each relationship are stored.
type leaderboardTypeL struct{}

var (
	leaderboardTypeAllColumns            = []string{"id", "name", "description"}
	leaderboardTypeColumnsWithoutDefault = []string{"name"}
	leaderboardTypeColumnsWithDefault    = []string{"id", "description"}
	leaderboardTypePrimaryKeyColumns     = []string{"id"}
	leaderboardTypeGeneratedColumns      = []string{}
)

type (
	// LeaderboardTypeSlice is an alias for a slice of pointers to LeaderboardType.
	// This should almost always be used instead of []LeaderboardType.
	LeaderboardTypeSlice []*LeaderboardType

	leaderboardTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	leaderboardTypeType                 = reflect.TypeOf(&LeaderboardType{})
	leaderboardTypeMapping              = queries.MakeStructMapping(leaderboardTypeType)
	leaderboardTypePrimaryKeyMapping, _ = queries.BindMapping(leaderboardTypeType, leaderboardTypeMapping, leaderboardTypePrimaryKeyColumns)
	leaderboardTypeInsertCacheMut       sync.RWMutex
	leaderboardTypeInsertCache          = make(map[string]insertCache)
	leaderboardTypeUpdateCacheMut       sync.RWMutex
	leaderboardTypeUpdateCache          = make(map[string]updateCache)
	leaderboardTypeUpsertCacheMut       sync.RWMutex
	leaderboardTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single leaderboardType record from the query.
func (q leaderboardTypeQuery) One(exec boil.Executor) (*LeaderboardType, error) {
	o := &LeaderboardType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for leaderboard_types")
	}

	return o, nil
}

// All returns all LeaderboardType records from the query.
func (q leaderboardTypeQuery) All(exec boil.Executor) (LeaderboardTypeSlice, error) {
	var o []*LeaderboardType

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to LeaderboardType slice")
	}

	return o, nil
}

// Count returns the count of all LeaderboardType records in the query.
func (q leaderboardTypeQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count leaderboard_types rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q leaderboardTypeQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if leaderboard_types exists")
	}

	return count > 0, nil
}

// MatchLeaderboards retrieves all the match_leaderboard's MatchLeaderboards with an executor.
func (o *LeaderboardType) MatchLeaderboards(mods ...qm.QueryMod) matchLeaderboardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"match_leaderboard\".\"leaderboard_type_id\"=?", o.ID),
	)

	return MatchLeaderboards(queryMods...)
}

// LoadMatchLeaderboards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (leaderboardTypeL) LoadMatchLeaderboards(e boil.Executor, singular bool, maybeLeaderboardType interface{}, mods queries.Applicator) error {
	var slice []*LeaderboardType
	var object *LeaderboardType

	if singular {
		var ok bool
		object, ok = maybeLeaderboardType.(*LeaderboardType)
		if !ok {
			object = new(LeaderboardType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLeaderboardType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLeaderboardType))
			}
		}
	} else {
		s, ok := maybeLeaderboardType.(*[]*LeaderboardType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLeaderboardType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLeaderboardType))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &leaderboardTypeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &leaderboardTypeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`match_leaderboard`),
		qm.WhereIn(`match_leaderboard.leaderboard_type_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load match_leaderboard")
	}

	var resultSlice []*MatchLeaderboard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice match_leaderboard")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on match_leaderboard")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for match_leaderboard")
	}

	if singular {
		object.R.MatchLeaderboards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchLeaderboardR{}
			}
			foreign.R.LeaderboardType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.LeaderboardTypeID) {
				local.R.MatchLeaderboards = append(local.R.MatchLeaderboards, foreign)
				if foreign.R == nil {
					foreign.R = &matchLeaderboardR{}
				}
				foreign.R.LeaderboardType = local
				break
			}
		}
	}

	return nil
}

// AddMatchLeaderboards adds the given related objects to the existing relationships
// of the leaderboard_type, optionally inserting them as new records.
// Appends related to o.R.MatchLeaderboards.
// Sets related.R.LeaderboardType appropriately.
func (o *LeaderboardType) AddMatchLeaderboards(exec boil.Executor, insert bool, related ...*MatchLeaderboard) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.LeaderboardTypeID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"match_leaderboard\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"leaderboard_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchLeaderboardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.LeaderboardTypeID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &leaderboardTypeR{
			MatchLeaderboards: related,
		}
	} else {
		o.R.MatchLeaderboards = append(o.R.MatchLeaderboards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchLeaderboardR{
				LeaderboardType: o,
			}
		} else {
			rel.R.LeaderboardType = o
		}
	}
	return nil
}

// SetMatchLeaderboards removes all previously related items of the
// leaderboard_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.LeaderboardType's MatchLeaderboards accordingly.
// Replaces o.R.MatchLeaderboards with related.
// Sets related.R.LeaderboardType's MatchLeaderboards accordingly.
func (o *LeaderboardType) SetMatchLeaderboards(exec boil.Executor, insert bool, related ...*MatchLeaderboard) error {
	query := "update \"match_leaderboard\" set \"leaderboard_type_id\" = null where \"leaderboard_type_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.MatchLeaderboards {
			queries.SetScanner(&rel.LeaderboardTypeID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.LeaderboardType = nil
		}
		o.R.MatchLeaderboards = nil
	}

	return o.AddMatchLeaderboards(exec, insert, related...)
}

// RemoveMatchLeaderboards relationships from objects passed in.
// Removes related items from R.MatchLeaderboards (uses pointer comparison, removal does not keep order)
// Sets related.R.LeaderboardType.
func (o *LeaderboardType) RemoveMatchLeaderboards(exec boil.Executor, related ...*MatchLeaderboard) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.LeaderboardTypeID, nil)
		if rel.R != nil {
			rel.R.LeaderboardType = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("leaderboard_type_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MatchLeaderboards {
			if rel != ri {
				continue
			}

			ln := len(o.R.MatchLeaderboards)
			if ln > 1 && i < ln-1 {
				o.R.MatchLeaderboards[i] = o.R.MatchLeaderboards[ln-1]
			}
			o.R.MatchLeaderboards = o.R.MatchLeaderboards[:ln-1]
			break
		}
	}

	return nil
}

// LeaderboardTypes retrieves all the records using an executor.
func LeaderboardTypes(mods ...qm.QueryMod) leaderboardTypeQuery {
	mods = append(mods, qm.From("\"leaderboard_types\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"leaderboard_types\".*"})
	}

	return leaderboardTypeQuery{q}
}

// FindLeaderboardType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLeaderboardType(exec boil.Executor, iD int, selectCols ...string) (*LeaderboardType, error) {
	leaderboardTypeObj := &LeaderboardType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"leaderboard_types\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, leaderboardTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from leaderboard_types")
	}

	return leaderboardTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LeaderboardType) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no leaderboard_types provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(leaderboardTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	leaderboardTypeInsertCacheMut.RLock()
	cache, cached := leaderboardTypeInsertCache[key]
	leaderboardTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			leaderboardTypeAllColumns,
			leaderboardTypeColumnsWithDefault,
			leaderboardTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(leaderboardTypeType, leaderboardTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(leaderboardTypeType, leaderboardTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"leaderboard_types\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"leaderboard_types\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into leaderboard_types")
	}

	if !cached {
		leaderboardTypeInsertCacheMut.Lock()
		leaderboardTypeInsertCache[key] = cache
		leaderboardTypeInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the LeaderboardType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LeaderboardType) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	leaderboardTypeUpdateCacheMut.RLock()
	cache, cached := leaderboardTypeUpdateCache[key]
	leaderboardTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			leaderboardTypeAllColumns,
			leaderboardTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update leaderboard_types, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"leaderboard_types\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, leaderboardTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(leaderboardTypeType, leaderboardTypeMapping, append(wl, leaderboardTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update leaderboard_types row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for leaderboard_types")
	}

	if !cached {
		leaderboardTypeUpdateCacheMut.Lock()
		leaderboardTypeUpdateCache[key] = cache
		leaderboardTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q leaderboardTypeQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for leaderboard_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for leaderboard_types")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LeaderboardTypeSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), leaderboardTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"leaderboard_types\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, leaderboardTypePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in leaderboardType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all leaderboardType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LeaderboardType) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no leaderboard_types provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(leaderboardTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	leaderboardTypeUpsertCacheMut.RLock()
	cache, cached := leaderboardTypeUpsertCache[key]
	leaderboardTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			leaderboardTypeAllColumns,
			leaderboardTypeColumnsWithDefault,
			leaderboardTypeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			leaderboardTypeAllColumns,
			leaderboardTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert leaderboard_types, could not build update column list")
		}

		ret := strmangle.SetComplement(leaderboardTypeAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(leaderboardTypePrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert leaderboard_types, could not build conflict column list")
			}

			conflict = make([]string, len(leaderboardTypePrimaryKeyColumns))
			copy(conflict, leaderboardTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"leaderboard_types\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(leaderboardTypeType, leaderboardTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(leaderboardTypeType, leaderboardTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert leaderboard_types")
	}

	if !cached {
		leaderboardTypeUpsertCacheMut.Lock()
		leaderboardTypeUpsertCache[key] = cache
		leaderboardTypeUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single LeaderboardType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LeaderboardType) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no LeaderboardType provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), leaderboardTypePrimaryKeyMapping)
	sql := "DELETE FROM \"leaderboard_types\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from leaderboard_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for leaderboard_types")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q leaderboardTypeQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no leaderboardTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from leaderboard_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for leaderboard_types")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LeaderboardTypeSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), leaderboardTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"leaderboard_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, leaderboardTypePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from leaderboardType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for leaderboard_types")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LeaderboardType) Reload(exec boil.Executor) error {
	ret, err := FindLeaderboardType(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LeaderboardTypeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LeaderboardTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), leaderboardTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"leaderboard_types\".* FROM \"leaderboard_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, leaderboardTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in LeaderboardTypeSlice")
	}

	*o = slice

	return nil
}

// LeaderboardTypeExists checks if the LeaderboardType row exists.
func LeaderboardTypeExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"leaderboard_types\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if leaderboard_types exists")
	}

	return exists, nil
}

// Exists checks if the LeaderboardType row exists.
func (o *LeaderboardType) Exists(exec boil.Executor) (bool, error) {
	return LeaderboardTypeExists(exec, o.ID)
}
