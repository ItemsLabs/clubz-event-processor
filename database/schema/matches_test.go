// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMatches(t *testing.T) {
	t.Parallel()

	query := Matches()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMatchesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Match{}
	if err = randomize.Struct(seed, o, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Matches().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMatchesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Match{}
	if err = randomize.Struct(seed, o, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Matches().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Matches().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMatchesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Match{}
	if err = randomize.Struct(seed, o, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MatchSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Matches().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMatchesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Match{}
	if err = randomize.Struct(seed, o, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MatchExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Match exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MatchExists to return true, but got false.")
	}
}

func testMatchesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Match{}
	if err = randomize.Struct(seed, o, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	matchFound, err := FindMatch(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if matchFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMatchesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Match{}
	if err = randomize.Struct(seed, o, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Matches().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testMatchesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Match{}
	if err = randomize.Struct(seed, o, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Matches().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMatchesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	matchOne := &Match{}
	matchTwo := &Match{}
	if err = randomize.Struct(seed, matchOne, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}
	if err = randomize.Struct(seed, matchTwo, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = matchOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = matchTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Matches().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMatchesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	matchOne := &Match{}
	matchTwo := &Match{}
	if err = randomize.Struct(seed, matchOne, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}
	if err = randomize.Struct(seed, matchTwo, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = matchOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = matchTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Matches().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testMatchesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Match{}
	if err = randomize.Struct(seed, o, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Matches().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMatchesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Match{}
	if err = randomize.Struct(seed, o, matchDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(matchColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Matches().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMatchToManyMatchIDAppInboxes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c AppInbox

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, appInboxDBTypes, false, appInboxColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, appInboxDBTypes, false, appInboxColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.MatchIDID, a.ID)
	queries.Assign(&c.MatchIDID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MatchIDAppInboxes().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.MatchIDID, b.MatchIDID) {
			bFound = true
		}
		if queries.Equal(v.MatchIDID, c.MatchIDID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MatchSlice{&a}
	if err = a.L.LoadMatchIDAppInboxes(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchIDAppInboxes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MatchIDAppInboxes = nil
	if err = a.L.LoadMatchIDAppInboxes(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchIDAppInboxes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMatchToManyChatRooms(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c ChatRoom

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, chatRoomDBTypes, false, chatRoomColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, chatRoomDBTypes, false, chatRoomColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.MatchID, a.ID)
	queries.Assign(&c.MatchID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ChatRooms().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.MatchID, b.MatchID) {
			bFound = true
		}
		if queries.Equal(v.MatchID, c.MatchID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MatchSlice{&a}
	if err = a.L.LoadChatRooms(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ChatRooms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ChatRooms = nil
	if err = a.L.LoadChatRooms(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ChatRooms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMatchToManyGames(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c Game

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, gameDBTypes, false, gameColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameDBTypes, false, gameColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.MatchID = a.ID
	c.MatchID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Games().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.MatchID == b.MatchID {
			bFound = true
		}
		if v.MatchID == c.MatchID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MatchSlice{&a}
	if err = a.L.LoadGames(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Games); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Games = nil
	if err = a.L.LoadGames(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Games); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMatchToManyMatchEventProcessors(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c MatchEventProcessor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchEventProcessorDBTypes, false, matchEventProcessorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchEventProcessorDBTypes, false, matchEventProcessorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.MatchID = a.ID
	c.MatchID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MatchEventProcessors().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.MatchID == b.MatchID {
			bFound = true
		}
		if v.MatchID == c.MatchID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MatchSlice{&a}
	if err = a.L.LoadMatchEventProcessors(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchEventProcessors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MatchEventProcessors = nil
	if err = a.L.LoadMatchEventProcessors(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchEventProcessors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMatchToManyMatchEventSimulations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c MatchEventSimulation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchEventSimulationDBTypes, false, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchEventSimulationDBTypes, false, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.MatchID = a.ID
	c.MatchID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MatchEventSimulations().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.MatchID == b.MatchID {
			bFound = true
		}
		if v.MatchID == c.MatchID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MatchSlice{&a}
	if err = a.L.LoadMatchEventSimulations(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchEventSimulations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MatchEventSimulations = nil
	if err = a.L.LoadMatchEventSimulations(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchEventSimulations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMatchToManyMatchEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c MatchEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchEventDBTypes, false, matchEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchEventDBTypes, false, matchEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.MatchID = a.ID
	c.MatchID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MatchEvents().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.MatchID == b.MatchID {
			bFound = true
		}
		if v.MatchID == c.MatchID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MatchSlice{&a}
	if err = a.L.LoadMatchEvents(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MatchEvents = nil
	if err = a.L.LoadMatchEvents(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMatchToManyMatchHeadlines(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c MatchHeadline

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchHeadlineDBTypes, false, matchHeadlineColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchHeadlineDBTypes, false, matchHeadlineColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.MatchID = a.ID
	c.MatchID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MatchHeadlines().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.MatchID == b.MatchID {
			bFound = true
		}
		if v.MatchID == c.MatchID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MatchSlice{&a}
	if err = a.L.LoadMatchHeadlines(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchHeadlines); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MatchHeadlines = nil
	if err = a.L.LoadMatchHeadlines(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchHeadlines); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMatchToManyMatchLeaderboards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c MatchLeaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchLeaderboardDBTypes, false, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchLeaderboardDBTypes, false, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.MatchID = a.ID
	c.MatchID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MatchLeaderboards().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.MatchID == b.MatchID {
			bFound = true
		}
		if v.MatchID == c.MatchID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MatchSlice{&a}
	if err = a.L.LoadMatchLeaderboards(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchLeaderboards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MatchLeaderboards = nil
	if err = a.L.LoadMatchLeaderboards(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchLeaderboards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMatchToManyMatchNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c MatchNotification

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchNotificationDBTypes, false, matchNotificationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchNotificationDBTypes, false, matchNotificationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.MatchID = a.ID
	c.MatchID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MatchNotifications().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.MatchID == b.MatchID {
			bFound = true
		}
		if v.MatchID == c.MatchID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MatchSlice{&a}
	if err = a.L.LoadMatchNotifications(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchNotifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MatchNotifications = nil
	if err = a.L.LoadMatchNotifications(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchNotifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMatchToManyMatchPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c MatchPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchPlayerDBTypes, false, matchPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchPlayerDBTypes, false, matchPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.MatchID = a.ID
	c.MatchID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MatchPlayers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.MatchID == b.MatchID {
			bFound = true
		}
		if v.MatchID == c.MatchID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MatchSlice{&a}
	if err = a.L.LoadMatchPlayers(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MatchPlayers = nil
	if err = a.L.LoadMatchPlayers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMatchToManyMatchRewards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c MatchReward

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchRewardDBTypes, false, matchRewardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchRewardDBTypes, false, matchRewardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.MatchID = a.ID
	c.MatchID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MatchRewards().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.MatchID == b.MatchID {
			bFound = true
		}
		if v.MatchID == c.MatchID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MatchSlice{&a}
	if err = a.L.LoadMatchRewards(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchRewards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MatchRewards = nil
	if err = a.L.LoadMatchRewards(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchRewards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMatchToManySimulationFromMatchMatches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SimulationFromMatchID, a.ID)
	queries.Assign(&c.SimulationFromMatchID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SimulationFromMatchMatches().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SimulationFromMatchID, b.SimulationFromMatchID) {
			bFound = true
		}
		if queries.Equal(v.SimulationFromMatchID, c.SimulationFromMatchID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MatchSlice{&a}
	if err = a.L.LoadSimulationFromMatchMatches(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SimulationFromMatchMatches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SimulationFromMatchMatches = nil
	if err = a.L.LoadSimulationFromMatchMatches(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SimulationFromMatchMatches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMatchToManyOptaFeedItems(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c OptaFeedItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, optaFeedItemDBTypes, false, optaFeedItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, optaFeedItemDBTypes, false, optaFeedItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.MatchID = a.ID
	c.MatchID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OptaFeedItems().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.MatchID == b.MatchID {
			bFound = true
		}
		if v.MatchID == c.MatchID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MatchSlice{&a}
	if err = a.L.LoadOptaFeedItems(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OptaFeedItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OptaFeedItems = nil
	if err = a.L.LoadOptaFeedItems(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OptaFeedItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMatchToManyOptaFeeds(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c OptaFeed

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, optaFeedDBTypes, false, optaFeedColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, optaFeedDBTypes, false, optaFeedColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.MatchID, a.ID)
	queries.Assign(&c.MatchID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OptaFeeds().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.MatchID, b.MatchID) {
			bFound = true
		}
		if queries.Equal(v.MatchID, c.MatchID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MatchSlice{&a}
	if err = a.L.LoadOptaFeeds(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OptaFeeds); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OptaFeeds = nil
	if err = a.L.LoadOptaFeeds(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OptaFeeds); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMatchToManyPushNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c PushNotification

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pushNotificationDBTypes, false, pushNotificationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pushNotificationDBTypes, false, pushNotificationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.MatchID, a.ID)
	queries.Assign(&c.MatchID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PushNotifications().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.MatchID, b.MatchID) {
			bFound = true
		}
		if queries.Equal(v.MatchID, c.MatchID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MatchSlice{&a}
	if err = a.L.LoadPushNotifications(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PushNotifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PushNotifications = nil
	if err = a.L.LoadPushNotifications(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PushNotifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMatchToManyTransactions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.MatchID, a.ID)
	queries.Assign(&c.MatchID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Transactions().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.MatchID, b.MatchID) {
			bFound = true
		}
		if queries.Equal(v.MatchID, c.MatchID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MatchSlice{&a}
	if err = a.L.LoadTransactions(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Transactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Transactions = nil
	if err = a.L.LoadTransactions(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Transactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMatchToManyAddOpMatchIDAppInboxes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e AppInbox

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AppInbox{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AppInbox{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMatchIDAppInboxes(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.MatchIDID) {
			t.Error("foreign key was wrong value", a.ID, first.MatchIDID)
		}
		if !queries.Equal(a.ID, second.MatchIDID) {
			t.Error("foreign key was wrong value", a.ID, second.MatchIDID)
		}

		if first.R.MatchID != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.MatchID != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MatchIDAppInboxes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MatchIDAppInboxes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MatchIDAppInboxes().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMatchToManySetOpMatchIDAppInboxes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e AppInbox

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AppInbox{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMatchIDAppInboxes(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MatchIDAppInboxes().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMatchIDAppInboxes(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MatchIDAppInboxes().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MatchIDID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MatchIDID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.MatchIDID) {
		t.Error("foreign key was wrong value", a.ID, d.MatchIDID)
	}
	if !queries.Equal(a.ID, e.MatchIDID) {
		t.Error("foreign key was wrong value", a.ID, e.MatchIDID)
	}

	if b.R.MatchID != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.MatchID != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.MatchID != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.MatchID != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.MatchIDAppInboxes[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.MatchIDAppInboxes[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMatchToManyRemoveOpMatchIDAppInboxes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e AppInbox

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AppInbox{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMatchIDAppInboxes(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MatchIDAppInboxes().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMatchIDAppInboxes(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MatchIDAppInboxes().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MatchIDID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MatchIDID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.MatchID != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.MatchID != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.MatchID != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.MatchID != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.MatchIDAppInboxes) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.MatchIDAppInboxes[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.MatchIDAppInboxes[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMatchToManyAddOpChatRooms(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e ChatRoom

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ChatRoom{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chatRoomDBTypes, false, strmangle.SetComplement(chatRoomPrimaryKeyColumns, chatRoomColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ChatRoom{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddChatRooms(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.MatchID) {
			t.Error("foreign key was wrong value", a.ID, first.MatchID)
		}
		if !queries.Equal(a.ID, second.MatchID) {
			t.Error("foreign key was wrong value", a.ID, second.MatchID)
		}

		if first.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ChatRooms[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ChatRooms[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ChatRooms().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMatchToManySetOpChatRooms(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e ChatRoom

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ChatRoom{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chatRoomDBTypes, false, strmangle.SetComplement(chatRoomPrimaryKeyColumns, chatRoomColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetChatRooms(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ChatRooms().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetChatRooms(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ChatRooms().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MatchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MatchID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.MatchID) {
		t.Error("foreign key was wrong value", a.ID, d.MatchID)
	}
	if !queries.Equal(a.ID, e.MatchID) {
		t.Error("foreign key was wrong value", a.ID, e.MatchID)
	}

	if b.R.Match != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Match != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Match != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Match != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ChatRooms[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ChatRooms[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMatchToManyRemoveOpChatRooms(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e ChatRoom

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ChatRoom{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chatRoomDBTypes, false, strmangle.SetComplement(chatRoomPrimaryKeyColumns, chatRoomColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddChatRooms(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ChatRooms().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveChatRooms(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ChatRooms().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MatchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MatchID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Match != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Match != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Match != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Match != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ChatRooms) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ChatRooms[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ChatRooms[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMatchToManyAddOpGames(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e Game

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Game{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Game{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGames(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.MatchID {
			t.Error("foreign key was wrong value", a.ID, first.MatchID)
		}
		if a.ID != second.MatchID {
			t.Error("foreign key was wrong value", a.ID, second.MatchID)
		}

		if first.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Games[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Games[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Games().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMatchToManyAddOpMatchEventProcessors(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e MatchEventProcessor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchEventProcessor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchEventProcessorDBTypes, false, strmangle.SetComplement(matchEventProcessorPrimaryKeyColumns, matchEventProcessorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MatchEventProcessor{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMatchEventProcessors(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.MatchID {
			t.Error("foreign key was wrong value", a.ID, first.MatchID)
		}
		if a.ID != second.MatchID {
			t.Error("foreign key was wrong value", a.ID, second.MatchID)
		}

		if first.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MatchEventProcessors[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MatchEventProcessors[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MatchEventProcessors().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMatchToManyAddOpMatchEventSimulations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e MatchEventSimulation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchEventSimulation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchEventSimulationDBTypes, false, strmangle.SetComplement(matchEventSimulationPrimaryKeyColumns, matchEventSimulationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MatchEventSimulation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMatchEventSimulations(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.MatchID {
			t.Error("foreign key was wrong value", a.ID, first.MatchID)
		}
		if a.ID != second.MatchID {
			t.Error("foreign key was wrong value", a.ID, second.MatchID)
		}

		if first.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MatchEventSimulations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MatchEventSimulations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MatchEventSimulations().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMatchToManyAddOpMatchEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e MatchEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MatchEvent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMatchEvents(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.MatchID {
			t.Error("foreign key was wrong value", a.ID, first.MatchID)
		}
		if a.ID != second.MatchID {
			t.Error("foreign key was wrong value", a.ID, second.MatchID)
		}

		if first.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MatchEvents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MatchEvents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MatchEvents().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMatchToManyAddOpMatchHeadlines(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e MatchHeadline

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchHeadline{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchHeadlineDBTypes, false, strmangle.SetComplement(matchHeadlinePrimaryKeyColumns, matchHeadlineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MatchHeadline{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMatchHeadlines(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.MatchID {
			t.Error("foreign key was wrong value", a.ID, first.MatchID)
		}
		if a.ID != second.MatchID {
			t.Error("foreign key was wrong value", a.ID, second.MatchID)
		}

		if first.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MatchHeadlines[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MatchHeadlines[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MatchHeadlines().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMatchToManyAddOpMatchLeaderboards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e MatchLeaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchLeaderboard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MatchLeaderboard{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMatchLeaderboards(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.MatchID {
			t.Error("foreign key was wrong value", a.ID, first.MatchID)
		}
		if a.ID != second.MatchID {
			t.Error("foreign key was wrong value", a.ID, second.MatchID)
		}

		if first.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MatchLeaderboards[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MatchLeaderboards[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MatchLeaderboards().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMatchToManyAddOpMatchNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e MatchNotification

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchNotification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchNotificationDBTypes, false, strmangle.SetComplement(matchNotificationPrimaryKeyColumns, matchNotificationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MatchNotification{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMatchNotifications(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.MatchID {
			t.Error("foreign key was wrong value", a.ID, first.MatchID)
		}
		if a.ID != second.MatchID {
			t.Error("foreign key was wrong value", a.ID, second.MatchID)
		}

		if first.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MatchNotifications[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MatchNotifications[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MatchNotifications().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMatchToManyAddOpMatchPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e MatchPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchPlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchPlayerDBTypes, false, strmangle.SetComplement(matchPlayerPrimaryKeyColumns, matchPlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MatchPlayer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMatchPlayers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.MatchID {
			t.Error("foreign key was wrong value", a.ID, first.MatchID)
		}
		if a.ID != second.MatchID {
			t.Error("foreign key was wrong value", a.ID, second.MatchID)
		}

		if first.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MatchPlayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MatchPlayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MatchPlayers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMatchToManyAddOpMatchRewards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e MatchReward

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchReward{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchRewardDBTypes, false, strmangle.SetComplement(matchRewardPrimaryKeyColumns, matchRewardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MatchReward{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMatchRewards(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.MatchID {
			t.Error("foreign key was wrong value", a.ID, first.MatchID)
		}
		if a.ID != second.MatchID {
			t.Error("foreign key was wrong value", a.ID, second.MatchID)
		}

		if first.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MatchRewards[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MatchRewards[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MatchRewards().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMatchToManyAddOpSimulationFromMatchMatches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Match{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSimulationFromMatchMatches(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SimulationFromMatchID) {
			t.Error("foreign key was wrong value", a.ID, first.SimulationFromMatchID)
		}
		if !queries.Equal(a.ID, second.SimulationFromMatchID) {
			t.Error("foreign key was wrong value", a.ID, second.SimulationFromMatchID)
		}

		if first.R.SimulationFromMatch != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SimulationFromMatch != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SimulationFromMatchMatches[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SimulationFromMatchMatches[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SimulationFromMatchMatches().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMatchToManySetOpSimulationFromMatchMatches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSimulationFromMatchMatches(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SimulationFromMatchMatches().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSimulationFromMatchMatches(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SimulationFromMatchMatches().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SimulationFromMatchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SimulationFromMatchID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SimulationFromMatchID) {
		t.Error("foreign key was wrong value", a.ID, d.SimulationFromMatchID)
	}
	if !queries.Equal(a.ID, e.SimulationFromMatchID) {
		t.Error("foreign key was wrong value", a.ID, e.SimulationFromMatchID)
	}

	if b.R.SimulationFromMatch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SimulationFromMatch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SimulationFromMatch != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SimulationFromMatch != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.SimulationFromMatchMatches[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.SimulationFromMatchMatches[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMatchToManyRemoveOpSimulationFromMatchMatches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSimulationFromMatchMatches(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SimulationFromMatchMatches().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSimulationFromMatchMatches(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SimulationFromMatchMatches().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SimulationFromMatchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SimulationFromMatchID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.SimulationFromMatch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SimulationFromMatch != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SimulationFromMatch != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.SimulationFromMatch != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.SimulationFromMatchMatches) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.SimulationFromMatchMatches[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.SimulationFromMatchMatches[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMatchToManyAddOpOptaFeedItems(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e OptaFeedItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OptaFeedItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, optaFeedItemDBTypes, false, strmangle.SetComplement(optaFeedItemPrimaryKeyColumns, optaFeedItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OptaFeedItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOptaFeedItems(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.MatchID {
			t.Error("foreign key was wrong value", a.ID, first.MatchID)
		}
		if a.ID != second.MatchID {
			t.Error("foreign key was wrong value", a.ID, second.MatchID)
		}

		if first.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OptaFeedItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OptaFeedItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OptaFeedItems().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMatchToManyAddOpOptaFeeds(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e OptaFeed

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OptaFeed{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, optaFeedDBTypes, false, strmangle.SetComplement(optaFeedPrimaryKeyColumns, optaFeedColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OptaFeed{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOptaFeeds(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.MatchID) {
			t.Error("foreign key was wrong value", a.ID, first.MatchID)
		}
		if !queries.Equal(a.ID, second.MatchID) {
			t.Error("foreign key was wrong value", a.ID, second.MatchID)
		}

		if first.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OptaFeeds[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OptaFeeds[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OptaFeeds().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMatchToManySetOpOptaFeeds(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e OptaFeed

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OptaFeed{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, optaFeedDBTypes, false, strmangle.SetComplement(optaFeedPrimaryKeyColumns, optaFeedColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOptaFeeds(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OptaFeeds().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOptaFeeds(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OptaFeeds().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MatchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MatchID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.MatchID) {
		t.Error("foreign key was wrong value", a.ID, d.MatchID)
	}
	if !queries.Equal(a.ID, e.MatchID) {
		t.Error("foreign key was wrong value", a.ID, e.MatchID)
	}

	if b.R.Match != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Match != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Match != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Match != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OptaFeeds[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OptaFeeds[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMatchToManyRemoveOpOptaFeeds(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e OptaFeed

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OptaFeed{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, optaFeedDBTypes, false, strmangle.SetComplement(optaFeedPrimaryKeyColumns, optaFeedColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOptaFeeds(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OptaFeeds().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOptaFeeds(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OptaFeeds().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MatchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MatchID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Match != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Match != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Match != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Match != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OptaFeeds) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OptaFeeds[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OptaFeeds[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMatchToManyAddOpPushNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e PushNotification

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PushNotification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pushNotificationDBTypes, false, strmangle.SetComplement(pushNotificationPrimaryKeyColumns, pushNotificationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PushNotification{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPushNotifications(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.MatchID) {
			t.Error("foreign key was wrong value", a.ID, first.MatchID)
		}
		if !queries.Equal(a.ID, second.MatchID) {
			t.Error("foreign key was wrong value", a.ID, second.MatchID)
		}

		if first.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PushNotifications[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PushNotifications[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PushNotifications().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMatchToManySetOpPushNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e PushNotification

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PushNotification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pushNotificationDBTypes, false, strmangle.SetComplement(pushNotificationPrimaryKeyColumns, pushNotificationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPushNotifications(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PushNotifications().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPushNotifications(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PushNotifications().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MatchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MatchID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.MatchID) {
		t.Error("foreign key was wrong value", a.ID, d.MatchID)
	}
	if !queries.Equal(a.ID, e.MatchID) {
		t.Error("foreign key was wrong value", a.ID, e.MatchID)
	}

	if b.R.Match != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Match != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Match != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Match != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PushNotifications[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PushNotifications[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMatchToManyRemoveOpPushNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e PushNotification

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PushNotification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pushNotificationDBTypes, false, strmangle.SetComplement(pushNotificationPrimaryKeyColumns, pushNotificationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPushNotifications(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PushNotifications().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePushNotifications(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PushNotifications().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MatchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MatchID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Match != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Match != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Match != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Match != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PushNotifications) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PushNotifications[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PushNotifications[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMatchToManyAddOpTransactions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Transaction{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTransactions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.MatchID) {
			t.Error("foreign key was wrong value", a.ID, first.MatchID)
		}
		if !queries.Equal(a.ID, second.MatchID) {
			t.Error("foreign key was wrong value", a.ID, second.MatchID)
		}

		if first.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Match != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Transactions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Transactions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Transactions().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMatchToManySetOpTransactions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTransactions(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Transactions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTransactions(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Transactions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MatchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MatchID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.MatchID) {
		t.Error("foreign key was wrong value", a.ID, d.MatchID)
	}
	if !queries.Equal(a.ID, e.MatchID) {
		t.Error("foreign key was wrong value", a.ID, e.MatchID)
	}

	if b.R.Match != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Match != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Match != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Match != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Transactions[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Transactions[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMatchToManyRemoveOpTransactions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTransactions(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Transactions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTransactions(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Transactions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MatchID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MatchID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Match != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Match != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Match != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Match != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Transactions) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Transactions[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Transactions[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMatchToOneTeamUsingAwayTeam(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Match
	var foreign Team

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AwayTeamID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.AwayTeam().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchSlice{&local}
	if err = local.L.LoadAwayTeam(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AwayTeam == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.AwayTeam = nil
	if err = local.L.LoadAwayTeam(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AwayTeam == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchToOneCompetitionUsingCompetition(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Match
	var foreign Competition

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, competitionDBTypes, false, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CompetitionID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Competition().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchSlice{&local}
	if err = local.L.LoadCompetition(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Competition == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Competition = nil
	if err = local.L.LoadCompetition(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Competition == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchToOneCompetitionEditionUsingEdition(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Match
	var foreign CompetitionEdition

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, competitionEditionDBTypes, false, competitionEditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionEdition struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.EditionID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Edition().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchSlice{&local}
	if err = local.L.LoadEdition(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Edition == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Edition = nil
	if err = local.L.LoadEdition(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Edition == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchToOneTeamUsingHomeTeam(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Match
	var foreign Team

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.HomeTeamID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.HomeTeam().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchSlice{&local}
	if err = local.L.LoadHomeTeam(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.HomeTeam == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.HomeTeam = nil
	if err = local.L.LoadHomeTeam(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.HomeTeam == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchToOneMatchDayUsingMatchDay(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Match
	var foreign MatchDay

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, matchDayDBTypes, false, matchDayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchDay struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.MatchDayID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.MatchDay().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchSlice{&local}
	if err = local.L.LoadMatchDay(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MatchDay == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.MatchDay = nil
	if err = local.L.LoadMatchDay(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MatchDay == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchToOneSeasonUsingSeason(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Match
	var foreign Season

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, seasonDBTypes, false, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SeasonID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Season().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchSlice{&local}
	if err = local.L.LoadSeason(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Season == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Season = nil
	if err = local.L.LoadSeason(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Season == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchToOneMatchUsingSimulationFromMatch(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Match
	var foreign Match

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SimulationFromMatchID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SimulationFromMatch().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchSlice{&local}
	if err = local.L.LoadSimulationFromMatch(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SimulationFromMatch == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SimulationFromMatch = nil
	if err = local.L.LoadSimulationFromMatch(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SimulationFromMatch == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchToOneSportUsingSport(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Match
	var foreign Sport

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, sportDBTypes, false, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SportID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Sport().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchSlice{&local}
	if err = local.L.LoadSport(tx, false, (*[]*Match)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sport == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Sport = nil
	if err = local.L.LoadSport(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sport == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchToOneSetOpTeamUsingAwayTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Team{&b, &c} {
		err = a.SetAwayTeam(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.AwayTeam != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AwayTeamMatches[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AwayTeamID != x.ID {
			t.Error("foreign key was wrong value", a.AwayTeamID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AwayTeamID))
		reflect.Indirect(reflect.ValueOf(&a.AwayTeamID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AwayTeamID != x.ID {
			t.Error("foreign key was wrong value", a.AwayTeamID, x.ID)
		}
	}
}
func testMatchToOneSetOpCompetitionUsingCompetition(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c Competition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, competitionDBTypes, false, strmangle.SetComplement(competitionPrimaryKeyColumns, competitionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, competitionDBTypes, false, strmangle.SetComplement(competitionPrimaryKeyColumns, competitionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Competition{&b, &c} {
		err = a.SetCompetition(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Competition != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Matches[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CompetitionID != x.ID {
			t.Error("foreign key was wrong value", a.CompetitionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CompetitionID))
		reflect.Indirect(reflect.ValueOf(&a.CompetitionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CompetitionID != x.ID {
			t.Error("foreign key was wrong value", a.CompetitionID, x.ID)
		}
	}
}
func testMatchToOneSetOpCompetitionEditionUsingEdition(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c CompetitionEdition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, competitionEditionDBTypes, false, strmangle.SetComplement(competitionEditionPrimaryKeyColumns, competitionEditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, competitionEditionDBTypes, false, strmangle.SetComplement(competitionEditionPrimaryKeyColumns, competitionEditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*CompetitionEdition{&b, &c} {
		err = a.SetEdition(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Edition != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.EditionMatches[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.EditionID, x.ID) {
			t.Error("foreign key was wrong value", a.EditionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EditionID))
		reflect.Indirect(reflect.ValueOf(&a.EditionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.EditionID, x.ID) {
			t.Error("foreign key was wrong value", a.EditionID, x.ID)
		}
	}
}

func testMatchToOneRemoveOpCompetitionEditionUsingEdition(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b CompetitionEdition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, competitionEditionDBTypes, false, strmangle.SetComplement(competitionEditionPrimaryKeyColumns, competitionEditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetEdition(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveEdition(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Edition().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Edition != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.EditionID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.EditionMatches) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMatchToOneSetOpTeamUsingHomeTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Team{&b, &c} {
		err = a.SetHomeTeam(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.HomeTeam != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.HomeTeamMatches[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.HomeTeamID != x.ID {
			t.Error("foreign key was wrong value", a.HomeTeamID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.HomeTeamID))
		reflect.Indirect(reflect.ValueOf(&a.HomeTeamID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.HomeTeamID != x.ID {
			t.Error("foreign key was wrong value", a.HomeTeamID, x.ID)
		}
	}
}
func testMatchToOneSetOpMatchDayUsingMatchDay(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c MatchDay

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchDayDBTypes, false, strmangle.SetComplement(matchDayPrimaryKeyColumns, matchDayColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDayDBTypes, false, strmangle.SetComplement(matchDayPrimaryKeyColumns, matchDayColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MatchDay{&b, &c} {
		err = a.SetMatchDay(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.MatchDay != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Matches[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.MatchDayID, x.ID) {
			t.Error("foreign key was wrong value", a.MatchDayID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MatchDayID))
		reflect.Indirect(reflect.ValueOf(&a.MatchDayID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.MatchDayID, x.ID) {
			t.Error("foreign key was wrong value", a.MatchDayID, x.ID)
		}
	}
}

func testMatchToOneRemoveOpMatchDayUsingMatchDay(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b MatchDay

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchDayDBTypes, false, strmangle.SetComplement(matchDayPrimaryKeyColumns, matchDayColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetMatchDay(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveMatchDay(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.MatchDay().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.MatchDay != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.MatchDayID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Matches) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMatchToOneSetOpSeasonUsingSeason(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c Season

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, seasonDBTypes, false, strmangle.SetComplement(seasonPrimaryKeyColumns, seasonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, seasonDBTypes, false, strmangle.SetComplement(seasonPrimaryKeyColumns, seasonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Season{&b, &c} {
		err = a.SetSeason(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Season != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Matches[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SeasonID != x.ID {
			t.Error("foreign key was wrong value", a.SeasonID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SeasonID))
		reflect.Indirect(reflect.ValueOf(&a.SeasonID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SeasonID != x.ID {
			t.Error("foreign key was wrong value", a.SeasonID, x.ID)
		}
	}
}
func testMatchToOneSetOpMatchUsingSimulationFromMatch(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Match{&b, &c} {
		err = a.SetSimulationFromMatch(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SimulationFromMatch != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SimulationFromMatchMatches[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SimulationFromMatchID, x.ID) {
			t.Error("foreign key was wrong value", a.SimulationFromMatchID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SimulationFromMatchID))
		reflect.Indirect(reflect.ValueOf(&a.SimulationFromMatchID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SimulationFromMatchID, x.ID) {
			t.Error("foreign key was wrong value", a.SimulationFromMatchID, x.ID)
		}
	}
}

func testMatchToOneRemoveOpMatchUsingSimulationFromMatch(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSimulationFromMatch(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSimulationFromMatch(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.SimulationFromMatch().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.SimulationFromMatch != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SimulationFromMatchID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SimulationFromMatchMatches) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMatchToOneSetOpSportUsingSport(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b, c Sport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Sport{&b, &c} {
		err = a.SetSport(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Sport != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Matches[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SportID, x.ID) {
			t.Error("foreign key was wrong value", a.SportID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SportID))
		reflect.Indirect(reflect.ValueOf(&a.SportID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SportID, x.ID) {
			t.Error("foreign key was wrong value", a.SportID, x.ID)
		}
	}
}

func testMatchToOneRemoveOpSportUsingSport(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Match
	var b Sport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSport(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSport(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Sport().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Sport != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SportID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Matches) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMatchesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Match{}
	if err = randomize.Struct(seed, o, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testMatchesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Match{}
	if err = randomize.Struct(seed, o, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MatchSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testMatchesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Match{}
	if err = randomize.Struct(seed, o, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Matches().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	matchDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `ImportID`: `character varying`, `MatchTime`: `timestamp with time zone`, `LastProcessedID`: `character varying`, `AwayTeamID`: `uuid`, `CompetitionID`: `uuid`, `HomeTeamID`: `uuid`, `SeasonID`: `uuid`, `HomeScore`: `integer`, `AwayScore`: `integer`, `MatchEnd`: `timestamp with time zone`, `FStart`: `timestamp with time zone`, `FEnd`: `timestamp with time zone`, `SStart`: `timestamp with time zone`, `SEnd`: `timestamp with time zone`, `X1Start`: `timestamp with time zone`, `X1End`: `timestamp with time zone`, `X2Start`: `timestamp with time zone`, `X2End`: `timestamp with time zone`, `PStart`: `timestamp with time zone`, `PEnd`: `timestamp with time zone`, `Version`: `integer`, `SimulationFromMatchID`: `uuid`, `HasLineups`: `boolean`, `Period`: `character varying`, `Status`: `character varying`, `MatchType`: `integer`, `Minute`: `integer`, `Second`: `integer`, `Rewarded`: `boolean`, `LastSyncedAt`: `timestamp with time zone`, `AwayTeamSelectionID`: `character varying`, `HomeTeamSelectionID`: `character varying`, `MatchDayID`: `uuid`, `EditionID`: `uuid`, `Week`: `integer`, `SportID`: `uuid`, `Enabled`: `boolean`}
	_            = bytes.MinRead
)

func testMatchesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(matchPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(matchAllColumns) == len(matchPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Match{}
	if err = randomize.Struct(seed, o, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Matches().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, matchDBTypes, true, matchPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMatchesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(matchAllColumns) == len(matchPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Match{}
	if err = randomize.Struct(seed, o, matchDBTypes, true, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Matches().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, matchDBTypes, true, matchPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(matchAllColumns, matchPrimaryKeyColumns) {
		fields = matchAllColumns
	} else {
		fields = strmangle.SetComplement(
			matchAllColumns,
			matchPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MatchSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMatchesUpsert(t *testing.T) {
	t.Parallel()

	if len(matchAllColumns) == len(matchPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Match{}
	if err = randomize.Struct(seed, &o, matchDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Match: %s", err)
	}

	count, err := Matches().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, matchDBTypes, false, matchPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Match: %s", err)
	}

	count, err = Matches().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
