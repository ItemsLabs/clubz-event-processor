// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AssignedPlayer is an object representing the database table.
type AssignedPlayer struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	PlayerNFTID null.String `boil:"player_nft_id" json:"player_nft_id,omitempty" toml:"player_nft_id" yaml:"player_nft_id,omitempty"`
	NFTID       null.String `boil:"nft_id" json:"nft_id,omitempty" toml:"nft_id" yaml:"nft_id,omitempty"`
	Rarity      null.String `boil:"rarity" json:"rarity,omitempty" toml:"rarity" yaml:"rarity,omitempty"`

	R *assignedPlayerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assignedPlayerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssignedPlayerColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	PlayerNFTID string
	NFTID       string
	Rarity      string
}{
	ID:          "id",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	PlayerNFTID: "player_nft_id",
	NFTID:       "nft_id",
	Rarity:      "rarity",
}

var AssignedPlayerTableColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	PlayerNFTID string
	NFTID       string
	Rarity      string
}{
	ID:          "assigned_players.id",
	CreatedAt:   "assigned_players.created_at",
	UpdatedAt:   "assigned_players.updated_at",
	PlayerNFTID: "assigned_players.player_nft_id",
	NFTID:       "assigned_players.nft_id",
	Rarity:      "assigned_players.rarity",
}

// Generated where

var AssignedPlayerWhere = struct {
	ID          whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	PlayerNFTID whereHelpernull_String
	NFTID       whereHelpernull_String
	Rarity      whereHelpernull_String
}{
	ID:          whereHelperstring{field: "\"assigned_players\".\"id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"assigned_players\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"assigned_players\".\"updated_at\""},
	PlayerNFTID: whereHelpernull_String{field: "\"assigned_players\".\"player_nft_id\""},
	NFTID:       whereHelpernull_String{field: "\"assigned_players\".\"nft_id\""},
	Rarity:      whereHelpernull_String{field: "\"assigned_players\".\"rarity\""},
}

// AssignedPlayerRels is where relationship names are stored.
var AssignedPlayerRels = struct {
	PlayerNFT string
	GamePicks string
}{
	PlayerNFT: "PlayerNFT",
	GamePicks: "GamePicks",
}

// assignedPlayerR is where relationships are stored.
type assignedPlayerR struct {
	PlayerNFT *NFTBucket    `boil:"PlayerNFT" json:"PlayerNFT" toml:"PlayerNFT" yaml:"PlayerNFT"`
	GamePicks GamePickSlice `boil:"GamePicks" json:"GamePicks" toml:"GamePicks" yaml:"GamePicks"`
}

// NewStruct creates a new relationship struct
func (*assignedPlayerR) NewStruct() *assignedPlayerR {
	return &assignedPlayerR{}
}

func (r *assignedPlayerR) GetPlayerNFT() *NFTBucket {
	if r == nil {
		return nil
	}
	return r.PlayerNFT
}

func (r *assignedPlayerR) GetGamePicks() GamePickSlice {
	if r == nil {
		return nil
	}
	return r.GamePicks
}

// assignedPlayerL is where Load methods for each relationship are stored.
type assignedPlayerL struct{}

var (
	assignedPlayerAllColumns            = []string{"id", "created_at", "updated_at", "player_nft_id", "nft_id", "rarity"}
	assignedPlayerColumnsWithoutDefault = []string{"id", "created_at", "updated_at"}
	assignedPlayerColumnsWithDefault    = []string{"player_nft_id", "nft_id", "rarity"}
	assignedPlayerPrimaryKeyColumns     = []string{"id"}
	assignedPlayerGeneratedColumns      = []string{}
)

type (
	// AssignedPlayerSlice is an alias for a slice of pointers to AssignedPlayer.
	// This should almost always be used instead of []AssignedPlayer.
	AssignedPlayerSlice []*AssignedPlayer

	assignedPlayerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assignedPlayerType                 = reflect.TypeOf(&AssignedPlayer{})
	assignedPlayerMapping              = queries.MakeStructMapping(assignedPlayerType)
	assignedPlayerPrimaryKeyMapping, _ = queries.BindMapping(assignedPlayerType, assignedPlayerMapping, assignedPlayerPrimaryKeyColumns)
	assignedPlayerInsertCacheMut       sync.RWMutex
	assignedPlayerInsertCache          = make(map[string]insertCache)
	assignedPlayerUpdateCacheMut       sync.RWMutex
	assignedPlayerUpdateCache          = make(map[string]updateCache)
	assignedPlayerUpsertCacheMut       sync.RWMutex
	assignedPlayerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single assignedPlayer record from the query.
func (q assignedPlayerQuery) One(exec boil.Executor) (*AssignedPlayer, error) {
	o := &AssignedPlayer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for assigned_players")
	}

	return o, nil
}

// All returns all AssignedPlayer records from the query.
func (q assignedPlayerQuery) All(exec boil.Executor) (AssignedPlayerSlice, error) {
	var o []*AssignedPlayer

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to AssignedPlayer slice")
	}

	return o, nil
}

// Count returns the count of all AssignedPlayer records in the query.
func (q assignedPlayerQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count assigned_players rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assignedPlayerQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if assigned_players exists")
	}

	return count > 0, nil
}

// PlayerNFT pointed to by the foreign key.
func (o *AssignedPlayer) PlayerNFT(mods ...qm.QueryMod) nftBucketQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerNFTID),
	}

	queryMods = append(queryMods, mods...)

	return NFTBuckets(queryMods...)
}

// GamePicks retrieves all the game_pick's GamePicks with an executor.
func (o *AssignedPlayer) GamePicks(mods ...qm.QueryMod) gamePickQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"game_picks\".\"assigned_player_id\"=?", o.ID),
	)

	return GamePicks(queryMods...)
}

// LoadPlayerNFT allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignedPlayerL) LoadPlayerNFT(e boil.Executor, singular bool, maybeAssignedPlayer interface{}, mods queries.Applicator) error {
	var slice []*AssignedPlayer
	var object *AssignedPlayer

	if singular {
		var ok bool
		object, ok = maybeAssignedPlayer.(*AssignedPlayer)
		if !ok {
			object = new(AssignedPlayer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedPlayer))
			}
		}
	} else {
		s, ok := maybeAssignedPlayer.(*[]*AssignedPlayer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedPlayer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &assignedPlayerR{}
		}
		if !queries.IsNil(object.PlayerNFTID) {
			args[object.PlayerNFTID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedPlayerR{}
			}

			if !queries.IsNil(obj.PlayerNFTID) {
				args[obj.PlayerNFTID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`nft_bucket`),
		qm.WhereIn(`nft_bucket.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load NFTBucket")
	}

	var resultSlice []*NFTBucket
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice NFTBucket")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for nft_bucket")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for nft_bucket")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlayerNFT = foreign
		if foreign.R == nil {
			foreign.R = &nftBucketR{}
		}
		foreign.R.PlayerNFTAssignedPlayers = append(foreign.R.PlayerNFTAssignedPlayers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PlayerNFTID, foreign.ID) {
				local.R.PlayerNFT = foreign
				if foreign.R == nil {
					foreign.R = &nftBucketR{}
				}
				foreign.R.PlayerNFTAssignedPlayers = append(foreign.R.PlayerNFTAssignedPlayers, local)
				break
			}
		}
	}

	return nil
}

// LoadGamePicks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (assignedPlayerL) LoadGamePicks(e boil.Executor, singular bool, maybeAssignedPlayer interface{}, mods queries.Applicator) error {
	var slice []*AssignedPlayer
	var object *AssignedPlayer

	if singular {
		var ok bool
		object, ok = maybeAssignedPlayer.(*AssignedPlayer)
		if !ok {
			object = new(AssignedPlayer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedPlayer))
			}
		}
	} else {
		s, ok := maybeAssignedPlayer.(*[]*AssignedPlayer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedPlayer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &assignedPlayerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedPlayerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`game_picks`),
		qm.WhereIn(`game_picks.assigned_player_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load game_picks")
	}

	var resultSlice []*GamePick
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice game_picks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on game_picks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_picks")
	}

	if singular {
		object.R.GamePicks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gamePickR{}
			}
			foreign.R.AssignedPlayer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AssignedPlayerID) {
				local.R.GamePicks = append(local.R.GamePicks, foreign)
				if foreign.R == nil {
					foreign.R = &gamePickR{}
				}
				foreign.R.AssignedPlayer = local
				break
			}
		}
	}

	return nil
}

// SetPlayerNFT of the assignedPlayer to the related item.
// Sets o.R.PlayerNFT to related.
// Adds o to related.R.PlayerNFTAssignedPlayers.
func (o *AssignedPlayer) SetPlayerNFT(exec boil.Executor, insert bool, related *NFTBucket) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assigned_players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_nft_id"}),
		strmangle.WhereClause("\"", "\"", 2, assignedPlayerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PlayerNFTID, related.ID)
	if o.R == nil {
		o.R = &assignedPlayerR{
			PlayerNFT: related,
		}
	} else {
		o.R.PlayerNFT = related
	}

	if related.R == nil {
		related.R = &nftBucketR{
			PlayerNFTAssignedPlayers: AssignedPlayerSlice{o},
		}
	} else {
		related.R.PlayerNFTAssignedPlayers = append(related.R.PlayerNFTAssignedPlayers, o)
	}

	return nil
}

// RemovePlayerNFT relationship.
// Sets o.R.PlayerNFT to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AssignedPlayer) RemovePlayerNFT(exec boil.Executor, related *NFTBucket) error {
	var err error

	queries.SetScanner(&o.PlayerNFTID, nil)
	if _, err = o.Update(exec, boil.Whitelist("player_nft_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PlayerNFT = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PlayerNFTAssignedPlayers {
		if queries.Equal(o.PlayerNFTID, ri.PlayerNFTID) {
			continue
		}

		ln := len(related.R.PlayerNFTAssignedPlayers)
		if ln > 1 && i < ln-1 {
			related.R.PlayerNFTAssignedPlayers[i] = related.R.PlayerNFTAssignedPlayers[ln-1]
		}
		related.R.PlayerNFTAssignedPlayers = related.R.PlayerNFTAssignedPlayers[:ln-1]
		break
	}
	return nil
}

// AddGamePicks adds the given related objects to the existing relationships
// of the assigned_player, optionally inserting them as new records.
// Appends related to o.R.GamePicks.
// Sets related.R.AssignedPlayer appropriately.
func (o *AssignedPlayer) AddGamePicks(exec boil.Executor, insert bool, related ...*GamePick) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AssignedPlayerID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"game_picks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"assigned_player_id"}),
				strmangle.WhereClause("\"", "\"", 2, gamePickPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AssignedPlayerID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &assignedPlayerR{
			GamePicks: related,
		}
	} else {
		o.R.GamePicks = append(o.R.GamePicks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gamePickR{
				AssignedPlayer: o,
			}
		} else {
			rel.R.AssignedPlayer = o
		}
	}
	return nil
}

// SetGamePicks removes all previously related items of the
// assigned_player replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AssignedPlayer's GamePicks accordingly.
// Replaces o.R.GamePicks with related.
// Sets related.R.AssignedPlayer's GamePicks accordingly.
func (o *AssignedPlayer) SetGamePicks(exec boil.Executor, insert bool, related ...*GamePick) error {
	query := "update \"game_picks\" set \"assigned_player_id\" = null where \"assigned_player_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.GamePicks {
			queries.SetScanner(&rel.AssignedPlayerID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AssignedPlayer = nil
		}
		o.R.GamePicks = nil
	}

	return o.AddGamePicks(exec, insert, related...)
}

// RemoveGamePicks relationships from objects passed in.
// Removes related items from R.GamePicks (uses pointer comparison, removal does not keep order)
// Sets related.R.AssignedPlayer.
func (o *AssignedPlayer) RemoveGamePicks(exec boil.Executor, related ...*GamePick) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AssignedPlayerID, nil)
		if rel.R != nil {
			rel.R.AssignedPlayer = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("assigned_player_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.GamePicks {
			if rel != ri {
				continue
			}

			ln := len(o.R.GamePicks)
			if ln > 1 && i < ln-1 {
				o.R.GamePicks[i] = o.R.GamePicks[ln-1]
			}
			o.R.GamePicks = o.R.GamePicks[:ln-1]
			break
		}
	}

	return nil
}

// AssignedPlayers retrieves all the records using an executor.
func AssignedPlayers(mods ...qm.QueryMod) assignedPlayerQuery {
	mods = append(mods, qm.From("\"assigned_players\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"assigned_players\".*"})
	}

	return assignedPlayerQuery{q}
}

// FindAssignedPlayer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssignedPlayer(exec boil.Executor, iD string, selectCols ...string) (*AssignedPlayer, error) {
	assignedPlayerObj := &AssignedPlayer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"assigned_players\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, assignedPlayerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from assigned_players")
	}

	return assignedPlayerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AssignedPlayer) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no assigned_players provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(assignedPlayerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assignedPlayerInsertCacheMut.RLock()
	cache, cached := assignedPlayerInsertCache[key]
	assignedPlayerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assignedPlayerAllColumns,
			assignedPlayerColumnsWithDefault,
			assignedPlayerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assignedPlayerType, assignedPlayerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assignedPlayerType, assignedPlayerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"assigned_players\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"assigned_players\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into assigned_players")
	}

	if !cached {
		assignedPlayerInsertCacheMut.Lock()
		assignedPlayerInsertCache[key] = cache
		assignedPlayerInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the AssignedPlayer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AssignedPlayer) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	assignedPlayerUpdateCacheMut.RLock()
	cache, cached := assignedPlayerUpdateCache[key]
	assignedPlayerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assignedPlayerAllColumns,
			assignedPlayerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update assigned_players, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"assigned_players\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, assignedPlayerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assignedPlayerType, assignedPlayerMapping, append(wl, assignedPlayerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update assigned_players row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for assigned_players")
	}

	if !cached {
		assignedPlayerUpdateCacheMut.Lock()
		assignedPlayerUpdateCache[key] = cache
		assignedPlayerUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q assignedPlayerQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for assigned_players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for assigned_players")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssignedPlayerSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"assigned_players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, assignedPlayerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in assignedPlayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all assignedPlayer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AssignedPlayer) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no assigned_players provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(assignedPlayerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assignedPlayerUpsertCacheMut.RLock()
	cache, cached := assignedPlayerUpsertCache[key]
	assignedPlayerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			assignedPlayerAllColumns,
			assignedPlayerColumnsWithDefault,
			assignedPlayerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			assignedPlayerAllColumns,
			assignedPlayerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert assigned_players, could not build update column list")
		}

		ret := strmangle.SetComplement(assignedPlayerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(assignedPlayerPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert assigned_players, could not build conflict column list")
			}

			conflict = make([]string, len(assignedPlayerPrimaryKeyColumns))
			copy(conflict, assignedPlayerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"assigned_players\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(assignedPlayerType, assignedPlayerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assignedPlayerType, assignedPlayerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert assigned_players")
	}

	if !cached {
		assignedPlayerUpsertCacheMut.Lock()
		assignedPlayerUpsertCache[key] = cache
		assignedPlayerUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single AssignedPlayer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AssignedPlayer) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no AssignedPlayer provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assignedPlayerPrimaryKeyMapping)
	sql := "DELETE FROM \"assigned_players\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from assigned_players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for assigned_players")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assignedPlayerQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no assignedPlayerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from assigned_players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for assigned_players")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssignedPlayerSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"assigned_players\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignedPlayerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from assignedPlayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for assigned_players")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AssignedPlayer) Reload(exec boil.Executor) error {
	ret, err := FindAssignedPlayer(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssignedPlayerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssignedPlayerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"assigned_players\".* FROM \"assigned_players\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignedPlayerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in AssignedPlayerSlice")
	}

	*o = slice

	return nil
}

// AssignedPlayerExists checks if the AssignedPlayer row exists.
func AssignedPlayerExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"assigned_players\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if assigned_players exists")
	}

	return exists, nil
}

// Exists checks if the AssignedPlayer row exists.
func (o *AssignedPlayer) Exists(exec boil.Executor) (bool, error) {
	return AssignedPlayerExists(exec, o.ID)
}
