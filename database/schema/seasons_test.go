// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSeasons(t *testing.T) {
	t.Parallel()

	query := Seasons()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSeasonsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Seasons().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSeasonsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Seasons().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Seasons().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSeasonsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SeasonSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Seasons().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSeasonsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SeasonExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Season exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SeasonExists to return true, but got false.")
	}
}

func testSeasonsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	seasonFound, err := FindSeason(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if seasonFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSeasonsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Seasons().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testSeasonsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Seasons().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSeasonsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	seasonOne := &Season{}
	seasonTwo := &Season{}
	if err = randomize.Struct(seed, seasonOne, seasonDBTypes, false, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}
	if err = randomize.Struct(seed, seasonTwo, seasonDBTypes, false, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = seasonOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = seasonTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Seasons().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSeasonsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	seasonOne := &Season{}
	seasonTwo := &Season{}
	if err = randomize.Struct(seed, seasonOne, seasonDBTypes, false, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}
	if err = randomize.Struct(seed, seasonTwo, seasonDBTypes, false, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = seasonOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = seasonTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Seasons().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testSeasonsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Seasons().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSeasonsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(seasonColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Seasons().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSeasonToManyLeaderboards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Season
	var b, c Leaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, leaderboardDBTypes, false, leaderboardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, leaderboardDBTypes, false, leaderboardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SeasonID, a.ID)
	queries.Assign(&c.SeasonID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Leaderboards().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SeasonID, b.SeasonID) {
			bFound = true
		}
		if queries.Equal(v.SeasonID, c.SeasonID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SeasonSlice{&a}
	if err = a.L.LoadLeaderboards(tx, false, (*[]*Season)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Leaderboards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Leaderboards = nil
	if err = a.L.LoadLeaderboards(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Leaderboards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSeasonToManyMatches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Season
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SeasonID = a.ID
	c.SeasonID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Matches().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SeasonID == b.SeasonID {
			bFound = true
		}
		if v.SeasonID == c.SeasonID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SeasonSlice{&a}
	if err = a.L.LoadMatches(tx, false, (*[]*Season)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Matches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Matches = nil
	if err = a.L.LoadMatches(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Matches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSeasonToManySeasonCompetitionMembers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Season
	var b, c SeasonCompetitionMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, seasonCompetitionMemberDBTypes, false, seasonCompetitionMemberColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, seasonCompetitionMemberDBTypes, false, seasonCompetitionMemberColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SeasonID = a.ID
	c.SeasonID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SeasonCompetitionMembers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SeasonID == b.SeasonID {
			bFound = true
		}
		if v.SeasonID == c.SeasonID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SeasonSlice{&a}
	if err = a.L.LoadSeasonCompetitionMembers(tx, false, (*[]*Season)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SeasonCompetitionMembers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SeasonCompetitionMembers = nil
	if err = a.L.LoadSeasonCompetitionMembers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SeasonCompetitionMembers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSeasonToManySeasonTeamPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Season
	var b, c SeasonTeamPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, seasonTeamPlayerDBTypes, false, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, seasonTeamPlayerDBTypes, false, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SeasonID = a.ID
	c.SeasonID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SeasonTeamPlayers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SeasonID == b.SeasonID {
			bFound = true
		}
		if v.SeasonID == c.SeasonID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SeasonSlice{&a}
	if err = a.L.LoadSeasonTeamPlayers(tx, false, (*[]*Season)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SeasonTeamPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SeasonTeamPlayers = nil
	if err = a.L.LoadSeasonTeamPlayers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SeasonTeamPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSeasonToManyAddOpLeaderboards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Season
	var b, c, d, e Leaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seasonDBTypes, false, strmangle.SetComplement(seasonPrimaryKeyColumns, seasonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Leaderboard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, leaderboardDBTypes, false, strmangle.SetComplement(leaderboardPrimaryKeyColumns, leaderboardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Leaderboard{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLeaderboards(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SeasonID) {
			t.Error("foreign key was wrong value", a.ID, first.SeasonID)
		}
		if !queries.Equal(a.ID, second.SeasonID) {
			t.Error("foreign key was wrong value", a.ID, second.SeasonID)
		}

		if first.R.Season != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Season != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Leaderboards[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Leaderboards[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Leaderboards().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSeasonToManySetOpLeaderboards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Season
	var b, c, d, e Leaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seasonDBTypes, false, strmangle.SetComplement(seasonPrimaryKeyColumns, seasonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Leaderboard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, leaderboardDBTypes, false, strmangle.SetComplement(leaderboardPrimaryKeyColumns, leaderboardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetLeaderboards(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Leaderboards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetLeaderboards(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Leaderboards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SeasonID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SeasonID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SeasonID) {
		t.Error("foreign key was wrong value", a.ID, d.SeasonID)
	}
	if !queries.Equal(a.ID, e.SeasonID) {
		t.Error("foreign key was wrong value", a.ID, e.SeasonID)
	}

	if b.R.Season != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Season != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Season != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Season != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Leaderboards[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Leaderboards[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSeasonToManyRemoveOpLeaderboards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Season
	var b, c, d, e Leaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seasonDBTypes, false, strmangle.SetComplement(seasonPrimaryKeyColumns, seasonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Leaderboard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, leaderboardDBTypes, false, strmangle.SetComplement(leaderboardPrimaryKeyColumns, leaderboardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddLeaderboards(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Leaderboards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveLeaderboards(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Leaderboards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SeasonID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SeasonID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Season != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Season != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Season != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Season != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Leaderboards) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Leaderboards[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Leaderboards[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSeasonToManyAddOpMatches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Season
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seasonDBTypes, false, strmangle.SetComplement(seasonPrimaryKeyColumns, seasonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Match{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMatches(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SeasonID {
			t.Error("foreign key was wrong value", a.ID, first.SeasonID)
		}
		if a.ID != second.SeasonID {
			t.Error("foreign key was wrong value", a.ID, second.SeasonID)
		}

		if first.R.Season != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Season != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Matches[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Matches[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Matches().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSeasonToManyAddOpSeasonCompetitionMembers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Season
	var b, c, d, e SeasonCompetitionMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seasonDBTypes, false, strmangle.SetComplement(seasonPrimaryKeyColumns, seasonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SeasonCompetitionMember{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, seasonCompetitionMemberDBTypes, false, strmangle.SetComplement(seasonCompetitionMemberPrimaryKeyColumns, seasonCompetitionMemberColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SeasonCompetitionMember{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSeasonCompetitionMembers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SeasonID {
			t.Error("foreign key was wrong value", a.ID, first.SeasonID)
		}
		if a.ID != second.SeasonID {
			t.Error("foreign key was wrong value", a.ID, second.SeasonID)
		}

		if first.R.Season != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Season != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SeasonCompetitionMembers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SeasonCompetitionMembers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SeasonCompetitionMembers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSeasonToManyAddOpSeasonTeamPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Season
	var b, c, d, e SeasonTeamPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seasonDBTypes, false, strmangle.SetComplement(seasonPrimaryKeyColumns, seasonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SeasonTeamPlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, seasonTeamPlayerDBTypes, false, strmangle.SetComplement(seasonTeamPlayerPrimaryKeyColumns, seasonTeamPlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SeasonTeamPlayer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSeasonTeamPlayers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SeasonID {
			t.Error("foreign key was wrong value", a.ID, first.SeasonID)
		}
		if a.ID != second.SeasonID {
			t.Error("foreign key was wrong value", a.ID, second.SeasonID)
		}

		if first.R.Season != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Season != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SeasonTeamPlayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SeasonTeamPlayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SeasonTeamPlayers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSeasonsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSeasonsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SeasonSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testSeasonsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Seasons().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	seasonDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `ImportID`: `character varying`, `Name`: `text`, `EndAt`: `timestamp with time zone`, `StartAt`: `timestamp with time zone`}
	_             = bytes.MinRead
)

func testSeasonsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(seasonPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(seasonAllColumns) == len(seasonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Seasons().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSeasonsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(seasonAllColumns) == len(seasonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Seasons().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(seasonAllColumns, seasonPrimaryKeyColumns) {
		fields = seasonAllColumns
	} else {
		fields = strmangle.SetComplement(
			seasonAllColumns,
			seasonPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SeasonSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSeasonsUpsert(t *testing.T) {
	t.Parallel()

	if len(seasonAllColumns) == len(seasonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Season{}
	if err = randomize.Struct(seed, &o, seasonDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Season: %s", err)
	}

	count, err := Seasons().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, seasonDBTypes, false, seasonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Season: %s", err)
	}

	count, err = Seasons().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
