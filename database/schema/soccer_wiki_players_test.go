// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSoccerWikiPlayers(t *testing.T) {
	t.Parallel()

	query := SoccerWikiPlayers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSoccerWikiPlayersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoccerWikiPlayer{}
	if err = randomize.Struct(seed, o, soccerWikiPlayerDBTypes, true, soccerWikiPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoccerWikiPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoccerWikiPlayersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoccerWikiPlayer{}
	if err = randomize.Struct(seed, o, soccerWikiPlayerDBTypes, true, soccerWikiPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoccerWikiPlayers().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoccerWikiPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoccerWikiPlayersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoccerWikiPlayer{}
	if err = randomize.Struct(seed, o, soccerWikiPlayerDBTypes, true, soccerWikiPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoccerWikiPlayerSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoccerWikiPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoccerWikiPlayersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoccerWikiPlayer{}
	if err = randomize.Struct(seed, o, soccerWikiPlayerDBTypes, true, soccerWikiPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SoccerWikiPlayerExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SoccerWikiPlayer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SoccerWikiPlayerExists to return true, but got false.")
	}
}

func testSoccerWikiPlayersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoccerWikiPlayer{}
	if err = randomize.Struct(seed, o, soccerWikiPlayerDBTypes, true, soccerWikiPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	soccerWikiPlayerFound, err := FindSoccerWikiPlayer(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if soccerWikiPlayerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSoccerWikiPlayersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoccerWikiPlayer{}
	if err = randomize.Struct(seed, o, soccerWikiPlayerDBTypes, true, soccerWikiPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SoccerWikiPlayers().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testSoccerWikiPlayersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoccerWikiPlayer{}
	if err = randomize.Struct(seed, o, soccerWikiPlayerDBTypes, true, soccerWikiPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SoccerWikiPlayers().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSoccerWikiPlayersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	soccerWikiPlayerOne := &SoccerWikiPlayer{}
	soccerWikiPlayerTwo := &SoccerWikiPlayer{}
	if err = randomize.Struct(seed, soccerWikiPlayerOne, soccerWikiPlayerDBTypes, false, soccerWikiPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}
	if err = randomize.Struct(seed, soccerWikiPlayerTwo, soccerWikiPlayerDBTypes, false, soccerWikiPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = soccerWikiPlayerOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soccerWikiPlayerTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoccerWikiPlayers().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSoccerWikiPlayersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	soccerWikiPlayerOne := &SoccerWikiPlayer{}
	soccerWikiPlayerTwo := &SoccerWikiPlayer{}
	if err = randomize.Struct(seed, soccerWikiPlayerOne, soccerWikiPlayerDBTypes, false, soccerWikiPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}
	if err = randomize.Struct(seed, soccerWikiPlayerTwo, soccerWikiPlayerDBTypes, false, soccerWikiPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = soccerWikiPlayerOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soccerWikiPlayerTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoccerWikiPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testSoccerWikiPlayersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoccerWikiPlayer{}
	if err = randomize.Struct(seed, o, soccerWikiPlayerDBTypes, true, soccerWikiPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoccerWikiPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoccerWikiPlayersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoccerWikiPlayer{}
	if err = randomize.Struct(seed, o, soccerWikiPlayerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(soccerWikiPlayerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SoccerWikiPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoccerWikiPlayerToManyPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a SoccerWikiPlayer
	var b, c Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soccerWikiPlayerDBTypes, true, soccerWikiPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SoccerWikiPlayerID, a.ID)
	queries.Assign(&c.SoccerWikiPlayerID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Players().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SoccerWikiPlayerID, b.SoccerWikiPlayerID) {
			bFound = true
		}
		if queries.Equal(v.SoccerWikiPlayerID, c.SoccerWikiPlayerID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SoccerWikiPlayerSlice{&a}
	if err = a.L.LoadPlayers(tx, false, (*[]*SoccerWikiPlayer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Players); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Players = nil
	if err = a.L.LoadPlayers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Players); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSoccerWikiPlayerToManyAddOpPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a SoccerWikiPlayer
	var b, c, d, e Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soccerWikiPlayerDBTypes, false, strmangle.SetComplement(soccerWikiPlayerPrimaryKeyColumns, soccerWikiPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Player{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Player{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPlayers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SoccerWikiPlayerID) {
			t.Error("foreign key was wrong value", a.ID, first.SoccerWikiPlayerID)
		}
		if !queries.Equal(a.ID, second.SoccerWikiPlayerID) {
			t.Error("foreign key was wrong value", a.ID, second.SoccerWikiPlayerID)
		}

		if first.R.SoccerWikiPlayer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SoccerWikiPlayer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Players[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Players[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Players().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSoccerWikiPlayerToManySetOpPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a SoccerWikiPlayer
	var b, c, d, e Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soccerWikiPlayerDBTypes, false, strmangle.SetComplement(soccerWikiPlayerPrimaryKeyColumns, soccerWikiPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Player{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPlayers(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Players().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPlayers(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Players().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SoccerWikiPlayerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SoccerWikiPlayerID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SoccerWikiPlayerID) {
		t.Error("foreign key was wrong value", a.ID, d.SoccerWikiPlayerID)
	}
	if !queries.Equal(a.ID, e.SoccerWikiPlayerID) {
		t.Error("foreign key was wrong value", a.ID, e.SoccerWikiPlayerID)
	}

	if b.R.SoccerWikiPlayer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SoccerWikiPlayer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SoccerWikiPlayer != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SoccerWikiPlayer != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Players[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Players[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSoccerWikiPlayerToManyRemoveOpPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a SoccerWikiPlayer
	var b, c, d, e Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soccerWikiPlayerDBTypes, false, strmangle.SetComplement(soccerWikiPlayerPrimaryKeyColumns, soccerWikiPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Player{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPlayers(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Players().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePlayers(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Players().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SoccerWikiPlayerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SoccerWikiPlayerID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.SoccerWikiPlayer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SoccerWikiPlayer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SoccerWikiPlayer != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.SoccerWikiPlayer != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Players) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Players[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Players[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSoccerWikiPlayersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoccerWikiPlayer{}
	if err = randomize.Struct(seed, o, soccerWikiPlayerDBTypes, true, soccerWikiPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSoccerWikiPlayersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoccerWikiPlayer{}
	if err = randomize.Struct(seed, o, soccerWikiPlayerDBTypes, true, soccerWikiPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoccerWikiPlayerSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testSoccerWikiPlayersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoccerWikiPlayer{}
	if err = randomize.Struct(seed, o, soccerWikiPlayerDBTypes, true, soccerWikiPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoccerWikiPlayers().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	soccerWikiPlayerDBTypes = map[string]string{`ID`: `integer`, `ImportID`: `integer`, `FirstName`: `text`, `SecondName`: `text`, `BirthDate`: `date`, `Height`: `integer`, `Weight`: `integer`, `Image`: `text`, `InternalImageStatus`: `integer`, `InternalImageURL`: `text`}
	_                       = bytes.MinRead
)

func testSoccerWikiPlayersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(soccerWikiPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(soccerWikiPlayerAllColumns) == len(soccerWikiPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoccerWikiPlayer{}
	if err = randomize.Struct(seed, o, soccerWikiPlayerDBTypes, true, soccerWikiPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoccerWikiPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soccerWikiPlayerDBTypes, true, soccerWikiPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSoccerWikiPlayersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(soccerWikiPlayerAllColumns) == len(soccerWikiPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoccerWikiPlayer{}
	if err = randomize.Struct(seed, o, soccerWikiPlayerDBTypes, true, soccerWikiPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoccerWikiPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soccerWikiPlayerDBTypes, true, soccerWikiPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(soccerWikiPlayerAllColumns, soccerWikiPlayerPrimaryKeyColumns) {
		fields = soccerWikiPlayerAllColumns
	} else {
		fields = strmangle.SetComplement(
			soccerWikiPlayerAllColumns,
			soccerWikiPlayerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SoccerWikiPlayerSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSoccerWikiPlayersUpsert(t *testing.T) {
	t.Parallel()

	if len(soccerWikiPlayerAllColumns) == len(soccerWikiPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SoccerWikiPlayer{}
	if err = randomize.Struct(seed, &o, soccerWikiPlayerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoccerWikiPlayer: %s", err)
	}

	count, err := SoccerWikiPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, soccerWikiPlayerDBTypes, false, soccerWikiPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoccerWikiPlayer: %s", err)
	}

	count, err = SoccerWikiPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
