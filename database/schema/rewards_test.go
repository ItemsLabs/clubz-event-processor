// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRewards(t *testing.T) {
	t.Parallel()

	query := Rewards()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRewardsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reward{}
	if err = randomize.Struct(seed, o, rewardDBTypes, true, rewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Rewards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRewardsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reward{}
	if err = randomize.Struct(seed, o, rewardDBTypes, true, rewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Rewards().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Rewards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRewardsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reward{}
	if err = randomize.Struct(seed, o, rewardDBTypes, true, rewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RewardSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Rewards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRewardsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reward{}
	if err = randomize.Struct(seed, o, rewardDBTypes, true, rewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RewardExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Reward exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RewardExists to return true, but got false.")
	}
}

func testRewardsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reward{}
	if err = randomize.Struct(seed, o, rewardDBTypes, true, rewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	rewardFound, err := FindReward(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if rewardFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRewardsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reward{}
	if err = randomize.Struct(seed, o, rewardDBTypes, true, rewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Rewards().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testRewardsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reward{}
	if err = randomize.Struct(seed, o, rewardDBTypes, true, rewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Rewards().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRewardsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rewardOne := &Reward{}
	rewardTwo := &Reward{}
	if err = randomize.Struct(seed, rewardOne, rewardDBTypes, false, rewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}
	if err = randomize.Struct(seed, rewardTwo, rewardDBTypes, false, rewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = rewardOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rewardTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Rewards().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRewardsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	rewardOne := &Reward{}
	rewardTwo := &Reward{}
	if err = randomize.Struct(seed, rewardOne, rewardDBTypes, false, rewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}
	if err = randomize.Struct(seed, rewardTwo, rewardDBTypes, false, rewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = rewardOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rewardTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rewards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testRewardsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reward{}
	if err = randomize.Struct(seed, o, rewardDBTypes, true, rewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rewards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRewardsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reward{}
	if err = randomize.Struct(seed, o, rewardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(rewardColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Rewards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRewardToManyAppInboxes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Reward
	var b, c AppInbox

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, rewardDBTypes, true, rewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, appInboxDBTypes, false, appInboxColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, appInboxDBTypes, false, appInboxColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.RewardID, a.ID)
	queries.Assign(&c.RewardID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AppInboxes().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.RewardID, b.RewardID) {
			bFound = true
		}
		if queries.Equal(v.RewardID, c.RewardID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RewardSlice{&a}
	if err = a.L.LoadAppInboxes(tx, false, (*[]*Reward)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AppInboxes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AppInboxes = nil
	if err = a.L.LoadAppInboxes(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AppInboxes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRewardToManyDivisionRewards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Reward
	var b, c DivisionReward

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, rewardDBTypes, true, rewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, divisionRewardDBTypes, false, divisionRewardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, divisionRewardDBTypes, false, divisionRewardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.RewardID, a.ID)
	queries.Assign(&c.RewardID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DivisionRewards().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.RewardID, b.RewardID) {
			bFound = true
		}
		if queries.Equal(v.RewardID, c.RewardID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RewardSlice{&a}
	if err = a.L.LoadDivisionRewards(tx, false, (*[]*Reward)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DivisionRewards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DivisionRewards = nil
	if err = a.L.LoadDivisionRewards(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DivisionRewards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRewardToManyAddOpAppInboxes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Reward
	var b, c, d, e AppInbox

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, rewardDBTypes, false, strmangle.SetComplement(rewardPrimaryKeyColumns, rewardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AppInbox{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AppInbox{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAppInboxes(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.RewardID) {
			t.Error("foreign key was wrong value", a.ID, first.RewardID)
		}
		if !queries.Equal(a.ID, second.RewardID) {
			t.Error("foreign key was wrong value", a.ID, second.RewardID)
		}

		if first.R.Reward != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Reward != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AppInboxes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AppInboxes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AppInboxes().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRewardToManySetOpAppInboxes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Reward
	var b, c, d, e AppInbox

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, rewardDBTypes, false, strmangle.SetComplement(rewardPrimaryKeyColumns, rewardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AppInbox{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAppInboxes(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AppInboxes().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAppInboxes(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AppInboxes().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RewardID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RewardID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.RewardID) {
		t.Error("foreign key was wrong value", a.ID, d.RewardID)
	}
	if !queries.Equal(a.ID, e.RewardID) {
		t.Error("foreign key was wrong value", a.ID, e.RewardID)
	}

	if b.R.Reward != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Reward != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Reward != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Reward != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.AppInboxes[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.AppInboxes[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRewardToManyRemoveOpAppInboxes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Reward
	var b, c, d, e AppInbox

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, rewardDBTypes, false, strmangle.SetComplement(rewardPrimaryKeyColumns, rewardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AppInbox{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAppInboxes(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AppInboxes().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAppInboxes(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AppInboxes().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RewardID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RewardID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Reward != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Reward != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Reward != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Reward != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.AppInboxes) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.AppInboxes[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.AppInboxes[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRewardToManyAddOpDivisionRewards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Reward
	var b, c, d, e DivisionReward

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, rewardDBTypes, false, strmangle.SetComplement(rewardPrimaryKeyColumns, rewardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DivisionReward{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, divisionRewardDBTypes, false, strmangle.SetComplement(divisionRewardPrimaryKeyColumns, divisionRewardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DivisionReward{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDivisionRewards(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.RewardID) {
			t.Error("foreign key was wrong value", a.ID, first.RewardID)
		}
		if !queries.Equal(a.ID, second.RewardID) {
			t.Error("foreign key was wrong value", a.ID, second.RewardID)
		}

		if first.R.Reward != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Reward != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DivisionRewards[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DivisionRewards[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DivisionRewards().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRewardToManySetOpDivisionRewards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Reward
	var b, c, d, e DivisionReward

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, rewardDBTypes, false, strmangle.SetComplement(rewardPrimaryKeyColumns, rewardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DivisionReward{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, divisionRewardDBTypes, false, strmangle.SetComplement(divisionRewardPrimaryKeyColumns, divisionRewardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDivisionRewards(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DivisionRewards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDivisionRewards(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DivisionRewards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RewardID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RewardID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.RewardID) {
		t.Error("foreign key was wrong value", a.ID, d.RewardID)
	}
	if !queries.Equal(a.ID, e.RewardID) {
		t.Error("foreign key was wrong value", a.ID, e.RewardID)
	}

	if b.R.Reward != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Reward != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Reward != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Reward != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.DivisionRewards[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.DivisionRewards[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRewardToManyRemoveOpDivisionRewards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Reward
	var b, c, d, e DivisionReward

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, rewardDBTypes, false, strmangle.SetComplement(rewardPrimaryKeyColumns, rewardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DivisionReward{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, divisionRewardDBTypes, false, strmangle.SetComplement(divisionRewardPrimaryKeyColumns, divisionRewardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDivisionRewards(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DivisionRewards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDivisionRewards(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DivisionRewards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RewardID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RewardID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Reward != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Reward != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Reward != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Reward != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.DivisionRewards) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.DivisionRewards[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.DivisionRewards[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRewardsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reward{}
	if err = randomize.Struct(seed, o, rewardDBTypes, true, rewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testRewardsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reward{}
	if err = randomize.Struct(seed, o, rewardDBTypes, true, rewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RewardSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testRewardsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reward{}
	if err = randomize.Struct(seed, o, rewardDBTypes, true, rewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Rewards().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	rewardDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `Name`: `character varying`, `Credits`: `double precision`, `GameToken`: `double precision`, `LaptToken`: `double precision`, `EventTickets`: `integer`, `Ball`: `integer`, `SignedBall`: `integer`, `Shirt`: `integer`, `SignedShirt`: `integer`, `KickoffPack1`: `integer`, `KickoffPack2`: `integer`, `KickoffPack3`: `integer`, `SeasonPack1`: `integer`, `SeasonPack2`: `integer`, `SeasonPack3`: `integer`}
	_             = bytes.MinRead
)

func testRewardsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(rewardPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(rewardAllColumns) == len(rewardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Reward{}
	if err = randomize.Struct(seed, o, rewardDBTypes, true, rewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rewards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rewardDBTypes, true, rewardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRewardsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(rewardAllColumns) == len(rewardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Reward{}
	if err = randomize.Struct(seed, o, rewardDBTypes, true, rewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rewards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rewardDBTypes, true, rewardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(rewardAllColumns, rewardPrimaryKeyColumns) {
		fields = rewardAllColumns
	} else {
		fields = strmangle.SetComplement(
			rewardAllColumns,
			rewardPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RewardSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRewardsUpsert(t *testing.T) {
	t.Parallel()

	if len(rewardAllColumns) == len(rewardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Reward{}
	if err = randomize.Struct(seed, &o, rewardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Reward: %s", err)
	}

	count, err := Rewards().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, rewardDBTypes, false, rewardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Reward: %s", err)
	}

	count, err = Rewards().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
