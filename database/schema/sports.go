// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Sport is an object representing the database table.
type Sport struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`

	R *sportR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sportL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SportColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	Name        string
	Description string
}{
	ID:          "id",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	Name:        "name",
	Description: "description",
}

var SportTableColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	Name        string
	Description string
}{
	ID:          "sports.id",
	CreatedAt:   "sports.created_at",
	UpdatedAt:   "sports.updated_at",
	Name:        "sports.name",
	Description: "sports.description",
}

// Generated where

var SportWhere = struct {
	ID          whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpernull_Time
	Name        whereHelperstring
	Description whereHelpernull_String
}{
	ID:          whereHelperstring{field: "\"sports\".\"id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"sports\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"sports\".\"updated_at\""},
	Name:        whereHelperstring{field: "\"sports\".\"name\""},
	Description: whereHelpernull_String{field: "\"sports\".\"description\""},
}

// SportRels is where relationship names are stored.
var SportRels = struct {
	Actions            string
	CompetitionConfigs string
	Competitions       string
	Games              string
	Matches            string
	Powerups           string
}{
	Actions:            "Actions",
	CompetitionConfigs: "CompetitionConfigs",
	Competitions:       "Competitions",
	Games:              "Games",
	Matches:            "Matches",
	Powerups:           "Powerups",
}

// sportR is where relationships are stored.
type sportR struct {
	Actions            ActionSlice            `boil:"Actions" json:"Actions" toml:"Actions" yaml:"Actions"`
	CompetitionConfigs CompetitionConfigSlice `boil:"CompetitionConfigs" json:"CompetitionConfigs" toml:"CompetitionConfigs" yaml:"CompetitionConfigs"`
	Competitions       CompetitionSlice       `boil:"Competitions" json:"Competitions" toml:"Competitions" yaml:"Competitions"`
	Games              GameSlice              `boil:"Games" json:"Games" toml:"Games" yaml:"Games"`
	Matches            MatchSlice             `boil:"Matches" json:"Matches" toml:"Matches" yaml:"Matches"`
	Powerups           PowerupSlice           `boil:"Powerups" json:"Powerups" toml:"Powerups" yaml:"Powerups"`
}

// NewStruct creates a new relationship struct
func (*sportR) NewStruct() *sportR {
	return &sportR{}
}

func (r *sportR) GetActions() ActionSlice {
	if r == nil {
		return nil
	}
	return r.Actions
}

func (r *sportR) GetCompetitionConfigs() CompetitionConfigSlice {
	if r == nil {
		return nil
	}
	return r.CompetitionConfigs
}

func (r *sportR) GetCompetitions() CompetitionSlice {
	if r == nil {
		return nil
	}
	return r.Competitions
}

func (r *sportR) GetGames() GameSlice {
	if r == nil {
		return nil
	}
	return r.Games
}

func (r *sportR) GetMatches() MatchSlice {
	if r == nil {
		return nil
	}
	return r.Matches
}

func (r *sportR) GetPowerups() PowerupSlice {
	if r == nil {
		return nil
	}
	return r.Powerups
}

// sportL is where Load methods for each relationship are stored.
type sportL struct{}

var (
	sportAllColumns            = []string{"id", "created_at", "updated_at", "name", "description"}
	sportColumnsWithoutDefault = []string{"id", "name"}
	sportColumnsWithDefault    = []string{"created_at", "updated_at", "description"}
	sportPrimaryKeyColumns     = []string{"id"}
	sportGeneratedColumns      = []string{}
)

type (
	// SportSlice is an alias for a slice of pointers to Sport.
	// This should almost always be used instead of []Sport.
	SportSlice []*Sport

	sportQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sportType                 = reflect.TypeOf(&Sport{})
	sportMapping              = queries.MakeStructMapping(sportType)
	sportPrimaryKeyMapping, _ = queries.BindMapping(sportType, sportMapping, sportPrimaryKeyColumns)
	sportInsertCacheMut       sync.RWMutex
	sportInsertCache          = make(map[string]insertCache)
	sportUpdateCacheMut       sync.RWMutex
	sportUpdateCache          = make(map[string]updateCache)
	sportUpsertCacheMut       sync.RWMutex
	sportUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single sport record from the query.
func (q sportQuery) One(exec boil.Executor) (*Sport, error) {
	o := &Sport{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for sports")
	}

	return o, nil
}

// All returns all Sport records from the query.
func (q sportQuery) All(exec boil.Executor) (SportSlice, error) {
	var o []*Sport

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to Sport slice")
	}

	return o, nil
}

// Count returns the count of all Sport records in the query.
func (q sportQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count sports rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sportQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if sports exists")
	}

	return count > 0, nil
}

// Actions retrieves all the action's Actions with an executor.
func (o *Sport) Actions(mods ...qm.QueryMod) actionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"actions\".\"sport_id\"=?", o.ID),
	)

	return Actions(queryMods...)
}

// CompetitionConfigs retrieves all the competition_config's CompetitionConfigs with an executor.
func (o *Sport) CompetitionConfigs(mods ...qm.QueryMod) competitionConfigQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"competition_config\".\"sport_id\"=?", o.ID),
	)

	return CompetitionConfigs(queryMods...)
}

// Competitions retrieves all the competition's Competitions with an executor.
func (o *Sport) Competitions(mods ...qm.QueryMod) competitionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"competitions\".\"sport_id\"=?", o.ID),
	)

	return Competitions(queryMods...)
}

// Games retrieves all the game's Games with an executor.
func (o *Sport) Games(mods ...qm.QueryMod) gameQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"games\".\"sport_id\"=?", o.ID),
	)

	return Games(queryMods...)
}

// Matches retrieves all the match's Matches with an executor.
func (o *Sport) Matches(mods ...qm.QueryMod) matchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"matches\".\"sport_id\"=?", o.ID),
	)

	return Matches(queryMods...)
}

// Powerups retrieves all the powerup's Powerups with an executor.
func (o *Sport) Powerups(mods ...qm.QueryMod) powerupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"powerups\".\"sport_id\"=?", o.ID),
	)

	return Powerups(queryMods...)
}

// LoadActions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sportL) LoadActions(e boil.Executor, singular bool, maybeSport interface{}, mods queries.Applicator) error {
	var slice []*Sport
	var object *Sport

	if singular {
		var ok bool
		object, ok = maybeSport.(*Sport)
		if !ok {
			object = new(Sport)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSport))
			}
		}
	} else {
		s, ok := maybeSport.(*[]*Sport)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSport))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &sportR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sportR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`actions`),
		qm.WhereIn(`actions.sport_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load actions")
	}

	var resultSlice []*Action
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice actions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on actions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for actions")
	}

	if singular {
		object.R.Actions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &actionR{}
			}
			foreign.R.Sport = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SportID) {
				local.R.Actions = append(local.R.Actions, foreign)
				if foreign.R == nil {
					foreign.R = &actionR{}
				}
				foreign.R.Sport = local
				break
			}
		}
	}

	return nil
}

// LoadCompetitionConfigs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sportL) LoadCompetitionConfigs(e boil.Executor, singular bool, maybeSport interface{}, mods queries.Applicator) error {
	var slice []*Sport
	var object *Sport

	if singular {
		var ok bool
		object, ok = maybeSport.(*Sport)
		if !ok {
			object = new(Sport)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSport))
			}
		}
	} else {
		s, ok := maybeSport.(*[]*Sport)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSport))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &sportR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sportR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`competition_config`),
		qm.WhereIn(`competition_config.sport_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load competition_config")
	}

	var resultSlice []*CompetitionConfig
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice competition_config")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on competition_config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for competition_config")
	}

	if singular {
		object.R.CompetitionConfigs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &competitionConfigR{}
			}
			foreign.R.Sport = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SportID) {
				local.R.CompetitionConfigs = append(local.R.CompetitionConfigs, foreign)
				if foreign.R == nil {
					foreign.R = &competitionConfigR{}
				}
				foreign.R.Sport = local
				break
			}
		}
	}

	return nil
}

// LoadCompetitions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sportL) LoadCompetitions(e boil.Executor, singular bool, maybeSport interface{}, mods queries.Applicator) error {
	var slice []*Sport
	var object *Sport

	if singular {
		var ok bool
		object, ok = maybeSport.(*Sport)
		if !ok {
			object = new(Sport)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSport))
			}
		}
	} else {
		s, ok := maybeSport.(*[]*Sport)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSport))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &sportR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sportR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`competitions`),
		qm.WhereIn(`competitions.sport_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load competitions")
	}

	var resultSlice []*Competition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice competitions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on competitions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for competitions")
	}

	if singular {
		object.R.Competitions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &competitionR{}
			}
			foreign.R.Sport = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SportID) {
				local.R.Competitions = append(local.R.Competitions, foreign)
				if foreign.R == nil {
					foreign.R = &competitionR{}
				}
				foreign.R.Sport = local
				break
			}
		}
	}

	return nil
}

// LoadGames allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sportL) LoadGames(e boil.Executor, singular bool, maybeSport interface{}, mods queries.Applicator) error {
	var slice []*Sport
	var object *Sport

	if singular {
		var ok bool
		object, ok = maybeSport.(*Sport)
		if !ok {
			object = new(Sport)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSport))
			}
		}
	} else {
		s, ok := maybeSport.(*[]*Sport)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSport))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &sportR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sportR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`games`),
		qm.WhereIn(`games.sport_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load games")
	}

	var resultSlice []*Game
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice games")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on games")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for games")
	}

	if singular {
		object.R.Games = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gameR{}
			}
			foreign.R.Sport = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SportID) {
				local.R.Games = append(local.R.Games, foreign)
				if foreign.R == nil {
					foreign.R = &gameR{}
				}
				foreign.R.Sport = local
				break
			}
		}
	}

	return nil
}

// LoadMatches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sportL) LoadMatches(e boil.Executor, singular bool, maybeSport interface{}, mods queries.Applicator) error {
	var slice []*Sport
	var object *Sport

	if singular {
		var ok bool
		object, ok = maybeSport.(*Sport)
		if !ok {
			object = new(Sport)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSport))
			}
		}
	} else {
		s, ok := maybeSport.(*[]*Sport)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSport))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &sportR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sportR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.sport_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load matches")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice matches")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if singular {
		object.R.Matches = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchR{}
			}
			foreign.R.Sport = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SportID) {
				local.R.Matches = append(local.R.Matches, foreign)
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.Sport = local
				break
			}
		}
	}

	return nil
}

// LoadPowerups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sportL) LoadPowerups(e boil.Executor, singular bool, maybeSport interface{}, mods queries.Applicator) error {
	var slice []*Sport
	var object *Sport

	if singular {
		var ok bool
		object, ok = maybeSport.(*Sport)
		if !ok {
			object = new(Sport)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSport))
			}
		}
	} else {
		s, ok := maybeSport.(*[]*Sport)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSport))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &sportR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sportR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`powerups`),
		qm.WhereIn(`powerups.sport_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load powerups")
	}

	var resultSlice []*Powerup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice powerups")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on powerups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for powerups")
	}

	if singular {
		object.R.Powerups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &powerupR{}
			}
			foreign.R.Sport = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SportID) {
				local.R.Powerups = append(local.R.Powerups, foreign)
				if foreign.R == nil {
					foreign.R = &powerupR{}
				}
				foreign.R.Sport = local
				break
			}
		}
	}

	return nil
}

// AddActions adds the given related objects to the existing relationships
// of the sport, optionally inserting them as new records.
// Appends related to o.R.Actions.
// Sets related.R.Sport appropriately.
func (o *Sport) AddActions(exec boil.Executor, insert bool, related ...*Action) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SportID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"actions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sport_id"}),
				strmangle.WhereClause("\"", "\"", 2, actionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SportID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &sportR{
			Actions: related,
		}
	} else {
		o.R.Actions = append(o.R.Actions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &actionR{
				Sport: o,
			}
		} else {
			rel.R.Sport = o
		}
	}
	return nil
}

// SetActions removes all previously related items of the
// sport replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Sport's Actions accordingly.
// Replaces o.R.Actions with related.
// Sets related.R.Sport's Actions accordingly.
func (o *Sport) SetActions(exec boil.Executor, insert bool, related ...*Action) error {
	query := "update \"actions\" set \"sport_id\" = null where \"sport_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Actions {
			queries.SetScanner(&rel.SportID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Sport = nil
		}
		o.R.Actions = nil
	}

	return o.AddActions(exec, insert, related...)
}

// RemoveActions relationships from objects passed in.
// Removes related items from R.Actions (uses pointer comparison, removal does not keep order)
// Sets related.R.Sport.
func (o *Sport) RemoveActions(exec boil.Executor, related ...*Action) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SportID, nil)
		if rel.R != nil {
			rel.R.Sport = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("sport_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Actions {
			if rel != ri {
				continue
			}

			ln := len(o.R.Actions)
			if ln > 1 && i < ln-1 {
				o.R.Actions[i] = o.R.Actions[ln-1]
			}
			o.R.Actions = o.R.Actions[:ln-1]
			break
		}
	}

	return nil
}

// AddCompetitionConfigs adds the given related objects to the existing relationships
// of the sport, optionally inserting them as new records.
// Appends related to o.R.CompetitionConfigs.
// Sets related.R.Sport appropriately.
func (o *Sport) AddCompetitionConfigs(exec boil.Executor, insert bool, related ...*CompetitionConfig) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SportID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"competition_config\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sport_id"}),
				strmangle.WhereClause("\"", "\"", 2, competitionConfigPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SportID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &sportR{
			CompetitionConfigs: related,
		}
	} else {
		o.R.CompetitionConfigs = append(o.R.CompetitionConfigs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &competitionConfigR{
				Sport: o,
			}
		} else {
			rel.R.Sport = o
		}
	}
	return nil
}

// SetCompetitionConfigs removes all previously related items of the
// sport replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Sport's CompetitionConfigs accordingly.
// Replaces o.R.CompetitionConfigs with related.
// Sets related.R.Sport's CompetitionConfigs accordingly.
func (o *Sport) SetCompetitionConfigs(exec boil.Executor, insert bool, related ...*CompetitionConfig) error {
	query := "update \"competition_config\" set \"sport_id\" = null where \"sport_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CompetitionConfigs {
			queries.SetScanner(&rel.SportID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Sport = nil
		}
		o.R.CompetitionConfigs = nil
	}

	return o.AddCompetitionConfigs(exec, insert, related...)
}

// RemoveCompetitionConfigs relationships from objects passed in.
// Removes related items from R.CompetitionConfigs (uses pointer comparison, removal does not keep order)
// Sets related.R.Sport.
func (o *Sport) RemoveCompetitionConfigs(exec boil.Executor, related ...*CompetitionConfig) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SportID, nil)
		if rel.R != nil {
			rel.R.Sport = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("sport_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CompetitionConfigs {
			if rel != ri {
				continue
			}

			ln := len(o.R.CompetitionConfigs)
			if ln > 1 && i < ln-1 {
				o.R.CompetitionConfigs[i] = o.R.CompetitionConfigs[ln-1]
			}
			o.R.CompetitionConfigs = o.R.CompetitionConfigs[:ln-1]
			break
		}
	}

	return nil
}

// AddCompetitions adds the given related objects to the existing relationships
// of the sport, optionally inserting them as new records.
// Appends related to o.R.Competitions.
// Sets related.R.Sport appropriately.
func (o *Sport) AddCompetitions(exec boil.Executor, insert bool, related ...*Competition) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SportID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"competitions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sport_id"}),
				strmangle.WhereClause("\"", "\"", 2, competitionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SportID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &sportR{
			Competitions: related,
		}
	} else {
		o.R.Competitions = append(o.R.Competitions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &competitionR{
				Sport: o,
			}
		} else {
			rel.R.Sport = o
		}
	}
	return nil
}

// SetCompetitions removes all previously related items of the
// sport replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Sport's Competitions accordingly.
// Replaces o.R.Competitions with related.
// Sets related.R.Sport's Competitions accordingly.
func (o *Sport) SetCompetitions(exec boil.Executor, insert bool, related ...*Competition) error {
	query := "update \"competitions\" set \"sport_id\" = null where \"sport_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Competitions {
			queries.SetScanner(&rel.SportID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Sport = nil
		}
		o.R.Competitions = nil
	}

	return o.AddCompetitions(exec, insert, related...)
}

// RemoveCompetitions relationships from objects passed in.
// Removes related items from R.Competitions (uses pointer comparison, removal does not keep order)
// Sets related.R.Sport.
func (o *Sport) RemoveCompetitions(exec boil.Executor, related ...*Competition) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SportID, nil)
		if rel.R != nil {
			rel.R.Sport = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("sport_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Competitions {
			if rel != ri {
				continue
			}

			ln := len(o.R.Competitions)
			if ln > 1 && i < ln-1 {
				o.R.Competitions[i] = o.R.Competitions[ln-1]
			}
			o.R.Competitions = o.R.Competitions[:ln-1]
			break
		}
	}

	return nil
}

// AddGames adds the given related objects to the existing relationships
// of the sport, optionally inserting them as new records.
// Appends related to o.R.Games.
// Sets related.R.Sport appropriately.
func (o *Sport) AddGames(exec boil.Executor, insert bool, related ...*Game) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SportID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"games\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sport_id"}),
				strmangle.WhereClause("\"", "\"", 2, gamePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SportID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &sportR{
			Games: related,
		}
	} else {
		o.R.Games = append(o.R.Games, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gameR{
				Sport: o,
			}
		} else {
			rel.R.Sport = o
		}
	}
	return nil
}

// SetGames removes all previously related items of the
// sport replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Sport's Games accordingly.
// Replaces o.R.Games with related.
// Sets related.R.Sport's Games accordingly.
func (o *Sport) SetGames(exec boil.Executor, insert bool, related ...*Game) error {
	query := "update \"games\" set \"sport_id\" = null where \"sport_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Games {
			queries.SetScanner(&rel.SportID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Sport = nil
		}
		o.R.Games = nil
	}

	return o.AddGames(exec, insert, related...)
}

// RemoveGames relationships from objects passed in.
// Removes related items from R.Games (uses pointer comparison, removal does not keep order)
// Sets related.R.Sport.
func (o *Sport) RemoveGames(exec boil.Executor, related ...*Game) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SportID, nil)
		if rel.R != nil {
			rel.R.Sport = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("sport_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Games {
			if rel != ri {
				continue
			}

			ln := len(o.R.Games)
			if ln > 1 && i < ln-1 {
				o.R.Games[i] = o.R.Games[ln-1]
			}
			o.R.Games = o.R.Games[:ln-1]
			break
		}
	}

	return nil
}

// AddMatches adds the given related objects to the existing relationships
// of the sport, optionally inserting them as new records.
// Appends related to o.R.Matches.
// Sets related.R.Sport appropriately.
func (o *Sport) AddMatches(exec boil.Executor, insert bool, related ...*Match) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SportID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"matches\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sport_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SportID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &sportR{
			Matches: related,
		}
	} else {
		o.R.Matches = append(o.R.Matches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchR{
				Sport: o,
			}
		} else {
			rel.R.Sport = o
		}
	}
	return nil
}

// SetMatches removes all previously related items of the
// sport replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Sport's Matches accordingly.
// Replaces o.R.Matches with related.
// Sets related.R.Sport's Matches accordingly.
func (o *Sport) SetMatches(exec boil.Executor, insert bool, related ...*Match) error {
	query := "update \"matches\" set \"sport_id\" = null where \"sport_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Matches {
			queries.SetScanner(&rel.SportID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Sport = nil
		}
		o.R.Matches = nil
	}

	return o.AddMatches(exec, insert, related...)
}

// RemoveMatches relationships from objects passed in.
// Removes related items from R.Matches (uses pointer comparison, removal does not keep order)
// Sets related.R.Sport.
func (o *Sport) RemoveMatches(exec boil.Executor, related ...*Match) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SportID, nil)
		if rel.R != nil {
			rel.R.Sport = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("sport_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Matches {
			if rel != ri {
				continue
			}

			ln := len(o.R.Matches)
			if ln > 1 && i < ln-1 {
				o.R.Matches[i] = o.R.Matches[ln-1]
			}
			o.R.Matches = o.R.Matches[:ln-1]
			break
		}
	}

	return nil
}

// AddPowerups adds the given related objects to the existing relationships
// of the sport, optionally inserting them as new records.
// Appends related to o.R.Powerups.
// Sets related.R.Sport appropriately.
func (o *Sport) AddPowerups(exec boil.Executor, insert bool, related ...*Powerup) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SportID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"powerups\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sport_id"}),
				strmangle.WhereClause("\"", "\"", 2, powerupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SportID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &sportR{
			Powerups: related,
		}
	} else {
		o.R.Powerups = append(o.R.Powerups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &powerupR{
				Sport: o,
			}
		} else {
			rel.R.Sport = o
		}
	}
	return nil
}

// SetPowerups removes all previously related items of the
// sport replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Sport's Powerups accordingly.
// Replaces o.R.Powerups with related.
// Sets related.R.Sport's Powerups accordingly.
func (o *Sport) SetPowerups(exec boil.Executor, insert bool, related ...*Powerup) error {
	query := "update \"powerups\" set \"sport_id\" = null where \"sport_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Powerups {
			queries.SetScanner(&rel.SportID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Sport = nil
		}
		o.R.Powerups = nil
	}

	return o.AddPowerups(exec, insert, related...)
}

// RemovePowerups relationships from objects passed in.
// Removes related items from R.Powerups (uses pointer comparison, removal does not keep order)
// Sets related.R.Sport.
func (o *Sport) RemovePowerups(exec boil.Executor, related ...*Powerup) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SportID, nil)
		if rel.R != nil {
			rel.R.Sport = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("sport_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Powerups {
			if rel != ri {
				continue
			}

			ln := len(o.R.Powerups)
			if ln > 1 && i < ln-1 {
				o.R.Powerups[i] = o.R.Powerups[ln-1]
			}
			o.R.Powerups = o.R.Powerups[:ln-1]
			break
		}
	}

	return nil
}

// Sports retrieves all the records using an executor.
func Sports(mods ...qm.QueryMod) sportQuery {
	mods = append(mods, qm.From("\"sports\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sports\".*"})
	}

	return sportQuery{q}
}

// FindSport retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSport(exec boil.Executor, iD string, selectCols ...string) (*Sport, error) {
	sportObj := &Sport{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sports\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, sportObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from sports")
	}

	return sportObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Sport) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no sports provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(sportColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sportInsertCacheMut.RLock()
	cache, cached := sportInsertCache[key]
	sportInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sportAllColumns,
			sportColumnsWithDefault,
			sportColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sportType, sportMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sportType, sportMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sports\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sports\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into sports")
	}

	if !cached {
		sportInsertCacheMut.Lock()
		sportInsertCache[key] = cache
		sportInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Sport.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Sport) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	key := makeCacheKey(columns, nil)
	sportUpdateCacheMut.RLock()
	cache, cached := sportUpdateCache[key]
	sportUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sportAllColumns,
			sportPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update sports, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sports\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sportPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sportType, sportMapping, append(wl, sportPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update sports row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for sports")
	}

	if !cached {
		sportUpdateCacheMut.Lock()
		sportUpdateCache[key] = cache
		sportUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q sportQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for sports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for sports")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SportSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sports\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sportPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in sport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all sport")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Sport) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no sports provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	nzDefaults := queries.NonZeroDefaultSet(sportColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sportUpsertCacheMut.RLock()
	cache, cached := sportUpsertCache[key]
	sportUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			sportAllColumns,
			sportColumnsWithDefault,
			sportColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sportAllColumns,
			sportPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert sports, could not build update column list")
		}

		ret := strmangle.SetComplement(sportAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(sportPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert sports, could not build conflict column list")
			}

			conflict = make([]string, len(sportPrimaryKeyColumns))
			copy(conflict, sportPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sports\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(sportType, sportMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sportType, sportMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert sports")
	}

	if !cached {
		sportUpsertCacheMut.Lock()
		sportUpsertCache[key] = cache
		sportUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Sport record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Sport) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no Sport provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sportPrimaryKeyMapping)
	sql := "DELETE FROM \"sports\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from sports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for sports")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sportQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no sportQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from sports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for sports")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SportSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sports\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sportPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from sport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for sports")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Sport) Reload(exec boil.Executor) error {
	ret, err := FindSport(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SportSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SportSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sports\".* FROM \"sports\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sportPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in SportSlice")
	}

	*o = slice

	return nil
}

// SportExists checks if the Sport row exists.
func SportExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sports\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if sports exists")
	}

	return exists, nil
}

// Exists checks if the Sport row exists.
func (o *Sport) Exists(exec boil.Executor) (bool, error) {
	return SportExists(exec, o.ID)
}
