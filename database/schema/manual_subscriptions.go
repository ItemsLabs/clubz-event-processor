// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ManualSubscription is an object representing the database table.
type ManualSubscription struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Tier      int       `boil:"tier" json:"tier" toml:"tier" yaml:"tier"`
	ExpiresAt time.Time `boil:"expires_at" json:"expires_at" toml:"expires_at" yaml:"expires_at"`
	UserID    string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *manualSubscriptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L manualSubscriptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ManualSubscriptionColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Tier      string
	ExpiresAt string
	UserID    string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	Tier:      "tier",
	ExpiresAt: "expires_at",
	UserID:    "user_id",
}

var ManualSubscriptionTableColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Tier      string
	ExpiresAt string
	UserID    string
}{
	ID:        "manual_subscriptions.id",
	CreatedAt: "manual_subscriptions.created_at",
	UpdatedAt: "manual_subscriptions.updated_at",
	Tier:      "manual_subscriptions.tier",
	ExpiresAt: "manual_subscriptions.expires_at",
	UserID:    "manual_subscriptions.user_id",
}

// Generated where

var ManualSubscriptionWhere = struct {
	ID        whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	Tier      whereHelperint
	ExpiresAt whereHelpertime_Time
	UserID    whereHelperstring
}{
	ID:        whereHelperstring{field: "\"manual_subscriptions\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"manual_subscriptions\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"manual_subscriptions\".\"updated_at\""},
	Tier:      whereHelperint{field: "\"manual_subscriptions\".\"tier\""},
	ExpiresAt: whereHelpertime_Time{field: "\"manual_subscriptions\".\"expires_at\""},
	UserID:    whereHelperstring{field: "\"manual_subscriptions\".\"user_id\""},
}

// ManualSubscriptionRels is where relationship names are stored.
var ManualSubscriptionRels = struct {
	User string
}{
	User: "User",
}

// manualSubscriptionR is where relationships are stored.
type manualSubscriptionR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*manualSubscriptionR) NewStruct() *manualSubscriptionR {
	return &manualSubscriptionR{}
}

func (r *manualSubscriptionR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// manualSubscriptionL is where Load methods for each relationship are stored.
type manualSubscriptionL struct{}

var (
	manualSubscriptionAllColumns            = []string{"id", "created_at", "updated_at", "tier", "expires_at", "user_id"}
	manualSubscriptionColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "tier", "expires_at", "user_id"}
	manualSubscriptionColumnsWithDefault    = []string{}
	manualSubscriptionPrimaryKeyColumns     = []string{"id"}
	manualSubscriptionGeneratedColumns      = []string{}
)

type (
	// ManualSubscriptionSlice is an alias for a slice of pointers to ManualSubscription.
	// This should almost always be used instead of []ManualSubscription.
	ManualSubscriptionSlice []*ManualSubscription

	manualSubscriptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	manualSubscriptionType                 = reflect.TypeOf(&ManualSubscription{})
	manualSubscriptionMapping              = queries.MakeStructMapping(manualSubscriptionType)
	manualSubscriptionPrimaryKeyMapping, _ = queries.BindMapping(manualSubscriptionType, manualSubscriptionMapping, manualSubscriptionPrimaryKeyColumns)
	manualSubscriptionInsertCacheMut       sync.RWMutex
	manualSubscriptionInsertCache          = make(map[string]insertCache)
	manualSubscriptionUpdateCacheMut       sync.RWMutex
	manualSubscriptionUpdateCache          = make(map[string]updateCache)
	manualSubscriptionUpsertCacheMut       sync.RWMutex
	manualSubscriptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single manualSubscription record from the query.
func (q manualSubscriptionQuery) One(exec boil.Executor) (*ManualSubscription, error) {
	o := &ManualSubscription{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for manual_subscriptions")
	}

	return o, nil
}

// All returns all ManualSubscription records from the query.
func (q manualSubscriptionQuery) All(exec boil.Executor) (ManualSubscriptionSlice, error) {
	var o []*ManualSubscription

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to ManualSubscription slice")
	}

	return o, nil
}

// Count returns the count of all ManualSubscription records in the query.
func (q manualSubscriptionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count manual_subscriptions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q manualSubscriptionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if manual_subscriptions exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *ManualSubscription) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (manualSubscriptionL) LoadUser(e boil.Executor, singular bool, maybeManualSubscription interface{}, mods queries.Applicator) error {
	var slice []*ManualSubscription
	var object *ManualSubscription

	if singular {
		var ok bool
		object, ok = maybeManualSubscription.(*ManualSubscription)
		if !ok {
			object = new(ManualSubscription)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeManualSubscription)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeManualSubscription))
			}
		}
	} else {
		s, ok := maybeManualSubscription.(*[]*ManualSubscription)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeManualSubscription)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeManualSubscription))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &manualSubscriptionR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &manualSubscriptionR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ManualSubscriptions = append(foreign.R.ManualSubscriptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ManualSubscriptions = append(foreign.R.ManualSubscriptions, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the manualSubscription to the related item.
// Sets o.R.User to related.
// Adds o to related.R.ManualSubscriptions.
func (o *ManualSubscription) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"manual_subscriptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, manualSubscriptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &manualSubscriptionR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			ManualSubscriptions: ManualSubscriptionSlice{o},
		}
	} else {
		related.R.ManualSubscriptions = append(related.R.ManualSubscriptions, o)
	}

	return nil
}

// ManualSubscriptions retrieves all the records using an executor.
func ManualSubscriptions(mods ...qm.QueryMod) manualSubscriptionQuery {
	mods = append(mods, qm.From("\"manual_subscriptions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"manual_subscriptions\".*"})
	}

	return manualSubscriptionQuery{q}
}

// FindManualSubscription retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindManualSubscription(exec boil.Executor, iD string, selectCols ...string) (*ManualSubscription, error) {
	manualSubscriptionObj := &ManualSubscription{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"manual_subscriptions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, manualSubscriptionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from manual_subscriptions")
	}

	return manualSubscriptionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ManualSubscription) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no manual_subscriptions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(manualSubscriptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	manualSubscriptionInsertCacheMut.RLock()
	cache, cached := manualSubscriptionInsertCache[key]
	manualSubscriptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			manualSubscriptionAllColumns,
			manualSubscriptionColumnsWithDefault,
			manualSubscriptionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(manualSubscriptionType, manualSubscriptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(manualSubscriptionType, manualSubscriptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"manual_subscriptions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"manual_subscriptions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into manual_subscriptions")
	}

	if !cached {
		manualSubscriptionInsertCacheMut.Lock()
		manualSubscriptionInsertCache[key] = cache
		manualSubscriptionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ManualSubscription.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ManualSubscription) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	manualSubscriptionUpdateCacheMut.RLock()
	cache, cached := manualSubscriptionUpdateCache[key]
	manualSubscriptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			manualSubscriptionAllColumns,
			manualSubscriptionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update manual_subscriptions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"manual_subscriptions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, manualSubscriptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(manualSubscriptionType, manualSubscriptionMapping, append(wl, manualSubscriptionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update manual_subscriptions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for manual_subscriptions")
	}

	if !cached {
		manualSubscriptionUpdateCacheMut.Lock()
		manualSubscriptionUpdateCache[key] = cache
		manualSubscriptionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q manualSubscriptionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for manual_subscriptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for manual_subscriptions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ManualSubscriptionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), manualSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"manual_subscriptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, manualSubscriptionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in manualSubscription slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all manualSubscription")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ManualSubscription) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no manual_subscriptions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(manualSubscriptionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	manualSubscriptionUpsertCacheMut.RLock()
	cache, cached := manualSubscriptionUpsertCache[key]
	manualSubscriptionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			manualSubscriptionAllColumns,
			manualSubscriptionColumnsWithDefault,
			manualSubscriptionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			manualSubscriptionAllColumns,
			manualSubscriptionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert manual_subscriptions, could not build update column list")
		}

		ret := strmangle.SetComplement(manualSubscriptionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(manualSubscriptionPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert manual_subscriptions, could not build conflict column list")
			}

			conflict = make([]string, len(manualSubscriptionPrimaryKeyColumns))
			copy(conflict, manualSubscriptionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"manual_subscriptions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(manualSubscriptionType, manualSubscriptionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(manualSubscriptionType, manualSubscriptionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert manual_subscriptions")
	}

	if !cached {
		manualSubscriptionUpsertCacheMut.Lock()
		manualSubscriptionUpsertCache[key] = cache
		manualSubscriptionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ManualSubscription record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ManualSubscription) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no ManualSubscription provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), manualSubscriptionPrimaryKeyMapping)
	sql := "DELETE FROM \"manual_subscriptions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from manual_subscriptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for manual_subscriptions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q manualSubscriptionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no manualSubscriptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from manual_subscriptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for manual_subscriptions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ManualSubscriptionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), manualSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"manual_subscriptions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, manualSubscriptionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from manualSubscription slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for manual_subscriptions")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ManualSubscription) Reload(exec boil.Executor) error {
	ret, err := FindManualSubscription(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ManualSubscriptionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ManualSubscriptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), manualSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"manual_subscriptions\".* FROM \"manual_subscriptions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, manualSubscriptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in ManualSubscriptionSlice")
	}

	*o = slice

	return nil
}

// ManualSubscriptionExists checks if the ManualSubscription row exists.
func ManualSubscriptionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"manual_subscriptions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if manual_subscriptions exists")
	}

	return exists, nil
}

// Exists checks if the ManualSubscription row exists.
func (o *ManualSubscription) Exists(exec boil.Executor) (bool, error) {
	return ManualSubscriptionExists(exec, o.ID)
}
