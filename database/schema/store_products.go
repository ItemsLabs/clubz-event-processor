// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StoreProduct is an object representing the database table.
type StoreProduct struct {
	ID              string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	StoreProductID  string      `boil:"store_product_id" json:"store_product_id" toml:"store_product_id" yaml:"store_product_id"`
	AppleProductID  null.String `boil:"apple_product_id" json:"apple_product_id,omitempty" toml:"apple_product_id" yaml:"apple_product_id,omitempty"`
	GoogleProductID null.String `boil:"google_product_id" json:"google_product_id,omitempty" toml:"google_product_id" yaml:"google_product_id,omitempty"`
	Description     null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Price           float64     `boil:"price" json:"price" toml:"price" yaml:"price"`
	Currency        string      `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	Active          bool        `boil:"active" json:"active" toml:"active" yaml:"active"`
	ProductType     null.String `boil:"product_type" json:"product_type,omitempty" toml:"product_type" yaml:"product_type,omitempty"`

	R *storeProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L storeProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StoreProductColumns = struct {
	ID              string
	CreatedAt       string
	UpdatedAt       string
	StoreProductID  string
	AppleProductID  string
	GoogleProductID string
	Description     string
	Price           string
	Currency        string
	Active          string
	ProductType     string
}{
	ID:              "id",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	StoreProductID:  "store_product_id",
	AppleProductID:  "apple_product_id",
	GoogleProductID: "google_product_id",
	Description:     "description",
	Price:           "price",
	Currency:        "currency",
	Active:          "active",
	ProductType:     "product_type",
}

var StoreProductTableColumns = struct {
	ID              string
	CreatedAt       string
	UpdatedAt       string
	StoreProductID  string
	AppleProductID  string
	GoogleProductID string
	Description     string
	Price           string
	Currency        string
	Active          string
	ProductType     string
}{
	ID:              "store_products.id",
	CreatedAt:       "store_products.created_at",
	UpdatedAt:       "store_products.updated_at",
	StoreProductID:  "store_products.store_product_id",
	AppleProductID:  "store_products.apple_product_id",
	GoogleProductID: "store_products.google_product_id",
	Description:     "store_products.description",
	Price:           "store_products.price",
	Currency:        "store_products.currency",
	Active:          "store_products.active",
	ProductType:     "store_products.product_type",
}

// Generated where

var StoreProductWhere = struct {
	ID              whereHelperstring
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
	StoreProductID  whereHelperstring
	AppleProductID  whereHelpernull_String
	GoogleProductID whereHelpernull_String
	Description     whereHelpernull_String
	Price           whereHelperfloat64
	Currency        whereHelperstring
	Active          whereHelperbool
	ProductType     whereHelpernull_String
}{
	ID:              whereHelperstring{field: "\"store_products\".\"id\""},
	CreatedAt:       whereHelpertime_Time{field: "\"store_products\".\"created_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"store_products\".\"updated_at\""},
	StoreProductID:  whereHelperstring{field: "\"store_products\".\"store_product_id\""},
	AppleProductID:  whereHelpernull_String{field: "\"store_products\".\"apple_product_id\""},
	GoogleProductID: whereHelpernull_String{field: "\"store_products\".\"google_product_id\""},
	Description:     whereHelpernull_String{field: "\"store_products\".\"description\""},
	Price:           whereHelperfloat64{field: "\"store_products\".\"price\""},
	Currency:        whereHelperstring{field: "\"store_products\".\"currency\""},
	Active:          whereHelperbool{field: "\"store_products\".\"active\""},
	ProductType:     whereHelpernull_String{field: "\"store_products\".\"product_type\""},
}

// StoreProductRels is where relationship names are stored.
var StoreProductRels = struct {
	ProductStoreProductTransactions string
}{
	ProductStoreProductTransactions: "ProductStoreProductTransactions",
}

// storeProductR is where relationships are stored.
type storeProductR struct {
	ProductStoreProductTransactions StoreProductTransactionSlice `boil:"ProductStoreProductTransactions" json:"ProductStoreProductTransactions" toml:"ProductStoreProductTransactions" yaml:"ProductStoreProductTransactions"`
}

// NewStruct creates a new relationship struct
func (*storeProductR) NewStruct() *storeProductR {
	return &storeProductR{}
}

func (r *storeProductR) GetProductStoreProductTransactions() StoreProductTransactionSlice {
	if r == nil {
		return nil
	}
	return r.ProductStoreProductTransactions
}

// storeProductL is where Load methods for each relationship are stored.
type storeProductL struct{}

var (
	storeProductAllColumns            = []string{"id", "created_at", "updated_at", "store_product_id", "apple_product_id", "google_product_id", "description", "price", "currency", "active", "product_type"}
	storeProductColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "store_product_id", "price", "currency", "active"}
	storeProductColumnsWithDefault    = []string{"apple_product_id", "google_product_id", "description", "product_type"}
	storeProductPrimaryKeyColumns     = []string{"id"}
	storeProductGeneratedColumns      = []string{}
)

type (
	// StoreProductSlice is an alias for a slice of pointers to StoreProduct.
	// This should almost always be used instead of []StoreProduct.
	StoreProductSlice []*StoreProduct

	storeProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	storeProductType                 = reflect.TypeOf(&StoreProduct{})
	storeProductMapping              = queries.MakeStructMapping(storeProductType)
	storeProductPrimaryKeyMapping, _ = queries.BindMapping(storeProductType, storeProductMapping, storeProductPrimaryKeyColumns)
	storeProductInsertCacheMut       sync.RWMutex
	storeProductInsertCache          = make(map[string]insertCache)
	storeProductUpdateCacheMut       sync.RWMutex
	storeProductUpdateCache          = make(map[string]updateCache)
	storeProductUpsertCacheMut       sync.RWMutex
	storeProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single storeProduct record from the query.
func (q storeProductQuery) One(exec boil.Executor) (*StoreProduct, error) {
	o := &StoreProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for store_products")
	}

	return o, nil
}

// All returns all StoreProduct records from the query.
func (q storeProductQuery) All(exec boil.Executor) (StoreProductSlice, error) {
	var o []*StoreProduct

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to StoreProduct slice")
	}

	return o, nil
}

// Count returns the count of all StoreProduct records in the query.
func (q storeProductQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count store_products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q storeProductQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if store_products exists")
	}

	return count > 0, nil
}

// ProductStoreProductTransactions retrieves all the store_product_transaction's StoreProductTransactions with an executor via product_id column.
func (o *StoreProduct) ProductStoreProductTransactions(mods ...qm.QueryMod) storeProductTransactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"store_product_transactions\".\"product_id\"=?", o.ID),
	)

	return StoreProductTransactions(queryMods...)
}

// LoadProductStoreProductTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (storeProductL) LoadProductStoreProductTransactions(e boil.Executor, singular bool, maybeStoreProduct interface{}, mods queries.Applicator) error {
	var slice []*StoreProduct
	var object *StoreProduct

	if singular {
		var ok bool
		object, ok = maybeStoreProduct.(*StoreProduct)
		if !ok {
			object = new(StoreProduct)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStoreProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStoreProduct))
			}
		}
	} else {
		s, ok := maybeStoreProduct.(*[]*StoreProduct)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStoreProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStoreProduct))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &storeProductR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeProductR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`store_product_transactions`),
		qm.WhereIn(`store_product_transactions.product_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load store_product_transactions")
	}

	var resultSlice []*StoreProductTransaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice store_product_transactions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on store_product_transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for store_product_transactions")
	}

	if singular {
		object.R.ProductStoreProductTransactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &storeProductTransactionR{}
			}
			foreign.R.Product = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProductID {
				local.R.ProductStoreProductTransactions = append(local.R.ProductStoreProductTransactions, foreign)
				if foreign.R == nil {
					foreign.R = &storeProductTransactionR{}
				}
				foreign.R.Product = local
				break
			}
		}
	}

	return nil
}

// AddProductStoreProductTransactions adds the given related objects to the existing relationships
// of the store_product, optionally inserting them as new records.
// Appends related to o.R.ProductStoreProductTransactions.
// Sets related.R.Product appropriately.
func (o *StoreProduct) AddProductStoreProductTransactions(exec boil.Executor, insert bool, related ...*StoreProductTransaction) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"store_product_transactions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
				strmangle.WhereClause("\"", "\"", 2, storeProductTransactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductID = o.ID
		}
	}

	if o.R == nil {
		o.R = &storeProductR{
			ProductStoreProductTransactions: related,
		}
	} else {
		o.R.ProductStoreProductTransactions = append(o.R.ProductStoreProductTransactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &storeProductTransactionR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// StoreProducts retrieves all the records using an executor.
func StoreProducts(mods ...qm.QueryMod) storeProductQuery {
	mods = append(mods, qm.From("\"store_products\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"store_products\".*"})
	}

	return storeProductQuery{q}
}

// FindStoreProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStoreProduct(exec boil.Executor, iD string, selectCols ...string) (*StoreProduct, error) {
	storeProductObj := &StoreProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"store_products\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, storeProductObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from store_products")
	}

	return storeProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StoreProduct) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no store_products provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(storeProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	storeProductInsertCacheMut.RLock()
	cache, cached := storeProductInsertCache[key]
	storeProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			storeProductAllColumns,
			storeProductColumnsWithDefault,
			storeProductColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(storeProductType, storeProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(storeProductType, storeProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"store_products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"store_products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into store_products")
	}

	if !cached {
		storeProductInsertCacheMut.Lock()
		storeProductInsertCache[key] = cache
		storeProductInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the StoreProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StoreProduct) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	storeProductUpdateCacheMut.RLock()
	cache, cached := storeProductUpdateCache[key]
	storeProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			storeProductAllColumns,
			storeProductPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update store_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"store_products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, storeProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(storeProductType, storeProductMapping, append(wl, storeProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update store_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for store_products")
	}

	if !cached {
		storeProductUpdateCacheMut.Lock()
		storeProductUpdateCache[key] = cache
		storeProductUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q storeProductQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for store_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for store_products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StoreProductSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"store_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, storeProductPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in storeProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all storeProduct")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StoreProduct) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no store_products provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(storeProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	storeProductUpsertCacheMut.RLock()
	cache, cached := storeProductUpsertCache[key]
	storeProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			storeProductAllColumns,
			storeProductColumnsWithDefault,
			storeProductColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			storeProductAllColumns,
			storeProductPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert store_products, could not build update column list")
		}

		ret := strmangle.SetComplement(storeProductAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(storeProductPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert store_products, could not build conflict column list")
			}

			conflict = make([]string, len(storeProductPrimaryKeyColumns))
			copy(conflict, storeProductPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"store_products\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(storeProductType, storeProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(storeProductType, storeProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert store_products")
	}

	if !cached {
		storeProductUpsertCacheMut.Lock()
		storeProductUpsertCache[key] = cache
		storeProductUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single StoreProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StoreProduct) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no StoreProduct provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), storeProductPrimaryKeyMapping)
	sql := "DELETE FROM \"store_products\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from store_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for store_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q storeProductQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no storeProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from store_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for store_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StoreProductSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"store_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storeProductPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from storeProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for store_products")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StoreProduct) Reload(exec boil.Executor) error {
	ret, err := FindStoreProduct(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StoreProductSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StoreProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storeProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"store_products\".* FROM \"store_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storeProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in StoreProductSlice")
	}

	*o = slice

	return nil
}

// StoreProductExists checks if the StoreProduct row exists.
func StoreProductExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"store_products\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if store_products exists")
	}

	return exists, nil
}

// Exists checks if the StoreProduct row exists.
func (o *StoreProduct) Exists(exec boil.Executor) (bool, error) {
	return StoreProductExists(exec, o.ID)
}
