// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ChatRoom is an object representing the database table.
type ChatRoom struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	MatchID     null.String `boil:"match_id" json:"match_id,omitempty" toml:"match_id" yaml:"match_id,omitempty"`
	ImportID    null.String `boil:"import_id" json:"import_id,omitempty" toml:"import_id" yaml:"import_id,omitempty"`

	R *chatRoomR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chatRoomL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChatRoomColumns = struct {
	ID          string
	Name        string
	Description string
	CreatedAt   string
	UpdatedAt   string
	MatchID     string
	ImportID    string
}{
	ID:          "id",
	Name:        "name",
	Description: "description",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	MatchID:     "match_id",
	ImportID:    "import_id",
}

var ChatRoomTableColumns = struct {
	ID          string
	Name        string
	Description string
	CreatedAt   string
	UpdatedAt   string
	MatchID     string
	ImportID    string
}{
	ID:          "chat_rooms.id",
	Name:        "chat_rooms.name",
	Description: "chat_rooms.description",
	CreatedAt:   "chat_rooms.created_at",
	UpdatedAt:   "chat_rooms.updated_at",
	MatchID:     "chat_rooms.match_id",
	ImportID:    "chat_rooms.import_id",
}

// Generated where

var ChatRoomWhere = struct {
	ID          whereHelperstring
	Name        whereHelperstring
	Description whereHelpernull_String
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	MatchID     whereHelpernull_String
	ImportID    whereHelpernull_String
}{
	ID:          whereHelperstring{field: "\"chat_rooms\".\"id\""},
	Name:        whereHelperstring{field: "\"chat_rooms\".\"name\""},
	Description: whereHelpernull_String{field: "\"chat_rooms\".\"description\""},
	CreatedAt:   whereHelpertime_Time{field: "\"chat_rooms\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"chat_rooms\".\"updated_at\""},
	MatchID:     whereHelpernull_String{field: "\"chat_rooms\".\"match_id\""},
	ImportID:    whereHelpernull_String{field: "\"chat_rooms\".\"import_id\""},
}

// ChatRoomRels is where relationship names are stored.
var ChatRoomRels = struct {
	Match              string
	RoomChatRoomMember string
	RoomChatMessages   string
}{
	Match:              "Match",
	RoomChatRoomMember: "RoomChatRoomMember",
	RoomChatMessages:   "RoomChatMessages",
}

// chatRoomR is where relationships are stored.
type chatRoomR struct {
	Match              *Match           `boil:"Match" json:"Match" toml:"Match" yaml:"Match"`
	RoomChatRoomMember *ChatRoomMember  `boil:"RoomChatRoomMember" json:"RoomChatRoomMember" toml:"RoomChatRoomMember" yaml:"RoomChatRoomMember"`
	RoomChatMessages   ChatMessageSlice `boil:"RoomChatMessages" json:"RoomChatMessages" toml:"RoomChatMessages" yaml:"RoomChatMessages"`
}

// NewStruct creates a new relationship struct
func (*chatRoomR) NewStruct() *chatRoomR {
	return &chatRoomR{}
}

func (r *chatRoomR) GetMatch() *Match {
	if r == nil {
		return nil
	}
	return r.Match
}

func (r *chatRoomR) GetRoomChatRoomMember() *ChatRoomMember {
	if r == nil {
		return nil
	}
	return r.RoomChatRoomMember
}

func (r *chatRoomR) GetRoomChatMessages() ChatMessageSlice {
	if r == nil {
		return nil
	}
	return r.RoomChatMessages
}

// chatRoomL is where Load methods for each relationship are stored.
type chatRoomL struct{}

var (
	chatRoomAllColumns            = []string{"id", "name", "description", "created_at", "updated_at", "match_id", "import_id"}
	chatRoomColumnsWithoutDefault = []string{"id", "name", "created_at", "updated_at"}
	chatRoomColumnsWithDefault    = []string{"description", "match_id", "import_id"}
	chatRoomPrimaryKeyColumns     = []string{"id"}
	chatRoomGeneratedColumns      = []string{}
)

type (
	// ChatRoomSlice is an alias for a slice of pointers to ChatRoom.
	// This should almost always be used instead of []ChatRoom.
	ChatRoomSlice []*ChatRoom

	chatRoomQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chatRoomType                 = reflect.TypeOf(&ChatRoom{})
	chatRoomMapping              = queries.MakeStructMapping(chatRoomType)
	chatRoomPrimaryKeyMapping, _ = queries.BindMapping(chatRoomType, chatRoomMapping, chatRoomPrimaryKeyColumns)
	chatRoomInsertCacheMut       sync.RWMutex
	chatRoomInsertCache          = make(map[string]insertCache)
	chatRoomUpdateCacheMut       sync.RWMutex
	chatRoomUpdateCache          = make(map[string]updateCache)
	chatRoomUpsertCacheMut       sync.RWMutex
	chatRoomUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single chatRoom record from the query.
func (q chatRoomQuery) One(exec boil.Executor) (*ChatRoom, error) {
	o := &ChatRoom{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for chat_rooms")
	}

	return o, nil
}

// All returns all ChatRoom records from the query.
func (q chatRoomQuery) All(exec boil.Executor) (ChatRoomSlice, error) {
	var o []*ChatRoom

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to ChatRoom slice")
	}

	return o, nil
}

// Count returns the count of all ChatRoom records in the query.
func (q chatRoomQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count chat_rooms rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q chatRoomQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if chat_rooms exists")
	}

	return count > 0, nil
}

// Match pointed to by the foreign key.
func (o *ChatRoom) Match(mods ...qm.QueryMod) matchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MatchID),
	}

	queryMods = append(queryMods, mods...)

	return Matches(queryMods...)
}

// RoomChatRoomMember pointed to by the foreign key.
func (o *ChatRoom) RoomChatRoomMember(mods ...qm.QueryMod) chatRoomMemberQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"room_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return ChatRoomMembers(queryMods...)
}

// RoomChatMessages retrieves all the chat_message's ChatMessages with an executor via room_id column.
func (o *ChatRoom) RoomChatMessages(mods ...qm.QueryMod) chatMessageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chat_messages\".\"room_id\"=?", o.ID),
	)

	return ChatMessages(queryMods...)
}

// LoadMatch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chatRoomL) LoadMatch(e boil.Executor, singular bool, maybeChatRoom interface{}, mods queries.Applicator) error {
	var slice []*ChatRoom
	var object *ChatRoom

	if singular {
		var ok bool
		object, ok = maybeChatRoom.(*ChatRoom)
		if !ok {
			object = new(ChatRoom)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChatRoom)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChatRoom))
			}
		}
	} else {
		s, ok := maybeChatRoom.(*[]*ChatRoom)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChatRoom)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChatRoom))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &chatRoomR{}
		}
		if !queries.IsNil(object.MatchID) {
			args[object.MatchID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chatRoomR{}
			}

			if !queries.IsNil(obj.MatchID) {
				args[obj.MatchID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Match")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Match")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Match = foreign
		if foreign.R == nil {
			foreign.R = &matchR{}
		}
		foreign.R.ChatRooms = append(foreign.R.ChatRooms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MatchID, foreign.ID) {
				local.R.Match = foreign
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.ChatRooms = append(foreign.R.ChatRooms, local)
				break
			}
		}
	}

	return nil
}

// LoadRoomChatRoomMember allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (chatRoomL) LoadRoomChatRoomMember(e boil.Executor, singular bool, maybeChatRoom interface{}, mods queries.Applicator) error {
	var slice []*ChatRoom
	var object *ChatRoom

	if singular {
		var ok bool
		object, ok = maybeChatRoom.(*ChatRoom)
		if !ok {
			object = new(ChatRoom)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChatRoom)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChatRoom))
			}
		}
	} else {
		s, ok := maybeChatRoom.(*[]*ChatRoom)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChatRoom)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChatRoom))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &chatRoomR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chatRoomR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`chat_room_members`),
		qm.WhereIn(`chat_room_members.room_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ChatRoomMember")
	}

	var resultSlice []*ChatRoomMember
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ChatRoomMember")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chat_room_members")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chat_room_members")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RoomChatRoomMember = foreign
		if foreign.R == nil {
			foreign.R = &chatRoomMemberR{}
		}
		foreign.R.Room = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.RoomID {
				local.R.RoomChatRoomMember = foreign
				if foreign.R == nil {
					foreign.R = &chatRoomMemberR{}
				}
				foreign.R.Room = local
				break
			}
		}
	}

	return nil
}

// LoadRoomChatMessages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chatRoomL) LoadRoomChatMessages(e boil.Executor, singular bool, maybeChatRoom interface{}, mods queries.Applicator) error {
	var slice []*ChatRoom
	var object *ChatRoom

	if singular {
		var ok bool
		object, ok = maybeChatRoom.(*ChatRoom)
		if !ok {
			object = new(ChatRoom)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChatRoom)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChatRoom))
			}
		}
	} else {
		s, ok := maybeChatRoom.(*[]*ChatRoom)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChatRoom)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChatRoom))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &chatRoomR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chatRoomR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`chat_messages`),
		qm.WhereIn(`chat_messages.room_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chat_messages")
	}

	var resultSlice []*ChatMessage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chat_messages")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chat_messages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chat_messages")
	}

	if singular {
		object.R.RoomChatMessages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chatMessageR{}
			}
			foreign.R.Room = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RoomID {
				local.R.RoomChatMessages = append(local.R.RoomChatMessages, foreign)
				if foreign.R == nil {
					foreign.R = &chatMessageR{}
				}
				foreign.R.Room = local
				break
			}
		}
	}

	return nil
}

// SetMatch of the chatRoom to the related item.
// Sets o.R.Match to related.
// Adds o to related.R.ChatRooms.
func (o *ChatRoom) SetMatch(exec boil.Executor, insert bool, related *Match) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chat_rooms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"match_id"}),
		strmangle.WhereClause("\"", "\"", 2, chatRoomPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MatchID, related.ID)
	if o.R == nil {
		o.R = &chatRoomR{
			Match: related,
		}
	} else {
		o.R.Match = related
	}

	if related.R == nil {
		related.R = &matchR{
			ChatRooms: ChatRoomSlice{o},
		}
	} else {
		related.R.ChatRooms = append(related.R.ChatRooms, o)
	}

	return nil
}

// RemoveMatch relationship.
// Sets o.R.Match to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ChatRoom) RemoveMatch(exec boil.Executor, related *Match) error {
	var err error

	queries.SetScanner(&o.MatchID, nil)
	if _, err = o.Update(exec, boil.Whitelist("match_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Match = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ChatRooms {
		if queries.Equal(o.MatchID, ri.MatchID) {
			continue
		}

		ln := len(related.R.ChatRooms)
		if ln > 1 && i < ln-1 {
			related.R.ChatRooms[i] = related.R.ChatRooms[ln-1]
		}
		related.R.ChatRooms = related.R.ChatRooms[:ln-1]
		break
	}
	return nil
}

// SetRoomChatRoomMember of the chatRoom to the related item.
// Sets o.R.RoomChatRoomMember to related.
// Adds o to related.R.Room.
func (o *ChatRoom) SetRoomChatRoomMember(exec boil.Executor, insert bool, related *ChatRoomMember) error {
	var err error

	if insert {
		related.RoomID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"chat_room_members\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"room_id"}),
			strmangle.WhereClause("\"", "\"", 2, chatRoomMemberPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.RoomID = o.ID
	}

	if o.R == nil {
		o.R = &chatRoomR{
			RoomChatRoomMember: related,
		}
	} else {
		o.R.RoomChatRoomMember = related
	}

	if related.R == nil {
		related.R = &chatRoomMemberR{
			Room: o,
		}
	} else {
		related.R.Room = o
	}
	return nil
}

// AddRoomChatMessages adds the given related objects to the existing relationships
// of the chat_room, optionally inserting them as new records.
// Appends related to o.R.RoomChatMessages.
// Sets related.R.Room appropriately.
func (o *ChatRoom) AddRoomChatMessages(exec boil.Executor, insert bool, related ...*ChatMessage) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RoomID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chat_messages\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"room_id"}),
				strmangle.WhereClause("\"", "\"", 2, chatMessagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RoomID = o.ID
		}
	}

	if o.R == nil {
		o.R = &chatRoomR{
			RoomChatMessages: related,
		}
	} else {
		o.R.RoomChatMessages = append(o.R.RoomChatMessages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chatMessageR{
				Room: o,
			}
		} else {
			rel.R.Room = o
		}
	}
	return nil
}

// ChatRooms retrieves all the records using an executor.
func ChatRooms(mods ...qm.QueryMod) chatRoomQuery {
	mods = append(mods, qm.From("\"chat_rooms\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"chat_rooms\".*"})
	}

	return chatRoomQuery{q}
}

// FindChatRoom retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChatRoom(exec boil.Executor, iD string, selectCols ...string) (*ChatRoom, error) {
	chatRoomObj := &ChatRoom{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chat_rooms\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, chatRoomObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from chat_rooms")
	}

	return chatRoomObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChatRoom) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no chat_rooms provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(chatRoomColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chatRoomInsertCacheMut.RLock()
	cache, cached := chatRoomInsertCache[key]
	chatRoomInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chatRoomAllColumns,
			chatRoomColumnsWithDefault,
			chatRoomColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(chatRoomType, chatRoomMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chatRoomType, chatRoomMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chat_rooms\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chat_rooms\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into chat_rooms")
	}

	if !cached {
		chatRoomInsertCacheMut.Lock()
		chatRoomInsertCache[key] = cache
		chatRoomInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ChatRoom.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChatRoom) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	chatRoomUpdateCacheMut.RLock()
	cache, cached := chatRoomUpdateCache[key]
	chatRoomUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chatRoomAllColumns,
			chatRoomPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update chat_rooms, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chat_rooms\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, chatRoomPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chatRoomType, chatRoomMapping, append(wl, chatRoomPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update chat_rooms row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for chat_rooms")
	}

	if !cached {
		chatRoomUpdateCacheMut.Lock()
		chatRoomUpdateCache[key] = cache
		chatRoomUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q chatRoomQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for chat_rooms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for chat_rooms")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChatRoomSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatRoomPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chat_rooms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, chatRoomPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in chatRoom slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all chatRoom")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChatRoom) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no chat_rooms provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(chatRoomColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chatRoomUpsertCacheMut.RLock()
	cache, cached := chatRoomUpsertCache[key]
	chatRoomUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			chatRoomAllColumns,
			chatRoomColumnsWithDefault,
			chatRoomColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			chatRoomAllColumns,
			chatRoomPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert chat_rooms, could not build update column list")
		}

		ret := strmangle.SetComplement(chatRoomAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(chatRoomPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert chat_rooms, could not build conflict column list")
			}

			conflict = make([]string, len(chatRoomPrimaryKeyColumns))
			copy(conflict, chatRoomPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"chat_rooms\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(chatRoomType, chatRoomMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chatRoomType, chatRoomMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert chat_rooms")
	}

	if !cached {
		chatRoomUpsertCacheMut.Lock()
		chatRoomUpsertCache[key] = cache
		chatRoomUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ChatRoom record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChatRoom) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no ChatRoom provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chatRoomPrimaryKeyMapping)
	sql := "DELETE FROM \"chat_rooms\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from chat_rooms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for chat_rooms")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q chatRoomQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no chatRoomQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from chat_rooms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for chat_rooms")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChatRoomSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatRoomPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"chat_rooms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chatRoomPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from chatRoom slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for chat_rooms")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChatRoom) Reload(exec boil.Executor) error {
	ret, err := FindChatRoom(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChatRoomSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChatRoomSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatRoomPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chat_rooms\".* FROM \"chat_rooms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chatRoomPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in ChatRoomSlice")
	}

	*o = slice

	return nil
}

// ChatRoomExists checks if the ChatRoom row exists.
func ChatRoomExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chat_rooms\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if chat_rooms exists")
	}

	return exists, nil
}

// Exists checks if the ChatRoom row exists.
func (o *ChatRoom) Exists(exec boil.Executor) (bool, error) {
	return ChatRoomExists(exec, o.ID)
}
