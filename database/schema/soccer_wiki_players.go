// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SoccerWikiPlayer is an object representing the database table.
type SoccerWikiPlayer struct {
	ID                  int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	ImportID            int         `boil:"import_id" json:"import_id" toml:"import_id" yaml:"import_id"`
	FirstName           null.String `boil:"first_name" json:"first_name,omitempty" toml:"first_name" yaml:"first_name,omitempty"`
	SecondName          null.String `boil:"second_name" json:"second_name,omitempty" toml:"second_name" yaml:"second_name,omitempty"`
	BirthDate           null.Time   `boil:"birth_date" json:"birth_date,omitempty" toml:"birth_date" yaml:"birth_date,omitempty"`
	Height              null.Int    `boil:"height" json:"height,omitempty" toml:"height" yaml:"height,omitempty"`
	Weight              null.Int    `boil:"weight" json:"weight,omitempty" toml:"weight" yaml:"weight,omitempty"`
	Image               null.String `boil:"image" json:"image,omitempty" toml:"image" yaml:"image,omitempty"`
	InternalImageStatus int         `boil:"internal_image_status" json:"internal_image_status" toml:"internal_image_status" yaml:"internal_image_status"`
	InternalImageURL    null.String `boil:"internal_image_url" json:"internal_image_url,omitempty" toml:"internal_image_url" yaml:"internal_image_url,omitempty"`

	R *soccerWikiPlayerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L soccerWikiPlayerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SoccerWikiPlayerColumns = struct {
	ID                  string
	ImportID            string
	FirstName           string
	SecondName          string
	BirthDate           string
	Height              string
	Weight              string
	Image               string
	InternalImageStatus string
	InternalImageURL    string
}{
	ID:                  "id",
	ImportID:            "import_id",
	FirstName:           "first_name",
	SecondName:          "second_name",
	BirthDate:           "birth_date",
	Height:              "height",
	Weight:              "weight",
	Image:               "image",
	InternalImageStatus: "internal_image_status",
	InternalImageURL:    "internal_image_url",
}

var SoccerWikiPlayerTableColumns = struct {
	ID                  string
	ImportID            string
	FirstName           string
	SecondName          string
	BirthDate           string
	Height              string
	Weight              string
	Image               string
	InternalImageStatus string
	InternalImageURL    string
}{
	ID:                  "soccer_wiki_players.id",
	ImportID:            "soccer_wiki_players.import_id",
	FirstName:           "soccer_wiki_players.first_name",
	SecondName:          "soccer_wiki_players.second_name",
	BirthDate:           "soccer_wiki_players.birth_date",
	Height:              "soccer_wiki_players.height",
	Weight:              "soccer_wiki_players.weight",
	Image:               "soccer_wiki_players.image",
	InternalImageStatus: "soccer_wiki_players.internal_image_status",
	InternalImageURL:    "soccer_wiki_players.internal_image_url",
}

// Generated where

var SoccerWikiPlayerWhere = struct {
	ID                  whereHelperint
	ImportID            whereHelperint
	FirstName           whereHelpernull_String
	SecondName          whereHelpernull_String
	BirthDate           whereHelpernull_Time
	Height              whereHelpernull_Int
	Weight              whereHelpernull_Int
	Image               whereHelpernull_String
	InternalImageStatus whereHelperint
	InternalImageURL    whereHelpernull_String
}{
	ID:                  whereHelperint{field: "\"soccer_wiki_players\".\"id\""},
	ImportID:            whereHelperint{field: "\"soccer_wiki_players\".\"import_id\""},
	FirstName:           whereHelpernull_String{field: "\"soccer_wiki_players\".\"first_name\""},
	SecondName:          whereHelpernull_String{field: "\"soccer_wiki_players\".\"second_name\""},
	BirthDate:           whereHelpernull_Time{field: "\"soccer_wiki_players\".\"birth_date\""},
	Height:              whereHelpernull_Int{field: "\"soccer_wiki_players\".\"height\""},
	Weight:              whereHelpernull_Int{field: "\"soccer_wiki_players\".\"weight\""},
	Image:               whereHelpernull_String{field: "\"soccer_wiki_players\".\"image\""},
	InternalImageStatus: whereHelperint{field: "\"soccer_wiki_players\".\"internal_image_status\""},
	InternalImageURL:    whereHelpernull_String{field: "\"soccer_wiki_players\".\"internal_image_url\""},
}

// SoccerWikiPlayerRels is where relationship names are stored.
var SoccerWikiPlayerRels = struct {
	Players string
}{
	Players: "Players",
}

// soccerWikiPlayerR is where relationships are stored.
type soccerWikiPlayerR struct {
	Players PlayerSlice `boil:"Players" json:"Players" toml:"Players" yaml:"Players"`
}

// NewStruct creates a new relationship struct
func (*soccerWikiPlayerR) NewStruct() *soccerWikiPlayerR {
	return &soccerWikiPlayerR{}
}

func (r *soccerWikiPlayerR) GetPlayers() PlayerSlice {
	if r == nil {
		return nil
	}
	return r.Players
}

// soccerWikiPlayerL is where Load methods for each relationship are stored.
type soccerWikiPlayerL struct{}

var (
	soccerWikiPlayerAllColumns            = []string{"id", "import_id", "first_name", "second_name", "birth_date", "height", "weight", "image", "internal_image_status", "internal_image_url"}
	soccerWikiPlayerColumnsWithoutDefault = []string{"import_id", "internal_image_status"}
	soccerWikiPlayerColumnsWithDefault    = []string{"id", "first_name", "second_name", "birth_date", "height", "weight", "image", "internal_image_url"}
	soccerWikiPlayerPrimaryKeyColumns     = []string{"id"}
	soccerWikiPlayerGeneratedColumns      = []string{}
)

type (
	// SoccerWikiPlayerSlice is an alias for a slice of pointers to SoccerWikiPlayer.
	// This should almost always be used instead of []SoccerWikiPlayer.
	SoccerWikiPlayerSlice []*SoccerWikiPlayer

	soccerWikiPlayerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	soccerWikiPlayerType                 = reflect.TypeOf(&SoccerWikiPlayer{})
	soccerWikiPlayerMapping              = queries.MakeStructMapping(soccerWikiPlayerType)
	soccerWikiPlayerPrimaryKeyMapping, _ = queries.BindMapping(soccerWikiPlayerType, soccerWikiPlayerMapping, soccerWikiPlayerPrimaryKeyColumns)
	soccerWikiPlayerInsertCacheMut       sync.RWMutex
	soccerWikiPlayerInsertCache          = make(map[string]insertCache)
	soccerWikiPlayerUpdateCacheMut       sync.RWMutex
	soccerWikiPlayerUpdateCache          = make(map[string]updateCache)
	soccerWikiPlayerUpsertCacheMut       sync.RWMutex
	soccerWikiPlayerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single soccerWikiPlayer record from the query.
func (q soccerWikiPlayerQuery) One(exec boil.Executor) (*SoccerWikiPlayer, error) {
	o := &SoccerWikiPlayer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for soccer_wiki_players")
	}

	return o, nil
}

// All returns all SoccerWikiPlayer records from the query.
func (q soccerWikiPlayerQuery) All(exec boil.Executor) (SoccerWikiPlayerSlice, error) {
	var o []*SoccerWikiPlayer

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to SoccerWikiPlayer slice")
	}

	return o, nil
}

// Count returns the count of all SoccerWikiPlayer records in the query.
func (q soccerWikiPlayerQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count soccer_wiki_players rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q soccerWikiPlayerQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if soccer_wiki_players exists")
	}

	return count > 0, nil
}

// Players retrieves all the player's Players with an executor.
func (o *SoccerWikiPlayer) Players(mods ...qm.QueryMod) playerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"players\".\"soccer_wiki_player_id\"=?", o.ID),
	)

	return Players(queryMods...)
}

// LoadPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (soccerWikiPlayerL) LoadPlayers(e boil.Executor, singular bool, maybeSoccerWikiPlayer interface{}, mods queries.Applicator) error {
	var slice []*SoccerWikiPlayer
	var object *SoccerWikiPlayer

	if singular {
		var ok bool
		object, ok = maybeSoccerWikiPlayer.(*SoccerWikiPlayer)
		if !ok {
			object = new(SoccerWikiPlayer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSoccerWikiPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSoccerWikiPlayer))
			}
		}
	} else {
		s, ok := maybeSoccerWikiPlayer.(*[]*SoccerWikiPlayer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSoccerWikiPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSoccerWikiPlayer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &soccerWikiPlayerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &soccerWikiPlayerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.soccer_wiki_player_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load players")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice players")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if singular {
		object.R.Players = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerR{}
			}
			foreign.R.SoccerWikiPlayer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SoccerWikiPlayerID) {
				local.R.Players = append(local.R.Players, foreign)
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.SoccerWikiPlayer = local
				break
			}
		}
	}

	return nil
}

// AddPlayers adds the given related objects to the existing relationships
// of the soccer_wiki_player, optionally inserting them as new records.
// Appends related to o.R.Players.
// Sets related.R.SoccerWikiPlayer appropriately.
func (o *SoccerWikiPlayer) AddPlayers(exec boil.Executor, insert bool, related ...*Player) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SoccerWikiPlayerID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"players\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"soccer_wiki_player_id"}),
				strmangle.WhereClause("\"", "\"", 2, playerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SoccerWikiPlayerID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &soccerWikiPlayerR{
			Players: related,
		}
	} else {
		o.R.Players = append(o.R.Players, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerR{
				SoccerWikiPlayer: o,
			}
		} else {
			rel.R.SoccerWikiPlayer = o
		}
	}
	return nil
}

// SetPlayers removes all previously related items of the
// soccer_wiki_player replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SoccerWikiPlayer's Players accordingly.
// Replaces o.R.Players with related.
// Sets related.R.SoccerWikiPlayer's Players accordingly.
func (o *SoccerWikiPlayer) SetPlayers(exec boil.Executor, insert bool, related ...*Player) error {
	query := "update \"players\" set \"soccer_wiki_player_id\" = null where \"soccer_wiki_player_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Players {
			queries.SetScanner(&rel.SoccerWikiPlayerID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SoccerWikiPlayer = nil
		}
		o.R.Players = nil
	}

	return o.AddPlayers(exec, insert, related...)
}

// RemovePlayers relationships from objects passed in.
// Removes related items from R.Players (uses pointer comparison, removal does not keep order)
// Sets related.R.SoccerWikiPlayer.
func (o *SoccerWikiPlayer) RemovePlayers(exec boil.Executor, related ...*Player) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SoccerWikiPlayerID, nil)
		if rel.R != nil {
			rel.R.SoccerWikiPlayer = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("soccer_wiki_player_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Players {
			if rel != ri {
				continue
			}

			ln := len(o.R.Players)
			if ln > 1 && i < ln-1 {
				o.R.Players[i] = o.R.Players[ln-1]
			}
			o.R.Players = o.R.Players[:ln-1]
			break
		}
	}

	return nil
}

// SoccerWikiPlayers retrieves all the records using an executor.
func SoccerWikiPlayers(mods ...qm.QueryMod) soccerWikiPlayerQuery {
	mods = append(mods, qm.From("\"soccer_wiki_players\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"soccer_wiki_players\".*"})
	}

	return soccerWikiPlayerQuery{q}
}

// FindSoccerWikiPlayer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSoccerWikiPlayer(exec boil.Executor, iD int, selectCols ...string) (*SoccerWikiPlayer, error) {
	soccerWikiPlayerObj := &SoccerWikiPlayer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"soccer_wiki_players\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, soccerWikiPlayerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from soccer_wiki_players")
	}

	return soccerWikiPlayerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SoccerWikiPlayer) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no soccer_wiki_players provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(soccerWikiPlayerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	soccerWikiPlayerInsertCacheMut.RLock()
	cache, cached := soccerWikiPlayerInsertCache[key]
	soccerWikiPlayerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			soccerWikiPlayerAllColumns,
			soccerWikiPlayerColumnsWithDefault,
			soccerWikiPlayerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(soccerWikiPlayerType, soccerWikiPlayerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(soccerWikiPlayerType, soccerWikiPlayerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"soccer_wiki_players\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"soccer_wiki_players\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into soccer_wiki_players")
	}

	if !cached {
		soccerWikiPlayerInsertCacheMut.Lock()
		soccerWikiPlayerInsertCache[key] = cache
		soccerWikiPlayerInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the SoccerWikiPlayer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SoccerWikiPlayer) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	soccerWikiPlayerUpdateCacheMut.RLock()
	cache, cached := soccerWikiPlayerUpdateCache[key]
	soccerWikiPlayerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			soccerWikiPlayerAllColumns,
			soccerWikiPlayerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update soccer_wiki_players, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"soccer_wiki_players\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, soccerWikiPlayerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(soccerWikiPlayerType, soccerWikiPlayerMapping, append(wl, soccerWikiPlayerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update soccer_wiki_players row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for soccer_wiki_players")
	}

	if !cached {
		soccerWikiPlayerUpdateCacheMut.Lock()
		soccerWikiPlayerUpdateCache[key] = cache
		soccerWikiPlayerUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q soccerWikiPlayerQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for soccer_wiki_players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for soccer_wiki_players")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SoccerWikiPlayerSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soccerWikiPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"soccer_wiki_players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, soccerWikiPlayerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in soccerWikiPlayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all soccerWikiPlayer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SoccerWikiPlayer) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no soccer_wiki_players provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(soccerWikiPlayerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	soccerWikiPlayerUpsertCacheMut.RLock()
	cache, cached := soccerWikiPlayerUpsertCache[key]
	soccerWikiPlayerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			soccerWikiPlayerAllColumns,
			soccerWikiPlayerColumnsWithDefault,
			soccerWikiPlayerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			soccerWikiPlayerAllColumns,
			soccerWikiPlayerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert soccer_wiki_players, could not build update column list")
		}

		ret := strmangle.SetComplement(soccerWikiPlayerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(soccerWikiPlayerPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert soccer_wiki_players, could not build conflict column list")
			}

			conflict = make([]string, len(soccerWikiPlayerPrimaryKeyColumns))
			copy(conflict, soccerWikiPlayerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"soccer_wiki_players\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(soccerWikiPlayerType, soccerWikiPlayerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(soccerWikiPlayerType, soccerWikiPlayerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert soccer_wiki_players")
	}

	if !cached {
		soccerWikiPlayerUpsertCacheMut.Lock()
		soccerWikiPlayerUpsertCache[key] = cache
		soccerWikiPlayerUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single SoccerWikiPlayer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SoccerWikiPlayer) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no SoccerWikiPlayer provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), soccerWikiPlayerPrimaryKeyMapping)
	sql := "DELETE FROM \"soccer_wiki_players\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from soccer_wiki_players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for soccer_wiki_players")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q soccerWikiPlayerQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no soccerWikiPlayerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from soccer_wiki_players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for soccer_wiki_players")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SoccerWikiPlayerSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soccerWikiPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"soccer_wiki_players\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, soccerWikiPlayerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from soccerWikiPlayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for soccer_wiki_players")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SoccerWikiPlayer) Reload(exec boil.Executor) error {
	ret, err := FindSoccerWikiPlayer(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SoccerWikiPlayerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SoccerWikiPlayerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soccerWikiPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"soccer_wiki_players\".* FROM \"soccer_wiki_players\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, soccerWikiPlayerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in SoccerWikiPlayerSlice")
	}

	*o = slice

	return nil
}

// SoccerWikiPlayerExists checks if the SoccerWikiPlayer row exists.
func SoccerWikiPlayerExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"soccer_wiki_players\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if soccer_wiki_players exists")
	}

	return exists, nil
}

// Exists checks if the SoccerWikiPlayer row exists.
func (o *SoccerWikiPlayer) Exists(exec boil.Executor) (bool, error) {
	return SoccerWikiPlayerExists(exec, o.ID)
}
