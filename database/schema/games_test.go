// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGames(t *testing.T) {
	t.Parallel()

	query := Games()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGamesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Game{}
	if err = randomize.Struct(seed, o, gameDBTypes, true, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Games().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGamesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Game{}
	if err = randomize.Struct(seed, o, gameDBTypes, true, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Games().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Games().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGamesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Game{}
	if err = randomize.Struct(seed, o, gameDBTypes, true, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GameSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Games().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGamesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Game{}
	if err = randomize.Struct(seed, o, gameDBTypes, true, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GameExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Game exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GameExists to return true, but got false.")
	}
}

func testGamesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Game{}
	if err = randomize.Struct(seed, o, gameDBTypes, true, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	gameFound, err := FindGame(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if gameFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGamesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Game{}
	if err = randomize.Struct(seed, o, gameDBTypes, true, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Games().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testGamesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Game{}
	if err = randomize.Struct(seed, o, gameDBTypes, true, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Games().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGamesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gameOne := &Game{}
	gameTwo := &Game{}
	if err = randomize.Struct(seed, gameOne, gameDBTypes, false, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}
	if err = randomize.Struct(seed, gameTwo, gameDBTypes, false, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = gameOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gameTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Games().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGamesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	gameOne := &Game{}
	gameTwo := &Game{}
	if err = randomize.Struct(seed, gameOne, gameDBTypes, false, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}
	if err = randomize.Struct(seed, gameTwo, gameDBTypes, false, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = gameOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gameTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Games().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testGamesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Game{}
	if err = randomize.Struct(seed, o, gameDBTypes, true, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Games().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGamesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Game{}
	if err = randomize.Struct(seed, o, gameDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(gameColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Games().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGameToManyAppInboxes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Game
	var b, c AppInbox

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameDBTypes, true, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, appInboxDBTypes, false, appInboxColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, appInboxDBTypes, false, appInboxColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.GameID, a.ID)
	queries.Assign(&c.GameID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AppInboxes().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.GameID, b.GameID) {
			bFound = true
		}
		if queries.Equal(v.GameID, c.GameID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GameSlice{&a}
	if err = a.L.LoadAppInboxes(tx, false, (*[]*Game)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AppInboxes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AppInboxes = nil
	if err = a.L.LoadAppInboxes(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AppInboxes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGameToManyGameEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Game
	var b, c GameEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameDBTypes, true, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, gameEventDBTypes, false, gameEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameEventDBTypes, false, gameEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GameID = a.ID
	c.GameID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GameEvents().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GameID == b.GameID {
			bFound = true
		}
		if v.GameID == c.GameID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GameSlice{&a}
	if err = a.L.LoadGameEvents(tx, false, (*[]*Game)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GameEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GameEvents = nil
	if err = a.L.LoadGameEvents(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GameEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGameToManyGamePicks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Game
	var b, c GamePick

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameDBTypes, true, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, gamePickDBTypes, false, gamePickColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gamePickDBTypes, false, gamePickColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GameID = a.ID
	c.GameID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GamePicks().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GameID == b.GameID {
			bFound = true
		}
		if v.GameID == c.GameID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GameSlice{&a}
	if err = a.L.LoadGamePicks(tx, false, (*[]*Game)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GamePicks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GamePicks = nil
	if err = a.L.LoadGamePicks(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GamePicks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGameToManyGamePowerups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Game
	var b, c GamePowerup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameDBTypes, true, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, gamePowerupDBTypes, false, gamePowerupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gamePowerupDBTypes, false, gamePowerupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GameID = a.ID
	c.GameID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GamePowerups().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GameID == b.GameID {
			bFound = true
		}
		if v.GameID == c.GameID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GameSlice{&a}
	if err = a.L.LoadGamePowerups(tx, false, (*[]*Game)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GamePowerups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GamePowerups = nil
	if err = a.L.LoadGamePowerups(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GamePowerups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGameToManyMatchLeaderboards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Game
	var b, c MatchLeaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameDBTypes, true, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchLeaderboardDBTypes, false, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchLeaderboardDBTypes, false, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GameID = a.ID
	c.GameID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MatchLeaderboards().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GameID == b.GameID {
			bFound = true
		}
		if v.GameID == c.GameID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GameSlice{&a}
	if err = a.L.LoadMatchLeaderboards(tx, false, (*[]*Game)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchLeaderboards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MatchLeaderboards = nil
	if err = a.L.LoadMatchLeaderboards(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchLeaderboards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGameToManyAddOpAppInboxes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Game
	var b, c, d, e AppInbox

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AppInbox{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AppInbox{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAppInboxes(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.GameID) {
			t.Error("foreign key was wrong value", a.ID, first.GameID)
		}
		if !queries.Equal(a.ID, second.GameID) {
			t.Error("foreign key was wrong value", a.ID, second.GameID)
		}

		if first.R.Game != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Game != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AppInboxes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AppInboxes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AppInboxes().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testGameToManySetOpAppInboxes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Game
	var b, c, d, e AppInbox

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AppInbox{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAppInboxes(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AppInboxes().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAppInboxes(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AppInboxes().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.GameID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.GameID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.GameID) {
		t.Error("foreign key was wrong value", a.ID, d.GameID)
	}
	if !queries.Equal(a.ID, e.GameID) {
		t.Error("foreign key was wrong value", a.ID, e.GameID)
	}

	if b.R.Game != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Game != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Game != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Game != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.AppInboxes[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.AppInboxes[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testGameToManyRemoveOpAppInboxes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Game
	var b, c, d, e AppInbox

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AppInbox{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAppInboxes(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AppInboxes().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAppInboxes(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AppInboxes().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.GameID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.GameID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Game != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Game != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Game != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Game != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.AppInboxes) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.AppInboxes[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.AppInboxes[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testGameToManyAddOpGameEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Game
	var b, c, d, e GameEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GameEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gameEventDBTypes, false, strmangle.SetComplement(gameEventPrimaryKeyColumns, gameEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GameEvent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGameEvents(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GameID {
			t.Error("foreign key was wrong value", a.ID, first.GameID)
		}
		if a.ID != second.GameID {
			t.Error("foreign key was wrong value", a.ID, second.GameID)
		}

		if first.R.Game != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Game != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GameEvents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GameEvents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GameEvents().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGameToManyAddOpGamePicks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Game
	var b, c, d, e GamePick

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GamePick{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gamePickDBTypes, false, strmangle.SetComplement(gamePickPrimaryKeyColumns, gamePickColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GamePick{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGamePicks(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GameID {
			t.Error("foreign key was wrong value", a.ID, first.GameID)
		}
		if a.ID != second.GameID {
			t.Error("foreign key was wrong value", a.ID, second.GameID)
		}

		if first.R.Game != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Game != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GamePicks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GamePicks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GamePicks().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGameToManyAddOpGamePowerups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Game
	var b, c, d, e GamePowerup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GamePowerup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gamePowerupDBTypes, false, strmangle.SetComplement(gamePowerupPrimaryKeyColumns, gamePowerupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GamePowerup{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGamePowerups(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GameID {
			t.Error("foreign key was wrong value", a.ID, first.GameID)
		}
		if a.ID != second.GameID {
			t.Error("foreign key was wrong value", a.ID, second.GameID)
		}

		if first.R.Game != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Game != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GamePowerups[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GamePowerups[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GamePowerups().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGameToManyAddOpMatchLeaderboards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Game
	var b, c, d, e MatchLeaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchLeaderboard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MatchLeaderboard{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMatchLeaderboards(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GameID {
			t.Error("foreign key was wrong value", a.ID, first.GameID)
		}
		if a.ID != second.GameID {
			t.Error("foreign key was wrong value", a.ID, second.GameID)
		}

		if first.R.Game != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Game != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MatchLeaderboards[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MatchLeaderboards[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MatchLeaderboards().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGameToOneMatchUsingMatch(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Game
	var foreign Match

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gameDBTypes, false, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MatchID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Match().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GameSlice{&local}
	if err = local.L.LoadMatch(tx, false, (*[]*Game)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Match == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Match = nil
	if err = local.L.LoadMatch(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Match == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testGameToOneSportUsingSport(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Game
	var foreign Sport

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gameDBTypes, true, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, sportDBTypes, false, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SportID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Sport().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GameSlice{&local}
	if err = local.L.LoadSport(tx, false, (*[]*Game)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sport == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Sport = nil
	if err = local.L.LoadSport(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sport == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testGameToOneUserUsingUser(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Game
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gameDBTypes, false, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GameSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*Game)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testGameToOneSetOpMatchUsingMatch(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Game
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Match{&b, &c} {
		err = a.SetMatch(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Match != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Games[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MatchID != x.ID {
			t.Error("foreign key was wrong value", a.MatchID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MatchID))
		reflect.Indirect(reflect.ValueOf(&a.MatchID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MatchID != x.ID {
			t.Error("foreign key was wrong value", a.MatchID, x.ID)
		}
	}
}
func testGameToOneSetOpSportUsingSport(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Game
	var b, c Sport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Sport{&b, &c} {
		err = a.SetSport(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Sport != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Games[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SportID, x.ID) {
			t.Error("foreign key was wrong value", a.SportID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SportID))
		reflect.Indirect(reflect.ValueOf(&a.SportID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SportID, x.ID) {
			t.Error("foreign key was wrong value", a.SportID, x.ID)
		}
	}
}

func testGameToOneRemoveOpSportUsingSport(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Game
	var b Sport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSport(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSport(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Sport().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Sport != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SportID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Games) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testGameToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Game
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Games[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testGamesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Game{}
	if err = randomize.Struct(seed, o, gameDBTypes, true, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testGamesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Game{}
	if err = randomize.Struct(seed, o, gameDBTypes, true, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GameSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testGamesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Game{}
	if err = randomize.Struct(seed, o, gameDBTypes, true, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Games().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	gameDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `Status`: `character varying`, `Version`: `integer`, `Score`: `double precision`, `MatchID`: `uuid`, `UserID`: `uuid`, `Premium`: `boolean`, `Num`: `integer`, `SubscriptionTier`: `integer`, `SportID`: `uuid`, `Notified`: `boolean`}
	_           = bytes.MinRead
)

func testGamesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(gamePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(gameAllColumns) == len(gamePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Game{}
	if err = randomize.Struct(seed, o, gameDBTypes, true, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Games().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gameDBTypes, true, gamePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGamesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(gameAllColumns) == len(gamePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Game{}
	if err = randomize.Struct(seed, o, gameDBTypes, true, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Games().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gameDBTypes, true, gamePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(gameAllColumns, gamePrimaryKeyColumns) {
		fields = gameAllColumns
	} else {
		fields = strmangle.SetComplement(
			gameAllColumns,
			gamePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GameSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGamesUpsert(t *testing.T) {
	t.Parallel()

	if len(gameAllColumns) == len(gamePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Game{}
	if err = randomize.Struct(seed, &o, gameDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Game: %s", err)
	}

	count, err := Games().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, gameDBTypes, false, gamePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Game: %s", err)
	}

	count, err = Games().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
