// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GamePick is an object representing the database table.
type GamePick struct {
	ID               string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt        time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	EndedAt          null.Time   `boil:"ended_at" json:"ended_at,omitempty" toml:"ended_at" yaml:"ended_at,omitempty"`
	Position         int         `boil:"position" json:"position" toml:"position" yaml:"position"`
	Score            float64     `boil:"score" json:"score" toml:"score" yaml:"score"`
	GameID           string      `boil:"game_id" json:"game_id" toml:"game_id" yaml:"game_id"`
	PlayerID         string      `boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	Version          int         `boil:"version" json:"version" toml:"version" yaml:"version"`
	Minute           int         `boil:"minute" json:"minute" toml:"minute" yaml:"minute"`
	Second           int         `boil:"second" json:"second" toml:"second" yaml:"second"`
	UserSwapped      bool        `boil:"user_swapped" json:"user_swapped" toml:"user_swapped" yaml:"user_swapped"`
	EndedMinute      null.Int    `boil:"ended_minute" json:"ended_minute,omitempty" toml:"ended_minute" yaml:"ended_minute,omitempty"`
	EndedSecond      null.Int    `boil:"ended_second" json:"ended_second,omitempty" toml:"ended_second" yaml:"ended_second,omitempty"`
	AssignedPlayerID null.String `boil:"assigned_player_id" json:"assigned_player_id,omitempty" toml:"assigned_player_id" yaml:"assigned_player_id,omitempty"`

	R *gamePickR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gamePickL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GamePickColumns = struct {
	ID               string
	CreatedAt        string
	UpdatedAt        string
	EndedAt          string
	Position         string
	Score            string
	GameID           string
	PlayerID         string
	Version          string
	Minute           string
	Second           string
	UserSwapped      string
	EndedMinute      string
	EndedSecond      string
	AssignedPlayerID string
}{
	ID:               "id",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	EndedAt:          "ended_at",
	Position:         "position",
	Score:            "score",
	GameID:           "game_id",
	PlayerID:         "player_id",
	Version:          "version",
	Minute:           "minute",
	Second:           "second",
	UserSwapped:      "user_swapped",
	EndedMinute:      "ended_minute",
	EndedSecond:      "ended_second",
	AssignedPlayerID: "assigned_player_id",
}

var GamePickTableColumns = struct {
	ID               string
	CreatedAt        string
	UpdatedAt        string
	EndedAt          string
	Position         string
	Score            string
	GameID           string
	PlayerID         string
	Version          string
	Minute           string
	Second           string
	UserSwapped      string
	EndedMinute      string
	EndedSecond      string
	AssignedPlayerID string
}{
	ID:               "game_picks.id",
	CreatedAt:        "game_picks.created_at",
	UpdatedAt:        "game_picks.updated_at",
	EndedAt:          "game_picks.ended_at",
	Position:         "game_picks.position",
	Score:            "game_picks.score",
	GameID:           "game_picks.game_id",
	PlayerID:         "game_picks.player_id",
	Version:          "game_picks.version",
	Minute:           "game_picks.minute",
	Second:           "game_picks.second",
	UserSwapped:      "game_picks.user_swapped",
	EndedMinute:      "game_picks.ended_minute",
	EndedSecond:      "game_picks.ended_second",
	AssignedPlayerID: "game_picks.assigned_player_id",
}

// Generated where

var GamePickWhere = struct {
	ID               whereHelperstring
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	EndedAt          whereHelpernull_Time
	Position         whereHelperint
	Score            whereHelperfloat64
	GameID           whereHelperstring
	PlayerID         whereHelperstring
	Version          whereHelperint
	Minute           whereHelperint
	Second           whereHelperint
	UserSwapped      whereHelperbool
	EndedMinute      whereHelpernull_Int
	EndedSecond      whereHelpernull_Int
	AssignedPlayerID whereHelpernull_String
}{
	ID:               whereHelperstring{field: "\"game_picks\".\"id\""},
	CreatedAt:        whereHelpertime_Time{field: "\"game_picks\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"game_picks\".\"updated_at\""},
	EndedAt:          whereHelpernull_Time{field: "\"game_picks\".\"ended_at\""},
	Position:         whereHelperint{field: "\"game_picks\".\"position\""},
	Score:            whereHelperfloat64{field: "\"game_picks\".\"score\""},
	GameID:           whereHelperstring{field: "\"game_picks\".\"game_id\""},
	PlayerID:         whereHelperstring{field: "\"game_picks\".\"player_id\""},
	Version:          whereHelperint{field: "\"game_picks\".\"version\""},
	Minute:           whereHelperint{field: "\"game_picks\".\"minute\""},
	Second:           whereHelperint{field: "\"game_picks\".\"second\""},
	UserSwapped:      whereHelperbool{field: "\"game_picks\".\"user_swapped\""},
	EndedMinute:      whereHelpernull_Int{field: "\"game_picks\".\"ended_minute\""},
	EndedSecond:      whereHelpernull_Int{field: "\"game_picks\".\"ended_second\""},
	AssignedPlayerID: whereHelpernull_String{field: "\"game_picks\".\"assigned_player_id\""},
}

// GamePickRels is where relationship names are stored.
var GamePickRels = struct {
	AssignedPlayer string
	Game           string
	Player         string
	GameEvents     string
}{
	AssignedPlayer: "AssignedPlayer",
	Game:           "Game",
	Player:         "Player",
	GameEvents:     "GameEvents",
}

// gamePickR is where relationships are stored.
type gamePickR struct {
	AssignedPlayer *AssignedPlayer `boil:"AssignedPlayer" json:"AssignedPlayer" toml:"AssignedPlayer" yaml:"AssignedPlayer"`
	Game           *Game           `boil:"Game" json:"Game" toml:"Game" yaml:"Game"`
	Player         *Player         `boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
	GameEvents     GameEventSlice  `boil:"GameEvents" json:"GameEvents" toml:"GameEvents" yaml:"GameEvents"`
}

// NewStruct creates a new relationship struct
func (*gamePickR) NewStruct() *gamePickR {
	return &gamePickR{}
}

func (r *gamePickR) GetAssignedPlayer() *AssignedPlayer {
	if r == nil {
		return nil
	}
	return r.AssignedPlayer
}

func (r *gamePickR) GetGame() *Game {
	if r == nil {
		return nil
	}
	return r.Game
}

func (r *gamePickR) GetPlayer() *Player {
	if r == nil {
		return nil
	}
	return r.Player
}

func (r *gamePickR) GetGameEvents() GameEventSlice {
	if r == nil {
		return nil
	}
	return r.GameEvents
}

// gamePickL is where Load methods for each relationship are stored.
type gamePickL struct{}

var (
	gamePickAllColumns            = []string{"id", "created_at", "updated_at", "ended_at", "position", "score", "game_id", "player_id", "version", "minute", "second", "user_swapped", "ended_minute", "ended_second", "assigned_player_id"}
	gamePickColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "position", "score", "game_id", "player_id", "version", "minute", "second", "user_swapped"}
	gamePickColumnsWithDefault    = []string{"ended_at", "ended_minute", "ended_second", "assigned_player_id"}
	gamePickPrimaryKeyColumns     = []string{"id"}
	gamePickGeneratedColumns      = []string{}
)

type (
	// GamePickSlice is an alias for a slice of pointers to GamePick.
	// This should almost always be used instead of []GamePick.
	GamePickSlice []*GamePick

	gamePickQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gamePickType                 = reflect.TypeOf(&GamePick{})
	gamePickMapping              = queries.MakeStructMapping(gamePickType)
	gamePickPrimaryKeyMapping, _ = queries.BindMapping(gamePickType, gamePickMapping, gamePickPrimaryKeyColumns)
	gamePickInsertCacheMut       sync.RWMutex
	gamePickInsertCache          = make(map[string]insertCache)
	gamePickUpdateCacheMut       sync.RWMutex
	gamePickUpdateCache          = make(map[string]updateCache)
	gamePickUpsertCacheMut       sync.RWMutex
	gamePickUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single gamePick record from the query.
func (q gamePickQuery) One(exec boil.Executor) (*GamePick, error) {
	o := &GamePick{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for game_picks")
	}

	return o, nil
}

// All returns all GamePick records from the query.
func (q gamePickQuery) All(exec boil.Executor) (GamePickSlice, error) {
	var o []*GamePick

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to GamePick slice")
	}

	return o, nil
}

// Count returns the count of all GamePick records in the query.
func (q gamePickQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count game_picks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gamePickQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if game_picks exists")
	}

	return count > 0, nil
}

// AssignedPlayer pointed to by the foreign key.
func (o *GamePick) AssignedPlayer(mods ...qm.QueryMod) assignedPlayerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AssignedPlayerID),
	}

	queryMods = append(queryMods, mods...)

	return AssignedPlayers(queryMods...)
}

// Game pointed to by the foreign key.
func (o *GamePick) Game(mods ...qm.QueryMod) gameQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GameID),
	}

	queryMods = append(queryMods, mods...)

	return Games(queryMods...)
}

// Player pointed to by the foreign key.
func (o *GamePick) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
	}

	queryMods = append(queryMods, mods...)

	return Players(queryMods...)
}

// GameEvents retrieves all the game_event's GameEvents with an executor.
func (o *GamePick) GameEvents(mods ...qm.QueryMod) gameEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"game_events\".\"game_pick_id\"=?", o.ID),
	)

	return GameEvents(queryMods...)
}

// LoadAssignedPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gamePickL) LoadAssignedPlayer(e boil.Executor, singular bool, maybeGamePick interface{}, mods queries.Applicator) error {
	var slice []*GamePick
	var object *GamePick

	if singular {
		var ok bool
		object, ok = maybeGamePick.(*GamePick)
		if !ok {
			object = new(GamePick)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGamePick)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGamePick))
			}
		}
	} else {
		s, ok := maybeGamePick.(*[]*GamePick)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGamePick)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGamePick))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gamePickR{}
		}
		if !queries.IsNil(object.AssignedPlayerID) {
			args[object.AssignedPlayerID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gamePickR{}
			}

			if !queries.IsNil(obj.AssignedPlayerID) {
				args[obj.AssignedPlayerID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`assigned_players`),
		qm.WhereIn(`assigned_players.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AssignedPlayer")
	}

	var resultSlice []*AssignedPlayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AssignedPlayer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for assigned_players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assigned_players")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AssignedPlayer = foreign
		if foreign.R == nil {
			foreign.R = &assignedPlayerR{}
		}
		foreign.R.GamePicks = append(foreign.R.GamePicks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AssignedPlayerID, foreign.ID) {
				local.R.AssignedPlayer = foreign
				if foreign.R == nil {
					foreign.R = &assignedPlayerR{}
				}
				foreign.R.GamePicks = append(foreign.R.GamePicks, local)
				break
			}
		}
	}

	return nil
}

// LoadGame allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gamePickL) LoadGame(e boil.Executor, singular bool, maybeGamePick interface{}, mods queries.Applicator) error {
	var slice []*GamePick
	var object *GamePick

	if singular {
		var ok bool
		object, ok = maybeGamePick.(*GamePick)
		if !ok {
			object = new(GamePick)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGamePick)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGamePick))
			}
		}
	} else {
		s, ok := maybeGamePick.(*[]*GamePick)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGamePick)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGamePick))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gamePickR{}
		}
		args[object.GameID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gamePickR{}
			}

			args[obj.GameID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`games`),
		qm.WhereIn(`games.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Game")
	}

	var resultSlice []*Game
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Game")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for games")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for games")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Game = foreign
		if foreign.R == nil {
			foreign.R = &gameR{}
		}
		foreign.R.GamePicks = append(foreign.R.GamePicks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GameID == foreign.ID {
				local.R.Game = foreign
				if foreign.R == nil {
					foreign.R = &gameR{}
				}
				foreign.R.GamePicks = append(foreign.R.GamePicks, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gamePickL) LoadPlayer(e boil.Executor, singular bool, maybeGamePick interface{}, mods queries.Applicator) error {
	var slice []*GamePick
	var object *GamePick

	if singular {
		var ok bool
		object, ok = maybeGamePick.(*GamePick)
		if !ok {
			object = new(GamePick)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGamePick)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGamePick))
			}
		}
	} else {
		s, ok := maybeGamePick.(*[]*GamePick)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGamePick)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGamePick))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gamePickR{}
		}
		args[object.PlayerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gamePickR{}
			}

			args[obj.PlayerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.GamePicks = append(foreign.R.GamePicks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.GamePicks = append(foreign.R.GamePicks, local)
				break
			}
		}
	}

	return nil
}

// LoadGameEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gamePickL) LoadGameEvents(e boil.Executor, singular bool, maybeGamePick interface{}, mods queries.Applicator) error {
	var slice []*GamePick
	var object *GamePick

	if singular {
		var ok bool
		object, ok = maybeGamePick.(*GamePick)
		if !ok {
			object = new(GamePick)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGamePick)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGamePick))
			}
		}
	} else {
		s, ok := maybeGamePick.(*[]*GamePick)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGamePick)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGamePick))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gamePickR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gamePickR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`game_events`),
		qm.WhereIn(`game_events.game_pick_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load game_events")
	}

	var resultSlice []*GameEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice game_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on game_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_events")
	}

	if singular {
		object.R.GameEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gameEventR{}
			}
			foreign.R.GamePick = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GamePickID {
				local.R.GameEvents = append(local.R.GameEvents, foreign)
				if foreign.R == nil {
					foreign.R = &gameEventR{}
				}
				foreign.R.GamePick = local
				break
			}
		}
	}

	return nil
}

// SetAssignedPlayer of the gamePick to the related item.
// Sets o.R.AssignedPlayer to related.
// Adds o to related.R.GamePicks.
func (o *GamePick) SetAssignedPlayer(exec boil.Executor, insert bool, related *AssignedPlayer) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"game_picks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"assigned_player_id"}),
		strmangle.WhereClause("\"", "\"", 2, gamePickPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AssignedPlayerID, related.ID)
	if o.R == nil {
		o.R = &gamePickR{
			AssignedPlayer: related,
		}
	} else {
		o.R.AssignedPlayer = related
	}

	if related.R == nil {
		related.R = &assignedPlayerR{
			GamePicks: GamePickSlice{o},
		}
	} else {
		related.R.GamePicks = append(related.R.GamePicks, o)
	}

	return nil
}

// RemoveAssignedPlayer relationship.
// Sets o.R.AssignedPlayer to nil.
// Removes o from all passed in related items' relationships struct.
func (o *GamePick) RemoveAssignedPlayer(exec boil.Executor, related *AssignedPlayer) error {
	var err error

	queries.SetScanner(&o.AssignedPlayerID, nil)
	if _, err = o.Update(exec, boil.Whitelist("assigned_player_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AssignedPlayer = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.GamePicks {
		if queries.Equal(o.AssignedPlayerID, ri.AssignedPlayerID) {
			continue
		}

		ln := len(related.R.GamePicks)
		if ln > 1 && i < ln-1 {
			related.R.GamePicks[i] = related.R.GamePicks[ln-1]
		}
		related.R.GamePicks = related.R.GamePicks[:ln-1]
		break
	}
	return nil
}

// SetGame of the gamePick to the related item.
// Sets o.R.Game to related.
// Adds o to related.R.GamePicks.
func (o *GamePick) SetGame(exec boil.Executor, insert bool, related *Game) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"game_picks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"game_id"}),
		strmangle.WhereClause("\"", "\"", 2, gamePickPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GameID = related.ID
	if o.R == nil {
		o.R = &gamePickR{
			Game: related,
		}
	} else {
		o.R.Game = related
	}

	if related.R == nil {
		related.R = &gameR{
			GamePicks: GamePickSlice{o},
		}
	} else {
		related.R.GamePicks = append(related.R.GamePicks, o)
	}

	return nil
}

// SetPlayer of the gamePick to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.GamePicks.
func (o *GamePick) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"game_picks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, gamePickPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &gamePickR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			GamePicks: GamePickSlice{o},
		}
	} else {
		related.R.GamePicks = append(related.R.GamePicks, o)
	}

	return nil
}

// AddGameEvents adds the given related objects to the existing relationships
// of the game_pick, optionally inserting them as new records.
// Appends related to o.R.GameEvents.
// Sets related.R.GamePick appropriately.
func (o *GamePick) AddGameEvents(exec boil.Executor, insert bool, related ...*GameEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GamePickID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"game_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"game_pick_id"}),
				strmangle.WhereClause("\"", "\"", 2, gameEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GamePickID = o.ID
		}
	}

	if o.R == nil {
		o.R = &gamePickR{
			GameEvents: related,
		}
	} else {
		o.R.GameEvents = append(o.R.GameEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gameEventR{
				GamePick: o,
			}
		} else {
			rel.R.GamePick = o
		}
	}
	return nil
}

// GamePicks retrieves all the records using an executor.
func GamePicks(mods ...qm.QueryMod) gamePickQuery {
	mods = append(mods, qm.From("\"game_picks\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"game_picks\".*"})
	}

	return gamePickQuery{q}
}

// FindGamePick retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGamePick(exec boil.Executor, iD string, selectCols ...string) (*GamePick, error) {
	gamePickObj := &GamePick{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"game_picks\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, gamePickObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from game_picks")
	}

	return gamePickObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GamePick) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no game_picks provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(gamePickColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gamePickInsertCacheMut.RLock()
	cache, cached := gamePickInsertCache[key]
	gamePickInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gamePickAllColumns,
			gamePickColumnsWithDefault,
			gamePickColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gamePickType, gamePickMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gamePickType, gamePickMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"game_picks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"game_picks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into game_picks")
	}

	if !cached {
		gamePickInsertCacheMut.Lock()
		gamePickInsertCache[key] = cache
		gamePickInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the GamePick.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GamePick) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	gamePickUpdateCacheMut.RLock()
	cache, cached := gamePickUpdateCache[key]
	gamePickUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gamePickAllColumns,
			gamePickPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update game_picks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"game_picks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gamePickPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gamePickType, gamePickMapping, append(wl, gamePickPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update game_picks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for game_picks")
	}

	if !cached {
		gamePickUpdateCacheMut.Lock()
		gamePickUpdateCache[key] = cache
		gamePickUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q gamePickQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for game_picks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for game_picks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GamePickSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gamePickPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"game_picks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gamePickPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in gamePick slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all gamePick")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GamePick) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no game_picks provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(gamePickColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gamePickUpsertCacheMut.RLock()
	cache, cached := gamePickUpsertCache[key]
	gamePickUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			gamePickAllColumns,
			gamePickColumnsWithDefault,
			gamePickColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			gamePickAllColumns,
			gamePickPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert game_picks, could not build update column list")
		}

		ret := strmangle.SetComplement(gamePickAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(gamePickPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert game_picks, could not build conflict column list")
			}

			conflict = make([]string, len(gamePickPrimaryKeyColumns))
			copy(conflict, gamePickPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"game_picks\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(gamePickType, gamePickMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gamePickType, gamePickMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert game_picks")
	}

	if !cached {
		gamePickUpsertCacheMut.Lock()
		gamePickUpsertCache[key] = cache
		gamePickUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single GamePick record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GamePick) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no GamePick provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gamePickPrimaryKeyMapping)
	sql := "DELETE FROM \"game_picks\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from game_picks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for game_picks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gamePickQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no gamePickQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from game_picks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for game_picks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GamePickSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gamePickPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"game_picks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gamePickPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from gamePick slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for game_picks")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GamePick) Reload(exec boil.Executor) error {
	ret, err := FindGamePick(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GamePickSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GamePickSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gamePickPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"game_picks\".* FROM \"game_picks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gamePickPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in GamePickSlice")
	}

	*o = slice

	return nil
}

// GamePickExists checks if the GamePick row exists.
func GamePickExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"game_picks\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if game_picks exists")
	}

	return exists, nil
}

// Exists checks if the GamePick row exists.
func (o *GamePick) Exists(exec boil.Executor) (bool, error) {
	return GamePickExists(exec, o.ID)
}
