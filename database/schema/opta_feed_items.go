// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OptaFeedItem is an object representing the database table.
type OptaFeedItem struct {
	ID               string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt        time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UniqueID         string      `boil:"unique_id" json:"unique_id" toml:"unique_id" yaml:"unique_id"`
	EventID          string      `boil:"event_id" json:"event_id" toml:"event_id" yaml:"event_id"`
	CurrentVersionID null.String `boil:"current_version_id" json:"current_version_id,omitempty" toml:"current_version_id" yaml:"current_version_id,omitempty"`
	MatchID          string      `boil:"match_id" json:"match_id" toml:"match_id" yaml:"match_id"`

	R *optaFeedItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L optaFeedItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OptaFeedItemColumns = struct {
	ID               string
	CreatedAt        string
	UpdatedAt        string
	UniqueID         string
	EventID          string
	CurrentVersionID string
	MatchID          string
}{
	ID:               "id",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	UniqueID:         "unique_id",
	EventID:          "event_id",
	CurrentVersionID: "current_version_id",
	MatchID:          "match_id",
}

var OptaFeedItemTableColumns = struct {
	ID               string
	CreatedAt        string
	UpdatedAt        string
	UniqueID         string
	EventID          string
	CurrentVersionID string
	MatchID          string
}{
	ID:               "opta_feed_items.id",
	CreatedAt:        "opta_feed_items.created_at",
	UpdatedAt:        "opta_feed_items.updated_at",
	UniqueID:         "opta_feed_items.unique_id",
	EventID:          "opta_feed_items.event_id",
	CurrentVersionID: "opta_feed_items.current_version_id",
	MatchID:          "opta_feed_items.match_id",
}

// Generated where

var OptaFeedItemWhere = struct {
	ID               whereHelperstring
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	UniqueID         whereHelperstring
	EventID          whereHelperstring
	CurrentVersionID whereHelpernull_String
	MatchID          whereHelperstring
}{
	ID:               whereHelperstring{field: "\"opta_feed_items\".\"id\""},
	CreatedAt:        whereHelpertime_Time{field: "\"opta_feed_items\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"opta_feed_items\".\"updated_at\""},
	UniqueID:         whereHelperstring{field: "\"opta_feed_items\".\"unique_id\""},
	EventID:          whereHelperstring{field: "\"opta_feed_items\".\"event_id\""},
	CurrentVersionID: whereHelpernull_String{field: "\"opta_feed_items\".\"current_version_id\""},
	MatchID:          whereHelperstring{field: "\"opta_feed_items\".\"match_id\""},
}

// OptaFeedItemRels is where relationship names are stored.
var OptaFeedItemRels = struct {
	CurrentVersion           string
	Match                    string
	ItemOptaFeedItemVersions string
}{
	CurrentVersion:           "CurrentVersion",
	Match:                    "Match",
	ItemOptaFeedItemVersions: "ItemOptaFeedItemVersions",
}

// optaFeedItemR is where relationships are stored.
type optaFeedItemR struct {
	CurrentVersion           *OptaFeedItemVersion     `boil:"CurrentVersion" json:"CurrentVersion" toml:"CurrentVersion" yaml:"CurrentVersion"`
	Match                    *Match                   `boil:"Match" json:"Match" toml:"Match" yaml:"Match"`
	ItemOptaFeedItemVersions OptaFeedItemVersionSlice `boil:"ItemOptaFeedItemVersions" json:"ItemOptaFeedItemVersions" toml:"ItemOptaFeedItemVersions" yaml:"ItemOptaFeedItemVersions"`
}

// NewStruct creates a new relationship struct
func (*optaFeedItemR) NewStruct() *optaFeedItemR {
	return &optaFeedItemR{}
}

func (r *optaFeedItemR) GetCurrentVersion() *OptaFeedItemVersion {
	if r == nil {
		return nil
	}
	return r.CurrentVersion
}

func (r *optaFeedItemR) GetMatch() *Match {
	if r == nil {
		return nil
	}
	return r.Match
}

func (r *optaFeedItemR) GetItemOptaFeedItemVersions() OptaFeedItemVersionSlice {
	if r == nil {
		return nil
	}
	return r.ItemOptaFeedItemVersions
}

// optaFeedItemL is where Load methods for each relationship are stored.
type optaFeedItemL struct{}

var (
	optaFeedItemAllColumns            = []string{"id", "created_at", "updated_at", "unique_id", "event_id", "current_version_id", "match_id"}
	optaFeedItemColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "unique_id", "event_id", "match_id"}
	optaFeedItemColumnsWithDefault    = []string{"current_version_id"}
	optaFeedItemPrimaryKeyColumns     = []string{"id"}
	optaFeedItemGeneratedColumns      = []string{}
)

type (
	// OptaFeedItemSlice is an alias for a slice of pointers to OptaFeedItem.
	// This should almost always be used instead of []OptaFeedItem.
	OptaFeedItemSlice []*OptaFeedItem

	optaFeedItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	optaFeedItemType                 = reflect.TypeOf(&OptaFeedItem{})
	optaFeedItemMapping              = queries.MakeStructMapping(optaFeedItemType)
	optaFeedItemPrimaryKeyMapping, _ = queries.BindMapping(optaFeedItemType, optaFeedItemMapping, optaFeedItemPrimaryKeyColumns)
	optaFeedItemInsertCacheMut       sync.RWMutex
	optaFeedItemInsertCache          = make(map[string]insertCache)
	optaFeedItemUpdateCacheMut       sync.RWMutex
	optaFeedItemUpdateCache          = make(map[string]updateCache)
	optaFeedItemUpsertCacheMut       sync.RWMutex
	optaFeedItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single optaFeedItem record from the query.
func (q optaFeedItemQuery) One(exec boil.Executor) (*OptaFeedItem, error) {
	o := &OptaFeedItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for opta_feed_items")
	}

	return o, nil
}

// All returns all OptaFeedItem records from the query.
func (q optaFeedItemQuery) All(exec boil.Executor) (OptaFeedItemSlice, error) {
	var o []*OptaFeedItem

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to OptaFeedItem slice")
	}

	return o, nil
}

// Count returns the count of all OptaFeedItem records in the query.
func (q optaFeedItemQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count opta_feed_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q optaFeedItemQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if opta_feed_items exists")
	}

	return count > 0, nil
}

// CurrentVersion pointed to by the foreign key.
func (o *OptaFeedItem) CurrentVersion(mods ...qm.QueryMod) optaFeedItemVersionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CurrentVersionID),
	}

	queryMods = append(queryMods, mods...)

	return OptaFeedItemVersions(queryMods...)
}

// Match pointed to by the foreign key.
func (o *OptaFeedItem) Match(mods ...qm.QueryMod) matchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MatchID),
	}

	queryMods = append(queryMods, mods...)

	return Matches(queryMods...)
}

// ItemOptaFeedItemVersions retrieves all the opta_feed_item_version's OptaFeedItemVersions with an executor via item_id column.
func (o *OptaFeedItem) ItemOptaFeedItemVersions(mods ...qm.QueryMod) optaFeedItemVersionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"opta_feed_item_versions\".\"item_id\"=?", o.ID),
	)

	return OptaFeedItemVersions(queryMods...)
}

// LoadCurrentVersion allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (optaFeedItemL) LoadCurrentVersion(e boil.Executor, singular bool, maybeOptaFeedItem interface{}, mods queries.Applicator) error {
	var slice []*OptaFeedItem
	var object *OptaFeedItem

	if singular {
		var ok bool
		object, ok = maybeOptaFeedItem.(*OptaFeedItem)
		if !ok {
			object = new(OptaFeedItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOptaFeedItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOptaFeedItem))
			}
		}
	} else {
		s, ok := maybeOptaFeedItem.(*[]*OptaFeedItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOptaFeedItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOptaFeedItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &optaFeedItemR{}
		}
		if !queries.IsNil(object.CurrentVersionID) {
			args[object.CurrentVersionID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &optaFeedItemR{}
			}

			if !queries.IsNil(obj.CurrentVersionID) {
				args[obj.CurrentVersionID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`opta_feed_item_versions`),
		qm.WhereIn(`opta_feed_item_versions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OptaFeedItemVersion")
	}

	var resultSlice []*OptaFeedItemVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OptaFeedItemVersion")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for opta_feed_item_versions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for opta_feed_item_versions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CurrentVersion = foreign
		if foreign.R == nil {
			foreign.R = &optaFeedItemVersionR{}
		}
		foreign.R.CurrentVersionOptaFeedItems = append(foreign.R.CurrentVersionOptaFeedItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CurrentVersionID, foreign.ID) {
				local.R.CurrentVersion = foreign
				if foreign.R == nil {
					foreign.R = &optaFeedItemVersionR{}
				}
				foreign.R.CurrentVersionOptaFeedItems = append(foreign.R.CurrentVersionOptaFeedItems, local)
				break
			}
		}
	}

	return nil
}

// LoadMatch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (optaFeedItemL) LoadMatch(e boil.Executor, singular bool, maybeOptaFeedItem interface{}, mods queries.Applicator) error {
	var slice []*OptaFeedItem
	var object *OptaFeedItem

	if singular {
		var ok bool
		object, ok = maybeOptaFeedItem.(*OptaFeedItem)
		if !ok {
			object = new(OptaFeedItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOptaFeedItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOptaFeedItem))
			}
		}
	} else {
		s, ok := maybeOptaFeedItem.(*[]*OptaFeedItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOptaFeedItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOptaFeedItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &optaFeedItemR{}
		}
		args[object.MatchID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &optaFeedItemR{}
			}

			args[obj.MatchID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Match")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Match")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Match = foreign
		if foreign.R == nil {
			foreign.R = &matchR{}
		}
		foreign.R.OptaFeedItems = append(foreign.R.OptaFeedItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MatchID == foreign.ID {
				local.R.Match = foreign
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.OptaFeedItems = append(foreign.R.OptaFeedItems, local)
				break
			}
		}
	}

	return nil
}

// LoadItemOptaFeedItemVersions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (optaFeedItemL) LoadItemOptaFeedItemVersions(e boil.Executor, singular bool, maybeOptaFeedItem interface{}, mods queries.Applicator) error {
	var slice []*OptaFeedItem
	var object *OptaFeedItem

	if singular {
		var ok bool
		object, ok = maybeOptaFeedItem.(*OptaFeedItem)
		if !ok {
			object = new(OptaFeedItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOptaFeedItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOptaFeedItem))
			}
		}
	} else {
		s, ok := maybeOptaFeedItem.(*[]*OptaFeedItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOptaFeedItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOptaFeedItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &optaFeedItemR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &optaFeedItemR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`opta_feed_item_versions`),
		qm.WhereIn(`opta_feed_item_versions.item_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load opta_feed_item_versions")
	}

	var resultSlice []*OptaFeedItemVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice opta_feed_item_versions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on opta_feed_item_versions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for opta_feed_item_versions")
	}

	if singular {
		object.R.ItemOptaFeedItemVersions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &optaFeedItemVersionR{}
			}
			foreign.R.Item = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ItemID {
				local.R.ItemOptaFeedItemVersions = append(local.R.ItemOptaFeedItemVersions, foreign)
				if foreign.R == nil {
					foreign.R = &optaFeedItemVersionR{}
				}
				foreign.R.Item = local
				break
			}
		}
	}

	return nil
}

// SetCurrentVersion of the optaFeedItem to the related item.
// Sets o.R.CurrentVersion to related.
// Adds o to related.R.CurrentVersionOptaFeedItems.
func (o *OptaFeedItem) SetCurrentVersion(exec boil.Executor, insert bool, related *OptaFeedItemVersion) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"opta_feed_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"current_version_id"}),
		strmangle.WhereClause("\"", "\"", 2, optaFeedItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CurrentVersionID, related.ID)
	if o.R == nil {
		o.R = &optaFeedItemR{
			CurrentVersion: related,
		}
	} else {
		o.R.CurrentVersion = related
	}

	if related.R == nil {
		related.R = &optaFeedItemVersionR{
			CurrentVersionOptaFeedItems: OptaFeedItemSlice{o},
		}
	} else {
		related.R.CurrentVersionOptaFeedItems = append(related.R.CurrentVersionOptaFeedItems, o)
	}

	return nil
}

// RemoveCurrentVersion relationship.
// Sets o.R.CurrentVersion to nil.
// Removes o from all passed in related items' relationships struct.
func (o *OptaFeedItem) RemoveCurrentVersion(exec boil.Executor, related *OptaFeedItemVersion) error {
	var err error

	queries.SetScanner(&o.CurrentVersionID, nil)
	if _, err = o.Update(exec, boil.Whitelist("current_version_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CurrentVersion = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CurrentVersionOptaFeedItems {
		if queries.Equal(o.CurrentVersionID, ri.CurrentVersionID) {
			continue
		}

		ln := len(related.R.CurrentVersionOptaFeedItems)
		if ln > 1 && i < ln-1 {
			related.R.CurrentVersionOptaFeedItems[i] = related.R.CurrentVersionOptaFeedItems[ln-1]
		}
		related.R.CurrentVersionOptaFeedItems = related.R.CurrentVersionOptaFeedItems[:ln-1]
		break
	}
	return nil
}

// SetMatch of the optaFeedItem to the related item.
// Sets o.R.Match to related.
// Adds o to related.R.OptaFeedItems.
func (o *OptaFeedItem) SetMatch(exec boil.Executor, insert bool, related *Match) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"opta_feed_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"match_id"}),
		strmangle.WhereClause("\"", "\"", 2, optaFeedItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MatchID = related.ID
	if o.R == nil {
		o.R = &optaFeedItemR{
			Match: related,
		}
	} else {
		o.R.Match = related
	}

	if related.R == nil {
		related.R = &matchR{
			OptaFeedItems: OptaFeedItemSlice{o},
		}
	} else {
		related.R.OptaFeedItems = append(related.R.OptaFeedItems, o)
	}

	return nil
}

// AddItemOptaFeedItemVersions adds the given related objects to the existing relationships
// of the opta_feed_item, optionally inserting them as new records.
// Appends related to o.R.ItemOptaFeedItemVersions.
// Sets related.R.Item appropriately.
func (o *OptaFeedItem) AddItemOptaFeedItemVersions(exec boil.Executor, insert bool, related ...*OptaFeedItemVersion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ItemID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"opta_feed_item_versions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"item_id"}),
				strmangle.WhereClause("\"", "\"", 2, optaFeedItemVersionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ItemID = o.ID
		}
	}

	if o.R == nil {
		o.R = &optaFeedItemR{
			ItemOptaFeedItemVersions: related,
		}
	} else {
		o.R.ItemOptaFeedItemVersions = append(o.R.ItemOptaFeedItemVersions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &optaFeedItemVersionR{
				Item: o,
			}
		} else {
			rel.R.Item = o
		}
	}
	return nil
}

// OptaFeedItems retrieves all the records using an executor.
func OptaFeedItems(mods ...qm.QueryMod) optaFeedItemQuery {
	mods = append(mods, qm.From("\"opta_feed_items\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"opta_feed_items\".*"})
	}

	return optaFeedItemQuery{q}
}

// FindOptaFeedItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOptaFeedItem(exec boil.Executor, iD string, selectCols ...string) (*OptaFeedItem, error) {
	optaFeedItemObj := &OptaFeedItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"opta_feed_items\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, optaFeedItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from opta_feed_items")
	}

	return optaFeedItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OptaFeedItem) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no opta_feed_items provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(optaFeedItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	optaFeedItemInsertCacheMut.RLock()
	cache, cached := optaFeedItemInsertCache[key]
	optaFeedItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			optaFeedItemAllColumns,
			optaFeedItemColumnsWithDefault,
			optaFeedItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(optaFeedItemType, optaFeedItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(optaFeedItemType, optaFeedItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"opta_feed_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"opta_feed_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into opta_feed_items")
	}

	if !cached {
		optaFeedItemInsertCacheMut.Lock()
		optaFeedItemInsertCache[key] = cache
		optaFeedItemInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the OptaFeedItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OptaFeedItem) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	optaFeedItemUpdateCacheMut.RLock()
	cache, cached := optaFeedItemUpdateCache[key]
	optaFeedItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			optaFeedItemAllColumns,
			optaFeedItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update opta_feed_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"opta_feed_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, optaFeedItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(optaFeedItemType, optaFeedItemMapping, append(wl, optaFeedItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update opta_feed_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for opta_feed_items")
	}

	if !cached {
		optaFeedItemUpdateCacheMut.Lock()
		optaFeedItemUpdateCache[key] = cache
		optaFeedItemUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q optaFeedItemQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for opta_feed_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for opta_feed_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OptaFeedItemSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), optaFeedItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"opta_feed_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, optaFeedItemPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in optaFeedItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all optaFeedItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OptaFeedItem) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no opta_feed_items provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(optaFeedItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	optaFeedItemUpsertCacheMut.RLock()
	cache, cached := optaFeedItemUpsertCache[key]
	optaFeedItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			optaFeedItemAllColumns,
			optaFeedItemColumnsWithDefault,
			optaFeedItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			optaFeedItemAllColumns,
			optaFeedItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert opta_feed_items, could not build update column list")
		}

		ret := strmangle.SetComplement(optaFeedItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(optaFeedItemPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert opta_feed_items, could not build conflict column list")
			}

			conflict = make([]string, len(optaFeedItemPrimaryKeyColumns))
			copy(conflict, optaFeedItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"opta_feed_items\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(optaFeedItemType, optaFeedItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(optaFeedItemType, optaFeedItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert opta_feed_items")
	}

	if !cached {
		optaFeedItemUpsertCacheMut.Lock()
		optaFeedItemUpsertCache[key] = cache
		optaFeedItemUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single OptaFeedItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OptaFeedItem) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no OptaFeedItem provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), optaFeedItemPrimaryKeyMapping)
	sql := "DELETE FROM \"opta_feed_items\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from opta_feed_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for opta_feed_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q optaFeedItemQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no optaFeedItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from opta_feed_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for opta_feed_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OptaFeedItemSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), optaFeedItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"opta_feed_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, optaFeedItemPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from optaFeedItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for opta_feed_items")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OptaFeedItem) Reload(exec boil.Executor) error {
	ret, err := FindOptaFeedItem(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OptaFeedItemSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OptaFeedItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), optaFeedItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"opta_feed_items\".* FROM \"opta_feed_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, optaFeedItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in OptaFeedItemSlice")
	}

	*o = slice

	return nil
}

// OptaFeedItemExists checks if the OptaFeedItem row exists.
func OptaFeedItemExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"opta_feed_items\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if opta_feed_items exists")
	}

	return exists, nil
}

// Exists checks if the OptaFeedItem row exists.
func (o *OptaFeedItem) Exists(exec boil.Executor) (bool, error) {
	return OptaFeedItemExists(exec, o.ID)
}
