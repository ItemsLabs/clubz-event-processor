// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GameWeek is an object representing the database table.
type GameWeek struct {
	ID             string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Name           string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	StartAt        time.Time   `boil:"start_at" json:"start_at" toml:"start_at" yaml:"start_at"`
	EndAt          time.Time   `boil:"end_at" json:"end_at" toml:"end_at" yaml:"end_at"`
	ScoredAt       null.Time   `boil:"scored_at" json:"scored_at,omitempty" toml:"scored_at" yaml:"scored_at,omitempty"`
	Status         string      `boil:"status" json:"status" toml:"status" yaml:"status"`
	LeaderboardsID null.Int    `boil:"leaderboards_id" json:"leaderboards_id,omitempty" toml:"leaderboards_id" yaml:"leaderboards_id,omitempty"`
	SeasonID       null.String `boil:"season_id" json:"season_id,omitempty" toml:"season_id" yaml:"season_id,omitempty"`

	R *gameWeekR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gameWeekL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GameWeekColumns = struct {
	ID             string
	CreatedAt      string
	UpdatedAt      string
	Name           string
	StartAt        string
	EndAt          string
	ScoredAt       string
	Status         string
	LeaderboardsID string
	SeasonID       string
}{
	ID:             "id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	Name:           "name",
	StartAt:        "start_at",
	EndAt:          "end_at",
	ScoredAt:       "scored_at",
	Status:         "status",
	LeaderboardsID: "leaderboards_id",
	SeasonID:       "season_id",
}

var GameWeekTableColumns = struct {
	ID             string
	CreatedAt      string
	UpdatedAt      string
	Name           string
	StartAt        string
	EndAt          string
	ScoredAt       string
	Status         string
	LeaderboardsID string
	SeasonID       string
}{
	ID:             "game_weeks.id",
	CreatedAt:      "game_weeks.created_at",
	UpdatedAt:      "game_weeks.updated_at",
	Name:           "game_weeks.name",
	StartAt:        "game_weeks.start_at",
	EndAt:          "game_weeks.end_at",
	ScoredAt:       "game_weeks.scored_at",
	Status:         "game_weeks.status",
	LeaderboardsID: "game_weeks.leaderboards_id",
	SeasonID:       "game_weeks.season_id",
}

// Generated where

var GameWeekWhere = struct {
	ID             whereHelperstring
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	Name           whereHelperstring
	StartAt        whereHelpertime_Time
	EndAt          whereHelpertime_Time
	ScoredAt       whereHelpernull_Time
	Status         whereHelperstring
	LeaderboardsID whereHelpernull_Int
	SeasonID       whereHelpernull_String
}{
	ID:             whereHelperstring{field: "\"game_weeks\".\"id\""},
	CreatedAt:      whereHelpertime_Time{field: "\"game_weeks\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"game_weeks\".\"updated_at\""},
	Name:           whereHelperstring{field: "\"game_weeks\".\"name\""},
	StartAt:        whereHelpertime_Time{field: "\"game_weeks\".\"start_at\""},
	EndAt:          whereHelpertime_Time{field: "\"game_weeks\".\"end_at\""},
	ScoredAt:       whereHelpernull_Time{field: "\"game_weeks\".\"scored_at\""},
	Status:         whereHelperstring{field: "\"game_weeks\".\"status\""},
	LeaderboardsID: whereHelpernull_Int{field: "\"game_weeks\".\"leaderboards_id\""},
	SeasonID:       whereHelpernull_String{field: "\"game_weeks\".\"season_id\""},
}

// GameWeekRels is where relationship names are stored.
var GameWeekRels = struct {
	Leaderboard           string
	Season                string
	GameWeekIDAppInboxes  string
	WeekDivisionRewards   string
	WeekGameWeekDivisions string
	WeekTransactions      string
	UserDivisions         string
	UserGameWeekHistories string
}{
	Leaderboard:           "Leaderboard",
	Season:                "Season",
	GameWeekIDAppInboxes:  "GameWeekIDAppInboxes",
	WeekDivisionRewards:   "WeekDivisionRewards",
	WeekGameWeekDivisions: "WeekGameWeekDivisions",
	WeekTransactions:      "WeekTransactions",
	UserDivisions:         "UserDivisions",
	UserGameWeekHistories: "UserGameWeekHistories",
}

// gameWeekR is where relationships are stored.
type gameWeekR struct {
	Leaderboard           *MatchLeaderboard        `boil:"Leaderboard" json:"Leaderboard" toml:"Leaderboard" yaml:"Leaderboard"`
	Season                *GameSeason              `boil:"Season" json:"Season" toml:"Season" yaml:"Season"`
	GameWeekIDAppInboxes  AppInboxSlice            `boil:"GameWeekIDAppInboxes" json:"GameWeekIDAppInboxes" toml:"GameWeekIDAppInboxes" yaml:"GameWeekIDAppInboxes"`
	WeekDivisionRewards   DivisionRewardSlice      `boil:"WeekDivisionRewards" json:"WeekDivisionRewards" toml:"WeekDivisionRewards" yaml:"WeekDivisionRewards"`
	WeekGameWeekDivisions GameWeekDivisionSlice    `boil:"WeekGameWeekDivisions" json:"WeekGameWeekDivisions" toml:"WeekGameWeekDivisions" yaml:"WeekGameWeekDivisions"`
	WeekTransactions      TransactionSlice         `boil:"WeekTransactions" json:"WeekTransactions" toml:"WeekTransactions" yaml:"WeekTransactions"`
	UserDivisions         UserDivisionSlice        `boil:"UserDivisions" json:"UserDivisions" toml:"UserDivisions" yaml:"UserDivisions"`
	UserGameWeekHistories UserGameWeekHistorySlice `boil:"UserGameWeekHistories" json:"UserGameWeekHistories" toml:"UserGameWeekHistories" yaml:"UserGameWeekHistories"`
}

// NewStruct creates a new relationship struct
func (*gameWeekR) NewStruct() *gameWeekR {
	return &gameWeekR{}
}

func (r *gameWeekR) GetLeaderboard() *MatchLeaderboard {
	if r == nil {
		return nil
	}
	return r.Leaderboard
}

func (r *gameWeekR) GetSeason() *GameSeason {
	if r == nil {
		return nil
	}
	return r.Season
}

func (r *gameWeekR) GetGameWeekIDAppInboxes() AppInboxSlice {
	if r == nil {
		return nil
	}
	return r.GameWeekIDAppInboxes
}

func (r *gameWeekR) GetWeekDivisionRewards() DivisionRewardSlice {
	if r == nil {
		return nil
	}
	return r.WeekDivisionRewards
}

func (r *gameWeekR) GetWeekGameWeekDivisions() GameWeekDivisionSlice {
	if r == nil {
		return nil
	}
	return r.WeekGameWeekDivisions
}

func (r *gameWeekR) GetWeekTransactions() TransactionSlice {
	if r == nil {
		return nil
	}
	return r.WeekTransactions
}

func (r *gameWeekR) GetUserDivisions() UserDivisionSlice {
	if r == nil {
		return nil
	}
	return r.UserDivisions
}

func (r *gameWeekR) GetUserGameWeekHistories() UserGameWeekHistorySlice {
	if r == nil {
		return nil
	}
	return r.UserGameWeekHistories
}

// gameWeekL is where Load methods for each relationship are stored.
type gameWeekL struct{}

var (
	gameWeekAllColumns            = []string{"id", "created_at", "updated_at", "name", "start_at", "end_at", "scored_at", "status", "leaderboards_id", "season_id"}
	gameWeekColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "name", "start_at", "end_at", "status"}
	gameWeekColumnsWithDefault    = []string{"scored_at", "leaderboards_id", "season_id"}
	gameWeekPrimaryKeyColumns     = []string{"id"}
	gameWeekGeneratedColumns      = []string{}
)

type (
	// GameWeekSlice is an alias for a slice of pointers to GameWeek.
	// This should almost always be used instead of []GameWeek.
	GameWeekSlice []*GameWeek

	gameWeekQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gameWeekType                 = reflect.TypeOf(&GameWeek{})
	gameWeekMapping              = queries.MakeStructMapping(gameWeekType)
	gameWeekPrimaryKeyMapping, _ = queries.BindMapping(gameWeekType, gameWeekMapping, gameWeekPrimaryKeyColumns)
	gameWeekInsertCacheMut       sync.RWMutex
	gameWeekInsertCache          = make(map[string]insertCache)
	gameWeekUpdateCacheMut       sync.RWMutex
	gameWeekUpdateCache          = make(map[string]updateCache)
	gameWeekUpsertCacheMut       sync.RWMutex
	gameWeekUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single gameWeek record from the query.
func (q gameWeekQuery) One(exec boil.Executor) (*GameWeek, error) {
	o := &GameWeek{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for game_weeks")
	}

	return o, nil
}

// All returns all GameWeek records from the query.
func (q gameWeekQuery) All(exec boil.Executor) (GameWeekSlice, error) {
	var o []*GameWeek

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to GameWeek slice")
	}

	return o, nil
}

// Count returns the count of all GameWeek records in the query.
func (q gameWeekQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count game_weeks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gameWeekQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if game_weeks exists")
	}

	return count > 0, nil
}

// Leaderboard pointed to by the foreign key.
func (o *GameWeek) Leaderboard(mods ...qm.QueryMod) matchLeaderboardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LeaderboardsID),
	}

	queryMods = append(queryMods, mods...)

	return MatchLeaderboards(queryMods...)
}

// Season pointed to by the foreign key.
func (o *GameWeek) Season(mods ...qm.QueryMod) gameSeasonQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SeasonID),
	}

	queryMods = append(queryMods, mods...)

	return GameSeasons(queryMods...)
}

// GameWeekIDAppInboxes retrieves all the app_inbox's AppInboxes with an executor via game_week_id_id column.
func (o *GameWeek) GameWeekIDAppInboxes(mods ...qm.QueryMod) appInboxQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"app_inbox\".\"game_week_id_id\"=?", o.ID),
	)

	return AppInboxes(queryMods...)
}

// WeekDivisionRewards retrieves all the division_reward's DivisionRewards with an executor via week_id column.
func (o *GameWeek) WeekDivisionRewards(mods ...qm.QueryMod) divisionRewardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"division_rewards\".\"week_id\"=?", o.ID),
	)

	return DivisionRewards(queryMods...)
}

// WeekGameWeekDivisions retrieves all the game_week_division's GameWeekDivisions with an executor via week_id column.
func (o *GameWeek) WeekGameWeekDivisions(mods ...qm.QueryMod) gameWeekDivisionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"game_week_divisions\".\"week_id\"=?", o.ID),
	)

	return GameWeekDivisions(queryMods...)
}

// WeekTransactions retrieves all the transaction's Transactions with an executor via week_id column.
func (o *GameWeek) WeekTransactions(mods ...qm.QueryMod) transactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transactions\".\"week_id\"=?", o.ID),
	)

	return Transactions(queryMods...)
}

// UserDivisions retrieves all the user_division's UserDivisions with an executor.
func (o *GameWeek) UserDivisions(mods ...qm.QueryMod) userDivisionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_divisions\".\"game_week_id\"=?", o.ID),
	)

	return UserDivisions(queryMods...)
}

// UserGameWeekHistories retrieves all the user_game_week_history's UserGameWeekHistories with an executor.
func (o *GameWeek) UserGameWeekHistories(mods ...qm.QueryMod) userGameWeekHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_game_week_histories\".\"game_week_id\"=?", o.ID),
	)

	return UserGameWeekHistories(queryMods...)
}

// LoadLeaderboard allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gameWeekL) LoadLeaderboard(e boil.Executor, singular bool, maybeGameWeek interface{}, mods queries.Applicator) error {
	var slice []*GameWeek
	var object *GameWeek

	if singular {
		var ok bool
		object, ok = maybeGameWeek.(*GameWeek)
		if !ok {
			object = new(GameWeek)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGameWeek)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGameWeek))
			}
		}
	} else {
		s, ok := maybeGameWeek.(*[]*GameWeek)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGameWeek)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGameWeek))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameWeekR{}
		}
		if !queries.IsNil(object.LeaderboardsID) {
			args[object.LeaderboardsID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameWeekR{}
			}

			if !queries.IsNil(obj.LeaderboardsID) {
				args[obj.LeaderboardsID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`match_leaderboard`),
		qm.WhereIn(`match_leaderboard.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MatchLeaderboard")
	}

	var resultSlice []*MatchLeaderboard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MatchLeaderboard")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for match_leaderboard")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for match_leaderboard")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Leaderboard = foreign
		if foreign.R == nil {
			foreign.R = &matchLeaderboardR{}
		}
		foreign.R.LeaderboardGameWeeks = append(foreign.R.LeaderboardGameWeeks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.LeaderboardsID, foreign.ID) {
				local.R.Leaderboard = foreign
				if foreign.R == nil {
					foreign.R = &matchLeaderboardR{}
				}
				foreign.R.LeaderboardGameWeeks = append(foreign.R.LeaderboardGameWeeks, local)
				break
			}
		}
	}

	return nil
}

// LoadSeason allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gameWeekL) LoadSeason(e boil.Executor, singular bool, maybeGameWeek interface{}, mods queries.Applicator) error {
	var slice []*GameWeek
	var object *GameWeek

	if singular {
		var ok bool
		object, ok = maybeGameWeek.(*GameWeek)
		if !ok {
			object = new(GameWeek)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGameWeek)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGameWeek))
			}
		}
	} else {
		s, ok := maybeGameWeek.(*[]*GameWeek)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGameWeek)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGameWeek))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameWeekR{}
		}
		if !queries.IsNil(object.SeasonID) {
			args[object.SeasonID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameWeekR{}
			}

			if !queries.IsNil(obj.SeasonID) {
				args[obj.SeasonID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`game_seasons`),
		qm.WhereIn(`game_seasons.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GameSeason")
	}

	var resultSlice []*GameSeason
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GameSeason")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for game_seasons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_seasons")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Season = foreign
		if foreign.R == nil {
			foreign.R = &gameSeasonR{}
		}
		foreign.R.SeasonGameWeeks = append(foreign.R.SeasonGameWeeks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SeasonID, foreign.ID) {
				local.R.Season = foreign
				if foreign.R == nil {
					foreign.R = &gameSeasonR{}
				}
				foreign.R.SeasonGameWeeks = append(foreign.R.SeasonGameWeeks, local)
				break
			}
		}
	}

	return nil
}

// LoadGameWeekIDAppInboxes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gameWeekL) LoadGameWeekIDAppInboxes(e boil.Executor, singular bool, maybeGameWeek interface{}, mods queries.Applicator) error {
	var slice []*GameWeek
	var object *GameWeek

	if singular {
		var ok bool
		object, ok = maybeGameWeek.(*GameWeek)
		if !ok {
			object = new(GameWeek)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGameWeek)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGameWeek))
			}
		}
	} else {
		s, ok := maybeGameWeek.(*[]*GameWeek)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGameWeek)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGameWeek))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameWeekR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameWeekR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`app_inbox`),
		qm.WhereIn(`app_inbox.game_week_id_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load app_inbox")
	}

	var resultSlice []*AppInbox
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice app_inbox")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on app_inbox")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for app_inbox")
	}

	if singular {
		object.R.GameWeekIDAppInboxes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &appInboxR{}
			}
			foreign.R.GameWeekID = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.GameWeekIDID) {
				local.R.GameWeekIDAppInboxes = append(local.R.GameWeekIDAppInboxes, foreign)
				if foreign.R == nil {
					foreign.R = &appInboxR{}
				}
				foreign.R.GameWeekID = local
				break
			}
		}
	}

	return nil
}

// LoadWeekDivisionRewards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gameWeekL) LoadWeekDivisionRewards(e boil.Executor, singular bool, maybeGameWeek interface{}, mods queries.Applicator) error {
	var slice []*GameWeek
	var object *GameWeek

	if singular {
		var ok bool
		object, ok = maybeGameWeek.(*GameWeek)
		if !ok {
			object = new(GameWeek)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGameWeek)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGameWeek))
			}
		}
	} else {
		s, ok := maybeGameWeek.(*[]*GameWeek)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGameWeek)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGameWeek))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameWeekR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameWeekR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`division_rewards`),
		qm.WhereIn(`division_rewards.week_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load division_rewards")
	}

	var resultSlice []*DivisionReward
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice division_rewards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on division_rewards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for division_rewards")
	}

	if singular {
		object.R.WeekDivisionRewards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &divisionRewardR{}
			}
			foreign.R.Week = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WeekID {
				local.R.WeekDivisionRewards = append(local.R.WeekDivisionRewards, foreign)
				if foreign.R == nil {
					foreign.R = &divisionRewardR{}
				}
				foreign.R.Week = local
				break
			}
		}
	}

	return nil
}

// LoadWeekGameWeekDivisions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gameWeekL) LoadWeekGameWeekDivisions(e boil.Executor, singular bool, maybeGameWeek interface{}, mods queries.Applicator) error {
	var slice []*GameWeek
	var object *GameWeek

	if singular {
		var ok bool
		object, ok = maybeGameWeek.(*GameWeek)
		if !ok {
			object = new(GameWeek)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGameWeek)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGameWeek))
			}
		}
	} else {
		s, ok := maybeGameWeek.(*[]*GameWeek)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGameWeek)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGameWeek))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameWeekR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameWeekR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`game_week_divisions`),
		qm.WhereIn(`game_week_divisions.week_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load game_week_divisions")
	}

	var resultSlice []*GameWeekDivision
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice game_week_divisions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on game_week_divisions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_week_divisions")
	}

	if singular {
		object.R.WeekGameWeekDivisions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gameWeekDivisionR{}
			}
			foreign.R.Week = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WeekID {
				local.R.WeekGameWeekDivisions = append(local.R.WeekGameWeekDivisions, foreign)
				if foreign.R == nil {
					foreign.R = &gameWeekDivisionR{}
				}
				foreign.R.Week = local
				break
			}
		}
	}

	return nil
}

// LoadWeekTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gameWeekL) LoadWeekTransactions(e boil.Executor, singular bool, maybeGameWeek interface{}, mods queries.Applicator) error {
	var slice []*GameWeek
	var object *GameWeek

	if singular {
		var ok bool
		object, ok = maybeGameWeek.(*GameWeek)
		if !ok {
			object = new(GameWeek)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGameWeek)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGameWeek))
			}
		}
	} else {
		s, ok := maybeGameWeek.(*[]*GameWeek)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGameWeek)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGameWeek))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameWeekR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameWeekR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`transactions`),
		qm.WhereIn(`transactions.week_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transactions")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transactions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if singular {
		object.R.WeekTransactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionR{}
			}
			foreign.R.Week = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.WeekID) {
				local.R.WeekTransactions = append(local.R.WeekTransactions, foreign)
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.Week = local
				break
			}
		}
	}

	return nil
}

// LoadUserDivisions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gameWeekL) LoadUserDivisions(e boil.Executor, singular bool, maybeGameWeek interface{}, mods queries.Applicator) error {
	var slice []*GameWeek
	var object *GameWeek

	if singular {
		var ok bool
		object, ok = maybeGameWeek.(*GameWeek)
		if !ok {
			object = new(GameWeek)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGameWeek)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGameWeek))
			}
		}
	} else {
		s, ok := maybeGameWeek.(*[]*GameWeek)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGameWeek)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGameWeek))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameWeekR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameWeekR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_divisions`),
		qm.WhereIn(`user_divisions.game_week_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_divisions")
	}

	var resultSlice []*UserDivision
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_divisions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_divisions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_divisions")
	}

	if singular {
		object.R.UserDivisions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userDivisionR{}
			}
			foreign.R.GameWeek = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GameWeekID {
				local.R.UserDivisions = append(local.R.UserDivisions, foreign)
				if foreign.R == nil {
					foreign.R = &userDivisionR{}
				}
				foreign.R.GameWeek = local
				break
			}
		}
	}

	return nil
}

// LoadUserGameWeekHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gameWeekL) LoadUserGameWeekHistories(e boil.Executor, singular bool, maybeGameWeek interface{}, mods queries.Applicator) error {
	var slice []*GameWeek
	var object *GameWeek

	if singular {
		var ok bool
		object, ok = maybeGameWeek.(*GameWeek)
		if !ok {
			object = new(GameWeek)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGameWeek)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGameWeek))
			}
		}
	} else {
		s, ok := maybeGameWeek.(*[]*GameWeek)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGameWeek)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGameWeek))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameWeekR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameWeekR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_game_week_histories`),
		qm.WhereIn(`user_game_week_histories.game_week_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_game_week_histories")
	}

	var resultSlice []*UserGameWeekHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_game_week_histories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_game_week_histories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_game_week_histories")
	}

	if singular {
		object.R.UserGameWeekHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userGameWeekHistoryR{}
			}
			foreign.R.GameWeek = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GameWeekID {
				local.R.UserGameWeekHistories = append(local.R.UserGameWeekHistories, foreign)
				if foreign.R == nil {
					foreign.R = &userGameWeekHistoryR{}
				}
				foreign.R.GameWeek = local
				break
			}
		}
	}

	return nil
}

// SetLeaderboard of the gameWeek to the related item.
// Sets o.R.Leaderboard to related.
// Adds o to related.R.LeaderboardGameWeeks.
func (o *GameWeek) SetLeaderboard(exec boil.Executor, insert bool, related *MatchLeaderboard) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"game_weeks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"leaderboards_id"}),
		strmangle.WhereClause("\"", "\"", 2, gameWeekPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.LeaderboardsID, related.ID)
	if o.R == nil {
		o.R = &gameWeekR{
			Leaderboard: related,
		}
	} else {
		o.R.Leaderboard = related
	}

	if related.R == nil {
		related.R = &matchLeaderboardR{
			LeaderboardGameWeeks: GameWeekSlice{o},
		}
	} else {
		related.R.LeaderboardGameWeeks = append(related.R.LeaderboardGameWeeks, o)
	}

	return nil
}

// RemoveLeaderboard relationship.
// Sets o.R.Leaderboard to nil.
// Removes o from all passed in related items' relationships struct.
func (o *GameWeek) RemoveLeaderboard(exec boil.Executor, related *MatchLeaderboard) error {
	var err error

	queries.SetScanner(&o.LeaderboardsID, nil)
	if _, err = o.Update(exec, boil.Whitelist("leaderboards_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Leaderboard = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.LeaderboardGameWeeks {
		if queries.Equal(o.LeaderboardsID, ri.LeaderboardsID) {
			continue
		}

		ln := len(related.R.LeaderboardGameWeeks)
		if ln > 1 && i < ln-1 {
			related.R.LeaderboardGameWeeks[i] = related.R.LeaderboardGameWeeks[ln-1]
		}
		related.R.LeaderboardGameWeeks = related.R.LeaderboardGameWeeks[:ln-1]
		break
	}
	return nil
}

// SetSeason of the gameWeek to the related item.
// Sets o.R.Season to related.
// Adds o to related.R.SeasonGameWeeks.
func (o *GameWeek) SetSeason(exec boil.Executor, insert bool, related *GameSeason) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"game_weeks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"season_id"}),
		strmangle.WhereClause("\"", "\"", 2, gameWeekPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SeasonID, related.ID)
	if o.R == nil {
		o.R = &gameWeekR{
			Season: related,
		}
	} else {
		o.R.Season = related
	}

	if related.R == nil {
		related.R = &gameSeasonR{
			SeasonGameWeeks: GameWeekSlice{o},
		}
	} else {
		related.R.SeasonGameWeeks = append(related.R.SeasonGameWeeks, o)
	}

	return nil
}

// RemoveSeason relationship.
// Sets o.R.Season to nil.
// Removes o from all passed in related items' relationships struct.
func (o *GameWeek) RemoveSeason(exec boil.Executor, related *GameSeason) error {
	var err error

	queries.SetScanner(&o.SeasonID, nil)
	if _, err = o.Update(exec, boil.Whitelist("season_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Season = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SeasonGameWeeks {
		if queries.Equal(o.SeasonID, ri.SeasonID) {
			continue
		}

		ln := len(related.R.SeasonGameWeeks)
		if ln > 1 && i < ln-1 {
			related.R.SeasonGameWeeks[i] = related.R.SeasonGameWeeks[ln-1]
		}
		related.R.SeasonGameWeeks = related.R.SeasonGameWeeks[:ln-1]
		break
	}
	return nil
}

// AddGameWeekIDAppInboxes adds the given related objects to the existing relationships
// of the game_week, optionally inserting them as new records.
// Appends related to o.R.GameWeekIDAppInboxes.
// Sets related.R.GameWeekID appropriately.
func (o *GameWeek) AddGameWeekIDAppInboxes(exec boil.Executor, insert bool, related ...*AppInbox) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.GameWeekIDID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"app_inbox\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"game_week_id_id"}),
				strmangle.WhereClause("\"", "\"", 2, appInboxPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.GameWeekIDID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &gameWeekR{
			GameWeekIDAppInboxes: related,
		}
	} else {
		o.R.GameWeekIDAppInboxes = append(o.R.GameWeekIDAppInboxes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &appInboxR{
				GameWeekID: o,
			}
		} else {
			rel.R.GameWeekID = o
		}
	}
	return nil
}

// SetGameWeekIDAppInboxes removes all previously related items of the
// game_week replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.GameWeekID's GameWeekIDAppInboxes accordingly.
// Replaces o.R.GameWeekIDAppInboxes with related.
// Sets related.R.GameWeekID's GameWeekIDAppInboxes accordingly.
func (o *GameWeek) SetGameWeekIDAppInboxes(exec boil.Executor, insert bool, related ...*AppInbox) error {
	query := "update \"app_inbox\" set \"game_week_id_id\" = null where \"game_week_id_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.GameWeekIDAppInboxes {
			queries.SetScanner(&rel.GameWeekIDID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.GameWeekID = nil
		}
		o.R.GameWeekIDAppInboxes = nil
	}

	return o.AddGameWeekIDAppInboxes(exec, insert, related...)
}

// RemoveGameWeekIDAppInboxes relationships from objects passed in.
// Removes related items from R.GameWeekIDAppInboxes (uses pointer comparison, removal does not keep order)
// Sets related.R.GameWeekID.
func (o *GameWeek) RemoveGameWeekIDAppInboxes(exec boil.Executor, related ...*AppInbox) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.GameWeekIDID, nil)
		if rel.R != nil {
			rel.R.GameWeekID = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("game_week_id_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.GameWeekIDAppInboxes {
			if rel != ri {
				continue
			}

			ln := len(o.R.GameWeekIDAppInboxes)
			if ln > 1 && i < ln-1 {
				o.R.GameWeekIDAppInboxes[i] = o.R.GameWeekIDAppInboxes[ln-1]
			}
			o.R.GameWeekIDAppInboxes = o.R.GameWeekIDAppInboxes[:ln-1]
			break
		}
	}

	return nil
}

// AddWeekDivisionRewards adds the given related objects to the existing relationships
// of the game_week, optionally inserting them as new records.
// Appends related to o.R.WeekDivisionRewards.
// Sets related.R.Week appropriately.
func (o *GameWeek) AddWeekDivisionRewards(exec boil.Executor, insert bool, related ...*DivisionReward) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WeekID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"division_rewards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"week_id"}),
				strmangle.WhereClause("\"", "\"", 2, divisionRewardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WeekID = o.ID
		}
	}

	if o.R == nil {
		o.R = &gameWeekR{
			WeekDivisionRewards: related,
		}
	} else {
		o.R.WeekDivisionRewards = append(o.R.WeekDivisionRewards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &divisionRewardR{
				Week: o,
			}
		} else {
			rel.R.Week = o
		}
	}
	return nil
}

// AddWeekGameWeekDivisions adds the given related objects to the existing relationships
// of the game_week, optionally inserting them as new records.
// Appends related to o.R.WeekGameWeekDivisions.
// Sets related.R.Week appropriately.
func (o *GameWeek) AddWeekGameWeekDivisions(exec boil.Executor, insert bool, related ...*GameWeekDivision) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WeekID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"game_week_divisions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"week_id"}),
				strmangle.WhereClause("\"", "\"", 2, gameWeekDivisionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WeekID = o.ID
		}
	}

	if o.R == nil {
		o.R = &gameWeekR{
			WeekGameWeekDivisions: related,
		}
	} else {
		o.R.WeekGameWeekDivisions = append(o.R.WeekGameWeekDivisions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gameWeekDivisionR{
				Week: o,
			}
		} else {
			rel.R.Week = o
		}
	}
	return nil
}

// AddWeekTransactions adds the given related objects to the existing relationships
// of the game_week, optionally inserting them as new records.
// Appends related to o.R.WeekTransactions.
// Sets related.R.Week appropriately.
func (o *GameWeek) AddWeekTransactions(exec boil.Executor, insert bool, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WeekID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transactions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"week_id"}),
				strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WeekID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &gameWeekR{
			WeekTransactions: related,
		}
	} else {
		o.R.WeekTransactions = append(o.R.WeekTransactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionR{
				Week: o,
			}
		} else {
			rel.R.Week = o
		}
	}
	return nil
}

// SetWeekTransactions removes all previously related items of the
// game_week replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Week's WeekTransactions accordingly.
// Replaces o.R.WeekTransactions with related.
// Sets related.R.Week's WeekTransactions accordingly.
func (o *GameWeek) SetWeekTransactions(exec boil.Executor, insert bool, related ...*Transaction) error {
	query := "update \"transactions\" set \"week_id\" = null where \"week_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.WeekTransactions {
			queries.SetScanner(&rel.WeekID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Week = nil
		}
		o.R.WeekTransactions = nil
	}

	return o.AddWeekTransactions(exec, insert, related...)
}

// RemoveWeekTransactions relationships from objects passed in.
// Removes related items from R.WeekTransactions (uses pointer comparison, removal does not keep order)
// Sets related.R.Week.
func (o *GameWeek) RemoveWeekTransactions(exec boil.Executor, related ...*Transaction) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.WeekID, nil)
		if rel.R != nil {
			rel.R.Week = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("week_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WeekTransactions {
			if rel != ri {
				continue
			}

			ln := len(o.R.WeekTransactions)
			if ln > 1 && i < ln-1 {
				o.R.WeekTransactions[i] = o.R.WeekTransactions[ln-1]
			}
			o.R.WeekTransactions = o.R.WeekTransactions[:ln-1]
			break
		}
	}

	return nil
}

// AddUserDivisions adds the given related objects to the existing relationships
// of the game_week, optionally inserting them as new records.
// Appends related to o.R.UserDivisions.
// Sets related.R.GameWeek appropriately.
func (o *GameWeek) AddUserDivisions(exec boil.Executor, insert bool, related ...*UserDivision) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GameWeekID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_divisions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"game_week_id"}),
				strmangle.WhereClause("\"", "\"", 2, userDivisionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GameWeekID = o.ID
		}
	}

	if o.R == nil {
		o.R = &gameWeekR{
			UserDivisions: related,
		}
	} else {
		o.R.UserDivisions = append(o.R.UserDivisions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userDivisionR{
				GameWeek: o,
			}
		} else {
			rel.R.GameWeek = o
		}
	}
	return nil
}

// AddUserGameWeekHistories adds the given related objects to the existing relationships
// of the game_week, optionally inserting them as new records.
// Appends related to o.R.UserGameWeekHistories.
// Sets related.R.GameWeek appropriately.
func (o *GameWeek) AddUserGameWeekHistories(exec boil.Executor, insert bool, related ...*UserGameWeekHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GameWeekID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_game_week_histories\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"game_week_id"}),
				strmangle.WhereClause("\"", "\"", 2, userGameWeekHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GameWeekID = o.ID
		}
	}

	if o.R == nil {
		o.R = &gameWeekR{
			UserGameWeekHistories: related,
		}
	} else {
		o.R.UserGameWeekHistories = append(o.R.UserGameWeekHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userGameWeekHistoryR{
				GameWeek: o,
			}
		} else {
			rel.R.GameWeek = o
		}
	}
	return nil
}

// GameWeeks retrieves all the records using an executor.
func GameWeeks(mods ...qm.QueryMod) gameWeekQuery {
	mods = append(mods, qm.From("\"game_weeks\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"game_weeks\".*"})
	}

	return gameWeekQuery{q}
}

// FindGameWeek retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGameWeek(exec boil.Executor, iD string, selectCols ...string) (*GameWeek, error) {
	gameWeekObj := &GameWeek{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"game_weeks\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, gameWeekObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from game_weeks")
	}

	return gameWeekObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GameWeek) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no game_weeks provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(gameWeekColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gameWeekInsertCacheMut.RLock()
	cache, cached := gameWeekInsertCache[key]
	gameWeekInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gameWeekAllColumns,
			gameWeekColumnsWithDefault,
			gameWeekColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gameWeekType, gameWeekMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gameWeekType, gameWeekMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"game_weeks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"game_weeks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into game_weeks")
	}

	if !cached {
		gameWeekInsertCacheMut.Lock()
		gameWeekInsertCache[key] = cache
		gameWeekInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the GameWeek.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GameWeek) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	gameWeekUpdateCacheMut.RLock()
	cache, cached := gameWeekUpdateCache[key]
	gameWeekUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gameWeekAllColumns,
			gameWeekPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update game_weeks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"game_weeks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gameWeekPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gameWeekType, gameWeekMapping, append(wl, gameWeekPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update game_weeks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for game_weeks")
	}

	if !cached {
		gameWeekUpdateCacheMut.Lock()
		gameWeekUpdateCache[key] = cache
		gameWeekUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q gameWeekQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for game_weeks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for game_weeks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GameWeekSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gameWeekPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"game_weeks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gameWeekPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in gameWeek slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all gameWeek")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GameWeek) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no game_weeks provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(gameWeekColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gameWeekUpsertCacheMut.RLock()
	cache, cached := gameWeekUpsertCache[key]
	gameWeekUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			gameWeekAllColumns,
			gameWeekColumnsWithDefault,
			gameWeekColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			gameWeekAllColumns,
			gameWeekPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert game_weeks, could not build update column list")
		}

		ret := strmangle.SetComplement(gameWeekAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(gameWeekPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert game_weeks, could not build conflict column list")
			}

			conflict = make([]string, len(gameWeekPrimaryKeyColumns))
			copy(conflict, gameWeekPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"game_weeks\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(gameWeekType, gameWeekMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gameWeekType, gameWeekMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert game_weeks")
	}

	if !cached {
		gameWeekUpsertCacheMut.Lock()
		gameWeekUpsertCache[key] = cache
		gameWeekUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single GameWeek record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GameWeek) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no GameWeek provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gameWeekPrimaryKeyMapping)
	sql := "DELETE FROM \"game_weeks\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from game_weeks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for game_weeks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gameWeekQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no gameWeekQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from game_weeks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for game_weeks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GameWeekSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gameWeekPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"game_weeks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gameWeekPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from gameWeek slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for game_weeks")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GameWeek) Reload(exec boil.Executor) error {
	ret, err := FindGameWeek(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GameWeekSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GameWeekSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gameWeekPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"game_weeks\".* FROM \"game_weeks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gameWeekPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in GameWeekSlice")
	}

	*o = slice

	return nil
}

// GameWeekExists checks if the GameWeek row exists.
func GameWeekExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"game_weeks\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if game_weeks exists")
	}

	return exists, nil
}

// Exists checks if the GameWeek row exists.
func (o *GameWeek) Exists(exec boil.Executor) (bool, error) {
	return GameWeekExists(exec, o.ID)
}
