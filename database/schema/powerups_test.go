// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPowerups(t *testing.T) {
	t.Parallel()

	query := Powerups()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPowerupsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Powerup{}
	if err = randomize.Struct(seed, o, powerupDBTypes, true, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Powerups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPowerupsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Powerup{}
	if err = randomize.Struct(seed, o, powerupDBTypes, true, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Powerups().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Powerups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPowerupsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Powerup{}
	if err = randomize.Struct(seed, o, powerupDBTypes, true, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PowerupSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Powerups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPowerupsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Powerup{}
	if err = randomize.Struct(seed, o, powerupDBTypes, true, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PowerupExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Powerup exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PowerupExists to return true, but got false.")
	}
}

func testPowerupsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Powerup{}
	if err = randomize.Struct(seed, o, powerupDBTypes, true, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	powerupFound, err := FindPowerup(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if powerupFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPowerupsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Powerup{}
	if err = randomize.Struct(seed, o, powerupDBTypes, true, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Powerups().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testPowerupsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Powerup{}
	if err = randomize.Struct(seed, o, powerupDBTypes, true, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Powerups().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPowerupsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	powerupOne := &Powerup{}
	powerupTwo := &Powerup{}
	if err = randomize.Struct(seed, powerupOne, powerupDBTypes, false, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}
	if err = randomize.Struct(seed, powerupTwo, powerupDBTypes, false, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = powerupOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = powerupTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Powerups().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPowerupsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	powerupOne := &Powerup{}
	powerupTwo := &Powerup{}
	if err = randomize.Struct(seed, powerupOne, powerupDBTypes, false, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}
	if err = randomize.Struct(seed, powerupTwo, powerupDBTypes, false, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = powerupOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = powerupTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Powerups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testPowerupsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Powerup{}
	if err = randomize.Struct(seed, o, powerupDBTypes, true, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Powerups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPowerupsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Powerup{}
	if err = randomize.Struct(seed, o, powerupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(powerupColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Powerups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPowerupToManyGamePowerups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Powerup
	var b, c GamePowerup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, powerupDBTypes, true, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, gamePowerupDBTypes, false, gamePowerupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gamePowerupDBTypes, false, gamePowerupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PowerupID = a.ID
	c.PowerupID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GamePowerups().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PowerupID == b.PowerupID {
			bFound = true
		}
		if v.PowerupID == c.PowerupID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PowerupSlice{&a}
	if err = a.L.LoadGamePowerups(tx, false, (*[]*Powerup)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GamePowerups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GamePowerups = nil
	if err = a.L.LoadGamePowerups(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GamePowerups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPowerupToManyPowerupActions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Powerup
	var b, c PowerupAction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, powerupDBTypes, true, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, powerupActionDBTypes, false, powerupActionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, powerupActionDBTypes, false, powerupActionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PowerupID = a.ID
	c.PowerupID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PowerupActions().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PowerupID == b.PowerupID {
			bFound = true
		}
		if v.PowerupID == c.PowerupID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PowerupSlice{&a}
	if err = a.L.LoadPowerupActions(tx, false, (*[]*Powerup)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PowerupActions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PowerupActions = nil
	if err = a.L.LoadPowerupActions(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PowerupActions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPowerupToManyAddOpGamePowerups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Powerup
	var b, c, d, e GamePowerup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, powerupDBTypes, false, strmangle.SetComplement(powerupPrimaryKeyColumns, powerupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GamePowerup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gamePowerupDBTypes, false, strmangle.SetComplement(gamePowerupPrimaryKeyColumns, gamePowerupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GamePowerup{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGamePowerups(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PowerupID {
			t.Error("foreign key was wrong value", a.ID, first.PowerupID)
		}
		if a.ID != second.PowerupID {
			t.Error("foreign key was wrong value", a.ID, second.PowerupID)
		}

		if first.R.Powerup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Powerup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GamePowerups[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GamePowerups[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GamePowerups().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPowerupToManyAddOpPowerupActions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Powerup
	var b, c, d, e PowerupAction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, powerupDBTypes, false, strmangle.SetComplement(powerupPrimaryKeyColumns, powerupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PowerupAction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, powerupActionDBTypes, false, strmangle.SetComplement(powerupActionPrimaryKeyColumns, powerupActionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PowerupAction{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPowerupActions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PowerupID {
			t.Error("foreign key was wrong value", a.ID, first.PowerupID)
		}
		if a.ID != second.PowerupID {
			t.Error("foreign key was wrong value", a.ID, second.PowerupID)
		}

		if first.R.Powerup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Powerup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PowerupActions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PowerupActions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PowerupActions().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPowerupToOneSportUsingSport(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Powerup
	var foreign Sport

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, powerupDBTypes, true, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, sportDBTypes, false, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SportID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Sport().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PowerupSlice{&local}
	if err = local.L.LoadSport(tx, false, (*[]*Powerup)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sport == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Sport = nil
	if err = local.L.LoadSport(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sport == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testPowerupToOneSetOpSportUsingSport(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Powerup
	var b, c Sport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, powerupDBTypes, false, strmangle.SetComplement(powerupPrimaryKeyColumns, powerupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Sport{&b, &c} {
		err = a.SetSport(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Sport != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Powerups[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SportID, x.ID) {
			t.Error("foreign key was wrong value", a.SportID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SportID))
		reflect.Indirect(reflect.ValueOf(&a.SportID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SportID, x.ID) {
			t.Error("foreign key was wrong value", a.SportID, x.ID)
		}
	}
}

func testPowerupToOneRemoveOpSportUsingSport(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Powerup
	var b Sport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, powerupDBTypes, false, strmangle.SetComplement(powerupPrimaryKeyColumns, powerupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSport(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSport(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Sport().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Sport != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SportID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Powerups) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPowerupsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Powerup{}
	if err = randomize.Struct(seed, o, powerupDBTypes, true, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPowerupsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Powerup{}
	if err = randomize.Struct(seed, o, powerupDBTypes, true, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PowerupSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testPowerupsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Powerup{}
	if err = randomize.Struct(seed, o, powerupDBTypes, true, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Powerups().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	powerupDBTypes = map[string]string{`ID`: `integer`, `Name`: `text`, `Duration`: `integer`, `Multiplier`: `double precision`, `Description`: `text`, `IconURL`: `text`, `Cost`: `double precision`, `Type`: `integer`, `SportID`: `uuid`, `Enabled`: `boolean`, `Conditions`: `jsonb`}
	_              = bytes.MinRead
)

func testPowerupsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(powerupPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(powerupAllColumns) == len(powerupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Powerup{}
	if err = randomize.Struct(seed, o, powerupDBTypes, true, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Powerups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, powerupDBTypes, true, powerupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPowerupsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(powerupAllColumns) == len(powerupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Powerup{}
	if err = randomize.Struct(seed, o, powerupDBTypes, true, powerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Powerups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, powerupDBTypes, true, powerupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(powerupAllColumns, powerupPrimaryKeyColumns) {
		fields = powerupAllColumns
	} else {
		fields = strmangle.SetComplement(
			powerupAllColumns,
			powerupPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PowerupSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPowerupsUpsert(t *testing.T) {
	t.Parallel()

	if len(powerupAllColumns) == len(powerupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Powerup{}
	if err = randomize.Struct(seed, &o, powerupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Powerup: %s", err)
	}

	count, err := Powerups().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, powerupDBTypes, false, powerupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Powerup struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Powerup: %s", err)
	}

	count, err = Powerups().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
