// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMatchPlayers(t *testing.T) {
	t.Parallel()

	query := MatchPlayers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMatchPlayersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchPlayer{}
	if err = randomize.Struct(seed, o, matchPlayerDBTypes, true, matchPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MatchPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMatchPlayersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchPlayer{}
	if err = randomize.Struct(seed, o, matchPlayerDBTypes, true, matchPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MatchPlayers().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MatchPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMatchPlayersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchPlayer{}
	if err = randomize.Struct(seed, o, matchPlayerDBTypes, true, matchPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MatchPlayerSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MatchPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMatchPlayersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchPlayer{}
	if err = randomize.Struct(seed, o, matchPlayerDBTypes, true, matchPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MatchPlayerExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MatchPlayer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MatchPlayerExists to return true, but got false.")
	}
}

func testMatchPlayersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchPlayer{}
	if err = randomize.Struct(seed, o, matchPlayerDBTypes, true, matchPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	matchPlayerFound, err := FindMatchPlayer(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if matchPlayerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMatchPlayersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchPlayer{}
	if err = randomize.Struct(seed, o, matchPlayerDBTypes, true, matchPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MatchPlayers().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testMatchPlayersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchPlayer{}
	if err = randomize.Struct(seed, o, matchPlayerDBTypes, true, matchPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MatchPlayers().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMatchPlayersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	matchPlayerOne := &MatchPlayer{}
	matchPlayerTwo := &MatchPlayer{}
	if err = randomize.Struct(seed, matchPlayerOne, matchPlayerDBTypes, false, matchPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}
	if err = randomize.Struct(seed, matchPlayerTwo, matchPlayerDBTypes, false, matchPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = matchPlayerOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = matchPlayerTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MatchPlayers().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMatchPlayersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	matchPlayerOne := &MatchPlayer{}
	matchPlayerTwo := &MatchPlayer{}
	if err = randomize.Struct(seed, matchPlayerOne, matchPlayerDBTypes, false, matchPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}
	if err = randomize.Struct(seed, matchPlayerTwo, matchPlayerDBTypes, false, matchPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = matchPlayerOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = matchPlayerTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MatchPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testMatchPlayersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchPlayer{}
	if err = randomize.Struct(seed, o, matchPlayerDBTypes, true, matchPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MatchPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMatchPlayersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchPlayer{}
	if err = randomize.Struct(seed, o, matchPlayerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(matchPlayerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MatchPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMatchPlayerToOneMatchUsingMatch(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local MatchPlayer
	var foreign Match

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchPlayerDBTypes, false, matchPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MatchID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Match().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchPlayerSlice{&local}
	if err = local.L.LoadMatch(tx, false, (*[]*MatchPlayer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Match == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Match = nil
	if err = local.L.LoadMatch(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Match == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchPlayerToOnePlayerUsingPlayer(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local MatchPlayer
	var foreign Player

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchPlayerDBTypes, false, matchPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PlayerID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Player().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchPlayerSlice{&local}
	if err = local.L.LoadPlayer(tx, false, (*[]*MatchPlayer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Player == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Player = nil
	if err = local.L.LoadPlayer(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Player == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchPlayerToOneTeamUsingTeam(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local MatchPlayer
	var foreign Team

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchPlayerDBTypes, false, matchPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TeamID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Team().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchPlayerSlice{&local}
	if err = local.L.LoadTeam(tx, false, (*[]*MatchPlayer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Team = nil
	if err = local.L.LoadTeam(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchPlayerToOneSetOpMatchUsingMatch(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchPlayer
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchPlayerDBTypes, false, strmangle.SetComplement(matchPlayerPrimaryKeyColumns, matchPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Match{&b, &c} {
		err = a.SetMatch(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Match != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MatchPlayers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MatchID != x.ID {
			t.Error("foreign key was wrong value", a.MatchID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MatchID))
		reflect.Indirect(reflect.ValueOf(&a.MatchID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MatchID != x.ID {
			t.Error("foreign key was wrong value", a.MatchID, x.ID)
		}
	}
}
func testMatchPlayerToOneSetOpPlayerUsingPlayer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchPlayer
	var b, c Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchPlayerDBTypes, false, strmangle.SetComplement(matchPlayerPrimaryKeyColumns, matchPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Player{&b, &c} {
		err = a.SetPlayer(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Player != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MatchPlayers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PlayerID != x.ID {
			t.Error("foreign key was wrong value", a.PlayerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PlayerID))
		reflect.Indirect(reflect.ValueOf(&a.PlayerID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PlayerID != x.ID {
			t.Error("foreign key was wrong value", a.PlayerID, x.ID)
		}
	}
}
func testMatchPlayerToOneSetOpTeamUsingTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchPlayer
	var b, c Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchPlayerDBTypes, false, strmangle.SetComplement(matchPlayerPrimaryKeyColumns, matchPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Team{&b, &c} {
		err = a.SetTeam(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Team != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MatchPlayers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TeamID != x.ID {
			t.Error("foreign key was wrong value", a.TeamID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TeamID))
		reflect.Indirect(reflect.ValueOf(&a.TeamID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TeamID != x.ID {
			t.Error("foreign key was wrong value", a.TeamID, x.ID)
		}
	}
}

func testMatchPlayersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchPlayer{}
	if err = randomize.Struct(seed, o, matchPlayerDBTypes, true, matchPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testMatchPlayersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchPlayer{}
	if err = randomize.Struct(seed, o, matchPlayerDBTypes, true, matchPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MatchPlayerSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testMatchPlayersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchPlayer{}
	if err = randomize.Struct(seed, o, matchPlayerDBTypes, true, matchPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MatchPlayers().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	matchPlayerDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `Position`: `character varying`, `JerseyNumber`: `integer`, `MatchID`: `uuid`, `PlayerID`: `uuid`, `TeamID`: `uuid`, `IsStar`: `boolean`, `FromLineups`: `boolean`, `Score`: `double precision`, `PlayedSeconds`: `integer`, `AvgScore`: `double precision`}
	_                  = bytes.MinRead
)

func testMatchPlayersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(matchPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(matchPlayerAllColumns) == len(matchPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MatchPlayer{}
	if err = randomize.Struct(seed, o, matchPlayerDBTypes, true, matchPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MatchPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, matchPlayerDBTypes, true, matchPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMatchPlayersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(matchPlayerAllColumns) == len(matchPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MatchPlayer{}
	if err = randomize.Struct(seed, o, matchPlayerDBTypes, true, matchPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MatchPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, matchPlayerDBTypes, true, matchPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(matchPlayerAllColumns, matchPlayerPrimaryKeyColumns) {
		fields = matchPlayerAllColumns
	} else {
		fields = strmangle.SetComplement(
			matchPlayerAllColumns,
			matchPlayerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MatchPlayerSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMatchPlayersUpsert(t *testing.T) {
	t.Parallel()

	if len(matchPlayerAllColumns) == len(matchPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MatchPlayer{}
	if err = randomize.Struct(seed, &o, matchPlayerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MatchPlayer: %s", err)
	}

	count, err := MatchPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, matchPlayerDBTypes, false, matchPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MatchPlayer struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MatchPlayer: %s", err)
	}

	count, err = MatchPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
