// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Leaderboard is an object representing the database table.
type Leaderboard struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Category    string      `boil:"category" json:"category" toml:"category" yaml:"category"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	SeasonID    null.String `boil:"season_id" json:"season_id,omitempty" toml:"season_id" yaml:"season_id,omitempty"`
	TeamID      null.String `boil:"team_id" json:"team_id,omitempty" toml:"team_id" yaml:"team_id,omitempty"`
	CountryID   null.String `boil:"country_id" json:"country_id,omitempty" toml:"country_id" yaml:"country_id,omitempty"`

	R *leaderboardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L leaderboardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LeaderboardColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	Name        string
	Category    string
	Description string
	SeasonID    string
	TeamID      string
	CountryID   string
}{
	ID:          "id",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	Name:        "name",
	Category:    "category",
	Description: "description",
	SeasonID:    "season_id",
	TeamID:      "team_id",
	CountryID:   "country_id",
}

var LeaderboardTableColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	Name        string
	Category    string
	Description string
	SeasonID    string
	TeamID      string
	CountryID   string
}{
	ID:          "leaderboards.id",
	CreatedAt:   "leaderboards.created_at",
	UpdatedAt:   "leaderboards.updated_at",
	Name:        "leaderboards.name",
	Category:    "leaderboards.category",
	Description: "leaderboards.description",
	SeasonID:    "leaderboards.season_id",
	TeamID:      "leaderboards.team_id",
	CountryID:   "leaderboards.country_id",
}

// Generated where

var LeaderboardWhere = struct {
	ID          whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	Name        whereHelperstring
	Category    whereHelperstring
	Description whereHelpernull_String
	SeasonID    whereHelpernull_String
	TeamID      whereHelpernull_String
	CountryID   whereHelpernull_String
}{
	ID:          whereHelperstring{field: "\"leaderboards\".\"id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"leaderboards\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"leaderboards\".\"updated_at\""},
	Name:        whereHelperstring{field: "\"leaderboards\".\"name\""},
	Category:    whereHelperstring{field: "\"leaderboards\".\"category\""},
	Description: whereHelpernull_String{field: "\"leaderboards\".\"description\""},
	SeasonID:    whereHelpernull_String{field: "\"leaderboards\".\"season_id\""},
	TeamID:      whereHelpernull_String{field: "\"leaderboards\".\"team_id\""},
	CountryID:   whereHelpernull_String{field: "\"leaderboards\".\"country_id\""},
}

// LeaderboardRels is where relationship names are stored.
var LeaderboardRels = struct {
	Country                      string
	Season                       string
	Team                         string
	UserLeaderboardSubscriptions string
}{
	Country:                      "Country",
	Season:                       "Season",
	Team:                         "Team",
	UserLeaderboardSubscriptions: "UserLeaderboardSubscriptions",
}

// leaderboardR is where relationships are stored.
type leaderboardR struct {
	Country                      *Country                         `boil:"Country" json:"Country" toml:"Country" yaml:"Country"`
	Season                       *Season                          `boil:"Season" json:"Season" toml:"Season" yaml:"Season"`
	Team                         *Team                            `boil:"Team" json:"Team" toml:"Team" yaml:"Team"`
	UserLeaderboardSubscriptions UserLeaderboardSubscriptionSlice `boil:"UserLeaderboardSubscriptions" json:"UserLeaderboardSubscriptions" toml:"UserLeaderboardSubscriptions" yaml:"UserLeaderboardSubscriptions"`
}

// NewStruct creates a new relationship struct
func (*leaderboardR) NewStruct() *leaderboardR {
	return &leaderboardR{}
}

func (r *leaderboardR) GetCountry() *Country {
	if r == nil {
		return nil
	}
	return r.Country
}

func (r *leaderboardR) GetSeason() *Season {
	if r == nil {
		return nil
	}
	return r.Season
}

func (r *leaderboardR) GetTeam() *Team {
	if r == nil {
		return nil
	}
	return r.Team
}

func (r *leaderboardR) GetUserLeaderboardSubscriptions() UserLeaderboardSubscriptionSlice {
	if r == nil {
		return nil
	}
	return r.UserLeaderboardSubscriptions
}

// leaderboardL is where Load methods for each relationship are stored.
type leaderboardL struct{}

var (
	leaderboardAllColumns            = []string{"id", "created_at", "updated_at", "name", "category", "description", "season_id", "team_id", "country_id"}
	leaderboardColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "name", "category"}
	leaderboardColumnsWithDefault    = []string{"description", "season_id", "team_id", "country_id"}
	leaderboardPrimaryKeyColumns     = []string{"id"}
	leaderboardGeneratedColumns      = []string{}
)

type (
	// LeaderboardSlice is an alias for a slice of pointers to Leaderboard.
	// This should almost always be used instead of []Leaderboard.
	LeaderboardSlice []*Leaderboard

	leaderboardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	leaderboardType                 = reflect.TypeOf(&Leaderboard{})
	leaderboardMapping              = queries.MakeStructMapping(leaderboardType)
	leaderboardPrimaryKeyMapping, _ = queries.BindMapping(leaderboardType, leaderboardMapping, leaderboardPrimaryKeyColumns)
	leaderboardInsertCacheMut       sync.RWMutex
	leaderboardInsertCache          = make(map[string]insertCache)
	leaderboardUpdateCacheMut       sync.RWMutex
	leaderboardUpdateCache          = make(map[string]updateCache)
	leaderboardUpsertCacheMut       sync.RWMutex
	leaderboardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single leaderboard record from the query.
func (q leaderboardQuery) One(exec boil.Executor) (*Leaderboard, error) {
	o := &Leaderboard{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for leaderboards")
	}

	return o, nil
}

// All returns all Leaderboard records from the query.
func (q leaderboardQuery) All(exec boil.Executor) (LeaderboardSlice, error) {
	var o []*Leaderboard

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to Leaderboard slice")
	}

	return o, nil
}

// Count returns the count of all Leaderboard records in the query.
func (q leaderboardQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count leaderboards rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q leaderboardQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if leaderboards exists")
	}

	return count > 0, nil
}

// Country pointed to by the foreign key.
func (o *Leaderboard) Country(mods ...qm.QueryMod) countryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CountryID),
	}

	queryMods = append(queryMods, mods...)

	return Countries(queryMods...)
}

// Season pointed to by the foreign key.
func (o *Leaderboard) Season(mods ...qm.QueryMod) seasonQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SeasonID),
	}

	queryMods = append(queryMods, mods...)

	return Seasons(queryMods...)
}

// Team pointed to by the foreign key.
func (o *Leaderboard) Team(mods ...qm.QueryMod) teamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TeamID),
	}

	queryMods = append(queryMods, mods...)

	return Teams(queryMods...)
}

// UserLeaderboardSubscriptions retrieves all the user_leaderboard_subscription's UserLeaderboardSubscriptions with an executor.
func (o *Leaderboard) UserLeaderboardSubscriptions(mods ...qm.QueryMod) userLeaderboardSubscriptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_leaderboard_subscriptions\".\"leaderboard_id\"=?", o.ID),
	)

	return UserLeaderboardSubscriptions(queryMods...)
}

// LoadCountry allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (leaderboardL) LoadCountry(e boil.Executor, singular bool, maybeLeaderboard interface{}, mods queries.Applicator) error {
	var slice []*Leaderboard
	var object *Leaderboard

	if singular {
		var ok bool
		object, ok = maybeLeaderboard.(*Leaderboard)
		if !ok {
			object = new(Leaderboard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLeaderboard))
			}
		}
	} else {
		s, ok := maybeLeaderboard.(*[]*Leaderboard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLeaderboard))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &leaderboardR{}
		}
		if !queries.IsNil(object.CountryID) {
			args[object.CountryID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &leaderboardR{}
			}

			if !queries.IsNil(obj.CountryID) {
				args[obj.CountryID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`countries`),
		qm.WhereIn(`countries.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Country")
	}

	var resultSlice []*Country
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Country")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for countries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for countries")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Country = foreign
		if foreign.R == nil {
			foreign.R = &countryR{}
		}
		foreign.R.Leaderboards = append(foreign.R.Leaderboards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CountryID, foreign.ID) {
				local.R.Country = foreign
				if foreign.R == nil {
					foreign.R = &countryR{}
				}
				foreign.R.Leaderboards = append(foreign.R.Leaderboards, local)
				break
			}
		}
	}

	return nil
}

// LoadSeason allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (leaderboardL) LoadSeason(e boil.Executor, singular bool, maybeLeaderboard interface{}, mods queries.Applicator) error {
	var slice []*Leaderboard
	var object *Leaderboard

	if singular {
		var ok bool
		object, ok = maybeLeaderboard.(*Leaderboard)
		if !ok {
			object = new(Leaderboard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLeaderboard))
			}
		}
	} else {
		s, ok := maybeLeaderboard.(*[]*Leaderboard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLeaderboard))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &leaderboardR{}
		}
		if !queries.IsNil(object.SeasonID) {
			args[object.SeasonID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &leaderboardR{}
			}

			if !queries.IsNil(obj.SeasonID) {
				args[obj.SeasonID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`seasons`),
		qm.WhereIn(`seasons.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Season")
	}

	var resultSlice []*Season
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Season")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for seasons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seasons")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Season = foreign
		if foreign.R == nil {
			foreign.R = &seasonR{}
		}
		foreign.R.Leaderboards = append(foreign.R.Leaderboards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SeasonID, foreign.ID) {
				local.R.Season = foreign
				if foreign.R == nil {
					foreign.R = &seasonR{}
				}
				foreign.R.Leaderboards = append(foreign.R.Leaderboards, local)
				break
			}
		}
	}

	return nil
}

// LoadTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (leaderboardL) LoadTeam(e boil.Executor, singular bool, maybeLeaderboard interface{}, mods queries.Applicator) error {
	var slice []*Leaderboard
	var object *Leaderboard

	if singular {
		var ok bool
		object, ok = maybeLeaderboard.(*Leaderboard)
		if !ok {
			object = new(Leaderboard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLeaderboard))
			}
		}
	} else {
		s, ok := maybeLeaderboard.(*[]*Leaderboard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLeaderboard))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &leaderboardR{}
		}
		if !queries.IsNil(object.TeamID) {
			args[object.TeamID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &leaderboardR{}
			}

			if !queries.IsNil(obj.TeamID) {
				args[obj.TeamID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`teams`),
		qm.WhereIn(`teams.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for teams")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Team = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.Leaderboards = append(foreign.R.Leaderboards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TeamID, foreign.ID) {
				local.R.Team = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.Leaderboards = append(foreign.R.Leaderboards, local)
				break
			}
		}
	}

	return nil
}

// LoadUserLeaderboardSubscriptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (leaderboardL) LoadUserLeaderboardSubscriptions(e boil.Executor, singular bool, maybeLeaderboard interface{}, mods queries.Applicator) error {
	var slice []*Leaderboard
	var object *Leaderboard

	if singular {
		var ok bool
		object, ok = maybeLeaderboard.(*Leaderboard)
		if !ok {
			object = new(Leaderboard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLeaderboard))
			}
		}
	} else {
		s, ok := maybeLeaderboard.(*[]*Leaderboard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLeaderboard))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &leaderboardR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &leaderboardR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_leaderboard_subscriptions`),
		qm.WhereIn(`user_leaderboard_subscriptions.leaderboard_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_leaderboard_subscriptions")
	}

	var resultSlice []*UserLeaderboardSubscription
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_leaderboard_subscriptions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_leaderboard_subscriptions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_leaderboard_subscriptions")
	}

	if singular {
		object.R.UserLeaderboardSubscriptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userLeaderboardSubscriptionR{}
			}
			foreign.R.Leaderboard = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.LeaderboardID {
				local.R.UserLeaderboardSubscriptions = append(local.R.UserLeaderboardSubscriptions, foreign)
				if foreign.R == nil {
					foreign.R = &userLeaderboardSubscriptionR{}
				}
				foreign.R.Leaderboard = local
				break
			}
		}
	}

	return nil
}

// SetCountry of the leaderboard to the related item.
// Sets o.R.Country to related.
// Adds o to related.R.Leaderboards.
func (o *Leaderboard) SetCountry(exec boil.Executor, insert bool, related *Country) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"leaderboards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"country_id"}),
		strmangle.WhereClause("\"", "\"", 2, leaderboardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CountryID, related.ID)
	if o.R == nil {
		o.R = &leaderboardR{
			Country: related,
		}
	} else {
		o.R.Country = related
	}

	if related.R == nil {
		related.R = &countryR{
			Leaderboards: LeaderboardSlice{o},
		}
	} else {
		related.R.Leaderboards = append(related.R.Leaderboards, o)
	}

	return nil
}

// RemoveCountry relationship.
// Sets o.R.Country to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Leaderboard) RemoveCountry(exec boil.Executor, related *Country) error {
	var err error

	queries.SetScanner(&o.CountryID, nil)
	if _, err = o.Update(exec, boil.Whitelist("country_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Country = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Leaderboards {
		if queries.Equal(o.CountryID, ri.CountryID) {
			continue
		}

		ln := len(related.R.Leaderboards)
		if ln > 1 && i < ln-1 {
			related.R.Leaderboards[i] = related.R.Leaderboards[ln-1]
		}
		related.R.Leaderboards = related.R.Leaderboards[:ln-1]
		break
	}
	return nil
}

// SetSeason of the leaderboard to the related item.
// Sets o.R.Season to related.
// Adds o to related.R.Leaderboards.
func (o *Leaderboard) SetSeason(exec boil.Executor, insert bool, related *Season) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"leaderboards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"season_id"}),
		strmangle.WhereClause("\"", "\"", 2, leaderboardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SeasonID, related.ID)
	if o.R == nil {
		o.R = &leaderboardR{
			Season: related,
		}
	} else {
		o.R.Season = related
	}

	if related.R == nil {
		related.R = &seasonR{
			Leaderboards: LeaderboardSlice{o},
		}
	} else {
		related.R.Leaderboards = append(related.R.Leaderboards, o)
	}

	return nil
}

// RemoveSeason relationship.
// Sets o.R.Season to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Leaderboard) RemoveSeason(exec boil.Executor, related *Season) error {
	var err error

	queries.SetScanner(&o.SeasonID, nil)
	if _, err = o.Update(exec, boil.Whitelist("season_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Season = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Leaderboards {
		if queries.Equal(o.SeasonID, ri.SeasonID) {
			continue
		}

		ln := len(related.R.Leaderboards)
		if ln > 1 && i < ln-1 {
			related.R.Leaderboards[i] = related.R.Leaderboards[ln-1]
		}
		related.R.Leaderboards = related.R.Leaderboards[:ln-1]
		break
	}
	return nil
}

// SetTeam of the leaderboard to the related item.
// Sets o.R.Team to related.
// Adds o to related.R.Leaderboards.
func (o *Leaderboard) SetTeam(exec boil.Executor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"leaderboards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
		strmangle.WhereClause("\"", "\"", 2, leaderboardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TeamID, related.ID)
	if o.R == nil {
		o.R = &leaderboardR{
			Team: related,
		}
	} else {
		o.R.Team = related
	}

	if related.R == nil {
		related.R = &teamR{
			Leaderboards: LeaderboardSlice{o},
		}
	} else {
		related.R.Leaderboards = append(related.R.Leaderboards, o)
	}

	return nil
}

// RemoveTeam relationship.
// Sets o.R.Team to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Leaderboard) RemoveTeam(exec boil.Executor, related *Team) error {
	var err error

	queries.SetScanner(&o.TeamID, nil)
	if _, err = o.Update(exec, boil.Whitelist("team_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Team = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Leaderboards {
		if queries.Equal(o.TeamID, ri.TeamID) {
			continue
		}

		ln := len(related.R.Leaderboards)
		if ln > 1 && i < ln-1 {
			related.R.Leaderboards[i] = related.R.Leaderboards[ln-1]
		}
		related.R.Leaderboards = related.R.Leaderboards[:ln-1]
		break
	}
	return nil
}

// AddUserLeaderboardSubscriptions adds the given related objects to the existing relationships
// of the leaderboard, optionally inserting them as new records.
// Appends related to o.R.UserLeaderboardSubscriptions.
// Sets related.R.Leaderboard appropriately.
func (o *Leaderboard) AddUserLeaderboardSubscriptions(exec boil.Executor, insert bool, related ...*UserLeaderboardSubscription) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.LeaderboardID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_leaderboard_subscriptions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"leaderboard_id"}),
				strmangle.WhereClause("\"", "\"", 2, userLeaderboardSubscriptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.LeaderboardID = o.ID
		}
	}

	if o.R == nil {
		o.R = &leaderboardR{
			UserLeaderboardSubscriptions: related,
		}
	} else {
		o.R.UserLeaderboardSubscriptions = append(o.R.UserLeaderboardSubscriptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userLeaderboardSubscriptionR{
				Leaderboard: o,
			}
		} else {
			rel.R.Leaderboard = o
		}
	}
	return nil
}

// Leaderboards retrieves all the records using an executor.
func Leaderboards(mods ...qm.QueryMod) leaderboardQuery {
	mods = append(mods, qm.From("\"leaderboards\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"leaderboards\".*"})
	}

	return leaderboardQuery{q}
}

// FindLeaderboard retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLeaderboard(exec boil.Executor, iD string, selectCols ...string) (*Leaderboard, error) {
	leaderboardObj := &Leaderboard{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"leaderboards\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, leaderboardObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from leaderboards")
	}

	return leaderboardObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Leaderboard) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no leaderboards provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(leaderboardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	leaderboardInsertCacheMut.RLock()
	cache, cached := leaderboardInsertCache[key]
	leaderboardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			leaderboardAllColumns,
			leaderboardColumnsWithDefault,
			leaderboardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(leaderboardType, leaderboardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(leaderboardType, leaderboardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"leaderboards\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"leaderboards\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into leaderboards")
	}

	if !cached {
		leaderboardInsertCacheMut.Lock()
		leaderboardInsertCache[key] = cache
		leaderboardInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Leaderboard.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Leaderboard) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	leaderboardUpdateCacheMut.RLock()
	cache, cached := leaderboardUpdateCache[key]
	leaderboardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			leaderboardAllColumns,
			leaderboardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update leaderboards, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"leaderboards\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, leaderboardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(leaderboardType, leaderboardMapping, append(wl, leaderboardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update leaderboards row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for leaderboards")
	}

	if !cached {
		leaderboardUpdateCacheMut.Lock()
		leaderboardUpdateCache[key] = cache
		leaderboardUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q leaderboardQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for leaderboards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for leaderboards")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LeaderboardSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), leaderboardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"leaderboards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, leaderboardPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in leaderboard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all leaderboard")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Leaderboard) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no leaderboards provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(leaderboardColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	leaderboardUpsertCacheMut.RLock()
	cache, cached := leaderboardUpsertCache[key]
	leaderboardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			leaderboardAllColumns,
			leaderboardColumnsWithDefault,
			leaderboardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			leaderboardAllColumns,
			leaderboardPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert leaderboards, could not build update column list")
		}

		ret := strmangle.SetComplement(leaderboardAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(leaderboardPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert leaderboards, could not build conflict column list")
			}

			conflict = make([]string, len(leaderboardPrimaryKeyColumns))
			copy(conflict, leaderboardPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"leaderboards\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(leaderboardType, leaderboardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(leaderboardType, leaderboardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert leaderboards")
	}

	if !cached {
		leaderboardUpsertCacheMut.Lock()
		leaderboardUpsertCache[key] = cache
		leaderboardUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Leaderboard record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Leaderboard) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no Leaderboard provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), leaderboardPrimaryKeyMapping)
	sql := "DELETE FROM \"leaderboards\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from leaderboards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for leaderboards")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q leaderboardQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no leaderboardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from leaderboards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for leaderboards")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LeaderboardSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), leaderboardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"leaderboards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, leaderboardPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from leaderboard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for leaderboards")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Leaderboard) Reload(exec boil.Executor) error {
	ret, err := FindLeaderboard(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LeaderboardSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LeaderboardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), leaderboardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"leaderboards\".* FROM \"leaderboards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, leaderboardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in LeaderboardSlice")
	}

	*o = slice

	return nil
}

// LeaderboardExists checks if the Leaderboard row exists.
func LeaderboardExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"leaderboards\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if leaderboards exists")
	}

	return exists, nil
}

// Exists checks if the Leaderboard row exists.
func (o *Leaderboard) Exists(exec boil.Executor) (bool, error) {
	return LeaderboardExists(exec, o.ID)
}
