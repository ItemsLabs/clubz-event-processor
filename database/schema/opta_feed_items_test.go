// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOptaFeedItems(t *testing.T) {
	t.Parallel()

	query := OptaFeedItems()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOptaFeedItemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeedItem{}
	if err = randomize.Struct(seed, o, optaFeedItemDBTypes, true, optaFeedItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OptaFeedItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOptaFeedItemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeedItem{}
	if err = randomize.Struct(seed, o, optaFeedItemDBTypes, true, optaFeedItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OptaFeedItems().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OptaFeedItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOptaFeedItemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeedItem{}
	if err = randomize.Struct(seed, o, optaFeedItemDBTypes, true, optaFeedItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OptaFeedItemSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OptaFeedItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOptaFeedItemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeedItem{}
	if err = randomize.Struct(seed, o, optaFeedItemDBTypes, true, optaFeedItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OptaFeedItemExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OptaFeedItem exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OptaFeedItemExists to return true, but got false.")
	}
}

func testOptaFeedItemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeedItem{}
	if err = randomize.Struct(seed, o, optaFeedItemDBTypes, true, optaFeedItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	optaFeedItemFound, err := FindOptaFeedItem(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if optaFeedItemFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOptaFeedItemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeedItem{}
	if err = randomize.Struct(seed, o, optaFeedItemDBTypes, true, optaFeedItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OptaFeedItems().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testOptaFeedItemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeedItem{}
	if err = randomize.Struct(seed, o, optaFeedItemDBTypes, true, optaFeedItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OptaFeedItems().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOptaFeedItemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	optaFeedItemOne := &OptaFeedItem{}
	optaFeedItemTwo := &OptaFeedItem{}
	if err = randomize.Struct(seed, optaFeedItemOne, optaFeedItemDBTypes, false, optaFeedItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}
	if err = randomize.Struct(seed, optaFeedItemTwo, optaFeedItemDBTypes, false, optaFeedItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = optaFeedItemOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = optaFeedItemTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OptaFeedItems().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOptaFeedItemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	optaFeedItemOne := &OptaFeedItem{}
	optaFeedItemTwo := &OptaFeedItem{}
	if err = randomize.Struct(seed, optaFeedItemOne, optaFeedItemDBTypes, false, optaFeedItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}
	if err = randomize.Struct(seed, optaFeedItemTwo, optaFeedItemDBTypes, false, optaFeedItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = optaFeedItemOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = optaFeedItemTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OptaFeedItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testOptaFeedItemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeedItem{}
	if err = randomize.Struct(seed, o, optaFeedItemDBTypes, true, optaFeedItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OptaFeedItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOptaFeedItemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeedItem{}
	if err = randomize.Struct(seed, o, optaFeedItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(optaFeedItemColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OptaFeedItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOptaFeedItemToManyItemOptaFeedItemVersions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a OptaFeedItem
	var b, c OptaFeedItemVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, optaFeedItemDBTypes, true, optaFeedItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, optaFeedItemVersionDBTypes, false, optaFeedItemVersionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, optaFeedItemVersionDBTypes, false, optaFeedItemVersionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ItemID = a.ID
	c.ItemID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ItemOptaFeedItemVersions().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ItemID == b.ItemID {
			bFound = true
		}
		if v.ItemID == c.ItemID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OptaFeedItemSlice{&a}
	if err = a.L.LoadItemOptaFeedItemVersions(tx, false, (*[]*OptaFeedItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ItemOptaFeedItemVersions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ItemOptaFeedItemVersions = nil
	if err = a.L.LoadItemOptaFeedItemVersions(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ItemOptaFeedItemVersions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOptaFeedItemToManyAddOpItemOptaFeedItemVersions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a OptaFeedItem
	var b, c, d, e OptaFeedItemVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, optaFeedItemDBTypes, false, strmangle.SetComplement(optaFeedItemPrimaryKeyColumns, optaFeedItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OptaFeedItemVersion{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, optaFeedItemVersionDBTypes, false, strmangle.SetComplement(optaFeedItemVersionPrimaryKeyColumns, optaFeedItemVersionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OptaFeedItemVersion{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddItemOptaFeedItemVersions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ItemID {
			t.Error("foreign key was wrong value", a.ID, first.ItemID)
		}
		if a.ID != second.ItemID {
			t.Error("foreign key was wrong value", a.ID, second.ItemID)
		}

		if first.R.Item != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Item != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ItemOptaFeedItemVersions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ItemOptaFeedItemVersions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ItemOptaFeedItemVersions().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testOptaFeedItemToOneOptaFeedItemVersionUsingCurrentVersion(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local OptaFeedItem
	var foreign OptaFeedItemVersion

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, optaFeedItemDBTypes, true, optaFeedItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, optaFeedItemVersionDBTypes, false, optaFeedItemVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItemVersion struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CurrentVersionID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CurrentVersion().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OptaFeedItemSlice{&local}
	if err = local.L.LoadCurrentVersion(tx, false, (*[]*OptaFeedItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CurrentVersion == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CurrentVersion = nil
	if err = local.L.LoadCurrentVersion(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CurrentVersion == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testOptaFeedItemToOneMatchUsingMatch(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local OptaFeedItem
	var foreign Match

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, optaFeedItemDBTypes, false, optaFeedItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MatchID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Match().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OptaFeedItemSlice{&local}
	if err = local.L.LoadMatch(tx, false, (*[]*OptaFeedItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Match == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Match = nil
	if err = local.L.LoadMatch(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Match == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testOptaFeedItemToOneSetOpOptaFeedItemVersionUsingCurrentVersion(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a OptaFeedItem
	var b, c OptaFeedItemVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, optaFeedItemDBTypes, false, strmangle.SetComplement(optaFeedItemPrimaryKeyColumns, optaFeedItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, optaFeedItemVersionDBTypes, false, strmangle.SetComplement(optaFeedItemVersionPrimaryKeyColumns, optaFeedItemVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, optaFeedItemVersionDBTypes, false, strmangle.SetComplement(optaFeedItemVersionPrimaryKeyColumns, optaFeedItemVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OptaFeedItemVersion{&b, &c} {
		err = a.SetCurrentVersion(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CurrentVersion != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CurrentVersionOptaFeedItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CurrentVersionID, x.ID) {
			t.Error("foreign key was wrong value", a.CurrentVersionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CurrentVersionID))
		reflect.Indirect(reflect.ValueOf(&a.CurrentVersionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CurrentVersionID, x.ID) {
			t.Error("foreign key was wrong value", a.CurrentVersionID, x.ID)
		}
	}
}

func testOptaFeedItemToOneRemoveOpOptaFeedItemVersionUsingCurrentVersion(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a OptaFeedItem
	var b OptaFeedItemVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, optaFeedItemDBTypes, false, strmangle.SetComplement(optaFeedItemPrimaryKeyColumns, optaFeedItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, optaFeedItemVersionDBTypes, false, strmangle.SetComplement(optaFeedItemVersionPrimaryKeyColumns, optaFeedItemVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCurrentVersion(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCurrentVersion(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.CurrentVersion().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.CurrentVersion != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CurrentVersionID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CurrentVersionOptaFeedItems) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOptaFeedItemToOneSetOpMatchUsingMatch(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a OptaFeedItem
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, optaFeedItemDBTypes, false, strmangle.SetComplement(optaFeedItemPrimaryKeyColumns, optaFeedItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Match{&b, &c} {
		err = a.SetMatch(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Match != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OptaFeedItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MatchID != x.ID {
			t.Error("foreign key was wrong value", a.MatchID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MatchID))
		reflect.Indirect(reflect.ValueOf(&a.MatchID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MatchID != x.ID {
			t.Error("foreign key was wrong value", a.MatchID, x.ID)
		}
	}
}

func testOptaFeedItemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeedItem{}
	if err = randomize.Struct(seed, o, optaFeedItemDBTypes, true, optaFeedItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testOptaFeedItemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeedItem{}
	if err = randomize.Struct(seed, o, optaFeedItemDBTypes, true, optaFeedItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OptaFeedItemSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testOptaFeedItemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeedItem{}
	if err = randomize.Struct(seed, o, optaFeedItemDBTypes, true, optaFeedItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OptaFeedItems().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	optaFeedItemDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `UniqueID`: `character varying`, `EventID`: `character varying`, `CurrentVersionID`: `uuid`, `MatchID`: `uuid`}
	_                   = bytes.MinRead
)

func testOptaFeedItemsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(optaFeedItemPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(optaFeedItemAllColumns) == len(optaFeedItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeedItem{}
	if err = randomize.Struct(seed, o, optaFeedItemDBTypes, true, optaFeedItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OptaFeedItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, optaFeedItemDBTypes, true, optaFeedItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOptaFeedItemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(optaFeedItemAllColumns) == len(optaFeedItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeedItem{}
	if err = randomize.Struct(seed, o, optaFeedItemDBTypes, true, optaFeedItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OptaFeedItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, optaFeedItemDBTypes, true, optaFeedItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(optaFeedItemAllColumns, optaFeedItemPrimaryKeyColumns) {
		fields = optaFeedItemAllColumns
	} else {
		fields = strmangle.SetComplement(
			optaFeedItemAllColumns,
			optaFeedItemPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OptaFeedItemSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOptaFeedItemsUpsert(t *testing.T) {
	t.Parallel()

	if len(optaFeedItemAllColumns) == len(optaFeedItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OptaFeedItem{}
	if err = randomize.Struct(seed, &o, optaFeedItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OptaFeedItem: %s", err)
	}

	count, err := OptaFeedItems().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, optaFeedItemDBTypes, false, optaFeedItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItem struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OptaFeedItem: %s", err)
	}

	count, err = OptaFeedItems().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
