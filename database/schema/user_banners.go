// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserBanner is an object representing the database table.
type UserBanner struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	BannerID  int       `boil:"banner_id" json:"banner_id" toml:"banner_id" yaml:"banner_id"`
	UserID    string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *userBannerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userBannerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserBannerColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	BannerID  string
	UserID    string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	BannerID:  "banner_id",
	UserID:    "user_id",
}

var UserBannerTableColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	BannerID  string
	UserID    string
}{
	ID:        "user_banners.id",
	CreatedAt: "user_banners.created_at",
	UpdatedAt: "user_banners.updated_at",
	BannerID:  "user_banners.banner_id",
	UserID:    "user_banners.user_id",
}

// Generated where

var UserBannerWhere = struct {
	ID        whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	BannerID  whereHelperint
	UserID    whereHelperstring
}{
	ID:        whereHelperint{field: "\"user_banners\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"user_banners\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"user_banners\".\"updated_at\""},
	BannerID:  whereHelperint{field: "\"user_banners\".\"banner_id\""},
	UserID:    whereHelperstring{field: "\"user_banners\".\"user_id\""},
}

// UserBannerRels is where relationship names are stored.
var UserBannerRels = struct {
	Banner string
	User   string
}{
	Banner: "Banner",
	User:   "User",
}

// userBannerR is where relationships are stored.
type userBannerR struct {
	Banner *Banner `boil:"Banner" json:"Banner" toml:"Banner" yaml:"Banner"`
	User   *User   `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userBannerR) NewStruct() *userBannerR {
	return &userBannerR{}
}

func (r *userBannerR) GetBanner() *Banner {
	if r == nil {
		return nil
	}
	return r.Banner
}

func (r *userBannerR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userBannerL is where Load methods for each relationship are stored.
type userBannerL struct{}

var (
	userBannerAllColumns            = []string{"id", "created_at", "updated_at", "banner_id", "user_id"}
	userBannerColumnsWithoutDefault = []string{"created_at", "updated_at", "banner_id", "user_id"}
	userBannerColumnsWithDefault    = []string{"id"}
	userBannerPrimaryKeyColumns     = []string{"id"}
	userBannerGeneratedColumns      = []string{}
)

type (
	// UserBannerSlice is an alias for a slice of pointers to UserBanner.
	// This should almost always be used instead of []UserBanner.
	UserBannerSlice []*UserBanner

	userBannerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userBannerType                 = reflect.TypeOf(&UserBanner{})
	userBannerMapping              = queries.MakeStructMapping(userBannerType)
	userBannerPrimaryKeyMapping, _ = queries.BindMapping(userBannerType, userBannerMapping, userBannerPrimaryKeyColumns)
	userBannerInsertCacheMut       sync.RWMutex
	userBannerInsertCache          = make(map[string]insertCache)
	userBannerUpdateCacheMut       sync.RWMutex
	userBannerUpdateCache          = make(map[string]updateCache)
	userBannerUpsertCacheMut       sync.RWMutex
	userBannerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single userBanner record from the query.
func (q userBannerQuery) One(exec boil.Executor) (*UserBanner, error) {
	o := &UserBanner{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for user_banners")
	}

	return o, nil
}

// All returns all UserBanner records from the query.
func (q userBannerQuery) All(exec boil.Executor) (UserBannerSlice, error) {
	var o []*UserBanner

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to UserBanner slice")
	}

	return o, nil
}

// Count returns the count of all UserBanner records in the query.
func (q userBannerQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count user_banners rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userBannerQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if user_banners exists")
	}

	return count > 0, nil
}

// Banner pointed to by the foreign key.
func (o *UserBanner) Banner(mods ...qm.QueryMod) bannerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BannerID),
	}

	queryMods = append(queryMods, mods...)

	return Banners(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserBanner) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadBanner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userBannerL) LoadBanner(e boil.Executor, singular bool, maybeUserBanner interface{}, mods queries.Applicator) error {
	var slice []*UserBanner
	var object *UserBanner

	if singular {
		var ok bool
		object, ok = maybeUserBanner.(*UserBanner)
		if !ok {
			object = new(UserBanner)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBanner)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBanner))
			}
		}
	} else {
		s, ok := maybeUserBanner.(*[]*UserBanner)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBanner)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBanner))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userBannerR{}
		}
		args[object.BannerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBannerR{}
			}

			args[obj.BannerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`banners`),
		qm.WhereIn(`banners.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Banner")
	}

	var resultSlice []*Banner
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Banner")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for banners")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for banners")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Banner = foreign
		if foreign.R == nil {
			foreign.R = &bannerR{}
		}
		foreign.R.UserBanners = append(foreign.R.UserBanners, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BannerID == foreign.ID {
				local.R.Banner = foreign
				if foreign.R == nil {
					foreign.R = &bannerR{}
				}
				foreign.R.UserBanners = append(foreign.R.UserBanners, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userBannerL) LoadUser(e boil.Executor, singular bool, maybeUserBanner interface{}, mods queries.Applicator) error {
	var slice []*UserBanner
	var object *UserBanner

	if singular {
		var ok bool
		object, ok = maybeUserBanner.(*UserBanner)
		if !ok {
			object = new(UserBanner)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBanner)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBanner))
			}
		}
	} else {
		s, ok := maybeUserBanner.(*[]*UserBanner)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBanner)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBanner))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userBannerR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBannerR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserBanners = append(foreign.R.UserBanners, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserBanners = append(foreign.R.UserBanners, local)
				break
			}
		}
	}

	return nil
}

// SetBanner of the userBanner to the related item.
// Sets o.R.Banner to related.
// Adds o to related.R.UserBanners.
func (o *UserBanner) SetBanner(exec boil.Executor, insert bool, related *Banner) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_banners\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"banner_id"}),
		strmangle.WhereClause("\"", "\"", 2, userBannerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BannerID = related.ID
	if o.R == nil {
		o.R = &userBannerR{
			Banner: related,
		}
	} else {
		o.R.Banner = related
	}

	if related.R == nil {
		related.R = &bannerR{
			UserBanners: UserBannerSlice{o},
		}
	} else {
		related.R.UserBanners = append(related.R.UserBanners, o)
	}

	return nil
}

// SetUser of the userBanner to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserBanners.
func (o *UserBanner) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_banners\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userBannerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userBannerR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserBanners: UserBannerSlice{o},
		}
	} else {
		related.R.UserBanners = append(related.R.UserBanners, o)
	}

	return nil
}

// UserBanners retrieves all the records using an executor.
func UserBanners(mods ...qm.QueryMod) userBannerQuery {
	mods = append(mods, qm.From("\"user_banners\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_banners\".*"})
	}

	return userBannerQuery{q}
}

// FindUserBanner retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserBanner(exec boil.Executor, iD int, selectCols ...string) (*UserBanner, error) {
	userBannerObj := &UserBanner{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_banners\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userBannerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from user_banners")
	}

	return userBannerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserBanner) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no user_banners provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(userBannerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userBannerInsertCacheMut.RLock()
	cache, cached := userBannerInsertCache[key]
	userBannerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userBannerAllColumns,
			userBannerColumnsWithDefault,
			userBannerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userBannerType, userBannerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userBannerType, userBannerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_banners\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_banners\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into user_banners")
	}

	if !cached {
		userBannerInsertCacheMut.Lock()
		userBannerInsertCache[key] = cache
		userBannerInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the UserBanner.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserBanner) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	userBannerUpdateCacheMut.RLock()
	cache, cached := userBannerUpdateCache[key]
	userBannerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userBannerAllColumns,
			userBannerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update user_banners, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_banners\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userBannerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userBannerType, userBannerMapping, append(wl, userBannerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update user_banners row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for user_banners")
	}

	if !cached {
		userBannerUpdateCacheMut.Lock()
		userBannerUpdateCache[key] = cache
		userBannerUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q userBannerQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for user_banners")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for user_banners")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserBannerSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBannerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_banners\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userBannerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in userBanner slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all userBanner")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserBanner) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no user_banners provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(userBannerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userBannerUpsertCacheMut.RLock()
	cache, cached := userBannerUpsertCache[key]
	userBannerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userBannerAllColumns,
			userBannerColumnsWithDefault,
			userBannerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userBannerAllColumns,
			userBannerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert user_banners, could not build update column list")
		}

		ret := strmangle.SetComplement(userBannerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userBannerPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert user_banners, could not build conflict column list")
			}

			conflict = make([]string, len(userBannerPrimaryKeyColumns))
			copy(conflict, userBannerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_banners\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userBannerType, userBannerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userBannerType, userBannerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert user_banners")
	}

	if !cached {
		userBannerUpsertCacheMut.Lock()
		userBannerUpsertCache[key] = cache
		userBannerUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single UserBanner record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserBanner) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no UserBanner provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userBannerPrimaryKeyMapping)
	sql := "DELETE FROM \"user_banners\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from user_banners")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for user_banners")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userBannerQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no userBannerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from user_banners")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for user_banners")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserBannerSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBannerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_banners\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userBannerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from userBanner slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for user_banners")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserBanner) Reload(exec boil.Executor) error {
	ret, err := FindUserBanner(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserBannerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserBannerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBannerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_banners\".* FROM \"user_banners\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userBannerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in UserBannerSlice")
	}

	*o = slice

	return nil
}

// UserBannerExists checks if the UserBanner row exists.
func UserBannerExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_banners\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if user_banners exists")
	}

	return exists, nil
}

// Exists checks if the UserBanner row exists.
func (o *UserBanner) Exists(exec boil.Executor) (bool, error) {
	return UserBannerExists(exec, o.ID)
}
