// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLeaderboards(t *testing.T) {
	t.Parallel()

	query := Leaderboards()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLeaderboardsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Leaderboard{}
	if err = randomize.Struct(seed, o, leaderboardDBTypes, true, leaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Leaderboards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLeaderboardsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Leaderboard{}
	if err = randomize.Struct(seed, o, leaderboardDBTypes, true, leaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Leaderboards().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Leaderboards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLeaderboardsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Leaderboard{}
	if err = randomize.Struct(seed, o, leaderboardDBTypes, true, leaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LeaderboardSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Leaderboards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLeaderboardsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Leaderboard{}
	if err = randomize.Struct(seed, o, leaderboardDBTypes, true, leaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LeaderboardExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Leaderboard exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LeaderboardExists to return true, but got false.")
	}
}

func testLeaderboardsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Leaderboard{}
	if err = randomize.Struct(seed, o, leaderboardDBTypes, true, leaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	leaderboardFound, err := FindLeaderboard(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if leaderboardFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLeaderboardsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Leaderboard{}
	if err = randomize.Struct(seed, o, leaderboardDBTypes, true, leaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Leaderboards().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testLeaderboardsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Leaderboard{}
	if err = randomize.Struct(seed, o, leaderboardDBTypes, true, leaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Leaderboards().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLeaderboardsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	leaderboardOne := &Leaderboard{}
	leaderboardTwo := &Leaderboard{}
	if err = randomize.Struct(seed, leaderboardOne, leaderboardDBTypes, false, leaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}
	if err = randomize.Struct(seed, leaderboardTwo, leaderboardDBTypes, false, leaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = leaderboardOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = leaderboardTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Leaderboards().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLeaderboardsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	leaderboardOne := &Leaderboard{}
	leaderboardTwo := &Leaderboard{}
	if err = randomize.Struct(seed, leaderboardOne, leaderboardDBTypes, false, leaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}
	if err = randomize.Struct(seed, leaderboardTwo, leaderboardDBTypes, false, leaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = leaderboardOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = leaderboardTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Leaderboards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testLeaderboardsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Leaderboard{}
	if err = randomize.Struct(seed, o, leaderboardDBTypes, true, leaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Leaderboards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLeaderboardsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Leaderboard{}
	if err = randomize.Struct(seed, o, leaderboardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(leaderboardColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Leaderboards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLeaderboardToManyUserLeaderboardSubscriptions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Leaderboard
	var b, c UserLeaderboardSubscription

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, leaderboardDBTypes, true, leaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userLeaderboardSubscriptionDBTypes, false, userLeaderboardSubscriptionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userLeaderboardSubscriptionDBTypes, false, userLeaderboardSubscriptionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.LeaderboardID = a.ID
	c.LeaderboardID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserLeaderboardSubscriptions().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.LeaderboardID == b.LeaderboardID {
			bFound = true
		}
		if v.LeaderboardID == c.LeaderboardID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := LeaderboardSlice{&a}
	if err = a.L.LoadUserLeaderboardSubscriptions(tx, false, (*[]*Leaderboard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserLeaderboardSubscriptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserLeaderboardSubscriptions = nil
	if err = a.L.LoadUserLeaderboardSubscriptions(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserLeaderboardSubscriptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testLeaderboardToManyAddOpUserLeaderboardSubscriptions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Leaderboard
	var b, c, d, e UserLeaderboardSubscription

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, leaderboardDBTypes, false, strmangle.SetComplement(leaderboardPrimaryKeyColumns, leaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserLeaderboardSubscription{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userLeaderboardSubscriptionDBTypes, false, strmangle.SetComplement(userLeaderboardSubscriptionPrimaryKeyColumns, userLeaderboardSubscriptionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserLeaderboardSubscription{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserLeaderboardSubscriptions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.LeaderboardID {
			t.Error("foreign key was wrong value", a.ID, first.LeaderboardID)
		}
		if a.ID != second.LeaderboardID {
			t.Error("foreign key was wrong value", a.ID, second.LeaderboardID)
		}

		if first.R.Leaderboard != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Leaderboard != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserLeaderboardSubscriptions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserLeaderboardSubscriptions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserLeaderboardSubscriptions().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testLeaderboardToOneCountryUsingCountry(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Leaderboard
	var foreign Country

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, leaderboardDBTypes, true, leaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, countryDBTypes, false, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CountryID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Country().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LeaderboardSlice{&local}
	if err = local.L.LoadCountry(tx, false, (*[]*Leaderboard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Country = nil
	if err = local.L.LoadCountry(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testLeaderboardToOneSeasonUsingSeason(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Leaderboard
	var foreign Season

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, leaderboardDBTypes, true, leaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, seasonDBTypes, false, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SeasonID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Season().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LeaderboardSlice{&local}
	if err = local.L.LoadSeason(tx, false, (*[]*Leaderboard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Season == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Season = nil
	if err = local.L.LoadSeason(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Season == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testLeaderboardToOneTeamUsingTeam(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Leaderboard
	var foreign Team

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, leaderboardDBTypes, true, leaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TeamID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Team().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LeaderboardSlice{&local}
	if err = local.L.LoadTeam(tx, false, (*[]*Leaderboard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Team = nil
	if err = local.L.LoadTeam(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testLeaderboardToOneSetOpCountryUsingCountry(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Leaderboard
	var b, c Country

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, leaderboardDBTypes, false, strmangle.SetComplement(leaderboardPrimaryKeyColumns, leaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Country{&b, &c} {
		err = a.SetCountry(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Country != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Leaderboards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CountryID, x.ID) {
			t.Error("foreign key was wrong value", a.CountryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CountryID))
		reflect.Indirect(reflect.ValueOf(&a.CountryID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CountryID, x.ID) {
			t.Error("foreign key was wrong value", a.CountryID, x.ID)
		}
	}
}

func testLeaderboardToOneRemoveOpCountryUsingCountry(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Leaderboard
	var b Country

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, leaderboardDBTypes, false, strmangle.SetComplement(leaderboardPrimaryKeyColumns, leaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCountry(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCountry(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Country().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Country != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CountryID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Leaderboards) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testLeaderboardToOneSetOpSeasonUsingSeason(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Leaderboard
	var b, c Season

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, leaderboardDBTypes, false, strmangle.SetComplement(leaderboardPrimaryKeyColumns, leaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, seasonDBTypes, false, strmangle.SetComplement(seasonPrimaryKeyColumns, seasonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, seasonDBTypes, false, strmangle.SetComplement(seasonPrimaryKeyColumns, seasonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Season{&b, &c} {
		err = a.SetSeason(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Season != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Leaderboards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SeasonID, x.ID) {
			t.Error("foreign key was wrong value", a.SeasonID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SeasonID))
		reflect.Indirect(reflect.ValueOf(&a.SeasonID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SeasonID, x.ID) {
			t.Error("foreign key was wrong value", a.SeasonID, x.ID)
		}
	}
}

func testLeaderboardToOneRemoveOpSeasonUsingSeason(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Leaderboard
	var b Season

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, leaderboardDBTypes, false, strmangle.SetComplement(leaderboardPrimaryKeyColumns, leaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, seasonDBTypes, false, strmangle.SetComplement(seasonPrimaryKeyColumns, seasonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSeason(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSeason(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Season().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Season != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SeasonID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Leaderboards) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testLeaderboardToOneSetOpTeamUsingTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Leaderboard
	var b, c Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, leaderboardDBTypes, false, strmangle.SetComplement(leaderboardPrimaryKeyColumns, leaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Team{&b, &c} {
		err = a.SetTeam(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Team != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Leaderboards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TeamID, x.ID) {
			t.Error("foreign key was wrong value", a.TeamID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TeamID))
		reflect.Indirect(reflect.ValueOf(&a.TeamID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TeamID, x.ID) {
			t.Error("foreign key was wrong value", a.TeamID, x.ID)
		}
	}
}

func testLeaderboardToOneRemoveOpTeamUsingTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Leaderboard
	var b Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, leaderboardDBTypes, false, strmangle.SetComplement(leaderboardPrimaryKeyColumns, leaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTeam(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTeam(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Team().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Team != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TeamID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Leaderboards) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testLeaderboardsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Leaderboard{}
	if err = randomize.Struct(seed, o, leaderboardDBTypes, true, leaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testLeaderboardsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Leaderboard{}
	if err = randomize.Struct(seed, o, leaderboardDBTypes, true, leaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LeaderboardSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testLeaderboardsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Leaderboard{}
	if err = randomize.Struct(seed, o, leaderboardDBTypes, true, leaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Leaderboards().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	leaderboardDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `Name`: `character varying`, `Category`: `character varying`, `Description`: `text`, `SeasonID`: `uuid`, `TeamID`: `uuid`, `CountryID`: `uuid`}
	_                  = bytes.MinRead
)

func testLeaderboardsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(leaderboardPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(leaderboardAllColumns) == len(leaderboardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Leaderboard{}
	if err = randomize.Struct(seed, o, leaderboardDBTypes, true, leaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Leaderboards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, leaderboardDBTypes, true, leaderboardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLeaderboardsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(leaderboardAllColumns) == len(leaderboardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Leaderboard{}
	if err = randomize.Struct(seed, o, leaderboardDBTypes, true, leaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Leaderboards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, leaderboardDBTypes, true, leaderboardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(leaderboardAllColumns, leaderboardPrimaryKeyColumns) {
		fields = leaderboardAllColumns
	} else {
		fields = strmangle.SetComplement(
			leaderboardAllColumns,
			leaderboardPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LeaderboardSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLeaderboardsUpsert(t *testing.T) {
	t.Parallel()

	if len(leaderboardAllColumns) == len(leaderboardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Leaderboard{}
	if err = randomize.Struct(seed, &o, leaderboardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Leaderboard: %s", err)
	}

	count, err := Leaderboards().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, leaderboardDBTypes, false, leaderboardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Leaderboard struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Leaderboard: %s", err)
	}

	count, err = Leaderboards().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
