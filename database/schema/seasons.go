// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Season is an object representing the database table.
type Season struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ImportID  null.String `boil:"import_id" json:"import_id,omitempty" toml:"import_id" yaml:"import_id,omitempty"`
	Name      string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	EndAt     null.Time   `boil:"end_at" json:"end_at,omitempty" toml:"end_at" yaml:"end_at,omitempty"`
	StartAt   null.Time   `boil:"start_at" json:"start_at,omitempty" toml:"start_at" yaml:"start_at,omitempty"`

	R *seasonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L seasonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SeasonColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	ImportID  string
	Name      string
	EndAt     string
	StartAt   string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	ImportID:  "import_id",
	Name:      "name",
	EndAt:     "end_at",
	StartAt:   "start_at",
}

var SeasonTableColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	ImportID  string
	Name      string
	EndAt     string
	StartAt   string
}{
	ID:        "seasons.id",
	CreatedAt: "seasons.created_at",
	UpdatedAt: "seasons.updated_at",
	ImportID:  "seasons.import_id",
	Name:      "seasons.name",
	EndAt:     "seasons.end_at",
	StartAt:   "seasons.start_at",
}

// Generated where

var SeasonWhere = struct {
	ID        whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	ImportID  whereHelpernull_String
	Name      whereHelperstring
	EndAt     whereHelpernull_Time
	StartAt   whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "\"seasons\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"seasons\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"seasons\".\"updated_at\""},
	ImportID:  whereHelpernull_String{field: "\"seasons\".\"import_id\""},
	Name:      whereHelperstring{field: "\"seasons\".\"name\""},
	EndAt:     whereHelpernull_Time{field: "\"seasons\".\"end_at\""},
	StartAt:   whereHelpernull_Time{field: "\"seasons\".\"start_at\""},
}

// SeasonRels is where relationship names are stored.
var SeasonRels = struct {
	Leaderboards             string
	Matches                  string
	SeasonCompetitionMembers string
	SeasonTeamPlayers        string
}{
	Leaderboards:             "Leaderboards",
	Matches:                  "Matches",
	SeasonCompetitionMembers: "SeasonCompetitionMembers",
	SeasonTeamPlayers:        "SeasonTeamPlayers",
}

// seasonR is where relationships are stored.
type seasonR struct {
	Leaderboards             LeaderboardSlice             `boil:"Leaderboards" json:"Leaderboards" toml:"Leaderboards" yaml:"Leaderboards"`
	Matches                  MatchSlice                   `boil:"Matches" json:"Matches" toml:"Matches" yaml:"Matches"`
	SeasonCompetitionMembers SeasonCompetitionMemberSlice `boil:"SeasonCompetitionMembers" json:"SeasonCompetitionMembers" toml:"SeasonCompetitionMembers" yaml:"SeasonCompetitionMembers"`
	SeasonTeamPlayers        SeasonTeamPlayerSlice        `boil:"SeasonTeamPlayers" json:"SeasonTeamPlayers" toml:"SeasonTeamPlayers" yaml:"SeasonTeamPlayers"`
}

// NewStruct creates a new relationship struct
func (*seasonR) NewStruct() *seasonR {
	return &seasonR{}
}

func (r *seasonR) GetLeaderboards() LeaderboardSlice {
	if r == nil {
		return nil
	}
	return r.Leaderboards
}

func (r *seasonR) GetMatches() MatchSlice {
	if r == nil {
		return nil
	}
	return r.Matches
}

func (r *seasonR) GetSeasonCompetitionMembers() SeasonCompetitionMemberSlice {
	if r == nil {
		return nil
	}
	return r.SeasonCompetitionMembers
}

func (r *seasonR) GetSeasonTeamPlayers() SeasonTeamPlayerSlice {
	if r == nil {
		return nil
	}
	return r.SeasonTeamPlayers
}

// seasonL is where Load methods for each relationship are stored.
type seasonL struct{}

var (
	seasonAllColumns            = []string{"id", "created_at", "updated_at", "import_id", "name", "end_at", "start_at"}
	seasonColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "name"}
	seasonColumnsWithDefault    = []string{"import_id", "end_at", "start_at"}
	seasonPrimaryKeyColumns     = []string{"id"}
	seasonGeneratedColumns      = []string{}
)

type (
	// SeasonSlice is an alias for a slice of pointers to Season.
	// This should almost always be used instead of []Season.
	SeasonSlice []*Season

	seasonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	seasonType                 = reflect.TypeOf(&Season{})
	seasonMapping              = queries.MakeStructMapping(seasonType)
	seasonPrimaryKeyMapping, _ = queries.BindMapping(seasonType, seasonMapping, seasonPrimaryKeyColumns)
	seasonInsertCacheMut       sync.RWMutex
	seasonInsertCache          = make(map[string]insertCache)
	seasonUpdateCacheMut       sync.RWMutex
	seasonUpdateCache          = make(map[string]updateCache)
	seasonUpsertCacheMut       sync.RWMutex
	seasonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single season record from the query.
func (q seasonQuery) One(exec boil.Executor) (*Season, error) {
	o := &Season{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for seasons")
	}

	return o, nil
}

// All returns all Season records from the query.
func (q seasonQuery) All(exec boil.Executor) (SeasonSlice, error) {
	var o []*Season

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to Season slice")
	}

	return o, nil
}

// Count returns the count of all Season records in the query.
func (q seasonQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count seasons rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q seasonQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if seasons exists")
	}

	return count > 0, nil
}

// Leaderboards retrieves all the leaderboard's Leaderboards with an executor.
func (o *Season) Leaderboards(mods ...qm.QueryMod) leaderboardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"leaderboards\".\"season_id\"=?", o.ID),
	)

	return Leaderboards(queryMods...)
}

// Matches retrieves all the match's Matches with an executor.
func (o *Season) Matches(mods ...qm.QueryMod) matchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"matches\".\"season_id\"=?", o.ID),
	)

	return Matches(queryMods...)
}

// SeasonCompetitionMembers retrieves all the season_competition_member's SeasonCompetitionMembers with an executor.
func (o *Season) SeasonCompetitionMembers(mods ...qm.QueryMod) seasonCompetitionMemberQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"season_competition_members\".\"season_id\"=?", o.ID),
	)

	return SeasonCompetitionMembers(queryMods...)
}

// SeasonTeamPlayers retrieves all the season_team_player's SeasonTeamPlayers with an executor.
func (o *Season) SeasonTeamPlayers(mods ...qm.QueryMod) seasonTeamPlayerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"season_team_players\".\"season_id\"=?", o.ID),
	)

	return SeasonTeamPlayers(queryMods...)
}

// LoadLeaderboards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (seasonL) LoadLeaderboards(e boil.Executor, singular bool, maybeSeason interface{}, mods queries.Applicator) error {
	var slice []*Season
	var object *Season

	if singular {
		var ok bool
		object, ok = maybeSeason.(*Season)
		if !ok {
			object = new(Season)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSeason)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSeason))
			}
		}
	} else {
		s, ok := maybeSeason.(*[]*Season)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSeason)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSeason))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &seasonR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seasonR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`leaderboards`),
		qm.WhereIn(`leaderboards.season_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load leaderboards")
	}

	var resultSlice []*Leaderboard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice leaderboards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on leaderboards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for leaderboards")
	}

	if singular {
		object.R.Leaderboards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &leaderboardR{}
			}
			foreign.R.Season = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SeasonID) {
				local.R.Leaderboards = append(local.R.Leaderboards, foreign)
				if foreign.R == nil {
					foreign.R = &leaderboardR{}
				}
				foreign.R.Season = local
				break
			}
		}
	}

	return nil
}

// LoadMatches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (seasonL) LoadMatches(e boil.Executor, singular bool, maybeSeason interface{}, mods queries.Applicator) error {
	var slice []*Season
	var object *Season

	if singular {
		var ok bool
		object, ok = maybeSeason.(*Season)
		if !ok {
			object = new(Season)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSeason)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSeason))
			}
		}
	} else {
		s, ok := maybeSeason.(*[]*Season)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSeason)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSeason))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &seasonR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seasonR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.season_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load matches")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice matches")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if singular {
		object.R.Matches = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchR{}
			}
			foreign.R.Season = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SeasonID {
				local.R.Matches = append(local.R.Matches, foreign)
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.Season = local
				break
			}
		}
	}

	return nil
}

// LoadSeasonCompetitionMembers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (seasonL) LoadSeasonCompetitionMembers(e boil.Executor, singular bool, maybeSeason interface{}, mods queries.Applicator) error {
	var slice []*Season
	var object *Season

	if singular {
		var ok bool
		object, ok = maybeSeason.(*Season)
		if !ok {
			object = new(Season)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSeason)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSeason))
			}
		}
	} else {
		s, ok := maybeSeason.(*[]*Season)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSeason)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSeason))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &seasonR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seasonR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`season_competition_members`),
		qm.WhereIn(`season_competition_members.season_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load season_competition_members")
	}

	var resultSlice []*SeasonCompetitionMember
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice season_competition_members")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on season_competition_members")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for season_competition_members")
	}

	if singular {
		object.R.SeasonCompetitionMembers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &seasonCompetitionMemberR{}
			}
			foreign.R.Season = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SeasonID {
				local.R.SeasonCompetitionMembers = append(local.R.SeasonCompetitionMembers, foreign)
				if foreign.R == nil {
					foreign.R = &seasonCompetitionMemberR{}
				}
				foreign.R.Season = local
				break
			}
		}
	}

	return nil
}

// LoadSeasonTeamPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (seasonL) LoadSeasonTeamPlayers(e boil.Executor, singular bool, maybeSeason interface{}, mods queries.Applicator) error {
	var slice []*Season
	var object *Season

	if singular {
		var ok bool
		object, ok = maybeSeason.(*Season)
		if !ok {
			object = new(Season)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSeason)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSeason))
			}
		}
	} else {
		s, ok := maybeSeason.(*[]*Season)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSeason)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSeason))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &seasonR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seasonR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`season_team_players`),
		qm.WhereIn(`season_team_players.season_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load season_team_players")
	}

	var resultSlice []*SeasonTeamPlayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice season_team_players")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on season_team_players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for season_team_players")
	}

	if singular {
		object.R.SeasonTeamPlayers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &seasonTeamPlayerR{}
			}
			foreign.R.Season = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SeasonID {
				local.R.SeasonTeamPlayers = append(local.R.SeasonTeamPlayers, foreign)
				if foreign.R == nil {
					foreign.R = &seasonTeamPlayerR{}
				}
				foreign.R.Season = local
				break
			}
		}
	}

	return nil
}

// AddLeaderboards adds the given related objects to the existing relationships
// of the season, optionally inserting them as new records.
// Appends related to o.R.Leaderboards.
// Sets related.R.Season appropriately.
func (o *Season) AddLeaderboards(exec boil.Executor, insert bool, related ...*Leaderboard) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SeasonID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"leaderboards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"season_id"}),
				strmangle.WhereClause("\"", "\"", 2, leaderboardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SeasonID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &seasonR{
			Leaderboards: related,
		}
	} else {
		o.R.Leaderboards = append(o.R.Leaderboards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &leaderboardR{
				Season: o,
			}
		} else {
			rel.R.Season = o
		}
	}
	return nil
}

// SetLeaderboards removes all previously related items of the
// season replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Season's Leaderboards accordingly.
// Replaces o.R.Leaderboards with related.
// Sets related.R.Season's Leaderboards accordingly.
func (o *Season) SetLeaderboards(exec boil.Executor, insert bool, related ...*Leaderboard) error {
	query := "update \"leaderboards\" set \"season_id\" = null where \"season_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Leaderboards {
			queries.SetScanner(&rel.SeasonID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Season = nil
		}
		o.R.Leaderboards = nil
	}

	return o.AddLeaderboards(exec, insert, related...)
}

// RemoveLeaderboards relationships from objects passed in.
// Removes related items from R.Leaderboards (uses pointer comparison, removal does not keep order)
// Sets related.R.Season.
func (o *Season) RemoveLeaderboards(exec boil.Executor, related ...*Leaderboard) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SeasonID, nil)
		if rel.R != nil {
			rel.R.Season = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("season_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Leaderboards {
			if rel != ri {
				continue
			}

			ln := len(o.R.Leaderboards)
			if ln > 1 && i < ln-1 {
				o.R.Leaderboards[i] = o.R.Leaderboards[ln-1]
			}
			o.R.Leaderboards = o.R.Leaderboards[:ln-1]
			break
		}
	}

	return nil
}

// AddMatches adds the given related objects to the existing relationships
// of the season, optionally inserting them as new records.
// Appends related to o.R.Matches.
// Sets related.R.Season appropriately.
func (o *Season) AddMatches(exec boil.Executor, insert bool, related ...*Match) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SeasonID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"matches\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"season_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SeasonID = o.ID
		}
	}

	if o.R == nil {
		o.R = &seasonR{
			Matches: related,
		}
	} else {
		o.R.Matches = append(o.R.Matches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchR{
				Season: o,
			}
		} else {
			rel.R.Season = o
		}
	}
	return nil
}

// AddSeasonCompetitionMembers adds the given related objects to the existing relationships
// of the season, optionally inserting them as new records.
// Appends related to o.R.SeasonCompetitionMembers.
// Sets related.R.Season appropriately.
func (o *Season) AddSeasonCompetitionMembers(exec boil.Executor, insert bool, related ...*SeasonCompetitionMember) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SeasonID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"season_competition_members\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"season_id"}),
				strmangle.WhereClause("\"", "\"", 2, seasonCompetitionMemberPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SeasonID = o.ID
		}
	}

	if o.R == nil {
		o.R = &seasonR{
			SeasonCompetitionMembers: related,
		}
	} else {
		o.R.SeasonCompetitionMembers = append(o.R.SeasonCompetitionMembers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &seasonCompetitionMemberR{
				Season: o,
			}
		} else {
			rel.R.Season = o
		}
	}
	return nil
}

// AddSeasonTeamPlayers adds the given related objects to the existing relationships
// of the season, optionally inserting them as new records.
// Appends related to o.R.SeasonTeamPlayers.
// Sets related.R.Season appropriately.
func (o *Season) AddSeasonTeamPlayers(exec boil.Executor, insert bool, related ...*SeasonTeamPlayer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SeasonID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"season_team_players\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"season_id"}),
				strmangle.WhereClause("\"", "\"", 2, seasonTeamPlayerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SeasonID = o.ID
		}
	}

	if o.R == nil {
		o.R = &seasonR{
			SeasonTeamPlayers: related,
		}
	} else {
		o.R.SeasonTeamPlayers = append(o.R.SeasonTeamPlayers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &seasonTeamPlayerR{
				Season: o,
			}
		} else {
			rel.R.Season = o
		}
	}
	return nil
}

// Seasons retrieves all the records using an executor.
func Seasons(mods ...qm.QueryMod) seasonQuery {
	mods = append(mods, qm.From("\"seasons\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"seasons\".*"})
	}

	return seasonQuery{q}
}

// FindSeason retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSeason(exec boil.Executor, iD string, selectCols ...string) (*Season, error) {
	seasonObj := &Season{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"seasons\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, seasonObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from seasons")
	}

	return seasonObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Season) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no seasons provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(seasonColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	seasonInsertCacheMut.RLock()
	cache, cached := seasonInsertCache[key]
	seasonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			seasonAllColumns,
			seasonColumnsWithDefault,
			seasonColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(seasonType, seasonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(seasonType, seasonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"seasons\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"seasons\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into seasons")
	}

	if !cached {
		seasonInsertCacheMut.Lock()
		seasonInsertCache[key] = cache
		seasonInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Season.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Season) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	seasonUpdateCacheMut.RLock()
	cache, cached := seasonUpdateCache[key]
	seasonUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			seasonAllColumns,
			seasonPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update seasons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"seasons\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, seasonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(seasonType, seasonMapping, append(wl, seasonPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update seasons row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for seasons")
	}

	if !cached {
		seasonUpdateCacheMut.Lock()
		seasonUpdateCache[key] = cache
		seasonUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q seasonQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for seasons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for seasons")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SeasonSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seasonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"seasons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, seasonPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in season slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all season")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Season) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no seasons provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(seasonColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	seasonUpsertCacheMut.RLock()
	cache, cached := seasonUpsertCache[key]
	seasonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			seasonAllColumns,
			seasonColumnsWithDefault,
			seasonColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			seasonAllColumns,
			seasonPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert seasons, could not build update column list")
		}

		ret := strmangle.SetComplement(seasonAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(seasonPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert seasons, could not build conflict column list")
			}

			conflict = make([]string, len(seasonPrimaryKeyColumns))
			copy(conflict, seasonPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"seasons\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(seasonType, seasonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(seasonType, seasonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert seasons")
	}

	if !cached {
		seasonUpsertCacheMut.Lock()
		seasonUpsertCache[key] = cache
		seasonUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Season record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Season) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no Season provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), seasonPrimaryKeyMapping)
	sql := "DELETE FROM \"seasons\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from seasons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for seasons")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q seasonQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no seasonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from seasons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for seasons")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SeasonSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seasonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"seasons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, seasonPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from season slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for seasons")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Season) Reload(exec boil.Executor) error {
	ret, err := FindSeason(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SeasonSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SeasonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seasonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"seasons\".* FROM \"seasons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, seasonPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in SeasonSlice")
	}

	*o = slice

	return nil
}

// SeasonExists checks if the Season row exists.
func SeasonExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"seasons\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if seasons exists")
	}

	return exists, nil
}

// Exists checks if the Season row exists.
func (o *Season) Exists(exec boil.Executor) (bool, error) {
	return SeasonExists(exec, o.ID)
}
