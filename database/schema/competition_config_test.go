// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCompetitionConfigs(t *testing.T) {
	t.Parallel()

	query := CompetitionConfigs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCompetitionConfigsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionConfig{}
	if err = randomize.Struct(seed, o, competitionConfigDBTypes, true, competitionConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CompetitionConfigs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompetitionConfigsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionConfig{}
	if err = randomize.Struct(seed, o, competitionConfigDBTypes, true, competitionConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CompetitionConfigs().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CompetitionConfigs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompetitionConfigsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionConfig{}
	if err = randomize.Struct(seed, o, competitionConfigDBTypes, true, competitionConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompetitionConfigSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CompetitionConfigs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompetitionConfigsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionConfig{}
	if err = randomize.Struct(seed, o, competitionConfigDBTypes, true, competitionConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CompetitionConfigExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CompetitionConfig exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CompetitionConfigExists to return true, but got false.")
	}
}

func testCompetitionConfigsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionConfig{}
	if err = randomize.Struct(seed, o, competitionConfigDBTypes, true, competitionConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	competitionConfigFound, err := FindCompetitionConfig(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if competitionConfigFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCompetitionConfigsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionConfig{}
	if err = randomize.Struct(seed, o, competitionConfigDBTypes, true, competitionConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CompetitionConfigs().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testCompetitionConfigsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionConfig{}
	if err = randomize.Struct(seed, o, competitionConfigDBTypes, true, competitionConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CompetitionConfigs().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCompetitionConfigsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	competitionConfigOne := &CompetitionConfig{}
	competitionConfigTwo := &CompetitionConfig{}
	if err = randomize.Struct(seed, competitionConfigOne, competitionConfigDBTypes, false, competitionConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}
	if err = randomize.Struct(seed, competitionConfigTwo, competitionConfigDBTypes, false, competitionConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = competitionConfigOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = competitionConfigTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CompetitionConfigs().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCompetitionConfigsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	competitionConfigOne := &CompetitionConfig{}
	competitionConfigTwo := &CompetitionConfig{}
	if err = randomize.Struct(seed, competitionConfigOne, competitionConfigDBTypes, false, competitionConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}
	if err = randomize.Struct(seed, competitionConfigTwo, competitionConfigDBTypes, false, competitionConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = competitionConfigOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = competitionConfigTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompetitionConfigs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testCompetitionConfigsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionConfig{}
	if err = randomize.Struct(seed, o, competitionConfigDBTypes, true, competitionConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompetitionConfigs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompetitionConfigsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionConfig{}
	if err = randomize.Struct(seed, o, competitionConfigDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(competitionConfigColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CompetitionConfigs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompetitionConfigToManyConfigCompetitions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a CompetitionConfig
	var b, c Competition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, competitionConfigDBTypes, true, competitionConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, competitionDBTypes, false, competitionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, competitionDBTypes, false, competitionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ConfigID, a.ID)
	queries.Assign(&c.ConfigID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ConfigCompetitions().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ConfigID, b.ConfigID) {
			bFound = true
		}
		if queries.Equal(v.ConfigID, c.ConfigID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CompetitionConfigSlice{&a}
	if err = a.L.LoadConfigCompetitions(tx, false, (*[]*CompetitionConfig)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ConfigCompetitions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ConfigCompetitions = nil
	if err = a.L.LoadConfigCompetitions(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ConfigCompetitions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCompetitionConfigToManyAddOpConfigCompetitions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a CompetitionConfig
	var b, c, d, e Competition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, competitionConfigDBTypes, false, strmangle.SetComplement(competitionConfigPrimaryKeyColumns, competitionConfigColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Competition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, competitionDBTypes, false, strmangle.SetComplement(competitionPrimaryKeyColumns, competitionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Competition{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddConfigCompetitions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ConfigID) {
			t.Error("foreign key was wrong value", a.ID, first.ConfigID)
		}
		if !queries.Equal(a.ID, second.ConfigID) {
			t.Error("foreign key was wrong value", a.ID, second.ConfigID)
		}

		if first.R.Config != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Config != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ConfigCompetitions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ConfigCompetitions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ConfigCompetitions().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCompetitionConfigToManySetOpConfigCompetitions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a CompetitionConfig
	var b, c, d, e Competition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, competitionConfigDBTypes, false, strmangle.SetComplement(competitionConfigPrimaryKeyColumns, competitionConfigColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Competition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, competitionDBTypes, false, strmangle.SetComplement(competitionPrimaryKeyColumns, competitionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetConfigCompetitions(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ConfigCompetitions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetConfigCompetitions(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ConfigCompetitions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ConfigID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ConfigID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ConfigID) {
		t.Error("foreign key was wrong value", a.ID, d.ConfigID)
	}
	if !queries.Equal(a.ID, e.ConfigID) {
		t.Error("foreign key was wrong value", a.ID, e.ConfigID)
	}

	if b.R.Config != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Config != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Config != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Config != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ConfigCompetitions[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ConfigCompetitions[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCompetitionConfigToManyRemoveOpConfigCompetitions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a CompetitionConfig
	var b, c, d, e Competition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, competitionConfigDBTypes, false, strmangle.SetComplement(competitionConfigPrimaryKeyColumns, competitionConfigColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Competition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, competitionDBTypes, false, strmangle.SetComplement(competitionPrimaryKeyColumns, competitionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddConfigCompetitions(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ConfigCompetitions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveConfigCompetitions(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ConfigCompetitions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ConfigID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ConfigID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Config != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Config != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Config != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Config != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ConfigCompetitions) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ConfigCompetitions[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ConfigCompetitions[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCompetitionConfigToOneCompetitionUsingRelatedCompetition(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local CompetitionConfig
	var foreign Competition

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, competitionConfigDBTypes, true, competitionConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, competitionDBTypes, false, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.RelatedCompetitionID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.RelatedCompetition().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CompetitionConfigSlice{&local}
	if err = local.L.LoadRelatedCompetition(tx, false, (*[]*CompetitionConfig)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RelatedCompetition == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RelatedCompetition = nil
	if err = local.L.LoadRelatedCompetition(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RelatedCompetition == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testCompetitionConfigToOneSportUsingSport(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local CompetitionConfig
	var foreign Sport

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, competitionConfigDBTypes, true, competitionConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, sportDBTypes, false, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SportID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Sport().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CompetitionConfigSlice{&local}
	if err = local.L.LoadSport(tx, false, (*[]*CompetitionConfig)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sport == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Sport = nil
	if err = local.L.LoadSport(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sport == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testCompetitionConfigToOneSetOpCompetitionUsingRelatedCompetition(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a CompetitionConfig
	var b, c Competition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, competitionConfigDBTypes, false, strmangle.SetComplement(competitionConfigPrimaryKeyColumns, competitionConfigColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, competitionDBTypes, false, strmangle.SetComplement(competitionPrimaryKeyColumns, competitionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, competitionDBTypes, false, strmangle.SetComplement(competitionPrimaryKeyColumns, competitionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Competition{&b, &c} {
		err = a.SetRelatedCompetition(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RelatedCompetition != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RelatedCompetitionCompetitionConfigs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.RelatedCompetitionID, x.ID) {
			t.Error("foreign key was wrong value", a.RelatedCompetitionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RelatedCompetitionID))
		reflect.Indirect(reflect.ValueOf(&a.RelatedCompetitionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.RelatedCompetitionID, x.ID) {
			t.Error("foreign key was wrong value", a.RelatedCompetitionID, x.ID)
		}
	}
}

func testCompetitionConfigToOneRemoveOpCompetitionUsingRelatedCompetition(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a CompetitionConfig
	var b Competition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, competitionConfigDBTypes, false, strmangle.SetComplement(competitionConfigPrimaryKeyColumns, competitionConfigColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, competitionDBTypes, false, strmangle.SetComplement(competitionPrimaryKeyColumns, competitionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRelatedCompetition(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRelatedCompetition(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.RelatedCompetition().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.RelatedCompetition != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.RelatedCompetitionID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.RelatedCompetitionCompetitionConfigs) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCompetitionConfigToOneSetOpSportUsingSport(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a CompetitionConfig
	var b, c Sport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, competitionConfigDBTypes, false, strmangle.SetComplement(competitionConfigPrimaryKeyColumns, competitionConfigColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Sport{&b, &c} {
		err = a.SetSport(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Sport != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CompetitionConfigs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SportID, x.ID) {
			t.Error("foreign key was wrong value", a.SportID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SportID))
		reflect.Indirect(reflect.ValueOf(&a.SportID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SportID, x.ID) {
			t.Error("foreign key was wrong value", a.SportID, x.ID)
		}
	}
}

func testCompetitionConfigToOneRemoveOpSportUsingSport(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a CompetitionConfig
	var b Sport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, competitionConfigDBTypes, false, strmangle.SetComplement(competitionConfigPrimaryKeyColumns, competitionConfigColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSport(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSport(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Sport().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Sport != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SportID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CompetitionConfigs) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCompetitionConfigsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionConfig{}
	if err = randomize.Struct(seed, o, competitionConfigDBTypes, true, competitionConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testCompetitionConfigsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionConfig{}
	if err = randomize.Struct(seed, o, competitionConfigDBTypes, true, competitionConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompetitionConfigSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testCompetitionConfigsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionConfig{}
	if err = randomize.Struct(seed, o, competitionConfigDBTypes, true, competitionConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CompetitionConfigs().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	competitionConfigDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `ImportID`: `character varying`, `Name`: `text`, `Filter`: `text`, `Enabled`: `boolean`, `RelatedCompetitionID`: `uuid`, `SportID`: `uuid`}
	_                        = bytes.MinRead
)

func testCompetitionConfigsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(competitionConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(competitionConfigAllColumns) == len(competitionConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionConfig{}
	if err = randomize.Struct(seed, o, competitionConfigDBTypes, true, competitionConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompetitionConfigs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, competitionConfigDBTypes, true, competitionConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCompetitionConfigsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(competitionConfigAllColumns) == len(competitionConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CompetitionConfig{}
	if err = randomize.Struct(seed, o, competitionConfigDBTypes, true, competitionConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompetitionConfigs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, competitionConfigDBTypes, true, competitionConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(competitionConfigAllColumns, competitionConfigPrimaryKeyColumns) {
		fields = competitionConfigAllColumns
	} else {
		fields = strmangle.SetComplement(
			competitionConfigAllColumns,
			competitionConfigPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CompetitionConfigSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCompetitionConfigsUpsert(t *testing.T) {
	t.Parallel()

	if len(competitionConfigAllColumns) == len(competitionConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CompetitionConfig{}
	if err = randomize.Struct(seed, &o, competitionConfigDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CompetitionConfig: %s", err)
	}

	count, err := CompetitionConfigs().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, competitionConfigDBTypes, false, competitionConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CompetitionConfig struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CompetitionConfig: %s", err)
	}

	count, err = CompetitionConfigs().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
