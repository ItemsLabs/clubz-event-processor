// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AuthUserUserPermission is an object representing the database table.
type AuthUserUserPermission struct {
	ID           int `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID       int `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	PermissionID int `boil:"permission_id" json:"permission_id" toml:"permission_id" yaml:"permission_id"`

	R *authUserUserPermissionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authUserUserPermissionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthUserUserPermissionColumns = struct {
	ID           string
	UserID       string
	PermissionID string
}{
	ID:           "id",
	UserID:       "user_id",
	PermissionID: "permission_id",
}

var AuthUserUserPermissionTableColumns = struct {
	ID           string
	UserID       string
	PermissionID string
}{
	ID:           "auth_user_user_permissions.id",
	UserID:       "auth_user_user_permissions.user_id",
	PermissionID: "auth_user_user_permissions.permission_id",
}

// Generated where

var AuthUserUserPermissionWhere = struct {
	ID           whereHelperint
	UserID       whereHelperint
	PermissionID whereHelperint
}{
	ID:           whereHelperint{field: "\"auth_user_user_permissions\".\"id\""},
	UserID:       whereHelperint{field: "\"auth_user_user_permissions\".\"user_id\""},
	PermissionID: whereHelperint{field: "\"auth_user_user_permissions\".\"permission_id\""},
}

// AuthUserUserPermissionRels is where relationship names are stored.
var AuthUserUserPermissionRels = struct {
	Permission string
	User       string
}{
	Permission: "Permission",
	User:       "User",
}

// authUserUserPermissionR is where relationships are stored.
type authUserUserPermissionR struct {
	Permission *AuthPermission `boil:"Permission" json:"Permission" toml:"Permission" yaml:"Permission"`
	User       *AuthUser       `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*authUserUserPermissionR) NewStruct() *authUserUserPermissionR {
	return &authUserUserPermissionR{}
}

func (r *authUserUserPermissionR) GetPermission() *AuthPermission {
	if r == nil {
		return nil
	}
	return r.Permission
}

func (r *authUserUserPermissionR) GetUser() *AuthUser {
	if r == nil {
		return nil
	}
	return r.User
}

// authUserUserPermissionL is where Load methods for each relationship are stored.
type authUserUserPermissionL struct{}

var (
	authUserUserPermissionAllColumns            = []string{"id", "user_id", "permission_id"}
	authUserUserPermissionColumnsWithoutDefault = []string{"user_id", "permission_id"}
	authUserUserPermissionColumnsWithDefault    = []string{"id"}
	authUserUserPermissionPrimaryKeyColumns     = []string{"id"}
	authUserUserPermissionGeneratedColumns      = []string{}
)

type (
	// AuthUserUserPermissionSlice is an alias for a slice of pointers to AuthUserUserPermission.
	// This should almost always be used instead of []AuthUserUserPermission.
	AuthUserUserPermissionSlice []*AuthUserUserPermission

	authUserUserPermissionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authUserUserPermissionType                 = reflect.TypeOf(&AuthUserUserPermission{})
	authUserUserPermissionMapping              = queries.MakeStructMapping(authUserUserPermissionType)
	authUserUserPermissionPrimaryKeyMapping, _ = queries.BindMapping(authUserUserPermissionType, authUserUserPermissionMapping, authUserUserPermissionPrimaryKeyColumns)
	authUserUserPermissionInsertCacheMut       sync.RWMutex
	authUserUserPermissionInsertCache          = make(map[string]insertCache)
	authUserUserPermissionUpdateCacheMut       sync.RWMutex
	authUserUserPermissionUpdateCache          = make(map[string]updateCache)
	authUserUserPermissionUpsertCacheMut       sync.RWMutex
	authUserUserPermissionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single authUserUserPermission record from the query.
func (q authUserUserPermissionQuery) One(exec boil.Executor) (*AuthUserUserPermission, error) {
	o := &AuthUserUserPermission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for auth_user_user_permissions")
	}

	return o, nil
}

// All returns all AuthUserUserPermission records from the query.
func (q authUserUserPermissionQuery) All(exec boil.Executor) (AuthUserUserPermissionSlice, error) {
	var o []*AuthUserUserPermission

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to AuthUserUserPermission slice")
	}

	return o, nil
}

// Count returns the count of all AuthUserUserPermission records in the query.
func (q authUserUserPermissionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count auth_user_user_permissions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q authUserUserPermissionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if auth_user_user_permissions exists")
	}

	return count > 0, nil
}

// Permission pointed to by the foreign key.
func (o *AuthUserUserPermission) Permission(mods ...qm.QueryMod) authPermissionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PermissionID),
	}

	queryMods = append(queryMods, mods...)

	return AuthPermissions(queryMods...)
}

// User pointed to by the foreign key.
func (o *AuthUserUserPermission) User(mods ...qm.QueryMod) authUserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return AuthUsers(queryMods...)
}

// LoadPermission allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (authUserUserPermissionL) LoadPermission(e boil.Executor, singular bool, maybeAuthUserUserPermission interface{}, mods queries.Applicator) error {
	var slice []*AuthUserUserPermission
	var object *AuthUserUserPermission

	if singular {
		var ok bool
		object, ok = maybeAuthUserUserPermission.(*AuthUserUserPermission)
		if !ok {
			object = new(AuthUserUserPermission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuthUserUserPermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuthUserUserPermission))
			}
		}
	} else {
		s, ok := maybeAuthUserUserPermission.(*[]*AuthUserUserPermission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuthUserUserPermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuthUserUserPermission))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &authUserUserPermissionR{}
		}
		args[object.PermissionID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authUserUserPermissionR{}
			}

			args[obj.PermissionID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`auth_permission`),
		qm.WhereIn(`auth_permission.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AuthPermission")
	}

	var resultSlice []*AuthPermission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AuthPermission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for auth_permission")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auth_permission")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Permission = foreign
		if foreign.R == nil {
			foreign.R = &authPermissionR{}
		}
		foreign.R.PermissionAuthUserUserPermissions = append(foreign.R.PermissionAuthUserUserPermissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PermissionID == foreign.ID {
				local.R.Permission = foreign
				if foreign.R == nil {
					foreign.R = &authPermissionR{}
				}
				foreign.R.PermissionAuthUserUserPermissions = append(foreign.R.PermissionAuthUserUserPermissions, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (authUserUserPermissionL) LoadUser(e boil.Executor, singular bool, maybeAuthUserUserPermission interface{}, mods queries.Applicator) error {
	var slice []*AuthUserUserPermission
	var object *AuthUserUserPermission

	if singular {
		var ok bool
		object, ok = maybeAuthUserUserPermission.(*AuthUserUserPermission)
		if !ok {
			object = new(AuthUserUserPermission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuthUserUserPermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuthUserUserPermission))
			}
		}
	} else {
		s, ok := maybeAuthUserUserPermission.(*[]*AuthUserUserPermission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuthUserUserPermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuthUserUserPermission))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &authUserUserPermissionR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authUserUserPermissionR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`auth_user`),
		qm.WhereIn(`auth_user.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AuthUser")
	}

	var resultSlice []*AuthUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AuthUser")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for auth_user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auth_user")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &authUserR{}
		}
		foreign.R.UserAuthUserUserPermissions = append(foreign.R.UserAuthUserUserPermissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &authUserR{}
				}
				foreign.R.UserAuthUserUserPermissions = append(foreign.R.UserAuthUserUserPermissions, local)
				break
			}
		}
	}

	return nil
}

// SetPermission of the authUserUserPermission to the related item.
// Sets o.R.Permission to related.
// Adds o to related.R.PermissionAuthUserUserPermissions.
func (o *AuthUserUserPermission) SetPermission(exec boil.Executor, insert bool, related *AuthPermission) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"auth_user_user_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"permission_id"}),
		strmangle.WhereClause("\"", "\"", 2, authUserUserPermissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PermissionID = related.ID
	if o.R == nil {
		o.R = &authUserUserPermissionR{
			Permission: related,
		}
	} else {
		o.R.Permission = related
	}

	if related.R == nil {
		related.R = &authPermissionR{
			PermissionAuthUserUserPermissions: AuthUserUserPermissionSlice{o},
		}
	} else {
		related.R.PermissionAuthUserUserPermissions = append(related.R.PermissionAuthUserUserPermissions, o)
	}

	return nil
}

// SetUser of the authUserUserPermission to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserAuthUserUserPermissions.
func (o *AuthUserUserPermission) SetUser(exec boil.Executor, insert bool, related *AuthUser) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"auth_user_user_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, authUserUserPermissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &authUserUserPermissionR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &authUserR{
			UserAuthUserUserPermissions: AuthUserUserPermissionSlice{o},
		}
	} else {
		related.R.UserAuthUserUserPermissions = append(related.R.UserAuthUserUserPermissions, o)
	}

	return nil
}

// AuthUserUserPermissions retrieves all the records using an executor.
func AuthUserUserPermissions(mods ...qm.QueryMod) authUserUserPermissionQuery {
	mods = append(mods, qm.From("\"auth_user_user_permissions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"auth_user_user_permissions\".*"})
	}

	return authUserUserPermissionQuery{q}
}

// FindAuthUserUserPermission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthUserUserPermission(exec boil.Executor, iD int, selectCols ...string) (*AuthUserUserPermission, error) {
	authUserUserPermissionObj := &AuthUserUserPermission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"auth_user_user_permissions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, authUserUserPermissionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from auth_user_user_permissions")
	}

	return authUserUserPermissionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuthUserUserPermission) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no auth_user_user_permissions provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(authUserUserPermissionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authUserUserPermissionInsertCacheMut.RLock()
	cache, cached := authUserUserPermissionInsertCache[key]
	authUserUserPermissionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authUserUserPermissionAllColumns,
			authUserUserPermissionColumnsWithDefault,
			authUserUserPermissionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authUserUserPermissionType, authUserUserPermissionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authUserUserPermissionType, authUserUserPermissionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"auth_user_user_permissions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"auth_user_user_permissions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into auth_user_user_permissions")
	}

	if !cached {
		authUserUserPermissionInsertCacheMut.Lock()
		authUserUserPermissionInsertCache[key] = cache
		authUserUserPermissionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the AuthUserUserPermission.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuthUserUserPermission) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	authUserUserPermissionUpdateCacheMut.RLock()
	cache, cached := authUserUserPermissionUpdateCache[key]
	authUserUserPermissionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authUserUserPermissionAllColumns,
			authUserUserPermissionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update auth_user_user_permissions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"auth_user_user_permissions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, authUserUserPermissionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authUserUserPermissionType, authUserUserPermissionMapping, append(wl, authUserUserPermissionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update auth_user_user_permissions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for auth_user_user_permissions")
	}

	if !cached {
		authUserUserPermissionUpdateCacheMut.Lock()
		authUserUserPermissionUpdateCache[key] = cache
		authUserUserPermissionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q authUserUserPermissionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for auth_user_user_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for auth_user_user_permissions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthUserUserPermissionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authUserUserPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"auth_user_user_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, authUserUserPermissionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in authUserUserPermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all authUserUserPermission")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuthUserUserPermission) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no auth_user_user_permissions provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(authUserUserPermissionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authUserUserPermissionUpsertCacheMut.RLock()
	cache, cached := authUserUserPermissionUpsertCache[key]
	authUserUserPermissionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			authUserUserPermissionAllColumns,
			authUserUserPermissionColumnsWithDefault,
			authUserUserPermissionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			authUserUserPermissionAllColumns,
			authUserUserPermissionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert auth_user_user_permissions, could not build update column list")
		}

		ret := strmangle.SetComplement(authUserUserPermissionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(authUserUserPermissionPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert auth_user_user_permissions, could not build conflict column list")
			}

			conflict = make([]string, len(authUserUserPermissionPrimaryKeyColumns))
			copy(conflict, authUserUserPermissionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"auth_user_user_permissions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(authUserUserPermissionType, authUserUserPermissionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authUserUserPermissionType, authUserUserPermissionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert auth_user_user_permissions")
	}

	if !cached {
		authUserUserPermissionUpsertCacheMut.Lock()
		authUserUserPermissionUpsertCache[key] = cache
		authUserUserPermissionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single AuthUserUserPermission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthUserUserPermission) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no AuthUserUserPermission provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authUserUserPermissionPrimaryKeyMapping)
	sql := "DELETE FROM \"auth_user_user_permissions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from auth_user_user_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for auth_user_user_permissions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q authUserUserPermissionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no authUserUserPermissionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from auth_user_user_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for auth_user_user_permissions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthUserUserPermissionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authUserUserPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"auth_user_user_permissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authUserUserPermissionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from authUserUserPermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for auth_user_user_permissions")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthUserUserPermission) Reload(exec boil.Executor) error {
	ret, err := FindAuthUserUserPermission(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthUserUserPermissionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthUserUserPermissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authUserUserPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"auth_user_user_permissions\".* FROM \"auth_user_user_permissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authUserUserPermissionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in AuthUserUserPermissionSlice")
	}

	*o = slice

	return nil
}

// AuthUserUserPermissionExists checks if the AuthUserUserPermission row exists.
func AuthUserUserPermissionExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"auth_user_user_permissions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if auth_user_user_permissions exists")
	}

	return exists, nil
}

// Exists checks if the AuthUserUserPermission row exists.
func (o *AuthUserUserPermission) Exists(exec boil.Executor) (bool, error) {
	return AuthUserUserPermissionExists(exec, o.ID)
}
