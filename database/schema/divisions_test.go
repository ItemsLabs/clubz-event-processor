// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDivisions(t *testing.T) {
	t.Parallel()

	query := Divisions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDivisionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Division{}
	if err = randomize.Struct(seed, o, divisionDBTypes, true, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Divisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDivisionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Division{}
	if err = randomize.Struct(seed, o, divisionDBTypes, true, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Divisions().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Divisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDivisionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Division{}
	if err = randomize.Struct(seed, o, divisionDBTypes, true, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DivisionSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Divisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDivisionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Division{}
	if err = randomize.Struct(seed, o, divisionDBTypes, true, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DivisionExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Division exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DivisionExists to return true, but got false.")
	}
}

func testDivisionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Division{}
	if err = randomize.Struct(seed, o, divisionDBTypes, true, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	divisionFound, err := FindDivision(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if divisionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDivisionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Division{}
	if err = randomize.Struct(seed, o, divisionDBTypes, true, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Divisions().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testDivisionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Division{}
	if err = randomize.Struct(seed, o, divisionDBTypes, true, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Divisions().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDivisionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	divisionOne := &Division{}
	divisionTwo := &Division{}
	if err = randomize.Struct(seed, divisionOne, divisionDBTypes, false, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}
	if err = randomize.Struct(seed, divisionTwo, divisionDBTypes, false, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = divisionOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = divisionTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Divisions().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDivisionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	divisionOne := &Division{}
	divisionTwo := &Division{}
	if err = randomize.Struct(seed, divisionOne, divisionDBTypes, false, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}
	if err = randomize.Struct(seed, divisionTwo, divisionDBTypes, false, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = divisionOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = divisionTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Divisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testDivisionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Division{}
	if err = randomize.Struct(seed, o, divisionDBTypes, true, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Divisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDivisionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Division{}
	if err = randomize.Struct(seed, o, divisionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(divisionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Divisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDivisionToManyDivisionRewards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Division
	var b, c DivisionReward

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionDBTypes, true, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, divisionRewardDBTypes, false, divisionRewardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, divisionRewardDBTypes, false, divisionRewardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.DivisionID, a.ID)
	queries.Assign(&c.DivisionID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DivisionRewards().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.DivisionID, b.DivisionID) {
			bFound = true
		}
		if queries.Equal(v.DivisionID, c.DivisionID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DivisionSlice{&a}
	if err = a.L.LoadDivisionRewards(tx, false, (*[]*Division)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DivisionRewards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DivisionRewards = nil
	if err = a.L.LoadDivisionRewards(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DivisionRewards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDivisionToManyGameWeekDivisions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Division
	var b, c GameWeekDivision

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionDBTypes, true, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, gameWeekDivisionDBTypes, false, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameWeekDivisionDBTypes, false, gameWeekDivisionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DivisionID = a.ID
	c.DivisionID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GameWeekDivisions().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DivisionID == b.DivisionID {
			bFound = true
		}
		if v.DivisionID == c.DivisionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DivisionSlice{&a}
	if err = a.L.LoadGameWeekDivisions(tx, false, (*[]*Division)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GameWeekDivisions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GameWeekDivisions = nil
	if err = a.L.LoadGameWeekDivisions(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GameWeekDivisions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDivisionToManyMatchLeaderboards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Division
	var b, c MatchLeaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionDBTypes, true, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchLeaderboardDBTypes, false, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchLeaderboardDBTypes, false, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.DivisionID, a.ID)
	queries.Assign(&c.DivisionID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MatchLeaderboards().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.DivisionID, b.DivisionID) {
			bFound = true
		}
		if queries.Equal(v.DivisionID, c.DivisionID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DivisionSlice{&a}
	if err = a.L.LoadMatchLeaderboards(tx, false, (*[]*Division)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchLeaderboards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MatchLeaderboards = nil
	if err = a.L.LoadMatchLeaderboards(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchLeaderboards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDivisionToManyUserDivisions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Division
	var b, c UserDivision

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionDBTypes, true, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userDivisionDBTypes, false, userDivisionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDivisionDBTypes, false, userDivisionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DivisionID = a.ID
	c.DivisionID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserDivisions().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DivisionID == b.DivisionID {
			bFound = true
		}
		if v.DivisionID == c.DivisionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DivisionSlice{&a}
	if err = a.L.LoadUserDivisions(tx, false, (*[]*Division)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserDivisions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserDivisions = nil
	if err = a.L.LoadUserDivisions(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserDivisions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDivisionToManyNewDivisionUserGameWeekHistories(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Division
	var b, c UserGameWeekHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionDBTypes, true, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userGameWeekHistoryDBTypes, false, userGameWeekHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userGameWeekHistoryDBTypes, false, userGameWeekHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.NewDivisionID, a.ID)
	queries.Assign(&c.NewDivisionID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.NewDivisionUserGameWeekHistories().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.NewDivisionID, b.NewDivisionID) {
			bFound = true
		}
		if queries.Equal(v.NewDivisionID, c.NewDivisionID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DivisionSlice{&a}
	if err = a.L.LoadNewDivisionUserGameWeekHistories(tx, false, (*[]*Division)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.NewDivisionUserGameWeekHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.NewDivisionUserGameWeekHistories = nil
	if err = a.L.LoadNewDivisionUserGameWeekHistories(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.NewDivisionUserGameWeekHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDivisionToManyWeekDivisionUserGameWeekHistories(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Division
	var b, c UserGameWeekHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionDBTypes, true, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userGameWeekHistoryDBTypes, false, userGameWeekHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userGameWeekHistoryDBTypes, false, userGameWeekHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.WeekDivisionID, a.ID)
	queries.Assign(&c.WeekDivisionID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.WeekDivisionUserGameWeekHistories().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.WeekDivisionID, b.WeekDivisionID) {
			bFound = true
		}
		if queries.Equal(v.WeekDivisionID, c.WeekDivisionID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DivisionSlice{&a}
	if err = a.L.LoadWeekDivisionUserGameWeekHistories(tx, false, (*[]*Division)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WeekDivisionUserGameWeekHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.WeekDivisionUserGameWeekHistories = nil
	if err = a.L.LoadWeekDivisionUserGameWeekHistories(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WeekDivisionUserGameWeekHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDivisionToManyAddOpDivisionRewards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Division
	var b, c, d, e DivisionReward

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DivisionReward{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, divisionRewardDBTypes, false, strmangle.SetComplement(divisionRewardPrimaryKeyColumns, divisionRewardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DivisionReward{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDivisionRewards(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.DivisionID) {
			t.Error("foreign key was wrong value", a.ID, first.DivisionID)
		}
		if !queries.Equal(a.ID, second.DivisionID) {
			t.Error("foreign key was wrong value", a.ID, second.DivisionID)
		}

		if first.R.Division != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Division != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DivisionRewards[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DivisionRewards[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DivisionRewards().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDivisionToManySetOpDivisionRewards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Division
	var b, c, d, e DivisionReward

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DivisionReward{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, divisionRewardDBTypes, false, strmangle.SetComplement(divisionRewardPrimaryKeyColumns, divisionRewardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDivisionRewards(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DivisionRewards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDivisionRewards(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DivisionRewards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DivisionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DivisionID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.DivisionID) {
		t.Error("foreign key was wrong value", a.ID, d.DivisionID)
	}
	if !queries.Equal(a.ID, e.DivisionID) {
		t.Error("foreign key was wrong value", a.ID, e.DivisionID)
	}

	if b.R.Division != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Division != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Division != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Division != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.DivisionRewards[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.DivisionRewards[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDivisionToManyRemoveOpDivisionRewards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Division
	var b, c, d, e DivisionReward

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DivisionReward{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, divisionRewardDBTypes, false, strmangle.SetComplement(divisionRewardPrimaryKeyColumns, divisionRewardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDivisionRewards(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DivisionRewards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDivisionRewards(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DivisionRewards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DivisionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DivisionID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Division != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Division != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Division != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Division != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.DivisionRewards) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.DivisionRewards[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.DivisionRewards[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDivisionToManyAddOpGameWeekDivisions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Division
	var b, c, d, e GameWeekDivision

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GameWeekDivision{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gameWeekDivisionDBTypes, false, strmangle.SetComplement(gameWeekDivisionPrimaryKeyColumns, gameWeekDivisionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GameWeekDivision{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGameWeekDivisions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DivisionID {
			t.Error("foreign key was wrong value", a.ID, first.DivisionID)
		}
		if a.ID != second.DivisionID {
			t.Error("foreign key was wrong value", a.ID, second.DivisionID)
		}

		if first.R.Division != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Division != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GameWeekDivisions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GameWeekDivisions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GameWeekDivisions().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDivisionToManyAddOpMatchLeaderboards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Division
	var b, c, d, e MatchLeaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchLeaderboard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MatchLeaderboard{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMatchLeaderboards(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.DivisionID) {
			t.Error("foreign key was wrong value", a.ID, first.DivisionID)
		}
		if !queries.Equal(a.ID, second.DivisionID) {
			t.Error("foreign key was wrong value", a.ID, second.DivisionID)
		}

		if first.R.Division != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Division != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MatchLeaderboards[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MatchLeaderboards[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MatchLeaderboards().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDivisionToManySetOpMatchLeaderboards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Division
	var b, c, d, e MatchLeaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchLeaderboard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMatchLeaderboards(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MatchLeaderboards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMatchLeaderboards(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MatchLeaderboards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DivisionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DivisionID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.DivisionID) {
		t.Error("foreign key was wrong value", a.ID, d.DivisionID)
	}
	if !queries.Equal(a.ID, e.DivisionID) {
		t.Error("foreign key was wrong value", a.ID, e.DivisionID)
	}

	if b.R.Division != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Division != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Division != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Division != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.MatchLeaderboards[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.MatchLeaderboards[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDivisionToManyRemoveOpMatchLeaderboards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Division
	var b, c, d, e MatchLeaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchLeaderboard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMatchLeaderboards(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MatchLeaderboards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMatchLeaderboards(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MatchLeaderboards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DivisionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DivisionID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Division != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Division != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Division != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Division != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.MatchLeaderboards) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.MatchLeaderboards[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.MatchLeaderboards[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDivisionToManyAddOpUserDivisions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Division
	var b, c, d, e UserDivision

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserDivision{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDivisionDBTypes, false, strmangle.SetComplement(userDivisionPrimaryKeyColumns, userDivisionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserDivision{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserDivisions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DivisionID {
			t.Error("foreign key was wrong value", a.ID, first.DivisionID)
		}
		if a.ID != second.DivisionID {
			t.Error("foreign key was wrong value", a.ID, second.DivisionID)
		}

		if first.R.Division != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Division != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserDivisions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserDivisions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserDivisions().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDivisionToManyAddOpNewDivisionUserGameWeekHistories(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Division
	var b, c, d, e UserGameWeekHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserGameWeekHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userGameWeekHistoryDBTypes, false, strmangle.SetComplement(userGameWeekHistoryPrimaryKeyColumns, userGameWeekHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserGameWeekHistory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddNewDivisionUserGameWeekHistories(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.NewDivisionID) {
			t.Error("foreign key was wrong value", a.ID, first.NewDivisionID)
		}
		if !queries.Equal(a.ID, second.NewDivisionID) {
			t.Error("foreign key was wrong value", a.ID, second.NewDivisionID)
		}

		if first.R.NewDivision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.NewDivision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.NewDivisionUserGameWeekHistories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.NewDivisionUserGameWeekHistories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.NewDivisionUserGameWeekHistories().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDivisionToManySetOpNewDivisionUserGameWeekHistories(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Division
	var b, c, d, e UserGameWeekHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserGameWeekHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userGameWeekHistoryDBTypes, false, strmangle.SetComplement(userGameWeekHistoryPrimaryKeyColumns, userGameWeekHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetNewDivisionUserGameWeekHistories(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.NewDivisionUserGameWeekHistories().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetNewDivisionUserGameWeekHistories(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.NewDivisionUserGameWeekHistories().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.NewDivisionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.NewDivisionID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.NewDivisionID) {
		t.Error("foreign key was wrong value", a.ID, d.NewDivisionID)
	}
	if !queries.Equal(a.ID, e.NewDivisionID) {
		t.Error("foreign key was wrong value", a.ID, e.NewDivisionID)
	}

	if b.R.NewDivision != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.NewDivision != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.NewDivision != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.NewDivision != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.NewDivisionUserGameWeekHistories[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.NewDivisionUserGameWeekHistories[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDivisionToManyRemoveOpNewDivisionUserGameWeekHistories(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Division
	var b, c, d, e UserGameWeekHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserGameWeekHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userGameWeekHistoryDBTypes, false, strmangle.SetComplement(userGameWeekHistoryPrimaryKeyColumns, userGameWeekHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddNewDivisionUserGameWeekHistories(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.NewDivisionUserGameWeekHistories().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveNewDivisionUserGameWeekHistories(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.NewDivisionUserGameWeekHistories().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.NewDivisionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.NewDivisionID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.NewDivision != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.NewDivision != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.NewDivision != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.NewDivision != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.NewDivisionUserGameWeekHistories) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.NewDivisionUserGameWeekHistories[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.NewDivisionUserGameWeekHistories[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDivisionToManyAddOpWeekDivisionUserGameWeekHistories(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Division
	var b, c, d, e UserGameWeekHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserGameWeekHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userGameWeekHistoryDBTypes, false, strmangle.SetComplement(userGameWeekHistoryPrimaryKeyColumns, userGameWeekHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserGameWeekHistory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddWeekDivisionUserGameWeekHistories(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.WeekDivisionID) {
			t.Error("foreign key was wrong value", a.ID, first.WeekDivisionID)
		}
		if !queries.Equal(a.ID, second.WeekDivisionID) {
			t.Error("foreign key was wrong value", a.ID, second.WeekDivisionID)
		}

		if first.R.WeekDivision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.WeekDivision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.WeekDivisionUserGameWeekHistories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.WeekDivisionUserGameWeekHistories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.WeekDivisionUserGameWeekHistories().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDivisionToManySetOpWeekDivisionUserGameWeekHistories(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Division
	var b, c, d, e UserGameWeekHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserGameWeekHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userGameWeekHistoryDBTypes, false, strmangle.SetComplement(userGameWeekHistoryPrimaryKeyColumns, userGameWeekHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetWeekDivisionUserGameWeekHistories(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.WeekDivisionUserGameWeekHistories().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetWeekDivisionUserGameWeekHistories(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.WeekDivisionUserGameWeekHistories().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.WeekDivisionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.WeekDivisionID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.WeekDivisionID) {
		t.Error("foreign key was wrong value", a.ID, d.WeekDivisionID)
	}
	if !queries.Equal(a.ID, e.WeekDivisionID) {
		t.Error("foreign key was wrong value", a.ID, e.WeekDivisionID)
	}

	if b.R.WeekDivision != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.WeekDivision != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.WeekDivision != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.WeekDivision != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.WeekDivisionUserGameWeekHistories[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.WeekDivisionUserGameWeekHistories[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDivisionToManyRemoveOpWeekDivisionUserGameWeekHistories(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Division
	var b, c, d, e UserGameWeekHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserGameWeekHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userGameWeekHistoryDBTypes, false, strmangle.SetComplement(userGameWeekHistoryPrimaryKeyColumns, userGameWeekHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddWeekDivisionUserGameWeekHistories(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.WeekDivisionUserGameWeekHistories().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveWeekDivisionUserGameWeekHistories(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.WeekDivisionUserGameWeekHistories().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.WeekDivisionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.WeekDivisionID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.WeekDivision != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.WeekDivision != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.WeekDivision != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.WeekDivision != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.WeekDivisionUserGameWeekHistories) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.WeekDivisionUserGameWeekHistories[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.WeekDivisionUserGameWeekHistories[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDivisionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Division{}
	if err = randomize.Struct(seed, o, divisionDBTypes, true, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testDivisionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Division{}
	if err = randomize.Struct(seed, o, divisionDBTypes, true, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DivisionSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testDivisionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Division{}
	if err = randomize.Struct(seed, o, divisionDBTypes, true, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Divisions().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	divisionDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `Name`: `character varying`, `Tier`: `integer`, `Percentage`: `double precision`, `PromotionMaxRange`: `double precision`, `PromotionMinRange`: `double precision`, `RelegationMaxRange`: `double precision`, `RelegationMinRange`: `double precision`}
	_               = bytes.MinRead
)

func testDivisionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(divisionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(divisionAllColumns) == len(divisionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Division{}
	if err = randomize.Struct(seed, o, divisionDBTypes, true, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Divisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, divisionDBTypes, true, divisionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDivisionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(divisionAllColumns) == len(divisionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Division{}
	if err = randomize.Struct(seed, o, divisionDBTypes, true, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Divisions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, divisionDBTypes, true, divisionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(divisionAllColumns, divisionPrimaryKeyColumns) {
		fields = divisionAllColumns
	} else {
		fields = strmangle.SetComplement(
			divisionAllColumns,
			divisionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DivisionSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDivisionsUpsert(t *testing.T) {
	t.Parallel()

	if len(divisionAllColumns) == len(divisionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Division{}
	if err = randomize.Struct(seed, &o, divisionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Division: %s", err)
	}

	count, err := Divisions().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, divisionDBTypes, false, divisionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Division: %s", err)
	}

	count, err = Divisions().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
