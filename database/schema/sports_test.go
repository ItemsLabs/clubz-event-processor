// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSports(t *testing.T) {
	t.Parallel()

	query := Sports()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSportsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sport{}
	if err = randomize.Struct(seed, o, sportDBTypes, true, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sports().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSportsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sport{}
	if err = randomize.Struct(seed, o, sportDBTypes, true, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Sports().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sports().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSportsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sport{}
	if err = randomize.Struct(seed, o, sportDBTypes, true, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SportSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sports().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSportsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sport{}
	if err = randomize.Struct(seed, o, sportDBTypes, true, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SportExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Sport exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SportExists to return true, but got false.")
	}
}

func testSportsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sport{}
	if err = randomize.Struct(seed, o, sportDBTypes, true, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	sportFound, err := FindSport(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if sportFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSportsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sport{}
	if err = randomize.Struct(seed, o, sportDBTypes, true, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Sports().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testSportsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sport{}
	if err = randomize.Struct(seed, o, sportDBTypes, true, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Sports().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSportsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sportOne := &Sport{}
	sportTwo := &Sport{}
	if err = randomize.Struct(seed, sportOne, sportDBTypes, false, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}
	if err = randomize.Struct(seed, sportTwo, sportDBTypes, false, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = sportOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sportTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Sports().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSportsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sportOne := &Sport{}
	sportTwo := &Sport{}
	if err = randomize.Struct(seed, sportOne, sportDBTypes, false, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}
	if err = randomize.Struct(seed, sportTwo, sportDBTypes, false, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = sportOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sportTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sports().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testSportsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sport{}
	if err = randomize.Struct(seed, o, sportDBTypes, true, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sports().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSportsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sport{}
	if err = randomize.Struct(seed, o, sportDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(sportColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Sports().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSportToManyActions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c Action

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, true, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, actionDBTypes, false, actionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, actionDBTypes, false, actionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SportID, a.ID)
	queries.Assign(&c.SportID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Actions().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SportID, b.SportID) {
			bFound = true
		}
		if queries.Equal(v.SportID, c.SportID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SportSlice{&a}
	if err = a.L.LoadActions(tx, false, (*[]*Sport)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Actions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Actions = nil
	if err = a.L.LoadActions(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Actions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSportToManyCompetitionConfigs(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c CompetitionConfig

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, true, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, competitionConfigDBTypes, false, competitionConfigColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, competitionConfigDBTypes, false, competitionConfigColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SportID, a.ID)
	queries.Assign(&c.SportID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CompetitionConfigs().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SportID, b.SportID) {
			bFound = true
		}
		if queries.Equal(v.SportID, c.SportID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SportSlice{&a}
	if err = a.L.LoadCompetitionConfigs(tx, false, (*[]*Sport)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CompetitionConfigs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CompetitionConfigs = nil
	if err = a.L.LoadCompetitionConfigs(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CompetitionConfigs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSportToManyCompetitions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c Competition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, true, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, competitionDBTypes, false, competitionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, competitionDBTypes, false, competitionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SportID, a.ID)
	queries.Assign(&c.SportID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Competitions().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SportID, b.SportID) {
			bFound = true
		}
		if queries.Equal(v.SportID, c.SportID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SportSlice{&a}
	if err = a.L.LoadCompetitions(tx, false, (*[]*Sport)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Competitions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Competitions = nil
	if err = a.L.LoadCompetitions(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Competitions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSportToManyGames(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c Game

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, true, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, gameDBTypes, false, gameColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameDBTypes, false, gameColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SportID, a.ID)
	queries.Assign(&c.SportID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Games().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SportID, b.SportID) {
			bFound = true
		}
		if queries.Equal(v.SportID, c.SportID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SportSlice{&a}
	if err = a.L.LoadGames(tx, false, (*[]*Sport)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Games); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Games = nil
	if err = a.L.LoadGames(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Games); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSportToManyMatches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, true, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SportID, a.ID)
	queries.Assign(&c.SportID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Matches().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SportID, b.SportID) {
			bFound = true
		}
		if queries.Equal(v.SportID, c.SportID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SportSlice{&a}
	if err = a.L.LoadMatches(tx, false, (*[]*Sport)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Matches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Matches = nil
	if err = a.L.LoadMatches(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Matches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSportToManyPowerups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c Powerup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, true, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, powerupDBTypes, false, powerupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, powerupDBTypes, false, powerupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SportID, a.ID)
	queries.Assign(&c.SportID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Powerups().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SportID, b.SportID) {
			bFound = true
		}
		if queries.Equal(v.SportID, c.SportID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SportSlice{&a}
	if err = a.L.LoadPowerups(tx, false, (*[]*Sport)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Powerups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Powerups = nil
	if err = a.L.LoadPowerups(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Powerups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSportToManyAddOpActions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c, d, e Action

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Action{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, actionDBTypes, false, strmangle.SetComplement(actionPrimaryKeyColumns, actionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Action{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddActions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SportID) {
			t.Error("foreign key was wrong value", a.ID, first.SportID)
		}
		if !queries.Equal(a.ID, second.SportID) {
			t.Error("foreign key was wrong value", a.ID, second.SportID)
		}

		if first.R.Sport != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Sport != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Actions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Actions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Actions().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSportToManySetOpActions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c, d, e Action

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Action{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, actionDBTypes, false, strmangle.SetComplement(actionPrimaryKeyColumns, actionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetActions(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Actions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetActions(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Actions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SportID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SportID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SportID) {
		t.Error("foreign key was wrong value", a.ID, d.SportID)
	}
	if !queries.Equal(a.ID, e.SportID) {
		t.Error("foreign key was wrong value", a.ID, e.SportID)
	}

	if b.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Sport != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Sport != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Actions[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Actions[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSportToManyRemoveOpActions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c, d, e Action

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Action{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, actionDBTypes, false, strmangle.SetComplement(actionPrimaryKeyColumns, actionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddActions(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Actions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveActions(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Actions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SportID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SportID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Sport != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Sport != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Actions) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Actions[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Actions[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSportToManyAddOpCompetitionConfigs(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c, d, e CompetitionConfig

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CompetitionConfig{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, competitionConfigDBTypes, false, strmangle.SetComplement(competitionConfigPrimaryKeyColumns, competitionConfigColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CompetitionConfig{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCompetitionConfigs(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SportID) {
			t.Error("foreign key was wrong value", a.ID, first.SportID)
		}
		if !queries.Equal(a.ID, second.SportID) {
			t.Error("foreign key was wrong value", a.ID, second.SportID)
		}

		if first.R.Sport != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Sport != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CompetitionConfigs[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CompetitionConfigs[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CompetitionConfigs().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSportToManySetOpCompetitionConfigs(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c, d, e CompetitionConfig

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CompetitionConfig{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, competitionConfigDBTypes, false, strmangle.SetComplement(competitionConfigPrimaryKeyColumns, competitionConfigColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCompetitionConfigs(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CompetitionConfigs().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCompetitionConfigs(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CompetitionConfigs().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SportID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SportID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SportID) {
		t.Error("foreign key was wrong value", a.ID, d.SportID)
	}
	if !queries.Equal(a.ID, e.SportID) {
		t.Error("foreign key was wrong value", a.ID, e.SportID)
	}

	if b.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Sport != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Sport != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CompetitionConfigs[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CompetitionConfigs[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSportToManyRemoveOpCompetitionConfigs(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c, d, e CompetitionConfig

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CompetitionConfig{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, competitionConfigDBTypes, false, strmangle.SetComplement(competitionConfigPrimaryKeyColumns, competitionConfigColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCompetitionConfigs(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CompetitionConfigs().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCompetitionConfigs(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CompetitionConfigs().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SportID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SportID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Sport != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Sport != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CompetitionConfigs) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CompetitionConfigs[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CompetitionConfigs[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSportToManyAddOpCompetitions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c, d, e Competition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Competition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, competitionDBTypes, false, strmangle.SetComplement(competitionPrimaryKeyColumns, competitionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Competition{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCompetitions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SportID) {
			t.Error("foreign key was wrong value", a.ID, first.SportID)
		}
		if !queries.Equal(a.ID, second.SportID) {
			t.Error("foreign key was wrong value", a.ID, second.SportID)
		}

		if first.R.Sport != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Sport != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Competitions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Competitions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Competitions().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSportToManySetOpCompetitions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c, d, e Competition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Competition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, competitionDBTypes, false, strmangle.SetComplement(competitionPrimaryKeyColumns, competitionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCompetitions(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Competitions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCompetitions(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Competitions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SportID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SportID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SportID) {
		t.Error("foreign key was wrong value", a.ID, d.SportID)
	}
	if !queries.Equal(a.ID, e.SportID) {
		t.Error("foreign key was wrong value", a.ID, e.SportID)
	}

	if b.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Sport != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Sport != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Competitions[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Competitions[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSportToManyRemoveOpCompetitions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c, d, e Competition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Competition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, competitionDBTypes, false, strmangle.SetComplement(competitionPrimaryKeyColumns, competitionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCompetitions(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Competitions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCompetitions(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Competitions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SportID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SportID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Sport != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Sport != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Competitions) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Competitions[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Competitions[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSportToManyAddOpGames(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c, d, e Game

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Game{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Game{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGames(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SportID) {
			t.Error("foreign key was wrong value", a.ID, first.SportID)
		}
		if !queries.Equal(a.ID, second.SportID) {
			t.Error("foreign key was wrong value", a.ID, second.SportID)
		}

		if first.R.Sport != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Sport != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Games[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Games[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Games().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSportToManySetOpGames(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c, d, e Game

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Game{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetGames(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Games().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetGames(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Games().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SportID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SportID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SportID) {
		t.Error("foreign key was wrong value", a.ID, d.SportID)
	}
	if !queries.Equal(a.ID, e.SportID) {
		t.Error("foreign key was wrong value", a.ID, e.SportID)
	}

	if b.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Sport != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Sport != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Games[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Games[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSportToManyRemoveOpGames(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c, d, e Game

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Game{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddGames(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Games().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveGames(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Games().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SportID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SportID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Sport != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Sport != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Games) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Games[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Games[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSportToManyAddOpMatches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Match{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMatches(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SportID) {
			t.Error("foreign key was wrong value", a.ID, first.SportID)
		}
		if !queries.Equal(a.ID, second.SportID) {
			t.Error("foreign key was wrong value", a.ID, second.SportID)
		}

		if first.R.Sport != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Sport != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Matches[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Matches[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Matches().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSportToManySetOpMatches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMatches(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Matches().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMatches(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Matches().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SportID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SportID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SportID) {
		t.Error("foreign key was wrong value", a.ID, d.SportID)
	}
	if !queries.Equal(a.ID, e.SportID) {
		t.Error("foreign key was wrong value", a.ID, e.SportID)
	}

	if b.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Sport != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Sport != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Matches[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Matches[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSportToManyRemoveOpMatches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMatches(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Matches().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMatches(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Matches().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SportID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SportID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Sport != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Sport != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Matches) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Matches[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Matches[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSportToManyAddOpPowerups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c, d, e Powerup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Powerup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, powerupDBTypes, false, strmangle.SetComplement(powerupPrimaryKeyColumns, powerupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Powerup{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPowerups(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SportID) {
			t.Error("foreign key was wrong value", a.ID, first.SportID)
		}
		if !queries.Equal(a.ID, second.SportID) {
			t.Error("foreign key was wrong value", a.ID, second.SportID)
		}

		if first.R.Sport != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Sport != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Powerups[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Powerups[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Powerups().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSportToManySetOpPowerups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c, d, e Powerup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Powerup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, powerupDBTypes, false, strmangle.SetComplement(powerupPrimaryKeyColumns, powerupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPowerups(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Powerups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPowerups(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Powerups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SportID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SportID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SportID) {
		t.Error("foreign key was wrong value", a.ID, d.SportID)
	}
	if !queries.Equal(a.ID, e.SportID) {
		t.Error("foreign key was wrong value", a.ID, e.SportID)
	}

	if b.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Sport != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Sport != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Powerups[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Powerups[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSportToManyRemoveOpPowerups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Sport
	var b, c, d, e Powerup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sportDBTypes, false, strmangle.SetComplement(sportPrimaryKeyColumns, sportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Powerup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, powerupDBTypes, false, strmangle.SetComplement(powerupPrimaryKeyColumns, powerupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPowerups(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Powerups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePowerups(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Powerups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SportID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SportID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Sport != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Sport != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Sport != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Powerups) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Powerups[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Powerups[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSportsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sport{}
	if err = randomize.Struct(seed, o, sportDBTypes, true, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSportsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sport{}
	if err = randomize.Struct(seed, o, sportDBTypes, true, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SportSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testSportsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sport{}
	if err = randomize.Struct(seed, o, sportDBTypes, true, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Sports().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sportDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `Name`: `character varying`, `Description`: `text`}
	_            = bytes.MinRead
)

func testSportsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(sportPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(sportAllColumns) == len(sportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Sport{}
	if err = randomize.Struct(seed, o, sportDBTypes, true, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sports().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sportDBTypes, true, sportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSportsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sportAllColumns) == len(sportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Sport{}
	if err = randomize.Struct(seed, o, sportDBTypes, true, sportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sports().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sportDBTypes, true, sportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sportAllColumns, sportPrimaryKeyColumns) {
		fields = sportAllColumns
	} else {
		fields = strmangle.SetComplement(
			sportAllColumns,
			sportPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SportSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSportsUpsert(t *testing.T) {
	t.Parallel()

	if len(sportAllColumns) == len(sportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Sport{}
	if err = randomize.Struct(seed, &o, sportDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Sport: %s", err)
	}

	count, err := Sports().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, sportDBTypes, false, sportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Sport struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Sport: %s", err)
	}

	count, err = Sports().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
