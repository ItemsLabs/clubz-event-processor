// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFrames(t *testing.T) {
	t.Parallel()

	query := Frames()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFramesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frame{}
	if err = randomize.Struct(seed, o, frameDBTypes, true, frameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Frames().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFramesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frame{}
	if err = randomize.Struct(seed, o, frameDBTypes, true, frameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Frames().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Frames().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFramesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frame{}
	if err = randomize.Struct(seed, o, frameDBTypes, true, frameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FrameSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Frames().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFramesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frame{}
	if err = randomize.Struct(seed, o, frameDBTypes, true, frameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FrameExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Frame exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FrameExists to return true, but got false.")
	}
}

func testFramesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frame{}
	if err = randomize.Struct(seed, o, frameDBTypes, true, frameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	frameFound, err := FindFrame(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if frameFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFramesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frame{}
	if err = randomize.Struct(seed, o, frameDBTypes, true, frameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Frames().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testFramesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frame{}
	if err = randomize.Struct(seed, o, frameDBTypes, true, frameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Frames().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFramesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	frameOne := &Frame{}
	frameTwo := &Frame{}
	if err = randomize.Struct(seed, frameOne, frameDBTypes, false, frameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}
	if err = randomize.Struct(seed, frameTwo, frameDBTypes, false, frameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = frameOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = frameTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Frames().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFramesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	frameOne := &Frame{}
	frameTwo := &Frame{}
	if err = randomize.Struct(seed, frameOne, frameDBTypes, false, frameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}
	if err = randomize.Struct(seed, frameTwo, frameDBTypes, false, frameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = frameOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = frameTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Frames().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testFramesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frame{}
	if err = randomize.Struct(seed, o, frameDBTypes, true, frameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Frames().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFramesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frame{}
	if err = randomize.Struct(seed, o, frameDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(frameColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Frames().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFrameToManyUserFrames(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Frame
	var b, c UserFrame

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, frameDBTypes, true, frameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userFrameDBTypes, false, userFrameColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userFrameDBTypes, false, userFrameColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.FrameID = a.ID
	c.FrameID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserFrames().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.FrameID == b.FrameID {
			bFound = true
		}
		if v.FrameID == c.FrameID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := FrameSlice{&a}
	if err = a.L.LoadUserFrames(tx, false, (*[]*Frame)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserFrames); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserFrames = nil
	if err = a.L.LoadUserFrames(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserFrames); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testFrameToManyAddOpUserFrames(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Frame
	var b, c, d, e UserFrame

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, frameDBTypes, false, strmangle.SetComplement(framePrimaryKeyColumns, frameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserFrame{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userFrameDBTypes, false, strmangle.SetComplement(userFramePrimaryKeyColumns, userFrameColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserFrame{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserFrames(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.FrameID {
			t.Error("foreign key was wrong value", a.ID, first.FrameID)
		}
		if a.ID != second.FrameID {
			t.Error("foreign key was wrong value", a.ID, second.FrameID)
		}

		if first.R.Frame != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Frame != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserFrames[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserFrames[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserFrames().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testFramesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frame{}
	if err = randomize.Struct(seed, o, frameDBTypes, true, frameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testFramesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frame{}
	if err = randomize.Struct(seed, o, frameDBTypes, true, frameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FrameSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testFramesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frame{}
	if err = randomize.Struct(seed, o, frameDBTypes, true, frameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Frames().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	frameDBTypes = map[string]string{`ID`: `integer`, `Name`: `character varying`, `Description`: `character varying`, `Image`: `character varying`, `Points`: `integer`, `Type`: `character varying`, `Status`: `character varying`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_            = bytes.MinRead
)

func testFramesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(framePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(frameAllColumns) == len(framePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Frame{}
	if err = randomize.Struct(seed, o, frameDBTypes, true, frameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Frames().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, frameDBTypes, true, framePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFramesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(frameAllColumns) == len(framePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Frame{}
	if err = randomize.Struct(seed, o, frameDBTypes, true, frameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Frames().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, frameDBTypes, true, framePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(frameAllColumns, framePrimaryKeyColumns) {
		fields = frameAllColumns
	} else {
		fields = strmangle.SetComplement(
			frameAllColumns,
			framePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FrameSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFramesUpsert(t *testing.T) {
	t.Parallel()

	if len(frameAllColumns) == len(framePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Frame{}
	if err = randomize.Struct(seed, &o, frameDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Frame: %s", err)
	}

	count, err := Frames().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, frameDBTypes, false, framePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Frame: %s", err)
	}

	count, err = Frames().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
