// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DjangoCeleryBeatCrontabschedule is an object representing the database table.
type DjangoCeleryBeatCrontabschedule struct {
	ID          int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Minute      string `boil:"minute" json:"minute" toml:"minute" yaml:"minute"`
	Hour        string `boil:"hour" json:"hour" toml:"hour" yaml:"hour"`
	DayOfWeek   string `boil:"day_of_week" json:"day_of_week" toml:"day_of_week" yaml:"day_of_week"`
	DayOfMonth  string `boil:"day_of_month" json:"day_of_month" toml:"day_of_month" yaml:"day_of_month"`
	MonthOfYear string `boil:"month_of_year" json:"month_of_year" toml:"month_of_year" yaml:"month_of_year"`
	Timezone    string `boil:"timezone" json:"timezone" toml:"timezone" yaml:"timezone"`

	R *djangoCeleryBeatCrontabscheduleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L djangoCeleryBeatCrontabscheduleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DjangoCeleryBeatCrontabscheduleColumns = struct {
	ID          string
	Minute      string
	Hour        string
	DayOfWeek   string
	DayOfMonth  string
	MonthOfYear string
	Timezone    string
}{
	ID:          "id",
	Minute:      "minute",
	Hour:        "hour",
	DayOfWeek:   "day_of_week",
	DayOfMonth:  "day_of_month",
	MonthOfYear: "month_of_year",
	Timezone:    "timezone",
}

var DjangoCeleryBeatCrontabscheduleTableColumns = struct {
	ID          string
	Minute      string
	Hour        string
	DayOfWeek   string
	DayOfMonth  string
	MonthOfYear string
	Timezone    string
}{
	ID:          "django_celery_beat_crontabschedule.id",
	Minute:      "django_celery_beat_crontabschedule.minute",
	Hour:        "django_celery_beat_crontabschedule.hour",
	DayOfWeek:   "django_celery_beat_crontabschedule.day_of_week",
	DayOfMonth:  "django_celery_beat_crontabschedule.day_of_month",
	MonthOfYear: "django_celery_beat_crontabschedule.month_of_year",
	Timezone:    "django_celery_beat_crontabschedule.timezone",
}

// Generated where

var DjangoCeleryBeatCrontabscheduleWhere = struct {
	ID          whereHelperint
	Minute      whereHelperstring
	Hour        whereHelperstring
	DayOfWeek   whereHelperstring
	DayOfMonth  whereHelperstring
	MonthOfYear whereHelperstring
	Timezone    whereHelperstring
}{
	ID:          whereHelperint{field: "\"django_celery_beat_crontabschedule\".\"id\""},
	Minute:      whereHelperstring{field: "\"django_celery_beat_crontabschedule\".\"minute\""},
	Hour:        whereHelperstring{field: "\"django_celery_beat_crontabschedule\".\"hour\""},
	DayOfWeek:   whereHelperstring{field: "\"django_celery_beat_crontabschedule\".\"day_of_week\""},
	DayOfMonth:  whereHelperstring{field: "\"django_celery_beat_crontabschedule\".\"day_of_month\""},
	MonthOfYear: whereHelperstring{field: "\"django_celery_beat_crontabschedule\".\"month_of_year\""},
	Timezone:    whereHelperstring{field: "\"django_celery_beat_crontabschedule\".\"timezone\""},
}

// DjangoCeleryBeatCrontabscheduleRels is where relationship names are stored.
var DjangoCeleryBeatCrontabscheduleRels = struct {
	CrontabDjangoCeleryBeatPeriodictasks string
}{
	CrontabDjangoCeleryBeatPeriodictasks: "CrontabDjangoCeleryBeatPeriodictasks",
}

// djangoCeleryBeatCrontabscheduleR is where relationships are stored.
type djangoCeleryBeatCrontabscheduleR struct {
	CrontabDjangoCeleryBeatPeriodictasks DjangoCeleryBeatPeriodictaskSlice `boil:"CrontabDjangoCeleryBeatPeriodictasks" json:"CrontabDjangoCeleryBeatPeriodictasks" toml:"CrontabDjangoCeleryBeatPeriodictasks" yaml:"CrontabDjangoCeleryBeatPeriodictasks"`
}

// NewStruct creates a new relationship struct
func (*djangoCeleryBeatCrontabscheduleR) NewStruct() *djangoCeleryBeatCrontabscheduleR {
	return &djangoCeleryBeatCrontabscheduleR{}
}

func (r *djangoCeleryBeatCrontabscheduleR) GetCrontabDjangoCeleryBeatPeriodictasks() DjangoCeleryBeatPeriodictaskSlice {
	if r == nil {
		return nil
	}
	return r.CrontabDjangoCeleryBeatPeriodictasks
}

// djangoCeleryBeatCrontabscheduleL is where Load methods for each relationship are stored.
type djangoCeleryBeatCrontabscheduleL struct{}

var (
	djangoCeleryBeatCrontabscheduleAllColumns            = []string{"id", "minute", "hour", "day_of_week", "day_of_month", "month_of_year", "timezone"}
	djangoCeleryBeatCrontabscheduleColumnsWithoutDefault = []string{"minute", "hour", "day_of_week", "day_of_month", "month_of_year", "timezone"}
	djangoCeleryBeatCrontabscheduleColumnsWithDefault    = []string{"id"}
	djangoCeleryBeatCrontabschedulePrimaryKeyColumns     = []string{"id"}
	djangoCeleryBeatCrontabscheduleGeneratedColumns      = []string{}
)

type (
	// DjangoCeleryBeatCrontabscheduleSlice is an alias for a slice of pointers to DjangoCeleryBeatCrontabschedule.
	// This should almost always be used instead of []DjangoCeleryBeatCrontabschedule.
	DjangoCeleryBeatCrontabscheduleSlice []*DjangoCeleryBeatCrontabschedule

	djangoCeleryBeatCrontabscheduleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	djangoCeleryBeatCrontabscheduleType                 = reflect.TypeOf(&DjangoCeleryBeatCrontabschedule{})
	djangoCeleryBeatCrontabscheduleMapping              = queries.MakeStructMapping(djangoCeleryBeatCrontabscheduleType)
	djangoCeleryBeatCrontabschedulePrimaryKeyMapping, _ = queries.BindMapping(djangoCeleryBeatCrontabscheduleType, djangoCeleryBeatCrontabscheduleMapping, djangoCeleryBeatCrontabschedulePrimaryKeyColumns)
	djangoCeleryBeatCrontabscheduleInsertCacheMut       sync.RWMutex
	djangoCeleryBeatCrontabscheduleInsertCache          = make(map[string]insertCache)
	djangoCeleryBeatCrontabscheduleUpdateCacheMut       sync.RWMutex
	djangoCeleryBeatCrontabscheduleUpdateCache          = make(map[string]updateCache)
	djangoCeleryBeatCrontabscheduleUpsertCacheMut       sync.RWMutex
	djangoCeleryBeatCrontabscheduleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single djangoCeleryBeatCrontabschedule record from the query.
func (q djangoCeleryBeatCrontabscheduleQuery) One(exec boil.Executor) (*DjangoCeleryBeatCrontabschedule, error) {
	o := &DjangoCeleryBeatCrontabschedule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for django_celery_beat_crontabschedule")
	}

	return o, nil
}

// All returns all DjangoCeleryBeatCrontabschedule records from the query.
func (q djangoCeleryBeatCrontabscheduleQuery) All(exec boil.Executor) (DjangoCeleryBeatCrontabscheduleSlice, error) {
	var o []*DjangoCeleryBeatCrontabschedule

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to DjangoCeleryBeatCrontabschedule slice")
	}

	return o, nil
}

// Count returns the count of all DjangoCeleryBeatCrontabschedule records in the query.
func (q djangoCeleryBeatCrontabscheduleQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count django_celery_beat_crontabschedule rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q djangoCeleryBeatCrontabscheduleQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if django_celery_beat_crontabschedule exists")
	}

	return count > 0, nil
}

// CrontabDjangoCeleryBeatPeriodictasks retrieves all the django_celery_beat_periodictask's DjangoCeleryBeatPeriodictasks with an executor via crontab_id column.
func (o *DjangoCeleryBeatCrontabschedule) CrontabDjangoCeleryBeatPeriodictasks(mods ...qm.QueryMod) djangoCeleryBeatPeriodictaskQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"django_celery_beat_periodictask\".\"crontab_id\"=?", o.ID),
	)

	return DjangoCeleryBeatPeriodictasks(queryMods...)
}

// LoadCrontabDjangoCeleryBeatPeriodictasks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (djangoCeleryBeatCrontabscheduleL) LoadCrontabDjangoCeleryBeatPeriodictasks(e boil.Executor, singular bool, maybeDjangoCeleryBeatCrontabschedule interface{}, mods queries.Applicator) error {
	var slice []*DjangoCeleryBeatCrontabschedule
	var object *DjangoCeleryBeatCrontabschedule

	if singular {
		var ok bool
		object, ok = maybeDjangoCeleryBeatCrontabschedule.(*DjangoCeleryBeatCrontabschedule)
		if !ok {
			object = new(DjangoCeleryBeatCrontabschedule)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDjangoCeleryBeatCrontabschedule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDjangoCeleryBeatCrontabschedule))
			}
		}
	} else {
		s, ok := maybeDjangoCeleryBeatCrontabschedule.(*[]*DjangoCeleryBeatCrontabschedule)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDjangoCeleryBeatCrontabschedule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDjangoCeleryBeatCrontabschedule))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &djangoCeleryBeatCrontabscheduleR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &djangoCeleryBeatCrontabscheduleR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`django_celery_beat_periodictask`),
		qm.WhereIn(`django_celery_beat_periodictask.crontab_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load django_celery_beat_periodictask")
	}

	var resultSlice []*DjangoCeleryBeatPeriodictask
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice django_celery_beat_periodictask")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on django_celery_beat_periodictask")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for django_celery_beat_periodictask")
	}

	if singular {
		object.R.CrontabDjangoCeleryBeatPeriodictasks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &djangoCeleryBeatPeriodictaskR{}
			}
			foreign.R.Crontab = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CrontabID) {
				local.R.CrontabDjangoCeleryBeatPeriodictasks = append(local.R.CrontabDjangoCeleryBeatPeriodictasks, foreign)
				if foreign.R == nil {
					foreign.R = &djangoCeleryBeatPeriodictaskR{}
				}
				foreign.R.Crontab = local
				break
			}
		}
	}

	return nil
}

// AddCrontabDjangoCeleryBeatPeriodictasks adds the given related objects to the existing relationships
// of the django_celery_beat_crontabschedule, optionally inserting them as new records.
// Appends related to o.R.CrontabDjangoCeleryBeatPeriodictasks.
// Sets related.R.Crontab appropriately.
func (o *DjangoCeleryBeatCrontabschedule) AddCrontabDjangoCeleryBeatPeriodictasks(exec boil.Executor, insert bool, related ...*DjangoCeleryBeatPeriodictask) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CrontabID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"django_celery_beat_periodictask\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"crontab_id"}),
				strmangle.WhereClause("\"", "\"", 2, djangoCeleryBeatPeriodictaskPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CrontabID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &djangoCeleryBeatCrontabscheduleR{
			CrontabDjangoCeleryBeatPeriodictasks: related,
		}
	} else {
		o.R.CrontabDjangoCeleryBeatPeriodictasks = append(o.R.CrontabDjangoCeleryBeatPeriodictasks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &djangoCeleryBeatPeriodictaskR{
				Crontab: o,
			}
		} else {
			rel.R.Crontab = o
		}
	}
	return nil
}

// SetCrontabDjangoCeleryBeatPeriodictasks removes all previously related items of the
// django_celery_beat_crontabschedule replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Crontab's CrontabDjangoCeleryBeatPeriodictasks accordingly.
// Replaces o.R.CrontabDjangoCeleryBeatPeriodictasks with related.
// Sets related.R.Crontab's CrontabDjangoCeleryBeatPeriodictasks accordingly.
func (o *DjangoCeleryBeatCrontabschedule) SetCrontabDjangoCeleryBeatPeriodictasks(exec boil.Executor, insert bool, related ...*DjangoCeleryBeatPeriodictask) error {
	query := "update \"django_celery_beat_periodictask\" set \"crontab_id\" = null where \"crontab_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CrontabDjangoCeleryBeatPeriodictasks {
			queries.SetScanner(&rel.CrontabID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Crontab = nil
		}
		o.R.CrontabDjangoCeleryBeatPeriodictasks = nil
	}

	return o.AddCrontabDjangoCeleryBeatPeriodictasks(exec, insert, related...)
}

// RemoveCrontabDjangoCeleryBeatPeriodictasks relationships from objects passed in.
// Removes related items from R.CrontabDjangoCeleryBeatPeriodictasks (uses pointer comparison, removal does not keep order)
// Sets related.R.Crontab.
func (o *DjangoCeleryBeatCrontabschedule) RemoveCrontabDjangoCeleryBeatPeriodictasks(exec boil.Executor, related ...*DjangoCeleryBeatPeriodictask) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CrontabID, nil)
		if rel.R != nil {
			rel.R.Crontab = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("crontab_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CrontabDjangoCeleryBeatPeriodictasks {
			if rel != ri {
				continue
			}

			ln := len(o.R.CrontabDjangoCeleryBeatPeriodictasks)
			if ln > 1 && i < ln-1 {
				o.R.CrontabDjangoCeleryBeatPeriodictasks[i] = o.R.CrontabDjangoCeleryBeatPeriodictasks[ln-1]
			}
			o.R.CrontabDjangoCeleryBeatPeriodictasks = o.R.CrontabDjangoCeleryBeatPeriodictasks[:ln-1]
			break
		}
	}

	return nil
}

// DjangoCeleryBeatCrontabschedules retrieves all the records using an executor.
func DjangoCeleryBeatCrontabschedules(mods ...qm.QueryMod) djangoCeleryBeatCrontabscheduleQuery {
	mods = append(mods, qm.From("\"django_celery_beat_crontabschedule\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"django_celery_beat_crontabschedule\".*"})
	}

	return djangoCeleryBeatCrontabscheduleQuery{q}
}

// FindDjangoCeleryBeatCrontabschedule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDjangoCeleryBeatCrontabschedule(exec boil.Executor, iD int, selectCols ...string) (*DjangoCeleryBeatCrontabschedule, error) {
	djangoCeleryBeatCrontabscheduleObj := &DjangoCeleryBeatCrontabschedule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"django_celery_beat_crontabschedule\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, djangoCeleryBeatCrontabscheduleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from django_celery_beat_crontabschedule")
	}

	return djangoCeleryBeatCrontabscheduleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DjangoCeleryBeatCrontabschedule) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no django_celery_beat_crontabschedule provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(djangoCeleryBeatCrontabscheduleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	djangoCeleryBeatCrontabscheduleInsertCacheMut.RLock()
	cache, cached := djangoCeleryBeatCrontabscheduleInsertCache[key]
	djangoCeleryBeatCrontabscheduleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			djangoCeleryBeatCrontabscheduleAllColumns,
			djangoCeleryBeatCrontabscheduleColumnsWithDefault,
			djangoCeleryBeatCrontabscheduleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(djangoCeleryBeatCrontabscheduleType, djangoCeleryBeatCrontabscheduleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(djangoCeleryBeatCrontabscheduleType, djangoCeleryBeatCrontabscheduleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"django_celery_beat_crontabschedule\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"django_celery_beat_crontabschedule\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into django_celery_beat_crontabschedule")
	}

	if !cached {
		djangoCeleryBeatCrontabscheduleInsertCacheMut.Lock()
		djangoCeleryBeatCrontabscheduleInsertCache[key] = cache
		djangoCeleryBeatCrontabscheduleInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DjangoCeleryBeatCrontabschedule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DjangoCeleryBeatCrontabschedule) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	djangoCeleryBeatCrontabscheduleUpdateCacheMut.RLock()
	cache, cached := djangoCeleryBeatCrontabscheduleUpdateCache[key]
	djangoCeleryBeatCrontabscheduleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			djangoCeleryBeatCrontabscheduleAllColumns,
			djangoCeleryBeatCrontabschedulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update django_celery_beat_crontabschedule, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"django_celery_beat_crontabschedule\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, djangoCeleryBeatCrontabschedulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(djangoCeleryBeatCrontabscheduleType, djangoCeleryBeatCrontabscheduleMapping, append(wl, djangoCeleryBeatCrontabschedulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update django_celery_beat_crontabschedule row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for django_celery_beat_crontabschedule")
	}

	if !cached {
		djangoCeleryBeatCrontabscheduleUpdateCacheMut.Lock()
		djangoCeleryBeatCrontabscheduleUpdateCache[key] = cache
		djangoCeleryBeatCrontabscheduleUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q djangoCeleryBeatCrontabscheduleQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for django_celery_beat_crontabschedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for django_celery_beat_crontabschedule")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DjangoCeleryBeatCrontabscheduleSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoCeleryBeatCrontabschedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"django_celery_beat_crontabschedule\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, djangoCeleryBeatCrontabschedulePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in djangoCeleryBeatCrontabschedule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all djangoCeleryBeatCrontabschedule")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DjangoCeleryBeatCrontabschedule) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no django_celery_beat_crontabschedule provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(djangoCeleryBeatCrontabscheduleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	djangoCeleryBeatCrontabscheduleUpsertCacheMut.RLock()
	cache, cached := djangoCeleryBeatCrontabscheduleUpsertCache[key]
	djangoCeleryBeatCrontabscheduleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			djangoCeleryBeatCrontabscheduleAllColumns,
			djangoCeleryBeatCrontabscheduleColumnsWithDefault,
			djangoCeleryBeatCrontabscheduleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			djangoCeleryBeatCrontabscheduleAllColumns,
			djangoCeleryBeatCrontabschedulePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert django_celery_beat_crontabschedule, could not build update column list")
		}

		ret := strmangle.SetComplement(djangoCeleryBeatCrontabscheduleAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(djangoCeleryBeatCrontabschedulePrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert django_celery_beat_crontabschedule, could not build conflict column list")
			}

			conflict = make([]string, len(djangoCeleryBeatCrontabschedulePrimaryKeyColumns))
			copy(conflict, djangoCeleryBeatCrontabschedulePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"django_celery_beat_crontabschedule\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(djangoCeleryBeatCrontabscheduleType, djangoCeleryBeatCrontabscheduleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(djangoCeleryBeatCrontabscheduleType, djangoCeleryBeatCrontabscheduleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert django_celery_beat_crontabschedule")
	}

	if !cached {
		djangoCeleryBeatCrontabscheduleUpsertCacheMut.Lock()
		djangoCeleryBeatCrontabscheduleUpsertCache[key] = cache
		djangoCeleryBeatCrontabscheduleUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DjangoCeleryBeatCrontabschedule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DjangoCeleryBeatCrontabschedule) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no DjangoCeleryBeatCrontabschedule provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), djangoCeleryBeatCrontabschedulePrimaryKeyMapping)
	sql := "DELETE FROM \"django_celery_beat_crontabschedule\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from django_celery_beat_crontabschedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for django_celery_beat_crontabschedule")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q djangoCeleryBeatCrontabscheduleQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no djangoCeleryBeatCrontabscheduleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from django_celery_beat_crontabschedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for django_celery_beat_crontabschedule")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DjangoCeleryBeatCrontabscheduleSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoCeleryBeatCrontabschedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"django_celery_beat_crontabschedule\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, djangoCeleryBeatCrontabschedulePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from djangoCeleryBeatCrontabschedule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for django_celery_beat_crontabschedule")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DjangoCeleryBeatCrontabschedule) Reload(exec boil.Executor) error {
	ret, err := FindDjangoCeleryBeatCrontabschedule(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DjangoCeleryBeatCrontabscheduleSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DjangoCeleryBeatCrontabscheduleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoCeleryBeatCrontabschedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"django_celery_beat_crontabschedule\".* FROM \"django_celery_beat_crontabschedule\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, djangoCeleryBeatCrontabschedulePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in DjangoCeleryBeatCrontabscheduleSlice")
	}

	*o = slice

	return nil
}

// DjangoCeleryBeatCrontabscheduleExists checks if the DjangoCeleryBeatCrontabschedule row exists.
func DjangoCeleryBeatCrontabscheduleExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"django_celery_beat_crontabschedule\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if django_celery_beat_crontabschedule exists")
	}

	return exists, nil
}

// Exists checks if the DjangoCeleryBeatCrontabschedule row exists.
func (o *DjangoCeleryBeatCrontabschedule) Exists(exec boil.Executor) (bool, error) {
	return DjangoCeleryBeatCrontabscheduleExists(exec, o.ID)
}
