// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNFTBuckets(t *testing.T) {
	t.Parallel()

	query := NFTBuckets()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNFTBucketsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTBucket{}
	if err = randomize.Struct(seed, o, nftBucketDBTypes, true, nftBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NFTBuckets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNFTBucketsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTBucket{}
	if err = randomize.Struct(seed, o, nftBucketDBTypes, true, nftBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := NFTBuckets().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NFTBuckets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNFTBucketsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTBucket{}
	if err = randomize.Struct(seed, o, nftBucketDBTypes, true, nftBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NFTBucketSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NFTBuckets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNFTBucketsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTBucket{}
	if err = randomize.Struct(seed, o, nftBucketDBTypes, true, nftBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NFTBucketExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if NFTBucket exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NFTBucketExists to return true, but got false.")
	}
}

func testNFTBucketsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTBucket{}
	if err = randomize.Struct(seed, o, nftBucketDBTypes, true, nftBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	nftBucketFound, err := FindNFTBucket(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if nftBucketFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNFTBucketsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTBucket{}
	if err = randomize.Struct(seed, o, nftBucketDBTypes, true, nftBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = NFTBuckets().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testNFTBucketsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTBucket{}
	if err = randomize.Struct(seed, o, nftBucketDBTypes, true, nftBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := NFTBuckets().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNFTBucketsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nftBucketOne := &NFTBucket{}
	nftBucketTwo := &NFTBucket{}
	if err = randomize.Struct(seed, nftBucketOne, nftBucketDBTypes, false, nftBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}
	if err = randomize.Struct(seed, nftBucketTwo, nftBucketDBTypes, false, nftBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = nftBucketOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nftBucketTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NFTBuckets().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNFTBucketsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	nftBucketOne := &NFTBucket{}
	nftBucketTwo := &NFTBucket{}
	if err = randomize.Struct(seed, nftBucketOne, nftBucketDBTypes, false, nftBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}
	if err = randomize.Struct(seed, nftBucketTwo, nftBucketDBTypes, false, nftBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = nftBucketOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nftBucketTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NFTBuckets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testNFTBucketsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTBucket{}
	if err = randomize.Struct(seed, o, nftBucketDBTypes, true, nftBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NFTBuckets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNFTBucketsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTBucket{}
	if err = randomize.Struct(seed, o, nftBucketDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(nftBucketColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := NFTBuckets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNFTBucketToManyPlayerNFTAssignedPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a NFTBucket
	var b, c AssignedPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, nftBucketDBTypes, true, nftBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, assignedPlayerDBTypes, false, assignedPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assignedPlayerDBTypes, false, assignedPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PlayerNFTID, a.ID)
	queries.Assign(&c.PlayerNFTID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PlayerNFTAssignedPlayers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PlayerNFTID, b.PlayerNFTID) {
			bFound = true
		}
		if queries.Equal(v.PlayerNFTID, c.PlayerNFTID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := NFTBucketSlice{&a}
	if err = a.L.LoadPlayerNFTAssignedPlayers(tx, false, (*[]*NFTBucket)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlayerNFTAssignedPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PlayerNFTAssignedPlayers = nil
	if err = a.L.LoadPlayerNFTAssignedPlayers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlayerNFTAssignedPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testNFTBucketToManyAddOpPlayerNFTAssignedPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a NFTBucket
	var b, c, d, e AssignedPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, nftBucketDBTypes, false, strmangle.SetComplement(nftBucketPrimaryKeyColumns, nftBucketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedPlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedPlayerDBTypes, false, strmangle.SetComplement(assignedPlayerPrimaryKeyColumns, assignedPlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AssignedPlayer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPlayerNFTAssignedPlayers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.PlayerNFTID) {
			t.Error("foreign key was wrong value", a.ID, first.PlayerNFTID)
		}
		if !queries.Equal(a.ID, second.PlayerNFTID) {
			t.Error("foreign key was wrong value", a.ID, second.PlayerNFTID)
		}

		if first.R.PlayerNFT != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PlayerNFT != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PlayerNFTAssignedPlayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PlayerNFTAssignedPlayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PlayerNFTAssignedPlayers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testNFTBucketToManySetOpPlayerNFTAssignedPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a NFTBucket
	var b, c, d, e AssignedPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, nftBucketDBTypes, false, strmangle.SetComplement(nftBucketPrimaryKeyColumns, nftBucketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedPlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedPlayerDBTypes, false, strmangle.SetComplement(assignedPlayerPrimaryKeyColumns, assignedPlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPlayerNFTAssignedPlayers(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PlayerNFTAssignedPlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPlayerNFTAssignedPlayers(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PlayerNFTAssignedPlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PlayerNFTID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PlayerNFTID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.PlayerNFTID) {
		t.Error("foreign key was wrong value", a.ID, d.PlayerNFTID)
	}
	if !queries.Equal(a.ID, e.PlayerNFTID) {
		t.Error("foreign key was wrong value", a.ID, e.PlayerNFTID)
	}

	if b.R.PlayerNFT != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.PlayerNFT != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.PlayerNFT != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.PlayerNFT != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PlayerNFTAssignedPlayers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PlayerNFTAssignedPlayers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testNFTBucketToManyRemoveOpPlayerNFTAssignedPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a NFTBucket
	var b, c, d, e AssignedPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, nftBucketDBTypes, false, strmangle.SetComplement(nftBucketPrimaryKeyColumns, nftBucketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedPlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedPlayerDBTypes, false, strmangle.SetComplement(assignedPlayerPrimaryKeyColumns, assignedPlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPlayerNFTAssignedPlayers(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PlayerNFTAssignedPlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePlayerNFTAssignedPlayers(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PlayerNFTAssignedPlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PlayerNFTID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PlayerNFTID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.PlayerNFT != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.PlayerNFT != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.PlayerNFT != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.PlayerNFT != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PlayerNFTAssignedPlayers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PlayerNFTAssignedPlayers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PlayerNFTAssignedPlayers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testNFTBucketsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTBucket{}
	if err = randomize.Struct(seed, o, nftBucketDBTypes, true, nftBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testNFTBucketsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTBucket{}
	if err = randomize.Struct(seed, o, nftBucketDBTypes, true, nftBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NFTBucketSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testNFTBucketsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTBucket{}
	if err = randomize.Struct(seed, o, nftBucketDBTypes, true, nftBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NFTBuckets().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	nftBucketDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `Name`: `character varying`, `TeamID`: `uuid`, `Age`: `integer`, `GamePosition`: `character varying`, `Position`: `character varying`, `CommonClaiming`: `double precision`, `CommonDefence`: `double precision`, `CommonDistribution`: `double precision`, `CommonDribbling`: `double precision`, `CommonPassing`: `double precision`, `CommonShooting`: `double precision`, `CommonStopping`: `double precision`, `LegendaryClaiming`: `double precision`, `LegendaryDefence`: `double precision`, `LegendaryDistribution`: `double precision`, `LegendaryDribbling`: `double precision`, `LegendaryPassing`: `double precision`, `LegendaryShooting`: `double precision`, `LegendaryStopping`: `double precision`, `Nationality`: `character varying`, `RareClaiming`: `double precision`, `RareDefence`: `double precision`, `RareDistribution`: `double precision`, `RareDribbling`: `double precision`, `RarePassing`: `double precision`, `RareShooting`: `double precision`, `RareStopping`: `double precision`, `StarRating`: `double precision`, `UltraRareClaiming`: `double precision`, `UltraRareDefence`: `double precision`, `UltraRareDistribution`: `double precision`, `UltraRareDribbling`: `double precision`, `UltraRarePassing`: `double precision`, `UltraRareShooting`: `double precision`, `UltraRareStopping`: `double precision`, `UncommonClaiming`: `double precision`, `UncommonDefence`: `double precision`, `UncommonDistribution`: `double precision`, `UncommonDribbling`: `double precision`, `UncommonPassing`: `double precision`, `UncommonShooting`: `double precision`, `UncommonStopping`: `double precision`, `CommonImage`: `character varying`, `CommonMetadata`: `character varying`, `LegendaryImage`: `character varying`, `LegendaryMetadata`: `character varying`, `RareImage`: `character varying`, `RareMetadata`: `character varying`, `UltraRareImage`: `character varying`, `UltraRareMetadata`: `character varying`, `UncommonImage`: `character varying`, `UncommonMetadata`: `character varying`, `CommonLimit`: `integer`, `LegendaryLimit`: `integer`, `RareLimit`: `integer`, `UltraRareLimit`: `integer`, `UncommonLimit`: `integer`, `PlayersGroup`: `character varying`, `OptaID`: `character varying`}
	_                = bytes.MinRead
)

func testNFTBucketsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(nftBucketPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(nftBucketAllColumns) == len(nftBucketPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NFTBucket{}
	if err = randomize.Struct(seed, o, nftBucketDBTypes, true, nftBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NFTBuckets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nftBucketDBTypes, true, nftBucketPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNFTBucketsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(nftBucketAllColumns) == len(nftBucketPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NFTBucket{}
	if err = randomize.Struct(seed, o, nftBucketDBTypes, true, nftBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NFTBuckets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nftBucketDBTypes, true, nftBucketPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(nftBucketAllColumns, nftBucketPrimaryKeyColumns) {
		fields = nftBucketAllColumns
	} else {
		fields = strmangle.SetComplement(
			nftBucketAllColumns,
			nftBucketPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NFTBucketSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testNFTBucketsUpsert(t *testing.T) {
	t.Parallel()

	if len(nftBucketAllColumns) == len(nftBucketPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := NFTBucket{}
	if err = randomize.Struct(seed, &o, nftBucketDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NFTBucket: %s", err)
	}

	count, err := NFTBuckets().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, nftBucketDBTypes, false, nftBucketPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NFTBucket: %s", err)
	}

	count, err = NFTBuckets().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
