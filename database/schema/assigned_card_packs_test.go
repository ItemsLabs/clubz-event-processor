// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAssignedCardPacks(t *testing.T) {
	t.Parallel()

	query := AssignedCardPacks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAssignedCardPacksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedCardPack{}
	if err = randomize.Struct(seed, o, assignedCardPackDBTypes, true, assignedCardPackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AssignedCardPacks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignedCardPacksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedCardPack{}
	if err = randomize.Struct(seed, o, assignedCardPackDBTypes, true, assignedCardPackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AssignedCardPacks().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AssignedCardPacks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignedCardPacksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedCardPack{}
	if err = randomize.Struct(seed, o, assignedCardPackDBTypes, true, assignedCardPackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AssignedCardPackSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AssignedCardPacks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignedCardPacksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedCardPack{}
	if err = randomize.Struct(seed, o, assignedCardPackDBTypes, true, assignedCardPackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AssignedCardPackExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AssignedCardPack exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AssignedCardPackExists to return true, but got false.")
	}
}

func testAssignedCardPacksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedCardPack{}
	if err = randomize.Struct(seed, o, assignedCardPackDBTypes, true, assignedCardPackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	assignedCardPackFound, err := FindAssignedCardPack(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if assignedCardPackFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAssignedCardPacksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedCardPack{}
	if err = randomize.Struct(seed, o, assignedCardPackDBTypes, true, assignedCardPackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AssignedCardPacks().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testAssignedCardPacksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedCardPack{}
	if err = randomize.Struct(seed, o, assignedCardPackDBTypes, true, assignedCardPackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AssignedCardPacks().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAssignedCardPacksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	assignedCardPackOne := &AssignedCardPack{}
	assignedCardPackTwo := &AssignedCardPack{}
	if err = randomize.Struct(seed, assignedCardPackOne, assignedCardPackDBTypes, false, assignedCardPackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}
	if err = randomize.Struct(seed, assignedCardPackTwo, assignedCardPackDBTypes, false, assignedCardPackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = assignedCardPackOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = assignedCardPackTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AssignedCardPacks().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAssignedCardPacksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	assignedCardPackOne := &AssignedCardPack{}
	assignedCardPackTwo := &AssignedCardPack{}
	if err = randomize.Struct(seed, assignedCardPackOne, assignedCardPackDBTypes, false, assignedCardPackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}
	if err = randomize.Struct(seed, assignedCardPackTwo, assignedCardPackDBTypes, false, assignedCardPackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = assignedCardPackOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = assignedCardPackTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedCardPacks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testAssignedCardPacksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedCardPack{}
	if err = randomize.Struct(seed, o, assignedCardPackDBTypes, true, assignedCardPackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedCardPacks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAssignedCardPacksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedCardPack{}
	if err = randomize.Struct(seed, o, assignedCardPackDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(assignedCardPackColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AssignedCardPacks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAssignedCardPackToOneCardPackTypeUsingCardPackType(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local AssignedCardPack
	var foreign CardPackType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assignedCardPackDBTypes, false, assignedCardPackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, cardPackTypeDBTypes, false, cardPackTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CardPackType struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CardPackTypeID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CardPackType().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AssignedCardPackSlice{&local}
	if err = local.L.LoadCardPackType(tx, false, (*[]*AssignedCardPack)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CardPackType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CardPackType = nil
	if err = local.L.LoadCardPackType(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CardPackType == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testAssignedCardPackToOneStoreProductTransactionUsingStoreTransaction(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local AssignedCardPack
	var foreign StoreProductTransaction

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assignedCardPackDBTypes, true, assignedCardPackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, storeProductTransactionDBTypes, false, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.StoreTransactionID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.StoreTransaction().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AssignedCardPackSlice{&local}
	if err = local.L.LoadStoreTransaction(tx, false, (*[]*AssignedCardPack)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.StoreTransaction == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.StoreTransaction = nil
	if err = local.L.LoadStoreTransaction(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.StoreTransaction == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testAssignedCardPackToOneUserUsingUser(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local AssignedCardPack
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assignedCardPackDBTypes, false, assignedCardPackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AssignedCardPackSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*AssignedCardPack)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testAssignedCardPackToOneSetOpCardPackTypeUsingCardPackType(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AssignedCardPack
	var b, c CardPackType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedCardPackDBTypes, false, strmangle.SetComplement(assignedCardPackPrimaryKeyColumns, assignedCardPackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, cardPackTypeDBTypes, false, strmangle.SetComplement(cardPackTypePrimaryKeyColumns, cardPackTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cardPackTypeDBTypes, false, strmangle.SetComplement(cardPackTypePrimaryKeyColumns, cardPackTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*CardPackType{&b, &c} {
		err = a.SetCardPackType(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CardPackType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AssignedCardPacks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CardPackTypeID != x.ID {
			t.Error("foreign key was wrong value", a.CardPackTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CardPackTypeID))
		reflect.Indirect(reflect.ValueOf(&a.CardPackTypeID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CardPackTypeID != x.ID {
			t.Error("foreign key was wrong value", a.CardPackTypeID, x.ID)
		}
	}
}
func testAssignedCardPackToOneSetOpStoreProductTransactionUsingStoreTransaction(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AssignedCardPack
	var b, c StoreProductTransaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedCardPackDBTypes, false, strmangle.SetComplement(assignedCardPackPrimaryKeyColumns, assignedCardPackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, storeProductTransactionDBTypes, false, strmangle.SetComplement(storeProductTransactionPrimaryKeyColumns, storeProductTransactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, storeProductTransactionDBTypes, false, strmangle.SetComplement(storeProductTransactionPrimaryKeyColumns, storeProductTransactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*StoreProductTransaction{&b, &c} {
		err = a.SetStoreTransaction(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.StoreTransaction != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.StoreTransactionAssignedCardPacks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.StoreTransactionID, x.ID) {
			t.Error("foreign key was wrong value", a.StoreTransactionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.StoreTransactionID))
		reflect.Indirect(reflect.ValueOf(&a.StoreTransactionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.StoreTransactionID, x.ID) {
			t.Error("foreign key was wrong value", a.StoreTransactionID, x.ID)
		}
	}
}

func testAssignedCardPackToOneRemoveOpStoreProductTransactionUsingStoreTransaction(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AssignedCardPack
	var b StoreProductTransaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedCardPackDBTypes, false, strmangle.SetComplement(assignedCardPackPrimaryKeyColumns, assignedCardPackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, storeProductTransactionDBTypes, false, strmangle.SetComplement(storeProductTransactionPrimaryKeyColumns, storeProductTransactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetStoreTransaction(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveStoreTransaction(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.StoreTransaction().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.StoreTransaction != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.StoreTransactionID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.StoreTransactionAssignedCardPacks) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAssignedCardPackToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AssignedCardPack
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedCardPackDBTypes, false, strmangle.SetComplement(assignedCardPackPrimaryKeyColumns, assignedCardPackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AssignedCardPacks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testAssignedCardPacksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedCardPack{}
	if err = randomize.Struct(seed, o, assignedCardPackDBTypes, true, assignedCardPackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testAssignedCardPacksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedCardPack{}
	if err = randomize.Struct(seed, o, assignedCardPackDBTypes, true, assignedCardPackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AssignedCardPackSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testAssignedCardPacksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedCardPack{}
	if err = randomize.Struct(seed, o, assignedCardPackDBTypes, true, assignedCardPackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AssignedCardPacks().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	assignedCardPackDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `Opened`: `boolean`, `CardPackTypeID`: `uuid`, `UserID`: `uuid`, `OpenedAt`: `timestamp with time zone`, `Revealed`: `boolean`, `RevealedAt`: `timestamp with time zone`, `CardIds`: `jsonb`, `StoreTransactionID`: `uuid`, `Refunded`: `boolean`}
	_                       = bytes.MinRead
)

func testAssignedCardPacksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(assignedCardPackPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(assignedCardPackAllColumns) == len(assignedCardPackPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AssignedCardPack{}
	if err = randomize.Struct(seed, o, assignedCardPackDBTypes, true, assignedCardPackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedCardPacks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, assignedCardPackDBTypes, true, assignedCardPackPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAssignedCardPacksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(assignedCardPackAllColumns) == len(assignedCardPackPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AssignedCardPack{}
	if err = randomize.Struct(seed, o, assignedCardPackDBTypes, true, assignedCardPackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedCardPacks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, assignedCardPackDBTypes, true, assignedCardPackPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(assignedCardPackAllColumns, assignedCardPackPrimaryKeyColumns) {
		fields = assignedCardPackAllColumns
	} else {
		fields = strmangle.SetComplement(
			assignedCardPackAllColumns,
			assignedCardPackPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AssignedCardPackSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAssignedCardPacksUpsert(t *testing.T) {
	t.Parallel()

	if len(assignedCardPackAllColumns) == len(assignedCardPackPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AssignedCardPack{}
	if err = randomize.Struct(seed, &o, assignedCardPackDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AssignedCardPack: %s", err)
	}

	count, err := AssignedCardPacks().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, assignedCardPackDBTypes, false, assignedCardPackPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AssignedCardPack struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AssignedCardPack: %s", err)
	}

	count, err = AssignedCardPacks().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
