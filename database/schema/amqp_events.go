// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AmqpEvent is an object representing the database table.
type AmqpEvent struct {
	ID       int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Exchange string `boil:"exchange" json:"exchange" toml:"exchange" yaml:"exchange"`
	Type     string `boil:"type" json:"type" toml:"type" yaml:"type"`
	Data     string `boil:"data" json:"data" toml:"data" yaml:"data"`

	R *amqpEventR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L amqpEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AmqpEventColumns = struct {
	ID       string
	Exchange string
	Type     string
	Data     string
}{
	ID:       "id",
	Exchange: "exchange",
	Type:     "type",
	Data:     "data",
}

var AmqpEventTableColumns = struct {
	ID       string
	Exchange string
	Type     string
	Data     string
}{
	ID:       "amqp_events.id",
	Exchange: "amqp_events.exchange",
	Type:     "amqp_events.type",
	Data:     "amqp_events.data",
}

// Generated where

var AmqpEventWhere = struct {
	ID       whereHelperint
	Exchange whereHelperstring
	Type     whereHelperstring
	Data     whereHelperstring
}{
	ID:       whereHelperint{field: "\"amqp_events\".\"id\""},
	Exchange: whereHelperstring{field: "\"amqp_events\".\"exchange\""},
	Type:     whereHelperstring{field: "\"amqp_events\".\"type\""},
	Data:     whereHelperstring{field: "\"amqp_events\".\"data\""},
}

// AmqpEventRels is where relationship names are stored.
var AmqpEventRels = struct {
}{}

// amqpEventR is where relationships are stored.
type amqpEventR struct {
}

// NewStruct creates a new relationship struct
func (*amqpEventR) NewStruct() *amqpEventR {
	return &amqpEventR{}
}

// amqpEventL is where Load methods for each relationship are stored.
type amqpEventL struct{}

var (
	amqpEventAllColumns            = []string{"id", "exchange", "type", "data"}
	amqpEventColumnsWithoutDefault = []string{"exchange", "type", "data"}
	amqpEventColumnsWithDefault    = []string{"id"}
	amqpEventPrimaryKeyColumns     = []string{"id"}
	amqpEventGeneratedColumns      = []string{}
)

type (
	// AmqpEventSlice is an alias for a slice of pointers to AmqpEvent.
	// This should almost always be used instead of []AmqpEvent.
	AmqpEventSlice []*AmqpEvent

	amqpEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	amqpEventType                 = reflect.TypeOf(&AmqpEvent{})
	amqpEventMapping              = queries.MakeStructMapping(amqpEventType)
	amqpEventPrimaryKeyMapping, _ = queries.BindMapping(amqpEventType, amqpEventMapping, amqpEventPrimaryKeyColumns)
	amqpEventInsertCacheMut       sync.RWMutex
	amqpEventInsertCache          = make(map[string]insertCache)
	amqpEventUpdateCacheMut       sync.RWMutex
	amqpEventUpdateCache          = make(map[string]updateCache)
	amqpEventUpsertCacheMut       sync.RWMutex
	amqpEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single amqpEvent record from the query.
func (q amqpEventQuery) One(exec boil.Executor) (*AmqpEvent, error) {
	o := &AmqpEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for amqp_events")
	}

	return o, nil
}

// All returns all AmqpEvent records from the query.
func (q amqpEventQuery) All(exec boil.Executor) (AmqpEventSlice, error) {
	var o []*AmqpEvent

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to AmqpEvent slice")
	}

	return o, nil
}

// Count returns the count of all AmqpEvent records in the query.
func (q amqpEventQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count amqp_events rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q amqpEventQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if amqp_events exists")
	}

	return count > 0, nil
}

// AmqpEvents retrieves all the records using an executor.
func AmqpEvents(mods ...qm.QueryMod) amqpEventQuery {
	mods = append(mods, qm.From("\"amqp_events\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"amqp_events\".*"})
	}

	return amqpEventQuery{q}
}

// FindAmqpEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAmqpEvent(exec boil.Executor, iD int, selectCols ...string) (*AmqpEvent, error) {
	amqpEventObj := &AmqpEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"amqp_events\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, amqpEventObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from amqp_events")
	}

	return amqpEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AmqpEvent) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no amqp_events provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(amqpEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	amqpEventInsertCacheMut.RLock()
	cache, cached := amqpEventInsertCache[key]
	amqpEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			amqpEventAllColumns,
			amqpEventColumnsWithDefault,
			amqpEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(amqpEventType, amqpEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(amqpEventType, amqpEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"amqp_events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"amqp_events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into amqp_events")
	}

	if !cached {
		amqpEventInsertCacheMut.Lock()
		amqpEventInsertCache[key] = cache
		amqpEventInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the AmqpEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AmqpEvent) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	amqpEventUpdateCacheMut.RLock()
	cache, cached := amqpEventUpdateCache[key]
	amqpEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			amqpEventAllColumns,
			amqpEventPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update amqp_events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"amqp_events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, amqpEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(amqpEventType, amqpEventMapping, append(wl, amqpEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update amqp_events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for amqp_events")
	}

	if !cached {
		amqpEventUpdateCacheMut.Lock()
		amqpEventUpdateCache[key] = cache
		amqpEventUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q amqpEventQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for amqp_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for amqp_events")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AmqpEventSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), amqpEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"amqp_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, amqpEventPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in amqpEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all amqpEvent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AmqpEvent) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no amqp_events provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(amqpEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	amqpEventUpsertCacheMut.RLock()
	cache, cached := amqpEventUpsertCache[key]
	amqpEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			amqpEventAllColumns,
			amqpEventColumnsWithDefault,
			amqpEventColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			amqpEventAllColumns,
			amqpEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert amqp_events, could not build update column list")
		}

		ret := strmangle.SetComplement(amqpEventAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(amqpEventPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert amqp_events, could not build conflict column list")
			}

			conflict = make([]string, len(amqpEventPrimaryKeyColumns))
			copy(conflict, amqpEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"amqp_events\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(amqpEventType, amqpEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(amqpEventType, amqpEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert amqp_events")
	}

	if !cached {
		amqpEventUpsertCacheMut.Lock()
		amqpEventUpsertCache[key] = cache
		amqpEventUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single AmqpEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AmqpEvent) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no AmqpEvent provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), amqpEventPrimaryKeyMapping)
	sql := "DELETE FROM \"amqp_events\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from amqp_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for amqp_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q amqpEventQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no amqpEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from amqp_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for amqp_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AmqpEventSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), amqpEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"amqp_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, amqpEventPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from amqpEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for amqp_events")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AmqpEvent) Reload(exec boil.Executor) error {
	ret, err := FindAmqpEvent(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AmqpEventSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AmqpEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), amqpEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"amqp_events\".* FROM \"amqp_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, amqpEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in AmqpEventSlice")
	}

	*o = slice

	return nil
}

// AmqpEventExists checks if the AmqpEvent row exists.
func AmqpEventExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"amqp_events\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if amqp_events exists")
	}

	return exists, nil
}

// Exists checks if the AmqpEvent row exists.
func (o *AmqpEvent) Exists(exec boil.Executor) (bool, error) {
	return AmqpEventExists(exec, o.ID)
}
