// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CompetitionConfig is an object representing the database table.
type CompetitionConfig struct {
	ID                   string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt            time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt            time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ImportID             null.String `boil:"import_id" json:"import_id,omitempty" toml:"import_id" yaml:"import_id,omitempty"`
	Name                 string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Filter               string      `boil:"filter" json:"filter" toml:"filter" yaml:"filter"`
	Enabled              bool        `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`
	RelatedCompetitionID null.String `boil:"related_competition_id" json:"related_competition_id,omitempty" toml:"related_competition_id" yaml:"related_competition_id,omitempty"`
	SportID              null.String `boil:"sport_id" json:"sport_id,omitempty" toml:"sport_id" yaml:"sport_id,omitempty"`

	R *competitionConfigR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L competitionConfigL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CompetitionConfigColumns = struct {
	ID                   string
	CreatedAt            string
	UpdatedAt            string
	ImportID             string
	Name                 string
	Filter               string
	Enabled              string
	RelatedCompetitionID string
	SportID              string
}{
	ID:                   "id",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	ImportID:             "import_id",
	Name:                 "name",
	Filter:               "filter",
	Enabled:              "enabled",
	RelatedCompetitionID: "related_competition_id",
	SportID:              "sport_id",
}

var CompetitionConfigTableColumns = struct {
	ID                   string
	CreatedAt            string
	UpdatedAt            string
	ImportID             string
	Name                 string
	Filter               string
	Enabled              string
	RelatedCompetitionID string
	SportID              string
}{
	ID:                   "competition_config.id",
	CreatedAt:            "competition_config.created_at",
	UpdatedAt:            "competition_config.updated_at",
	ImportID:             "competition_config.import_id",
	Name:                 "competition_config.name",
	Filter:               "competition_config.filter",
	Enabled:              "competition_config.enabled",
	RelatedCompetitionID: "competition_config.related_competition_id",
	SportID:              "competition_config.sport_id",
}

// Generated where

var CompetitionConfigWhere = struct {
	ID                   whereHelperstring
	CreatedAt            whereHelpertime_Time
	UpdatedAt            whereHelpertime_Time
	ImportID             whereHelpernull_String
	Name                 whereHelperstring
	Filter               whereHelperstring
	Enabled              whereHelperbool
	RelatedCompetitionID whereHelpernull_String
	SportID              whereHelpernull_String
}{
	ID:                   whereHelperstring{field: "\"competition_config\".\"id\""},
	CreatedAt:            whereHelpertime_Time{field: "\"competition_config\".\"created_at\""},
	UpdatedAt:            whereHelpertime_Time{field: "\"competition_config\".\"updated_at\""},
	ImportID:             whereHelpernull_String{field: "\"competition_config\".\"import_id\""},
	Name:                 whereHelperstring{field: "\"competition_config\".\"name\""},
	Filter:               whereHelperstring{field: "\"competition_config\".\"filter\""},
	Enabled:              whereHelperbool{field: "\"competition_config\".\"enabled\""},
	RelatedCompetitionID: whereHelpernull_String{field: "\"competition_config\".\"related_competition_id\""},
	SportID:              whereHelpernull_String{field: "\"competition_config\".\"sport_id\""},
}

// CompetitionConfigRels is where relationship names are stored.
var CompetitionConfigRels = struct {
	RelatedCompetition string
	Sport              string
	ConfigCompetitions string
}{
	RelatedCompetition: "RelatedCompetition",
	Sport:              "Sport",
	ConfigCompetitions: "ConfigCompetitions",
}

// competitionConfigR is where relationships are stored.
type competitionConfigR struct {
	RelatedCompetition *Competition     `boil:"RelatedCompetition" json:"RelatedCompetition" toml:"RelatedCompetition" yaml:"RelatedCompetition"`
	Sport              *Sport           `boil:"Sport" json:"Sport" toml:"Sport" yaml:"Sport"`
	ConfigCompetitions CompetitionSlice `boil:"ConfigCompetitions" json:"ConfigCompetitions" toml:"ConfigCompetitions" yaml:"ConfigCompetitions"`
}

// NewStruct creates a new relationship struct
func (*competitionConfigR) NewStruct() *competitionConfigR {
	return &competitionConfigR{}
}

func (r *competitionConfigR) GetRelatedCompetition() *Competition {
	if r == nil {
		return nil
	}
	return r.RelatedCompetition
}

func (r *competitionConfigR) GetSport() *Sport {
	if r == nil {
		return nil
	}
	return r.Sport
}

func (r *competitionConfigR) GetConfigCompetitions() CompetitionSlice {
	if r == nil {
		return nil
	}
	return r.ConfigCompetitions
}

// competitionConfigL is where Load methods for each relationship are stored.
type competitionConfigL struct{}

var (
	competitionConfigAllColumns            = []string{"id", "created_at", "updated_at", "import_id", "name", "filter", "enabled", "related_competition_id", "sport_id"}
	competitionConfigColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "name", "filter", "enabled"}
	competitionConfigColumnsWithDefault    = []string{"import_id", "related_competition_id", "sport_id"}
	competitionConfigPrimaryKeyColumns     = []string{"id"}
	competitionConfigGeneratedColumns      = []string{}
)

type (
	// CompetitionConfigSlice is an alias for a slice of pointers to CompetitionConfig.
	// This should almost always be used instead of []CompetitionConfig.
	CompetitionConfigSlice []*CompetitionConfig

	competitionConfigQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	competitionConfigType                 = reflect.TypeOf(&CompetitionConfig{})
	competitionConfigMapping              = queries.MakeStructMapping(competitionConfigType)
	competitionConfigPrimaryKeyMapping, _ = queries.BindMapping(competitionConfigType, competitionConfigMapping, competitionConfigPrimaryKeyColumns)
	competitionConfigInsertCacheMut       sync.RWMutex
	competitionConfigInsertCache          = make(map[string]insertCache)
	competitionConfigUpdateCacheMut       sync.RWMutex
	competitionConfigUpdateCache          = make(map[string]updateCache)
	competitionConfigUpsertCacheMut       sync.RWMutex
	competitionConfigUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single competitionConfig record from the query.
func (q competitionConfigQuery) One(exec boil.Executor) (*CompetitionConfig, error) {
	o := &CompetitionConfig{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for competition_config")
	}

	return o, nil
}

// All returns all CompetitionConfig records from the query.
func (q competitionConfigQuery) All(exec boil.Executor) (CompetitionConfigSlice, error) {
	var o []*CompetitionConfig

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to CompetitionConfig slice")
	}

	return o, nil
}

// Count returns the count of all CompetitionConfig records in the query.
func (q competitionConfigQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count competition_config rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q competitionConfigQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if competition_config exists")
	}

	return count > 0, nil
}

// RelatedCompetition pointed to by the foreign key.
func (o *CompetitionConfig) RelatedCompetition(mods ...qm.QueryMod) competitionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RelatedCompetitionID),
	}

	queryMods = append(queryMods, mods...)

	return Competitions(queryMods...)
}

// Sport pointed to by the foreign key.
func (o *CompetitionConfig) Sport(mods ...qm.QueryMod) sportQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SportID),
	}

	queryMods = append(queryMods, mods...)

	return Sports(queryMods...)
}

// ConfigCompetitions retrieves all the competition's Competitions with an executor via config_id column.
func (o *CompetitionConfig) ConfigCompetitions(mods ...qm.QueryMod) competitionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"competitions\".\"config_id\"=?", o.ID),
	)

	return Competitions(queryMods...)
}

// LoadRelatedCompetition allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (competitionConfigL) LoadRelatedCompetition(e boil.Executor, singular bool, maybeCompetitionConfig interface{}, mods queries.Applicator) error {
	var slice []*CompetitionConfig
	var object *CompetitionConfig

	if singular {
		var ok bool
		object, ok = maybeCompetitionConfig.(*CompetitionConfig)
		if !ok {
			object = new(CompetitionConfig)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompetitionConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompetitionConfig))
			}
		}
	} else {
		s, ok := maybeCompetitionConfig.(*[]*CompetitionConfig)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompetitionConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompetitionConfig))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &competitionConfigR{}
		}
		if !queries.IsNil(object.RelatedCompetitionID) {
			args[object.RelatedCompetitionID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &competitionConfigR{}
			}

			if !queries.IsNil(obj.RelatedCompetitionID) {
				args[obj.RelatedCompetitionID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`competitions`),
		qm.WhereIn(`competitions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Competition")
	}

	var resultSlice []*Competition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Competition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for competitions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for competitions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RelatedCompetition = foreign
		if foreign.R == nil {
			foreign.R = &competitionR{}
		}
		foreign.R.RelatedCompetitionCompetitionConfigs = append(foreign.R.RelatedCompetitionCompetitionConfigs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RelatedCompetitionID, foreign.ID) {
				local.R.RelatedCompetition = foreign
				if foreign.R == nil {
					foreign.R = &competitionR{}
				}
				foreign.R.RelatedCompetitionCompetitionConfigs = append(foreign.R.RelatedCompetitionCompetitionConfigs, local)
				break
			}
		}
	}

	return nil
}

// LoadSport allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (competitionConfigL) LoadSport(e boil.Executor, singular bool, maybeCompetitionConfig interface{}, mods queries.Applicator) error {
	var slice []*CompetitionConfig
	var object *CompetitionConfig

	if singular {
		var ok bool
		object, ok = maybeCompetitionConfig.(*CompetitionConfig)
		if !ok {
			object = new(CompetitionConfig)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompetitionConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompetitionConfig))
			}
		}
	} else {
		s, ok := maybeCompetitionConfig.(*[]*CompetitionConfig)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompetitionConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompetitionConfig))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &competitionConfigR{}
		}
		if !queries.IsNil(object.SportID) {
			args[object.SportID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &competitionConfigR{}
			}

			if !queries.IsNil(obj.SportID) {
				args[obj.SportID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sports`),
		qm.WhereIn(`sports.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Sport")
	}

	var resultSlice []*Sport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Sport")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sports")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sports")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Sport = foreign
		if foreign.R == nil {
			foreign.R = &sportR{}
		}
		foreign.R.CompetitionConfigs = append(foreign.R.CompetitionConfigs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SportID, foreign.ID) {
				local.R.Sport = foreign
				if foreign.R == nil {
					foreign.R = &sportR{}
				}
				foreign.R.CompetitionConfigs = append(foreign.R.CompetitionConfigs, local)
				break
			}
		}
	}

	return nil
}

// LoadConfigCompetitions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (competitionConfigL) LoadConfigCompetitions(e boil.Executor, singular bool, maybeCompetitionConfig interface{}, mods queries.Applicator) error {
	var slice []*CompetitionConfig
	var object *CompetitionConfig

	if singular {
		var ok bool
		object, ok = maybeCompetitionConfig.(*CompetitionConfig)
		if !ok {
			object = new(CompetitionConfig)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompetitionConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompetitionConfig))
			}
		}
	} else {
		s, ok := maybeCompetitionConfig.(*[]*CompetitionConfig)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompetitionConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompetitionConfig))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &competitionConfigR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &competitionConfigR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`competitions`),
		qm.WhereIn(`competitions.config_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load competitions")
	}

	var resultSlice []*Competition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice competitions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on competitions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for competitions")
	}

	if singular {
		object.R.ConfigCompetitions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &competitionR{}
			}
			foreign.R.Config = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ConfigID) {
				local.R.ConfigCompetitions = append(local.R.ConfigCompetitions, foreign)
				if foreign.R == nil {
					foreign.R = &competitionR{}
				}
				foreign.R.Config = local
				break
			}
		}
	}

	return nil
}

// SetRelatedCompetition of the competitionConfig to the related item.
// Sets o.R.RelatedCompetition to related.
// Adds o to related.R.RelatedCompetitionCompetitionConfigs.
func (o *CompetitionConfig) SetRelatedCompetition(exec boil.Executor, insert bool, related *Competition) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"competition_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"related_competition_id"}),
		strmangle.WhereClause("\"", "\"", 2, competitionConfigPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RelatedCompetitionID, related.ID)
	if o.R == nil {
		o.R = &competitionConfigR{
			RelatedCompetition: related,
		}
	} else {
		o.R.RelatedCompetition = related
	}

	if related.R == nil {
		related.R = &competitionR{
			RelatedCompetitionCompetitionConfigs: CompetitionConfigSlice{o},
		}
	} else {
		related.R.RelatedCompetitionCompetitionConfigs = append(related.R.RelatedCompetitionCompetitionConfigs, o)
	}

	return nil
}

// RemoveRelatedCompetition relationship.
// Sets o.R.RelatedCompetition to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CompetitionConfig) RemoveRelatedCompetition(exec boil.Executor, related *Competition) error {
	var err error

	queries.SetScanner(&o.RelatedCompetitionID, nil)
	if _, err = o.Update(exec, boil.Whitelist("related_competition_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.RelatedCompetition = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RelatedCompetitionCompetitionConfigs {
		if queries.Equal(o.RelatedCompetitionID, ri.RelatedCompetitionID) {
			continue
		}

		ln := len(related.R.RelatedCompetitionCompetitionConfigs)
		if ln > 1 && i < ln-1 {
			related.R.RelatedCompetitionCompetitionConfigs[i] = related.R.RelatedCompetitionCompetitionConfigs[ln-1]
		}
		related.R.RelatedCompetitionCompetitionConfigs = related.R.RelatedCompetitionCompetitionConfigs[:ln-1]
		break
	}
	return nil
}

// SetSport of the competitionConfig to the related item.
// Sets o.R.Sport to related.
// Adds o to related.R.CompetitionConfigs.
func (o *CompetitionConfig) SetSport(exec boil.Executor, insert bool, related *Sport) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"competition_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sport_id"}),
		strmangle.WhereClause("\"", "\"", 2, competitionConfigPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SportID, related.ID)
	if o.R == nil {
		o.R = &competitionConfigR{
			Sport: related,
		}
	} else {
		o.R.Sport = related
	}

	if related.R == nil {
		related.R = &sportR{
			CompetitionConfigs: CompetitionConfigSlice{o},
		}
	} else {
		related.R.CompetitionConfigs = append(related.R.CompetitionConfigs, o)
	}

	return nil
}

// RemoveSport relationship.
// Sets o.R.Sport to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CompetitionConfig) RemoveSport(exec boil.Executor, related *Sport) error {
	var err error

	queries.SetScanner(&o.SportID, nil)
	if _, err = o.Update(exec, boil.Whitelist("sport_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Sport = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CompetitionConfigs {
		if queries.Equal(o.SportID, ri.SportID) {
			continue
		}

		ln := len(related.R.CompetitionConfigs)
		if ln > 1 && i < ln-1 {
			related.R.CompetitionConfigs[i] = related.R.CompetitionConfigs[ln-1]
		}
		related.R.CompetitionConfigs = related.R.CompetitionConfigs[:ln-1]
		break
	}
	return nil
}

// AddConfigCompetitions adds the given related objects to the existing relationships
// of the competition_config, optionally inserting them as new records.
// Appends related to o.R.ConfigCompetitions.
// Sets related.R.Config appropriately.
func (o *CompetitionConfig) AddConfigCompetitions(exec boil.Executor, insert bool, related ...*Competition) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ConfigID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"competitions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"config_id"}),
				strmangle.WhereClause("\"", "\"", 2, competitionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ConfigID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &competitionConfigR{
			ConfigCompetitions: related,
		}
	} else {
		o.R.ConfigCompetitions = append(o.R.ConfigCompetitions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &competitionR{
				Config: o,
			}
		} else {
			rel.R.Config = o
		}
	}
	return nil
}

// SetConfigCompetitions removes all previously related items of the
// competition_config replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Config's ConfigCompetitions accordingly.
// Replaces o.R.ConfigCompetitions with related.
// Sets related.R.Config's ConfigCompetitions accordingly.
func (o *CompetitionConfig) SetConfigCompetitions(exec boil.Executor, insert bool, related ...*Competition) error {
	query := "update \"competitions\" set \"config_id\" = null where \"config_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ConfigCompetitions {
			queries.SetScanner(&rel.ConfigID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Config = nil
		}
		o.R.ConfigCompetitions = nil
	}

	return o.AddConfigCompetitions(exec, insert, related...)
}

// RemoveConfigCompetitions relationships from objects passed in.
// Removes related items from R.ConfigCompetitions (uses pointer comparison, removal does not keep order)
// Sets related.R.Config.
func (o *CompetitionConfig) RemoveConfigCompetitions(exec boil.Executor, related ...*Competition) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ConfigID, nil)
		if rel.R != nil {
			rel.R.Config = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("config_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ConfigCompetitions {
			if rel != ri {
				continue
			}

			ln := len(o.R.ConfigCompetitions)
			if ln > 1 && i < ln-1 {
				o.R.ConfigCompetitions[i] = o.R.ConfigCompetitions[ln-1]
			}
			o.R.ConfigCompetitions = o.R.ConfigCompetitions[:ln-1]
			break
		}
	}

	return nil
}

// CompetitionConfigs retrieves all the records using an executor.
func CompetitionConfigs(mods ...qm.QueryMod) competitionConfigQuery {
	mods = append(mods, qm.From("\"competition_config\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"competition_config\".*"})
	}

	return competitionConfigQuery{q}
}

// FindCompetitionConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCompetitionConfig(exec boil.Executor, iD string, selectCols ...string) (*CompetitionConfig, error) {
	competitionConfigObj := &CompetitionConfig{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"competition_config\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, competitionConfigObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from competition_config")
	}

	return competitionConfigObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CompetitionConfig) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no competition_config provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(competitionConfigColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	competitionConfigInsertCacheMut.RLock()
	cache, cached := competitionConfigInsertCache[key]
	competitionConfigInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			competitionConfigAllColumns,
			competitionConfigColumnsWithDefault,
			competitionConfigColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(competitionConfigType, competitionConfigMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(competitionConfigType, competitionConfigMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"competition_config\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"competition_config\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into competition_config")
	}

	if !cached {
		competitionConfigInsertCacheMut.Lock()
		competitionConfigInsertCache[key] = cache
		competitionConfigInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the CompetitionConfig.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CompetitionConfig) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	competitionConfigUpdateCacheMut.RLock()
	cache, cached := competitionConfigUpdateCache[key]
	competitionConfigUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			competitionConfigAllColumns,
			competitionConfigPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update competition_config, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"competition_config\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, competitionConfigPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(competitionConfigType, competitionConfigMapping, append(wl, competitionConfigPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update competition_config row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for competition_config")
	}

	if !cached {
		competitionConfigUpdateCacheMut.Lock()
		competitionConfigUpdateCache[key] = cache
		competitionConfigUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q competitionConfigQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for competition_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for competition_config")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CompetitionConfigSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), competitionConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"competition_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, competitionConfigPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in competitionConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all competitionConfig")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CompetitionConfig) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no competition_config provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(competitionConfigColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	competitionConfigUpsertCacheMut.RLock()
	cache, cached := competitionConfigUpsertCache[key]
	competitionConfigUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			competitionConfigAllColumns,
			competitionConfigColumnsWithDefault,
			competitionConfigColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			competitionConfigAllColumns,
			competitionConfigPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert competition_config, could not build update column list")
		}

		ret := strmangle.SetComplement(competitionConfigAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(competitionConfigPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert competition_config, could not build conflict column list")
			}

			conflict = make([]string, len(competitionConfigPrimaryKeyColumns))
			copy(conflict, competitionConfigPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"competition_config\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(competitionConfigType, competitionConfigMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(competitionConfigType, competitionConfigMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert competition_config")
	}

	if !cached {
		competitionConfigUpsertCacheMut.Lock()
		competitionConfigUpsertCache[key] = cache
		competitionConfigUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single CompetitionConfig record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CompetitionConfig) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no CompetitionConfig provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), competitionConfigPrimaryKeyMapping)
	sql := "DELETE FROM \"competition_config\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from competition_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for competition_config")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q competitionConfigQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no competitionConfigQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from competition_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for competition_config")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CompetitionConfigSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), competitionConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"competition_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, competitionConfigPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from competitionConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for competition_config")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CompetitionConfig) Reload(exec boil.Executor) error {
	ret, err := FindCompetitionConfig(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CompetitionConfigSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CompetitionConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), competitionConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"competition_config\".* FROM \"competition_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, competitionConfigPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in CompetitionConfigSlice")
	}

	*o = slice

	return nil
}

// CompetitionConfigExists checks if the CompetitionConfig row exists.
func CompetitionConfigExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"competition_config\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if competition_config exists")
	}

	return exists, nil
}

// Exists checks if the CompetitionConfig row exists.
func (o *CompetitionConfig) Exists(exec boil.Executor) (bool, error) {
	return CompetitionConfigExists(exec, o.ID)
}
