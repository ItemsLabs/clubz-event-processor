// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOptaFeeds(t *testing.T) {
	t.Parallel()

	query := OptaFeeds()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOptaFeedsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeed{}
	if err = randomize.Struct(seed, o, optaFeedDBTypes, true, optaFeedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OptaFeeds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOptaFeedsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeed{}
	if err = randomize.Struct(seed, o, optaFeedDBTypes, true, optaFeedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OptaFeeds().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OptaFeeds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOptaFeedsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeed{}
	if err = randomize.Struct(seed, o, optaFeedDBTypes, true, optaFeedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OptaFeedSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OptaFeeds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOptaFeedsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeed{}
	if err = randomize.Struct(seed, o, optaFeedDBTypes, true, optaFeedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OptaFeedExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OptaFeed exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OptaFeedExists to return true, but got false.")
	}
}

func testOptaFeedsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeed{}
	if err = randomize.Struct(seed, o, optaFeedDBTypes, true, optaFeedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	optaFeedFound, err := FindOptaFeed(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if optaFeedFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOptaFeedsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeed{}
	if err = randomize.Struct(seed, o, optaFeedDBTypes, true, optaFeedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OptaFeeds().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testOptaFeedsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeed{}
	if err = randomize.Struct(seed, o, optaFeedDBTypes, true, optaFeedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OptaFeeds().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOptaFeedsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	optaFeedOne := &OptaFeed{}
	optaFeedTwo := &OptaFeed{}
	if err = randomize.Struct(seed, optaFeedOne, optaFeedDBTypes, false, optaFeedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}
	if err = randomize.Struct(seed, optaFeedTwo, optaFeedDBTypes, false, optaFeedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = optaFeedOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = optaFeedTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OptaFeeds().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOptaFeedsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	optaFeedOne := &OptaFeed{}
	optaFeedTwo := &OptaFeed{}
	if err = randomize.Struct(seed, optaFeedOne, optaFeedDBTypes, false, optaFeedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}
	if err = randomize.Struct(seed, optaFeedTwo, optaFeedDBTypes, false, optaFeedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = optaFeedOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = optaFeedTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OptaFeeds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testOptaFeedsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeed{}
	if err = randomize.Struct(seed, o, optaFeedDBTypes, true, optaFeedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OptaFeeds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOptaFeedsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeed{}
	if err = randomize.Struct(seed, o, optaFeedDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(optaFeedColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OptaFeeds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOptaFeedToOneMatchUsingMatch(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local OptaFeed
	var foreign Match

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, optaFeedDBTypes, true, optaFeedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.MatchID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Match().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OptaFeedSlice{&local}
	if err = local.L.LoadMatch(tx, false, (*[]*OptaFeed)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Match == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Match = nil
	if err = local.L.LoadMatch(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Match == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testOptaFeedToOneSetOpMatchUsingMatch(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a OptaFeed
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, optaFeedDBTypes, false, strmangle.SetComplement(optaFeedPrimaryKeyColumns, optaFeedColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Match{&b, &c} {
		err = a.SetMatch(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Match != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OptaFeeds[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.MatchID, x.ID) {
			t.Error("foreign key was wrong value", a.MatchID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MatchID))
		reflect.Indirect(reflect.ValueOf(&a.MatchID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.MatchID, x.ID) {
			t.Error("foreign key was wrong value", a.MatchID, x.ID)
		}
	}
}

func testOptaFeedToOneRemoveOpMatchUsingMatch(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a OptaFeed
	var b Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, optaFeedDBTypes, false, strmangle.SetComplement(optaFeedPrimaryKeyColumns, optaFeedColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetMatch(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveMatch(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Match().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Match != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.MatchID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OptaFeeds) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOptaFeedsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeed{}
	if err = randomize.Struct(seed, o, optaFeedDBTypes, true, optaFeedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testOptaFeedsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeed{}
	if err = randomize.Struct(seed, o, optaFeedDBTypes, true, optaFeedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OptaFeedSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testOptaFeedsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeed{}
	if err = randomize.Struct(seed, o, optaFeedDBTypes, true, optaFeedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OptaFeeds().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	optaFeedDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `ProcessingStarted`: `timestamp with time zone`, `ProcessingEnded`: `timestamp with time zone`, `FeedObjectID`: `character varying`, `FeedHash`: `text`, `FeedType`: `character varying`, `Status`: `integer`, `Headers`: `text`, `MatchID`: `uuid`}
	_               = bytes.MinRead
)

func testOptaFeedsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(optaFeedPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(optaFeedAllColumns) == len(optaFeedPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeed{}
	if err = randomize.Struct(seed, o, optaFeedDBTypes, true, optaFeedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OptaFeeds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, optaFeedDBTypes, true, optaFeedPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOptaFeedsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(optaFeedAllColumns) == len(optaFeedPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OptaFeed{}
	if err = randomize.Struct(seed, o, optaFeedDBTypes, true, optaFeedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OptaFeeds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, optaFeedDBTypes, true, optaFeedPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(optaFeedAllColumns, optaFeedPrimaryKeyColumns) {
		fields = optaFeedAllColumns
	} else {
		fields = strmangle.SetComplement(
			optaFeedAllColumns,
			optaFeedPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OptaFeedSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOptaFeedsUpsert(t *testing.T) {
	t.Parallel()

	if len(optaFeedAllColumns) == len(optaFeedPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OptaFeed{}
	if err = randomize.Struct(seed, &o, optaFeedDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OptaFeed: %s", err)
	}

	count, err := OptaFeeds().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, optaFeedDBTypes, false, optaFeedPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OptaFeed struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OptaFeed: %s", err)
	}

	count, err = OptaFeeds().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
