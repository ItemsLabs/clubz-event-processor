// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Frame is an object representing the database table.
type Frame struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	Image       string    `boil:"image" json:"image" toml:"image" yaml:"image"`
	Points      int       `boil:"points" json:"points" toml:"points" yaml:"points"`
	Type        string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	Status      string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *frameR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L frameL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FrameColumns = struct {
	ID          string
	Name        string
	Description string
	Image       string
	Points      string
	Type        string
	Status      string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	Name:        "name",
	Description: "description",
	Image:       "image",
	Points:      "points",
	Type:        "type",
	Status:      "status",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var FrameTableColumns = struct {
	ID          string
	Name        string
	Description string
	Image       string
	Points      string
	Type        string
	Status      string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "frames.id",
	Name:        "frames.name",
	Description: "frames.description",
	Image:       "frames.image",
	Points:      "frames.points",
	Type:        "frames.type",
	Status:      "frames.status",
	CreatedAt:   "frames.created_at",
	UpdatedAt:   "frames.updated_at",
}

// Generated where

var FrameWhere = struct {
	ID          whereHelperint
	Name        whereHelperstring
	Description whereHelperstring
	Image       whereHelperstring
	Points      whereHelperint
	Type        whereHelperstring
	Status      whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint{field: "\"frames\".\"id\""},
	Name:        whereHelperstring{field: "\"frames\".\"name\""},
	Description: whereHelperstring{field: "\"frames\".\"description\""},
	Image:       whereHelperstring{field: "\"frames\".\"image\""},
	Points:      whereHelperint{field: "\"frames\".\"points\""},
	Type:        whereHelperstring{field: "\"frames\".\"type\""},
	Status:      whereHelperstring{field: "\"frames\".\"status\""},
	CreatedAt:   whereHelpertime_Time{field: "\"frames\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"frames\".\"updated_at\""},
}

// FrameRels is where relationship names are stored.
var FrameRels = struct {
	UserFrames string
}{
	UserFrames: "UserFrames",
}

// frameR is where relationships are stored.
type frameR struct {
	UserFrames UserFrameSlice `boil:"UserFrames" json:"UserFrames" toml:"UserFrames" yaml:"UserFrames"`
}

// NewStruct creates a new relationship struct
func (*frameR) NewStruct() *frameR {
	return &frameR{}
}

func (r *frameR) GetUserFrames() UserFrameSlice {
	if r == nil {
		return nil
	}
	return r.UserFrames
}

// frameL is where Load methods for each relationship are stored.
type frameL struct{}

var (
	frameAllColumns            = []string{"id", "name", "description", "image", "points", "type", "status", "created_at", "updated_at"}
	frameColumnsWithoutDefault = []string{"name", "description", "image", "points", "type", "status", "created_at", "updated_at"}
	frameColumnsWithDefault    = []string{"id"}
	framePrimaryKeyColumns     = []string{"id"}
	frameGeneratedColumns      = []string{}
)

type (
	// FrameSlice is an alias for a slice of pointers to Frame.
	// This should almost always be used instead of []Frame.
	FrameSlice []*Frame

	frameQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	frameType                 = reflect.TypeOf(&Frame{})
	frameMapping              = queries.MakeStructMapping(frameType)
	framePrimaryKeyMapping, _ = queries.BindMapping(frameType, frameMapping, framePrimaryKeyColumns)
	frameInsertCacheMut       sync.RWMutex
	frameInsertCache          = make(map[string]insertCache)
	frameUpdateCacheMut       sync.RWMutex
	frameUpdateCache          = make(map[string]updateCache)
	frameUpsertCacheMut       sync.RWMutex
	frameUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single frame record from the query.
func (q frameQuery) One(exec boil.Executor) (*Frame, error) {
	o := &Frame{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for frames")
	}

	return o, nil
}

// All returns all Frame records from the query.
func (q frameQuery) All(exec boil.Executor) (FrameSlice, error) {
	var o []*Frame

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to Frame slice")
	}

	return o, nil
}

// Count returns the count of all Frame records in the query.
func (q frameQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count frames rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q frameQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if frames exists")
	}

	return count > 0, nil
}

// UserFrames retrieves all the user_frame's UserFrames with an executor.
func (o *Frame) UserFrames(mods ...qm.QueryMod) userFrameQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_frames\".\"frame_id\"=?", o.ID),
	)

	return UserFrames(queryMods...)
}

// LoadUserFrames allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (frameL) LoadUserFrames(e boil.Executor, singular bool, maybeFrame interface{}, mods queries.Applicator) error {
	var slice []*Frame
	var object *Frame

	if singular {
		var ok bool
		object, ok = maybeFrame.(*Frame)
		if !ok {
			object = new(Frame)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFrame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFrame))
			}
		}
	} else {
		s, ok := maybeFrame.(*[]*Frame)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFrame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFrame))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &frameR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &frameR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_frames`),
		qm.WhereIn(`user_frames.frame_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_frames")
	}

	var resultSlice []*UserFrame
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_frames")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_frames")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_frames")
	}

	if singular {
		object.R.UserFrames = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userFrameR{}
			}
			foreign.R.Frame = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FrameID {
				local.R.UserFrames = append(local.R.UserFrames, foreign)
				if foreign.R == nil {
					foreign.R = &userFrameR{}
				}
				foreign.R.Frame = local
				break
			}
		}
	}

	return nil
}

// AddUserFrames adds the given related objects to the existing relationships
// of the frame, optionally inserting them as new records.
// Appends related to o.R.UserFrames.
// Sets related.R.Frame appropriately.
func (o *Frame) AddUserFrames(exec boil.Executor, insert bool, related ...*UserFrame) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FrameID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_frames\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"frame_id"}),
				strmangle.WhereClause("\"", "\"", 2, userFramePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FrameID = o.ID
		}
	}

	if o.R == nil {
		o.R = &frameR{
			UserFrames: related,
		}
	} else {
		o.R.UserFrames = append(o.R.UserFrames, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userFrameR{
				Frame: o,
			}
		} else {
			rel.R.Frame = o
		}
	}
	return nil
}

// Frames retrieves all the records using an executor.
func Frames(mods ...qm.QueryMod) frameQuery {
	mods = append(mods, qm.From("\"frames\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"frames\".*"})
	}

	return frameQuery{q}
}

// FindFrame retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFrame(exec boil.Executor, iD int, selectCols ...string) (*Frame, error) {
	frameObj := &Frame{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"frames\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, frameObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from frames")
	}

	return frameObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Frame) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no frames provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(frameColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	frameInsertCacheMut.RLock()
	cache, cached := frameInsertCache[key]
	frameInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			frameAllColumns,
			frameColumnsWithDefault,
			frameColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(frameType, frameMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(frameType, frameMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"frames\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"frames\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into frames")
	}

	if !cached {
		frameInsertCacheMut.Lock()
		frameInsertCache[key] = cache
		frameInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Frame.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Frame) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	frameUpdateCacheMut.RLock()
	cache, cached := frameUpdateCache[key]
	frameUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			frameAllColumns,
			framePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update frames, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"frames\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, framePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(frameType, frameMapping, append(wl, framePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update frames row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for frames")
	}

	if !cached {
		frameUpdateCacheMut.Lock()
		frameUpdateCache[key] = cache
		frameUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q frameQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for frames")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for frames")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FrameSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), framePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"frames\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, framePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in frame slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all frame")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Frame) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no frames provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(frameColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	frameUpsertCacheMut.RLock()
	cache, cached := frameUpsertCache[key]
	frameUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			frameAllColumns,
			frameColumnsWithDefault,
			frameColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			frameAllColumns,
			framePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert frames, could not build update column list")
		}

		ret := strmangle.SetComplement(frameAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(framePrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert frames, could not build conflict column list")
			}

			conflict = make([]string, len(framePrimaryKeyColumns))
			copy(conflict, framePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"frames\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(frameType, frameMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(frameType, frameMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert frames")
	}

	if !cached {
		frameUpsertCacheMut.Lock()
		frameUpsertCache[key] = cache
		frameUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Frame record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Frame) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no Frame provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), framePrimaryKeyMapping)
	sql := "DELETE FROM \"frames\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from frames")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for frames")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q frameQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no frameQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from frames")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for frames")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FrameSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), framePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"frames\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, framePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from frame slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for frames")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Frame) Reload(exec boil.Executor) error {
	ret, err := FindFrame(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FrameSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FrameSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), framePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"frames\".* FROM \"frames\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, framePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in FrameSlice")
	}

	*o = slice

	return nil
}

// FrameExists checks if the Frame row exists.
func FrameExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"frames\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if frames exists")
	}

	return exists, nil
}

// Exists checks if the Frame row exists.
func (o *Frame) Exists(exec boil.Executor) (bool, error) {
	return FrameExists(exec, o.ID)
}
