// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Transaction is an object representing the database table.
type Transaction struct {
	ID             string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Amount         float64     `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Text           null.String `boil:"text" json:"text,omitempty" toml:"text" yaml:"text,omitempty"`
	UserID         string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	MatchID        null.String `boil:"match_id" json:"match_id,omitempty" toml:"match_id" yaml:"match_id,omitempty"`
	BlockchainUUID null.String `boil:"blockchain_uuid" json:"blockchain_uuid,omitempty" toml:"blockchain_uuid" yaml:"blockchain_uuid,omitempty"`
	ObjectType     string      `boil:"object_type" json:"object_type" toml:"object_type" yaml:"object_type"`
	OrderID        null.String `boil:"order_id" json:"order_id,omitempty" toml:"order_id" yaml:"order_id,omitempty"`
	Quantity       int64       `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	WeekID         null.String `boil:"week_id" json:"week_id,omitempty" toml:"week_id" yaml:"week_id,omitempty"`
	Delivered      bool        `boil:"delivered" json:"delivered" toml:"delivered" yaml:"delivered"`
	Sent           bool        `boil:"sent" json:"sent" toml:"sent" yaml:"sent"`

	R *transactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransactionColumns = struct {
	ID             string
	CreatedAt      string
	UpdatedAt      string
	Amount         string
	Text           string
	UserID         string
	MatchID        string
	BlockchainUUID string
	ObjectType     string
	OrderID        string
	Quantity       string
	WeekID         string
	Delivered      string
	Sent           string
}{
	ID:             "id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	Amount:         "amount",
	Text:           "text",
	UserID:         "user_id",
	MatchID:        "match_id",
	BlockchainUUID: "blockchain_uuid",
	ObjectType:     "object_type",
	OrderID:        "order_id",
	Quantity:       "quantity",
	WeekID:         "week_id",
	Delivered:      "delivered",
	Sent:           "sent",
}

var TransactionTableColumns = struct {
	ID             string
	CreatedAt      string
	UpdatedAt      string
	Amount         string
	Text           string
	UserID         string
	MatchID        string
	BlockchainUUID string
	ObjectType     string
	OrderID        string
	Quantity       string
	WeekID         string
	Delivered      string
	Sent           string
}{
	ID:             "transactions.id",
	CreatedAt:      "transactions.created_at",
	UpdatedAt:      "transactions.updated_at",
	Amount:         "transactions.amount",
	Text:           "transactions.text",
	UserID:         "transactions.user_id",
	MatchID:        "transactions.match_id",
	BlockchainUUID: "transactions.blockchain_uuid",
	ObjectType:     "transactions.object_type",
	OrderID:        "transactions.order_id",
	Quantity:       "transactions.quantity",
	WeekID:         "transactions.week_id",
	Delivered:      "transactions.delivered",
	Sent:           "transactions.sent",
}

// Generated where

var TransactionWhere = struct {
	ID             whereHelperstring
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	Amount         whereHelperfloat64
	Text           whereHelpernull_String
	UserID         whereHelperstring
	MatchID        whereHelpernull_String
	BlockchainUUID whereHelpernull_String
	ObjectType     whereHelperstring
	OrderID        whereHelpernull_String
	Quantity       whereHelperint64
	WeekID         whereHelpernull_String
	Delivered      whereHelperbool
	Sent           whereHelperbool
}{
	ID:             whereHelperstring{field: "\"transactions\".\"id\""},
	CreatedAt:      whereHelpertime_Time{field: "\"transactions\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"transactions\".\"updated_at\""},
	Amount:         whereHelperfloat64{field: "\"transactions\".\"amount\""},
	Text:           whereHelpernull_String{field: "\"transactions\".\"text\""},
	UserID:         whereHelperstring{field: "\"transactions\".\"user_id\""},
	MatchID:        whereHelpernull_String{field: "\"transactions\".\"match_id\""},
	BlockchainUUID: whereHelpernull_String{field: "\"transactions\".\"blockchain_uuid\""},
	ObjectType:     whereHelperstring{field: "\"transactions\".\"object_type\""},
	OrderID:        whereHelpernull_String{field: "\"transactions\".\"order_id\""},
	Quantity:       whereHelperint64{field: "\"transactions\".\"quantity\""},
	WeekID:         whereHelpernull_String{field: "\"transactions\".\"week_id\""},
	Delivered:      whereHelperbool{field: "\"transactions\".\"delivered\""},
	Sent:           whereHelperbool{field: "\"transactions\".\"sent\""},
}

// TransactionRels is where relationship names are stored.
var TransactionRels = struct {
	Match                    string
	Order                    string
	User                     string
	Week                     string
	MatchLeaderboards        string
	StoreProductTransactions string
}{
	Match:                    "Match",
	Order:                    "Order",
	User:                     "User",
	Week:                     "Week",
	MatchLeaderboards:        "MatchLeaderboards",
	StoreProductTransactions: "StoreProductTransactions",
}

// transactionR is where relationships are stored.
type transactionR struct {
	Match                    *Match                       `boil:"Match" json:"Match" toml:"Match" yaml:"Match"`
	Order                    *Order                       `boil:"Order" json:"Order" toml:"Order" yaml:"Order"`
	User                     *User                        `boil:"User" json:"User" toml:"User" yaml:"User"`
	Week                     *GameWeek                    `boil:"Week" json:"Week" toml:"Week" yaml:"Week"`
	MatchLeaderboards        MatchLeaderboardSlice        `boil:"MatchLeaderboards" json:"MatchLeaderboards" toml:"MatchLeaderboards" yaml:"MatchLeaderboards"`
	StoreProductTransactions StoreProductTransactionSlice `boil:"StoreProductTransactions" json:"StoreProductTransactions" toml:"StoreProductTransactions" yaml:"StoreProductTransactions"`
}

// NewStruct creates a new relationship struct
func (*transactionR) NewStruct() *transactionR {
	return &transactionR{}
}

func (r *transactionR) GetMatch() *Match {
	if r == nil {
		return nil
	}
	return r.Match
}

func (r *transactionR) GetOrder() *Order {
	if r == nil {
		return nil
	}
	return r.Order
}

func (r *transactionR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *transactionR) GetWeek() *GameWeek {
	if r == nil {
		return nil
	}
	return r.Week
}

func (r *transactionR) GetMatchLeaderboards() MatchLeaderboardSlice {
	if r == nil {
		return nil
	}
	return r.MatchLeaderboards
}

func (r *transactionR) GetStoreProductTransactions() StoreProductTransactionSlice {
	if r == nil {
		return nil
	}
	return r.StoreProductTransactions
}

// transactionL is where Load methods for each relationship are stored.
type transactionL struct{}

var (
	transactionAllColumns            = []string{"id", "created_at", "updated_at", "amount", "text", "user_id", "match_id", "blockchain_uuid", "object_type", "order_id", "quantity", "week_id", "delivered", "sent"}
	transactionColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "amount", "user_id", "object_type", "quantity", "delivered", "sent"}
	transactionColumnsWithDefault    = []string{"text", "match_id", "blockchain_uuid", "order_id", "week_id"}
	transactionPrimaryKeyColumns     = []string{"id"}
	transactionGeneratedColumns      = []string{}
)

type (
	// TransactionSlice is an alias for a slice of pointers to Transaction.
	// This should almost always be used instead of []Transaction.
	TransactionSlice []*Transaction

	transactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transactionType                 = reflect.TypeOf(&Transaction{})
	transactionMapping              = queries.MakeStructMapping(transactionType)
	transactionPrimaryKeyMapping, _ = queries.BindMapping(transactionType, transactionMapping, transactionPrimaryKeyColumns)
	transactionInsertCacheMut       sync.RWMutex
	transactionInsertCache          = make(map[string]insertCache)
	transactionUpdateCacheMut       sync.RWMutex
	transactionUpdateCache          = make(map[string]updateCache)
	transactionUpsertCacheMut       sync.RWMutex
	transactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single transaction record from the query.
func (q transactionQuery) One(exec boil.Executor) (*Transaction, error) {
	o := &Transaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for transactions")
	}

	return o, nil
}

// All returns all Transaction records from the query.
func (q transactionQuery) All(exec boil.Executor) (TransactionSlice, error) {
	var o []*Transaction

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to Transaction slice")
	}

	return o, nil
}

// Count returns the count of all Transaction records in the query.
func (q transactionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count transactions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q transactionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if transactions exists")
	}

	return count > 0, nil
}

// Match pointed to by the foreign key.
func (o *Transaction) Match(mods ...qm.QueryMod) matchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MatchID),
	}

	queryMods = append(queryMods, mods...)

	return Matches(queryMods...)
}

// Order pointed to by the foreign key.
func (o *Transaction) Order(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return Orders(queryMods...)
}

// User pointed to by the foreign key.
func (o *Transaction) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Week pointed to by the foreign key.
func (o *Transaction) Week(mods ...qm.QueryMod) gameWeekQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WeekID),
	}

	queryMods = append(queryMods, mods...)

	return GameWeeks(queryMods...)
}

// MatchLeaderboards retrieves all the match_leaderboard's MatchLeaderboards with an executor.
func (o *Transaction) MatchLeaderboards(mods ...qm.QueryMod) matchLeaderboardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"match_leaderboard\".\"transaction_id\"=?", o.ID),
	)

	return MatchLeaderboards(queryMods...)
}

// StoreProductTransactions retrieves all the store_product_transaction's StoreProductTransactions with an executor.
func (o *Transaction) StoreProductTransactions(mods ...qm.QueryMod) storeProductTransactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"store_product_transactions\".\"transaction_id\"=?", o.ID),
	)

	return StoreProductTransactions(queryMods...)
}

// LoadMatch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionL) LoadMatch(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		var ok bool
		object, ok = maybeTransaction.(*Transaction)
		if !ok {
			object = new(Transaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransaction))
			}
		}
	} else {
		s, ok := maybeTransaction.(*[]*Transaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransaction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		if !queries.IsNil(object.MatchID) {
			args[object.MatchID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			if !queries.IsNil(obj.MatchID) {
				args[obj.MatchID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Match")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Match")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Match = foreign
		if foreign.R == nil {
			foreign.R = &matchR{}
		}
		foreign.R.Transactions = append(foreign.R.Transactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MatchID, foreign.ID) {
				local.R.Match = foreign
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.Transactions = append(foreign.R.Transactions, local)
				break
			}
		}
	}

	return nil
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionL) LoadOrder(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		var ok bool
		object, ok = maybeTransaction.(*Transaction)
		if !ok {
			object = new(Transaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransaction))
			}
		}
	} else {
		s, ok := maybeTransaction.(*[]*Transaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransaction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		if !queries.IsNil(object.OrderID) {
			args[object.OrderID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			if !queries.IsNil(obj.OrderID) {
				args[obj.OrderID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.Transactions = append(foreign.R.Transactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.ID) {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.Transactions = append(foreign.R.Transactions, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionL) LoadUser(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		var ok bool
		object, ok = maybeTransaction.(*Transaction)
		if !ok {
			object = new(Transaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransaction))
			}
		}
	} else {
		s, ok := maybeTransaction.(*[]*Transaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransaction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Transactions = append(foreign.R.Transactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Transactions = append(foreign.R.Transactions, local)
				break
			}
		}
	}

	return nil
}

// LoadWeek allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionL) LoadWeek(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		var ok bool
		object, ok = maybeTransaction.(*Transaction)
		if !ok {
			object = new(Transaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransaction))
			}
		}
	} else {
		s, ok := maybeTransaction.(*[]*Transaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransaction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		if !queries.IsNil(object.WeekID) {
			args[object.WeekID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			if !queries.IsNil(obj.WeekID) {
				args[obj.WeekID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`game_weeks`),
		qm.WhereIn(`game_weeks.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GameWeek")
	}

	var resultSlice []*GameWeek
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GameWeek")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for game_weeks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_weeks")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Week = foreign
		if foreign.R == nil {
			foreign.R = &gameWeekR{}
		}
		foreign.R.WeekTransactions = append(foreign.R.WeekTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.WeekID, foreign.ID) {
				local.R.Week = foreign
				if foreign.R == nil {
					foreign.R = &gameWeekR{}
				}
				foreign.R.WeekTransactions = append(foreign.R.WeekTransactions, local)
				break
			}
		}
	}

	return nil
}

// LoadMatchLeaderboards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (transactionL) LoadMatchLeaderboards(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		var ok bool
		object, ok = maybeTransaction.(*Transaction)
		if !ok {
			object = new(Transaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransaction))
			}
		}
	} else {
		s, ok := maybeTransaction.(*[]*Transaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransaction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`match_leaderboard`),
		qm.WhereIn(`match_leaderboard.transaction_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load match_leaderboard")
	}

	var resultSlice []*MatchLeaderboard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice match_leaderboard")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on match_leaderboard")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for match_leaderboard")
	}

	if singular {
		object.R.MatchLeaderboards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchLeaderboardR{}
			}
			foreign.R.Transaction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TransactionID) {
				local.R.MatchLeaderboards = append(local.R.MatchLeaderboards, foreign)
				if foreign.R == nil {
					foreign.R = &matchLeaderboardR{}
				}
				foreign.R.Transaction = local
				break
			}
		}
	}

	return nil
}

// LoadStoreProductTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (transactionL) LoadStoreProductTransactions(e boil.Executor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		var ok bool
		object, ok = maybeTransaction.(*Transaction)
		if !ok {
			object = new(Transaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransaction))
			}
		}
	} else {
		s, ok := maybeTransaction.(*[]*Transaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransaction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`store_product_transactions`),
		qm.WhereIn(`store_product_transactions.transaction_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load store_product_transactions")
	}

	var resultSlice []*StoreProductTransaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice store_product_transactions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on store_product_transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for store_product_transactions")
	}

	if singular {
		object.R.StoreProductTransactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &storeProductTransactionR{}
			}
			foreign.R.Transaction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TransactionID) {
				local.R.StoreProductTransactions = append(local.R.StoreProductTransactions, foreign)
				if foreign.R == nil {
					foreign.R = &storeProductTransactionR{}
				}
				foreign.R.Transaction = local
				break
			}
		}
	}

	return nil
}

// SetMatch of the transaction to the related item.
// Sets o.R.Match to related.
// Adds o to related.R.Transactions.
func (o *Transaction) SetMatch(exec boil.Executor, insert bool, related *Match) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"match_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MatchID, related.ID)
	if o.R == nil {
		o.R = &transactionR{
			Match: related,
		}
	} else {
		o.R.Match = related
	}

	if related.R == nil {
		related.R = &matchR{
			Transactions: TransactionSlice{o},
		}
	} else {
		related.R.Transactions = append(related.R.Transactions, o)
	}

	return nil
}

// RemoveMatch relationship.
// Sets o.R.Match to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Transaction) RemoveMatch(exec boil.Executor, related *Match) error {
	var err error

	queries.SetScanner(&o.MatchID, nil)
	if _, err = o.Update(exec, boil.Whitelist("match_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Match = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Transactions {
		if queries.Equal(o.MatchID, ri.MatchID) {
			continue
		}

		ln := len(related.R.Transactions)
		if ln > 1 && i < ln-1 {
			related.R.Transactions[i] = related.R.Transactions[ln-1]
		}
		related.R.Transactions = related.R.Transactions[:ln-1]
		break
	}
	return nil
}

// SetOrder of the transaction to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.Transactions.
func (o *Transaction) SetOrder(exec boil.Executor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.ID)
	if o.R == nil {
		o.R = &transactionR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &orderR{
			Transactions: TransactionSlice{o},
		}
	} else {
		related.R.Transactions = append(related.R.Transactions, o)
	}

	return nil
}

// RemoveOrder relationship.
// Sets o.R.Order to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Transaction) RemoveOrder(exec boil.Executor, related *Order) error {
	var err error

	queries.SetScanner(&o.OrderID, nil)
	if _, err = o.Update(exec, boil.Whitelist("order_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Order = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Transactions {
		if queries.Equal(o.OrderID, ri.OrderID) {
			continue
		}

		ln := len(related.R.Transactions)
		if ln > 1 && i < ln-1 {
			related.R.Transactions[i] = related.R.Transactions[ln-1]
		}
		related.R.Transactions = related.R.Transactions[:ln-1]
		break
	}
	return nil
}

// SetUser of the transaction to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Transactions.
func (o *Transaction) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &transactionR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Transactions: TransactionSlice{o},
		}
	} else {
		related.R.Transactions = append(related.R.Transactions, o)
	}

	return nil
}

// SetWeek of the transaction to the related item.
// Sets o.R.Week to related.
// Adds o to related.R.WeekTransactions.
func (o *Transaction) SetWeek(exec boil.Executor, insert bool, related *GameWeek) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"week_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.WeekID, related.ID)
	if o.R == nil {
		o.R = &transactionR{
			Week: related,
		}
	} else {
		o.R.Week = related
	}

	if related.R == nil {
		related.R = &gameWeekR{
			WeekTransactions: TransactionSlice{o},
		}
	} else {
		related.R.WeekTransactions = append(related.R.WeekTransactions, o)
	}

	return nil
}

// RemoveWeek relationship.
// Sets o.R.Week to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Transaction) RemoveWeek(exec boil.Executor, related *GameWeek) error {
	var err error

	queries.SetScanner(&o.WeekID, nil)
	if _, err = o.Update(exec, boil.Whitelist("week_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Week = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.WeekTransactions {
		if queries.Equal(o.WeekID, ri.WeekID) {
			continue
		}

		ln := len(related.R.WeekTransactions)
		if ln > 1 && i < ln-1 {
			related.R.WeekTransactions[i] = related.R.WeekTransactions[ln-1]
		}
		related.R.WeekTransactions = related.R.WeekTransactions[:ln-1]
		break
	}
	return nil
}

// AddMatchLeaderboards adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.MatchLeaderboards.
// Sets related.R.Transaction appropriately.
func (o *Transaction) AddMatchLeaderboards(exec boil.Executor, insert bool, related ...*MatchLeaderboard) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TransactionID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"match_leaderboard\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"transaction_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchLeaderboardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TransactionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &transactionR{
			MatchLeaderboards: related,
		}
	} else {
		o.R.MatchLeaderboards = append(o.R.MatchLeaderboards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchLeaderboardR{
				Transaction: o,
			}
		} else {
			rel.R.Transaction = o
		}
	}
	return nil
}

// SetMatchLeaderboards removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Transaction's MatchLeaderboards accordingly.
// Replaces o.R.MatchLeaderboards with related.
// Sets related.R.Transaction's MatchLeaderboards accordingly.
func (o *Transaction) SetMatchLeaderboards(exec boil.Executor, insert bool, related ...*MatchLeaderboard) error {
	query := "update \"match_leaderboard\" set \"transaction_id\" = null where \"transaction_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.MatchLeaderboards {
			queries.SetScanner(&rel.TransactionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Transaction = nil
		}
		o.R.MatchLeaderboards = nil
	}

	return o.AddMatchLeaderboards(exec, insert, related...)
}

// RemoveMatchLeaderboards relationships from objects passed in.
// Removes related items from R.MatchLeaderboards (uses pointer comparison, removal does not keep order)
// Sets related.R.Transaction.
func (o *Transaction) RemoveMatchLeaderboards(exec boil.Executor, related ...*MatchLeaderboard) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TransactionID, nil)
		if rel.R != nil {
			rel.R.Transaction = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("transaction_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MatchLeaderboards {
			if rel != ri {
				continue
			}

			ln := len(o.R.MatchLeaderboards)
			if ln > 1 && i < ln-1 {
				o.R.MatchLeaderboards[i] = o.R.MatchLeaderboards[ln-1]
			}
			o.R.MatchLeaderboards = o.R.MatchLeaderboards[:ln-1]
			break
		}
	}

	return nil
}

// AddStoreProductTransactions adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.StoreProductTransactions.
// Sets related.R.Transaction appropriately.
func (o *Transaction) AddStoreProductTransactions(exec boil.Executor, insert bool, related ...*StoreProductTransaction) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TransactionID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"store_product_transactions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"transaction_id"}),
				strmangle.WhereClause("\"", "\"", 2, storeProductTransactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TransactionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &transactionR{
			StoreProductTransactions: related,
		}
	} else {
		o.R.StoreProductTransactions = append(o.R.StoreProductTransactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &storeProductTransactionR{
				Transaction: o,
			}
		} else {
			rel.R.Transaction = o
		}
	}
	return nil
}

// SetStoreProductTransactions removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Transaction's StoreProductTransactions accordingly.
// Replaces o.R.StoreProductTransactions with related.
// Sets related.R.Transaction's StoreProductTransactions accordingly.
func (o *Transaction) SetStoreProductTransactions(exec boil.Executor, insert bool, related ...*StoreProductTransaction) error {
	query := "update \"store_product_transactions\" set \"transaction_id\" = null where \"transaction_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.StoreProductTransactions {
			queries.SetScanner(&rel.TransactionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Transaction = nil
		}
		o.R.StoreProductTransactions = nil
	}

	return o.AddStoreProductTransactions(exec, insert, related...)
}

// RemoveStoreProductTransactions relationships from objects passed in.
// Removes related items from R.StoreProductTransactions (uses pointer comparison, removal does not keep order)
// Sets related.R.Transaction.
func (o *Transaction) RemoveStoreProductTransactions(exec boil.Executor, related ...*StoreProductTransaction) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TransactionID, nil)
		if rel.R != nil {
			rel.R.Transaction = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("transaction_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.StoreProductTransactions {
			if rel != ri {
				continue
			}

			ln := len(o.R.StoreProductTransactions)
			if ln > 1 && i < ln-1 {
				o.R.StoreProductTransactions[i] = o.R.StoreProductTransactions[ln-1]
			}
			o.R.StoreProductTransactions = o.R.StoreProductTransactions[:ln-1]
			break
		}
	}

	return nil
}

// Transactions retrieves all the records using an executor.
func Transactions(mods ...qm.QueryMod) transactionQuery {
	mods = append(mods, qm.From("\"transactions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"transactions\".*"})
	}

	return transactionQuery{q}
}

// FindTransaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransaction(exec boil.Executor, iD string, selectCols ...string) (*Transaction, error) {
	transactionObj := &Transaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"transactions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, transactionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from transactions")
	}

	return transactionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Transaction) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no transactions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transactionInsertCacheMut.RLock()
	cache, cached := transactionInsertCache[key]
	transactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transactionAllColumns,
			transactionColumnsWithDefault,
			transactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(transactionType, transactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transactionType, transactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"transactions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"transactions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into transactions")
	}

	if !cached {
		transactionInsertCacheMut.Lock()
		transactionInsertCache[key] = cache
		transactionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Transaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Transaction) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	transactionUpdateCacheMut.RLock()
	cache, cached := transactionUpdateCache[key]
	transactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transactionAllColumns,
			transactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update transactions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"transactions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, transactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transactionType, transactionMapping, append(wl, transactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update transactions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for transactions")
	}

	if !cached {
		transactionUpdateCacheMut.Lock()
		transactionUpdateCache[key] = cache
		transactionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q transactionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for transactions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransactionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, transactionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in transaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all transaction")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Transaction) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no transactions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(transactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transactionUpsertCacheMut.RLock()
	cache, cached := transactionUpsertCache[key]
	transactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			transactionAllColumns,
			transactionColumnsWithDefault,
			transactionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			transactionAllColumns,
			transactionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert transactions, could not build update column list")
		}

		ret := strmangle.SetComplement(transactionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(transactionPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert transactions, could not build conflict column list")
			}

			conflict = make([]string, len(transactionPrimaryKeyColumns))
			copy(conflict, transactionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"transactions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(transactionType, transactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transactionType, transactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert transactions")
	}

	if !cached {
		transactionUpsertCacheMut.Lock()
		transactionUpsertCache[key] = cache
		transactionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Transaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Transaction) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no Transaction provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transactionPrimaryKeyMapping)
	sql := "DELETE FROM \"transactions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for transactions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q transactionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no transactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for transactions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransactionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"transactions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from transaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for transactions")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Transaction) Reload(exec boil.Executor) error {
	ret, err := FindTransaction(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"transactions\".* FROM \"transactions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in TransactionSlice")
	}

	*o = slice

	return nil
}

// TransactionExists checks if the Transaction row exists.
func TransactionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"transactions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if transactions exists")
	}

	return exists, nil
}

// Exists checks if the Transaction row exists.
func (o *Transaction) Exists(exec boil.Executor) (bool, error) {
	return TransactionExists(exec, o.ID)
}
