// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserGameWeekHistory is an object representing the database table.
type UserGameWeekHistory struct {
	ID                   string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt            time.Time    `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt            time.Time    `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	WeekDivisionPosition int          `boil:"week_division_position" json:"week_division_position" toml:"week_division_position" yaml:"week_division_position"`
	WeekDivisionTier     null.Int     `boil:"week_division_tier" json:"week_division_tier,omitempty" toml:"week_division_tier" yaml:"week_division_tier,omitempty"`
	WeekPoints           int          `boil:"week_points" json:"week_points" toml:"week_points" yaml:"week_points"`
	WeekCoins            int          `boil:"week_coins" json:"week_coins" toml:"week_coins" yaml:"week_coins"`
	NewDivisionTier      null.Int     `boil:"new_division_tier" json:"new_division_tier,omitempty" toml:"new_division_tier" yaml:"new_division_tier,omitempty"`
	Status               string       `boil:"status" json:"status" toml:"status" yaml:"status"`
	GameWeekID           string       `boil:"game_week_id" json:"game_week_id" toml:"game_week_id" yaml:"game_week_id"`
	NewDivisionID        null.String  `boil:"new_division_id" json:"new_division_id,omitempty" toml:"new_division_id" yaml:"new_division_id,omitempty"`
	UserID               string       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	WeekDivisionID       null.String  `boil:"week_division_id" json:"week_division_id,omitempty" toml:"week_division_id" yaml:"week_division_id,omitempty"`
	WeekAverageRank      null.Float64 `boil:"week_average_rank" json:"week_average_rank,omitempty" toml:"week_average_rank" yaml:"week_average_rank,omitempty"`
	WeekMatchesPlayed    int          `boil:"week_matches_played" json:"week_matches_played" toml:"week_matches_played" yaml:"week_matches_played"`

	R *userGameWeekHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userGameWeekHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserGameWeekHistoryColumns = struct {
	ID                   string
	CreatedAt            string
	UpdatedAt            string
	WeekDivisionPosition string
	WeekDivisionTier     string
	WeekPoints           string
	WeekCoins            string
	NewDivisionTier      string
	Status               string
	GameWeekID           string
	NewDivisionID        string
	UserID               string
	WeekDivisionID       string
	WeekAverageRank      string
	WeekMatchesPlayed    string
}{
	ID:                   "id",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	WeekDivisionPosition: "week_division_position",
	WeekDivisionTier:     "week_division_tier",
	WeekPoints:           "week_points",
	WeekCoins:            "week_coins",
	NewDivisionTier:      "new_division_tier",
	Status:               "status",
	GameWeekID:           "game_week_id",
	NewDivisionID:        "new_division_id",
	UserID:               "user_id",
	WeekDivisionID:       "week_division_id",
	WeekAverageRank:      "week_average_rank",
	WeekMatchesPlayed:    "week_matches_played",
}

var UserGameWeekHistoryTableColumns = struct {
	ID                   string
	CreatedAt            string
	UpdatedAt            string
	WeekDivisionPosition string
	WeekDivisionTier     string
	WeekPoints           string
	WeekCoins            string
	NewDivisionTier      string
	Status               string
	GameWeekID           string
	NewDivisionID        string
	UserID               string
	WeekDivisionID       string
	WeekAverageRank      string
	WeekMatchesPlayed    string
}{
	ID:                   "user_game_week_histories.id",
	CreatedAt:            "user_game_week_histories.created_at",
	UpdatedAt:            "user_game_week_histories.updated_at",
	WeekDivisionPosition: "user_game_week_histories.week_division_position",
	WeekDivisionTier:     "user_game_week_histories.week_division_tier",
	WeekPoints:           "user_game_week_histories.week_points",
	WeekCoins:            "user_game_week_histories.week_coins",
	NewDivisionTier:      "user_game_week_histories.new_division_tier",
	Status:               "user_game_week_histories.status",
	GameWeekID:           "user_game_week_histories.game_week_id",
	NewDivisionID:        "user_game_week_histories.new_division_id",
	UserID:               "user_game_week_histories.user_id",
	WeekDivisionID:       "user_game_week_histories.week_division_id",
	WeekAverageRank:      "user_game_week_histories.week_average_rank",
	WeekMatchesPlayed:    "user_game_week_histories.week_matches_played",
}

// Generated where

var UserGameWeekHistoryWhere = struct {
	ID                   whereHelperstring
	CreatedAt            whereHelpertime_Time
	UpdatedAt            whereHelpertime_Time
	WeekDivisionPosition whereHelperint
	WeekDivisionTier     whereHelpernull_Int
	WeekPoints           whereHelperint
	WeekCoins            whereHelperint
	NewDivisionTier      whereHelpernull_Int
	Status               whereHelperstring
	GameWeekID           whereHelperstring
	NewDivisionID        whereHelpernull_String
	UserID               whereHelperstring
	WeekDivisionID       whereHelpernull_String
	WeekAverageRank      whereHelpernull_Float64
	WeekMatchesPlayed    whereHelperint
}{
	ID:                   whereHelperstring{field: "\"user_game_week_histories\".\"id\""},
	CreatedAt:            whereHelpertime_Time{field: "\"user_game_week_histories\".\"created_at\""},
	UpdatedAt:            whereHelpertime_Time{field: "\"user_game_week_histories\".\"updated_at\""},
	WeekDivisionPosition: whereHelperint{field: "\"user_game_week_histories\".\"week_division_position\""},
	WeekDivisionTier:     whereHelpernull_Int{field: "\"user_game_week_histories\".\"week_division_tier\""},
	WeekPoints:           whereHelperint{field: "\"user_game_week_histories\".\"week_points\""},
	WeekCoins:            whereHelperint{field: "\"user_game_week_histories\".\"week_coins\""},
	NewDivisionTier:      whereHelpernull_Int{field: "\"user_game_week_histories\".\"new_division_tier\""},
	Status:               whereHelperstring{field: "\"user_game_week_histories\".\"status\""},
	GameWeekID:           whereHelperstring{field: "\"user_game_week_histories\".\"game_week_id\""},
	NewDivisionID:        whereHelpernull_String{field: "\"user_game_week_histories\".\"new_division_id\""},
	UserID:               whereHelperstring{field: "\"user_game_week_histories\".\"user_id\""},
	WeekDivisionID:       whereHelpernull_String{field: "\"user_game_week_histories\".\"week_division_id\""},
	WeekAverageRank:      whereHelpernull_Float64{field: "\"user_game_week_histories\".\"week_average_rank\""},
	WeekMatchesPlayed:    whereHelperint{field: "\"user_game_week_histories\".\"week_matches_played\""},
}

// UserGameWeekHistoryRels is where relationship names are stored.
var UserGameWeekHistoryRels = struct {
	NewDivision  string
	WeekDivision string
	GameWeek     string
	User         string
}{
	NewDivision:  "NewDivision",
	WeekDivision: "WeekDivision",
	GameWeek:     "GameWeek",
	User:         "User",
}

// userGameWeekHistoryR is where relationships are stored.
type userGameWeekHistoryR struct {
	NewDivision  *Division `boil:"NewDivision" json:"NewDivision" toml:"NewDivision" yaml:"NewDivision"`
	WeekDivision *Division `boil:"WeekDivision" json:"WeekDivision" toml:"WeekDivision" yaml:"WeekDivision"`
	GameWeek     *GameWeek `boil:"GameWeek" json:"GameWeek" toml:"GameWeek" yaml:"GameWeek"`
	User         *User     `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userGameWeekHistoryR) NewStruct() *userGameWeekHistoryR {
	return &userGameWeekHistoryR{}
}

func (r *userGameWeekHistoryR) GetNewDivision() *Division {
	if r == nil {
		return nil
	}
	return r.NewDivision
}

func (r *userGameWeekHistoryR) GetWeekDivision() *Division {
	if r == nil {
		return nil
	}
	return r.WeekDivision
}

func (r *userGameWeekHistoryR) GetGameWeek() *GameWeek {
	if r == nil {
		return nil
	}
	return r.GameWeek
}

func (r *userGameWeekHistoryR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userGameWeekHistoryL is where Load methods for each relationship are stored.
type userGameWeekHistoryL struct{}

var (
	userGameWeekHistoryAllColumns            = []string{"id", "created_at", "updated_at", "week_division_position", "week_division_tier", "week_points", "week_coins", "new_division_tier", "status", "game_week_id", "new_division_id", "user_id", "week_division_id", "week_average_rank", "week_matches_played"}
	userGameWeekHistoryColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "week_division_position", "week_points", "week_coins", "status", "game_week_id", "user_id", "week_matches_played"}
	userGameWeekHistoryColumnsWithDefault    = []string{"week_division_tier", "new_division_tier", "new_division_id", "week_division_id", "week_average_rank"}
	userGameWeekHistoryPrimaryKeyColumns     = []string{"id"}
	userGameWeekHistoryGeneratedColumns      = []string{}
)

type (
	// UserGameWeekHistorySlice is an alias for a slice of pointers to UserGameWeekHistory.
	// This should almost always be used instead of []UserGameWeekHistory.
	UserGameWeekHistorySlice []*UserGameWeekHistory

	userGameWeekHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userGameWeekHistoryType                 = reflect.TypeOf(&UserGameWeekHistory{})
	userGameWeekHistoryMapping              = queries.MakeStructMapping(userGameWeekHistoryType)
	userGameWeekHistoryPrimaryKeyMapping, _ = queries.BindMapping(userGameWeekHistoryType, userGameWeekHistoryMapping, userGameWeekHistoryPrimaryKeyColumns)
	userGameWeekHistoryInsertCacheMut       sync.RWMutex
	userGameWeekHistoryInsertCache          = make(map[string]insertCache)
	userGameWeekHistoryUpdateCacheMut       sync.RWMutex
	userGameWeekHistoryUpdateCache          = make(map[string]updateCache)
	userGameWeekHistoryUpsertCacheMut       sync.RWMutex
	userGameWeekHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single userGameWeekHistory record from the query.
func (q userGameWeekHistoryQuery) One(exec boil.Executor) (*UserGameWeekHistory, error) {
	o := &UserGameWeekHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for user_game_week_histories")
	}

	return o, nil
}

// All returns all UserGameWeekHistory records from the query.
func (q userGameWeekHistoryQuery) All(exec boil.Executor) (UserGameWeekHistorySlice, error) {
	var o []*UserGameWeekHistory

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to UserGameWeekHistory slice")
	}

	return o, nil
}

// Count returns the count of all UserGameWeekHistory records in the query.
func (q userGameWeekHistoryQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count user_game_week_histories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userGameWeekHistoryQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if user_game_week_histories exists")
	}

	return count > 0, nil
}

// NewDivision pointed to by the foreign key.
func (o *UserGameWeekHistory) NewDivision(mods ...qm.QueryMod) divisionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.NewDivisionID),
	}

	queryMods = append(queryMods, mods...)

	return Divisions(queryMods...)
}

// WeekDivision pointed to by the foreign key.
func (o *UserGameWeekHistory) WeekDivision(mods ...qm.QueryMod) divisionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WeekDivisionID),
	}

	queryMods = append(queryMods, mods...)

	return Divisions(queryMods...)
}

// GameWeek pointed to by the foreign key.
func (o *UserGameWeekHistory) GameWeek(mods ...qm.QueryMod) gameWeekQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GameWeekID),
	}

	queryMods = append(queryMods, mods...)

	return GameWeeks(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserGameWeekHistory) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadNewDivision allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userGameWeekHistoryL) LoadNewDivision(e boil.Executor, singular bool, maybeUserGameWeekHistory interface{}, mods queries.Applicator) error {
	var slice []*UserGameWeekHistory
	var object *UserGameWeekHistory

	if singular {
		var ok bool
		object, ok = maybeUserGameWeekHistory.(*UserGameWeekHistory)
		if !ok {
			object = new(UserGameWeekHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserGameWeekHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserGameWeekHistory))
			}
		}
	} else {
		s, ok := maybeUserGameWeekHistory.(*[]*UserGameWeekHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserGameWeekHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserGameWeekHistory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userGameWeekHistoryR{}
		}
		if !queries.IsNil(object.NewDivisionID) {
			args[object.NewDivisionID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userGameWeekHistoryR{}
			}

			if !queries.IsNil(obj.NewDivisionID) {
				args[obj.NewDivisionID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`divisions`),
		qm.WhereIn(`divisions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Division")
	}

	var resultSlice []*Division
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Division")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for divisions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for divisions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.NewDivision = foreign
		if foreign.R == nil {
			foreign.R = &divisionR{}
		}
		foreign.R.NewDivisionUserGameWeekHistories = append(foreign.R.NewDivisionUserGameWeekHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.NewDivisionID, foreign.ID) {
				local.R.NewDivision = foreign
				if foreign.R == nil {
					foreign.R = &divisionR{}
				}
				foreign.R.NewDivisionUserGameWeekHistories = append(foreign.R.NewDivisionUserGameWeekHistories, local)
				break
			}
		}
	}

	return nil
}

// LoadWeekDivision allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userGameWeekHistoryL) LoadWeekDivision(e boil.Executor, singular bool, maybeUserGameWeekHistory interface{}, mods queries.Applicator) error {
	var slice []*UserGameWeekHistory
	var object *UserGameWeekHistory

	if singular {
		var ok bool
		object, ok = maybeUserGameWeekHistory.(*UserGameWeekHistory)
		if !ok {
			object = new(UserGameWeekHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserGameWeekHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserGameWeekHistory))
			}
		}
	} else {
		s, ok := maybeUserGameWeekHistory.(*[]*UserGameWeekHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserGameWeekHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserGameWeekHistory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userGameWeekHistoryR{}
		}
		if !queries.IsNil(object.WeekDivisionID) {
			args[object.WeekDivisionID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userGameWeekHistoryR{}
			}

			if !queries.IsNil(obj.WeekDivisionID) {
				args[obj.WeekDivisionID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`divisions`),
		qm.WhereIn(`divisions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Division")
	}

	var resultSlice []*Division
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Division")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for divisions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for divisions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WeekDivision = foreign
		if foreign.R == nil {
			foreign.R = &divisionR{}
		}
		foreign.R.WeekDivisionUserGameWeekHistories = append(foreign.R.WeekDivisionUserGameWeekHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.WeekDivisionID, foreign.ID) {
				local.R.WeekDivision = foreign
				if foreign.R == nil {
					foreign.R = &divisionR{}
				}
				foreign.R.WeekDivisionUserGameWeekHistories = append(foreign.R.WeekDivisionUserGameWeekHistories, local)
				break
			}
		}
	}

	return nil
}

// LoadGameWeek allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userGameWeekHistoryL) LoadGameWeek(e boil.Executor, singular bool, maybeUserGameWeekHistory interface{}, mods queries.Applicator) error {
	var slice []*UserGameWeekHistory
	var object *UserGameWeekHistory

	if singular {
		var ok bool
		object, ok = maybeUserGameWeekHistory.(*UserGameWeekHistory)
		if !ok {
			object = new(UserGameWeekHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserGameWeekHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserGameWeekHistory))
			}
		}
	} else {
		s, ok := maybeUserGameWeekHistory.(*[]*UserGameWeekHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserGameWeekHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserGameWeekHistory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userGameWeekHistoryR{}
		}
		args[object.GameWeekID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userGameWeekHistoryR{}
			}

			args[obj.GameWeekID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`game_weeks`),
		qm.WhereIn(`game_weeks.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GameWeek")
	}

	var resultSlice []*GameWeek
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GameWeek")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for game_weeks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_weeks")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GameWeek = foreign
		if foreign.R == nil {
			foreign.R = &gameWeekR{}
		}
		foreign.R.UserGameWeekHistories = append(foreign.R.UserGameWeekHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GameWeekID == foreign.ID {
				local.R.GameWeek = foreign
				if foreign.R == nil {
					foreign.R = &gameWeekR{}
				}
				foreign.R.UserGameWeekHistories = append(foreign.R.UserGameWeekHistories, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userGameWeekHistoryL) LoadUser(e boil.Executor, singular bool, maybeUserGameWeekHistory interface{}, mods queries.Applicator) error {
	var slice []*UserGameWeekHistory
	var object *UserGameWeekHistory

	if singular {
		var ok bool
		object, ok = maybeUserGameWeekHistory.(*UserGameWeekHistory)
		if !ok {
			object = new(UserGameWeekHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserGameWeekHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserGameWeekHistory))
			}
		}
	} else {
		s, ok := maybeUserGameWeekHistory.(*[]*UserGameWeekHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserGameWeekHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserGameWeekHistory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userGameWeekHistoryR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userGameWeekHistoryR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserGameWeekHistories = append(foreign.R.UserGameWeekHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserGameWeekHistories = append(foreign.R.UserGameWeekHistories, local)
				break
			}
		}
	}

	return nil
}

// SetNewDivision of the userGameWeekHistory to the related item.
// Sets o.R.NewDivision to related.
// Adds o to related.R.NewDivisionUserGameWeekHistories.
func (o *UserGameWeekHistory) SetNewDivision(exec boil.Executor, insert bool, related *Division) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_game_week_histories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"new_division_id"}),
		strmangle.WhereClause("\"", "\"", 2, userGameWeekHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.NewDivisionID, related.ID)
	if o.R == nil {
		o.R = &userGameWeekHistoryR{
			NewDivision: related,
		}
	} else {
		o.R.NewDivision = related
	}

	if related.R == nil {
		related.R = &divisionR{
			NewDivisionUserGameWeekHistories: UserGameWeekHistorySlice{o},
		}
	} else {
		related.R.NewDivisionUserGameWeekHistories = append(related.R.NewDivisionUserGameWeekHistories, o)
	}

	return nil
}

// RemoveNewDivision relationship.
// Sets o.R.NewDivision to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UserGameWeekHistory) RemoveNewDivision(exec boil.Executor, related *Division) error {
	var err error

	queries.SetScanner(&o.NewDivisionID, nil)
	if _, err = o.Update(exec, boil.Whitelist("new_division_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.NewDivision = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.NewDivisionUserGameWeekHistories {
		if queries.Equal(o.NewDivisionID, ri.NewDivisionID) {
			continue
		}

		ln := len(related.R.NewDivisionUserGameWeekHistories)
		if ln > 1 && i < ln-1 {
			related.R.NewDivisionUserGameWeekHistories[i] = related.R.NewDivisionUserGameWeekHistories[ln-1]
		}
		related.R.NewDivisionUserGameWeekHistories = related.R.NewDivisionUserGameWeekHistories[:ln-1]
		break
	}
	return nil
}

// SetWeekDivision of the userGameWeekHistory to the related item.
// Sets o.R.WeekDivision to related.
// Adds o to related.R.WeekDivisionUserGameWeekHistories.
func (o *UserGameWeekHistory) SetWeekDivision(exec boil.Executor, insert bool, related *Division) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_game_week_histories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"week_division_id"}),
		strmangle.WhereClause("\"", "\"", 2, userGameWeekHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.WeekDivisionID, related.ID)
	if o.R == nil {
		o.R = &userGameWeekHistoryR{
			WeekDivision: related,
		}
	} else {
		o.R.WeekDivision = related
	}

	if related.R == nil {
		related.R = &divisionR{
			WeekDivisionUserGameWeekHistories: UserGameWeekHistorySlice{o},
		}
	} else {
		related.R.WeekDivisionUserGameWeekHistories = append(related.R.WeekDivisionUserGameWeekHistories, o)
	}

	return nil
}

// RemoveWeekDivision relationship.
// Sets o.R.WeekDivision to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UserGameWeekHistory) RemoveWeekDivision(exec boil.Executor, related *Division) error {
	var err error

	queries.SetScanner(&o.WeekDivisionID, nil)
	if _, err = o.Update(exec, boil.Whitelist("week_division_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.WeekDivision = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.WeekDivisionUserGameWeekHistories {
		if queries.Equal(o.WeekDivisionID, ri.WeekDivisionID) {
			continue
		}

		ln := len(related.R.WeekDivisionUserGameWeekHistories)
		if ln > 1 && i < ln-1 {
			related.R.WeekDivisionUserGameWeekHistories[i] = related.R.WeekDivisionUserGameWeekHistories[ln-1]
		}
		related.R.WeekDivisionUserGameWeekHistories = related.R.WeekDivisionUserGameWeekHistories[:ln-1]
		break
	}
	return nil
}

// SetGameWeek of the userGameWeekHistory to the related item.
// Sets o.R.GameWeek to related.
// Adds o to related.R.UserGameWeekHistories.
func (o *UserGameWeekHistory) SetGameWeek(exec boil.Executor, insert bool, related *GameWeek) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_game_week_histories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"game_week_id"}),
		strmangle.WhereClause("\"", "\"", 2, userGameWeekHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GameWeekID = related.ID
	if o.R == nil {
		o.R = &userGameWeekHistoryR{
			GameWeek: related,
		}
	} else {
		o.R.GameWeek = related
	}

	if related.R == nil {
		related.R = &gameWeekR{
			UserGameWeekHistories: UserGameWeekHistorySlice{o},
		}
	} else {
		related.R.UserGameWeekHistories = append(related.R.UserGameWeekHistories, o)
	}

	return nil
}

// SetUser of the userGameWeekHistory to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserGameWeekHistories.
func (o *UserGameWeekHistory) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_game_week_histories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userGameWeekHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userGameWeekHistoryR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserGameWeekHistories: UserGameWeekHistorySlice{o},
		}
	} else {
		related.R.UserGameWeekHistories = append(related.R.UserGameWeekHistories, o)
	}

	return nil
}

// UserGameWeekHistories retrieves all the records using an executor.
func UserGameWeekHistories(mods ...qm.QueryMod) userGameWeekHistoryQuery {
	mods = append(mods, qm.From("\"user_game_week_histories\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_game_week_histories\".*"})
	}

	return userGameWeekHistoryQuery{q}
}

// FindUserGameWeekHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserGameWeekHistory(exec boil.Executor, iD string, selectCols ...string) (*UserGameWeekHistory, error) {
	userGameWeekHistoryObj := &UserGameWeekHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_game_week_histories\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userGameWeekHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from user_game_week_histories")
	}

	return userGameWeekHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserGameWeekHistory) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no user_game_week_histories provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(userGameWeekHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userGameWeekHistoryInsertCacheMut.RLock()
	cache, cached := userGameWeekHistoryInsertCache[key]
	userGameWeekHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userGameWeekHistoryAllColumns,
			userGameWeekHistoryColumnsWithDefault,
			userGameWeekHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userGameWeekHistoryType, userGameWeekHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userGameWeekHistoryType, userGameWeekHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_game_week_histories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_game_week_histories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into user_game_week_histories")
	}

	if !cached {
		userGameWeekHistoryInsertCacheMut.Lock()
		userGameWeekHistoryInsertCache[key] = cache
		userGameWeekHistoryInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the UserGameWeekHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserGameWeekHistory) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	userGameWeekHistoryUpdateCacheMut.RLock()
	cache, cached := userGameWeekHistoryUpdateCache[key]
	userGameWeekHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userGameWeekHistoryAllColumns,
			userGameWeekHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update user_game_week_histories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_game_week_histories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userGameWeekHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userGameWeekHistoryType, userGameWeekHistoryMapping, append(wl, userGameWeekHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update user_game_week_histories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for user_game_week_histories")
	}

	if !cached {
		userGameWeekHistoryUpdateCacheMut.Lock()
		userGameWeekHistoryUpdateCache[key] = cache
		userGameWeekHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q userGameWeekHistoryQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for user_game_week_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for user_game_week_histories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserGameWeekHistorySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userGameWeekHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_game_week_histories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userGameWeekHistoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in userGameWeekHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all userGameWeekHistory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserGameWeekHistory) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no user_game_week_histories provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(userGameWeekHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userGameWeekHistoryUpsertCacheMut.RLock()
	cache, cached := userGameWeekHistoryUpsertCache[key]
	userGameWeekHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userGameWeekHistoryAllColumns,
			userGameWeekHistoryColumnsWithDefault,
			userGameWeekHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userGameWeekHistoryAllColumns,
			userGameWeekHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert user_game_week_histories, could not build update column list")
		}

		ret := strmangle.SetComplement(userGameWeekHistoryAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userGameWeekHistoryPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert user_game_week_histories, could not build conflict column list")
			}

			conflict = make([]string, len(userGameWeekHistoryPrimaryKeyColumns))
			copy(conflict, userGameWeekHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_game_week_histories\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userGameWeekHistoryType, userGameWeekHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userGameWeekHistoryType, userGameWeekHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert user_game_week_histories")
	}

	if !cached {
		userGameWeekHistoryUpsertCacheMut.Lock()
		userGameWeekHistoryUpsertCache[key] = cache
		userGameWeekHistoryUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single UserGameWeekHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserGameWeekHistory) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no UserGameWeekHistory provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userGameWeekHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"user_game_week_histories\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from user_game_week_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for user_game_week_histories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userGameWeekHistoryQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no userGameWeekHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from user_game_week_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for user_game_week_histories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserGameWeekHistorySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userGameWeekHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_game_week_histories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userGameWeekHistoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from userGameWeekHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for user_game_week_histories")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserGameWeekHistory) Reload(exec boil.Executor) error {
	ret, err := FindUserGameWeekHistory(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserGameWeekHistorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserGameWeekHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userGameWeekHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_game_week_histories\".* FROM \"user_game_week_histories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userGameWeekHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in UserGameWeekHistorySlice")
	}

	*o = slice

	return nil
}

// UserGameWeekHistoryExists checks if the UserGameWeekHistory row exists.
func UserGameWeekHistoryExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_game_week_histories\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if user_game_week_histories exists")
	}

	return exists, nil
}

// Exists checks if the UserGameWeekHistory row exists.
func (o *UserGameWeekHistory) Exists(exec boil.Executor) (bool, error) {
	return UserGameWeekHistoryExists(exec, o.ID)
}
