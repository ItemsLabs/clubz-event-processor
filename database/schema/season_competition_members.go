// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SeasonCompetitionMember is an object representing the database table.
type SeasonCompetitionMember struct {
	ID            string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CompetitionID string    `boil:"competition_id" json:"competition_id" toml:"competition_id" yaml:"competition_id"`
	SeasonID      string    `boil:"season_id" json:"season_id" toml:"season_id" yaml:"season_id"`
	TeamID        string    `boil:"team_id" json:"team_id" toml:"team_id" yaml:"team_id"`

	R *seasonCompetitionMemberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L seasonCompetitionMemberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SeasonCompetitionMemberColumns = struct {
	ID            string
	CreatedAt     string
	UpdatedAt     string
	CompetitionID string
	SeasonID      string
	TeamID        string
}{
	ID:            "id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	CompetitionID: "competition_id",
	SeasonID:      "season_id",
	TeamID:        "team_id",
}

var SeasonCompetitionMemberTableColumns = struct {
	ID            string
	CreatedAt     string
	UpdatedAt     string
	CompetitionID string
	SeasonID      string
	TeamID        string
}{
	ID:            "season_competition_members.id",
	CreatedAt:     "season_competition_members.created_at",
	UpdatedAt:     "season_competition_members.updated_at",
	CompetitionID: "season_competition_members.competition_id",
	SeasonID:      "season_competition_members.season_id",
	TeamID:        "season_competition_members.team_id",
}

// Generated where

var SeasonCompetitionMemberWhere = struct {
	ID            whereHelperstring
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	CompetitionID whereHelperstring
	SeasonID      whereHelperstring
	TeamID        whereHelperstring
}{
	ID:            whereHelperstring{field: "\"season_competition_members\".\"id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"season_competition_members\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"season_competition_members\".\"updated_at\""},
	CompetitionID: whereHelperstring{field: "\"season_competition_members\".\"competition_id\""},
	SeasonID:      whereHelperstring{field: "\"season_competition_members\".\"season_id\""},
	TeamID:        whereHelperstring{field: "\"season_competition_members\".\"team_id\""},
}

// SeasonCompetitionMemberRels is where relationship names are stored.
var SeasonCompetitionMemberRels = struct {
	Competition string
	Season      string
	Team        string
}{
	Competition: "Competition",
	Season:      "Season",
	Team:        "Team",
}

// seasonCompetitionMemberR is where relationships are stored.
type seasonCompetitionMemberR struct {
	Competition *Competition `boil:"Competition" json:"Competition" toml:"Competition" yaml:"Competition"`
	Season      *Season      `boil:"Season" json:"Season" toml:"Season" yaml:"Season"`
	Team        *Team        `boil:"Team" json:"Team" toml:"Team" yaml:"Team"`
}

// NewStruct creates a new relationship struct
func (*seasonCompetitionMemberR) NewStruct() *seasonCompetitionMemberR {
	return &seasonCompetitionMemberR{}
}

func (r *seasonCompetitionMemberR) GetCompetition() *Competition {
	if r == nil {
		return nil
	}
	return r.Competition
}

func (r *seasonCompetitionMemberR) GetSeason() *Season {
	if r == nil {
		return nil
	}
	return r.Season
}

func (r *seasonCompetitionMemberR) GetTeam() *Team {
	if r == nil {
		return nil
	}
	return r.Team
}

// seasonCompetitionMemberL is where Load methods for each relationship are stored.
type seasonCompetitionMemberL struct{}

var (
	seasonCompetitionMemberAllColumns            = []string{"id", "created_at", "updated_at", "competition_id", "season_id", "team_id"}
	seasonCompetitionMemberColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "competition_id", "season_id", "team_id"}
	seasonCompetitionMemberColumnsWithDefault    = []string{}
	seasonCompetitionMemberPrimaryKeyColumns     = []string{"id"}
	seasonCompetitionMemberGeneratedColumns      = []string{}
)

type (
	// SeasonCompetitionMemberSlice is an alias for a slice of pointers to SeasonCompetitionMember.
	// This should almost always be used instead of []SeasonCompetitionMember.
	SeasonCompetitionMemberSlice []*SeasonCompetitionMember

	seasonCompetitionMemberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	seasonCompetitionMemberType                 = reflect.TypeOf(&SeasonCompetitionMember{})
	seasonCompetitionMemberMapping              = queries.MakeStructMapping(seasonCompetitionMemberType)
	seasonCompetitionMemberPrimaryKeyMapping, _ = queries.BindMapping(seasonCompetitionMemberType, seasonCompetitionMemberMapping, seasonCompetitionMemberPrimaryKeyColumns)
	seasonCompetitionMemberInsertCacheMut       sync.RWMutex
	seasonCompetitionMemberInsertCache          = make(map[string]insertCache)
	seasonCompetitionMemberUpdateCacheMut       sync.RWMutex
	seasonCompetitionMemberUpdateCache          = make(map[string]updateCache)
	seasonCompetitionMemberUpsertCacheMut       sync.RWMutex
	seasonCompetitionMemberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single seasonCompetitionMember record from the query.
func (q seasonCompetitionMemberQuery) One(exec boil.Executor) (*SeasonCompetitionMember, error) {
	o := &SeasonCompetitionMember{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for season_competition_members")
	}

	return o, nil
}

// All returns all SeasonCompetitionMember records from the query.
func (q seasonCompetitionMemberQuery) All(exec boil.Executor) (SeasonCompetitionMemberSlice, error) {
	var o []*SeasonCompetitionMember

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to SeasonCompetitionMember slice")
	}

	return o, nil
}

// Count returns the count of all SeasonCompetitionMember records in the query.
func (q seasonCompetitionMemberQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count season_competition_members rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q seasonCompetitionMemberQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if season_competition_members exists")
	}

	return count > 0, nil
}

// Competition pointed to by the foreign key.
func (o *SeasonCompetitionMember) Competition(mods ...qm.QueryMod) competitionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CompetitionID),
	}

	queryMods = append(queryMods, mods...)

	return Competitions(queryMods...)
}

// Season pointed to by the foreign key.
func (o *SeasonCompetitionMember) Season(mods ...qm.QueryMod) seasonQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SeasonID),
	}

	queryMods = append(queryMods, mods...)

	return Seasons(queryMods...)
}

// Team pointed to by the foreign key.
func (o *SeasonCompetitionMember) Team(mods ...qm.QueryMod) teamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TeamID),
	}

	queryMods = append(queryMods, mods...)

	return Teams(queryMods...)
}

// LoadCompetition allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (seasonCompetitionMemberL) LoadCompetition(e boil.Executor, singular bool, maybeSeasonCompetitionMember interface{}, mods queries.Applicator) error {
	var slice []*SeasonCompetitionMember
	var object *SeasonCompetitionMember

	if singular {
		var ok bool
		object, ok = maybeSeasonCompetitionMember.(*SeasonCompetitionMember)
		if !ok {
			object = new(SeasonCompetitionMember)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSeasonCompetitionMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSeasonCompetitionMember))
			}
		}
	} else {
		s, ok := maybeSeasonCompetitionMember.(*[]*SeasonCompetitionMember)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSeasonCompetitionMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSeasonCompetitionMember))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &seasonCompetitionMemberR{}
		}
		args[object.CompetitionID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seasonCompetitionMemberR{}
			}

			args[obj.CompetitionID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`competitions`),
		qm.WhereIn(`competitions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Competition")
	}

	var resultSlice []*Competition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Competition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for competitions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for competitions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Competition = foreign
		if foreign.R == nil {
			foreign.R = &competitionR{}
		}
		foreign.R.SeasonCompetitionMembers = append(foreign.R.SeasonCompetitionMembers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CompetitionID == foreign.ID {
				local.R.Competition = foreign
				if foreign.R == nil {
					foreign.R = &competitionR{}
				}
				foreign.R.SeasonCompetitionMembers = append(foreign.R.SeasonCompetitionMembers, local)
				break
			}
		}
	}

	return nil
}

// LoadSeason allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (seasonCompetitionMemberL) LoadSeason(e boil.Executor, singular bool, maybeSeasonCompetitionMember interface{}, mods queries.Applicator) error {
	var slice []*SeasonCompetitionMember
	var object *SeasonCompetitionMember

	if singular {
		var ok bool
		object, ok = maybeSeasonCompetitionMember.(*SeasonCompetitionMember)
		if !ok {
			object = new(SeasonCompetitionMember)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSeasonCompetitionMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSeasonCompetitionMember))
			}
		}
	} else {
		s, ok := maybeSeasonCompetitionMember.(*[]*SeasonCompetitionMember)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSeasonCompetitionMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSeasonCompetitionMember))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &seasonCompetitionMemberR{}
		}
		args[object.SeasonID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seasonCompetitionMemberR{}
			}

			args[obj.SeasonID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`seasons`),
		qm.WhereIn(`seasons.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Season")
	}

	var resultSlice []*Season
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Season")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for seasons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seasons")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Season = foreign
		if foreign.R == nil {
			foreign.R = &seasonR{}
		}
		foreign.R.SeasonCompetitionMembers = append(foreign.R.SeasonCompetitionMembers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SeasonID == foreign.ID {
				local.R.Season = foreign
				if foreign.R == nil {
					foreign.R = &seasonR{}
				}
				foreign.R.SeasonCompetitionMembers = append(foreign.R.SeasonCompetitionMembers, local)
				break
			}
		}
	}

	return nil
}

// LoadTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (seasonCompetitionMemberL) LoadTeam(e boil.Executor, singular bool, maybeSeasonCompetitionMember interface{}, mods queries.Applicator) error {
	var slice []*SeasonCompetitionMember
	var object *SeasonCompetitionMember

	if singular {
		var ok bool
		object, ok = maybeSeasonCompetitionMember.(*SeasonCompetitionMember)
		if !ok {
			object = new(SeasonCompetitionMember)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSeasonCompetitionMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSeasonCompetitionMember))
			}
		}
	} else {
		s, ok := maybeSeasonCompetitionMember.(*[]*SeasonCompetitionMember)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSeasonCompetitionMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSeasonCompetitionMember))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &seasonCompetitionMemberR{}
		}
		args[object.TeamID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seasonCompetitionMemberR{}
			}

			args[obj.TeamID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`teams`),
		qm.WhereIn(`teams.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for teams")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Team = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.SeasonCompetitionMembers = append(foreign.R.SeasonCompetitionMembers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TeamID == foreign.ID {
				local.R.Team = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.SeasonCompetitionMembers = append(foreign.R.SeasonCompetitionMembers, local)
				break
			}
		}
	}

	return nil
}

// SetCompetition of the seasonCompetitionMember to the related item.
// Sets o.R.Competition to related.
// Adds o to related.R.SeasonCompetitionMembers.
func (o *SeasonCompetitionMember) SetCompetition(exec boil.Executor, insert bool, related *Competition) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"season_competition_members\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"competition_id"}),
		strmangle.WhereClause("\"", "\"", 2, seasonCompetitionMemberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CompetitionID = related.ID
	if o.R == nil {
		o.R = &seasonCompetitionMemberR{
			Competition: related,
		}
	} else {
		o.R.Competition = related
	}

	if related.R == nil {
		related.R = &competitionR{
			SeasonCompetitionMembers: SeasonCompetitionMemberSlice{o},
		}
	} else {
		related.R.SeasonCompetitionMembers = append(related.R.SeasonCompetitionMembers, o)
	}

	return nil
}

// SetSeason of the seasonCompetitionMember to the related item.
// Sets o.R.Season to related.
// Adds o to related.R.SeasonCompetitionMembers.
func (o *SeasonCompetitionMember) SetSeason(exec boil.Executor, insert bool, related *Season) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"season_competition_members\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"season_id"}),
		strmangle.WhereClause("\"", "\"", 2, seasonCompetitionMemberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SeasonID = related.ID
	if o.R == nil {
		o.R = &seasonCompetitionMemberR{
			Season: related,
		}
	} else {
		o.R.Season = related
	}

	if related.R == nil {
		related.R = &seasonR{
			SeasonCompetitionMembers: SeasonCompetitionMemberSlice{o},
		}
	} else {
		related.R.SeasonCompetitionMembers = append(related.R.SeasonCompetitionMembers, o)
	}

	return nil
}

// SetTeam of the seasonCompetitionMember to the related item.
// Sets o.R.Team to related.
// Adds o to related.R.SeasonCompetitionMembers.
func (o *SeasonCompetitionMember) SetTeam(exec boil.Executor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"season_competition_members\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
		strmangle.WhereClause("\"", "\"", 2, seasonCompetitionMemberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TeamID = related.ID
	if o.R == nil {
		o.R = &seasonCompetitionMemberR{
			Team: related,
		}
	} else {
		o.R.Team = related
	}

	if related.R == nil {
		related.R = &teamR{
			SeasonCompetitionMembers: SeasonCompetitionMemberSlice{o},
		}
	} else {
		related.R.SeasonCompetitionMembers = append(related.R.SeasonCompetitionMembers, o)
	}

	return nil
}

// SeasonCompetitionMembers retrieves all the records using an executor.
func SeasonCompetitionMembers(mods ...qm.QueryMod) seasonCompetitionMemberQuery {
	mods = append(mods, qm.From("\"season_competition_members\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"season_competition_members\".*"})
	}

	return seasonCompetitionMemberQuery{q}
}

// FindSeasonCompetitionMember retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSeasonCompetitionMember(exec boil.Executor, iD string, selectCols ...string) (*SeasonCompetitionMember, error) {
	seasonCompetitionMemberObj := &SeasonCompetitionMember{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"season_competition_members\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, seasonCompetitionMemberObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from season_competition_members")
	}

	return seasonCompetitionMemberObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SeasonCompetitionMember) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no season_competition_members provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(seasonCompetitionMemberColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	seasonCompetitionMemberInsertCacheMut.RLock()
	cache, cached := seasonCompetitionMemberInsertCache[key]
	seasonCompetitionMemberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			seasonCompetitionMemberAllColumns,
			seasonCompetitionMemberColumnsWithDefault,
			seasonCompetitionMemberColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(seasonCompetitionMemberType, seasonCompetitionMemberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(seasonCompetitionMemberType, seasonCompetitionMemberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"season_competition_members\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"season_competition_members\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into season_competition_members")
	}

	if !cached {
		seasonCompetitionMemberInsertCacheMut.Lock()
		seasonCompetitionMemberInsertCache[key] = cache
		seasonCompetitionMemberInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the SeasonCompetitionMember.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SeasonCompetitionMember) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	seasonCompetitionMemberUpdateCacheMut.RLock()
	cache, cached := seasonCompetitionMemberUpdateCache[key]
	seasonCompetitionMemberUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			seasonCompetitionMemberAllColumns,
			seasonCompetitionMemberPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update season_competition_members, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"season_competition_members\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, seasonCompetitionMemberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(seasonCompetitionMemberType, seasonCompetitionMemberMapping, append(wl, seasonCompetitionMemberPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update season_competition_members row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for season_competition_members")
	}

	if !cached {
		seasonCompetitionMemberUpdateCacheMut.Lock()
		seasonCompetitionMemberUpdateCache[key] = cache
		seasonCompetitionMemberUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q seasonCompetitionMemberQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for season_competition_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for season_competition_members")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SeasonCompetitionMemberSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seasonCompetitionMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"season_competition_members\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, seasonCompetitionMemberPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in seasonCompetitionMember slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all seasonCompetitionMember")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SeasonCompetitionMember) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no season_competition_members provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(seasonCompetitionMemberColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	seasonCompetitionMemberUpsertCacheMut.RLock()
	cache, cached := seasonCompetitionMemberUpsertCache[key]
	seasonCompetitionMemberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			seasonCompetitionMemberAllColumns,
			seasonCompetitionMemberColumnsWithDefault,
			seasonCompetitionMemberColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			seasonCompetitionMemberAllColumns,
			seasonCompetitionMemberPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert season_competition_members, could not build update column list")
		}

		ret := strmangle.SetComplement(seasonCompetitionMemberAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(seasonCompetitionMemberPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert season_competition_members, could not build conflict column list")
			}

			conflict = make([]string, len(seasonCompetitionMemberPrimaryKeyColumns))
			copy(conflict, seasonCompetitionMemberPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"season_competition_members\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(seasonCompetitionMemberType, seasonCompetitionMemberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(seasonCompetitionMemberType, seasonCompetitionMemberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert season_competition_members")
	}

	if !cached {
		seasonCompetitionMemberUpsertCacheMut.Lock()
		seasonCompetitionMemberUpsertCache[key] = cache
		seasonCompetitionMemberUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single SeasonCompetitionMember record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SeasonCompetitionMember) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no SeasonCompetitionMember provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), seasonCompetitionMemberPrimaryKeyMapping)
	sql := "DELETE FROM \"season_competition_members\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from season_competition_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for season_competition_members")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q seasonCompetitionMemberQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no seasonCompetitionMemberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from season_competition_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for season_competition_members")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SeasonCompetitionMemberSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seasonCompetitionMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"season_competition_members\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, seasonCompetitionMemberPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from seasonCompetitionMember slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for season_competition_members")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SeasonCompetitionMember) Reload(exec boil.Executor) error {
	ret, err := FindSeasonCompetitionMember(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SeasonCompetitionMemberSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SeasonCompetitionMemberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seasonCompetitionMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"season_competition_members\".* FROM \"season_competition_members\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, seasonCompetitionMemberPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in SeasonCompetitionMemberSlice")
	}

	*o = slice

	return nil
}

// SeasonCompetitionMemberExists checks if the SeasonCompetitionMember row exists.
func SeasonCompetitionMemberExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"season_competition_members\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if season_competition_members exists")
	}

	return exists, nil
}

// Exists checks if the SeasonCompetitionMember row exists.
func (o *SeasonCompetitionMember) Exists(exec boil.Executor) (bool, error) {
	return SeasonCompetitionMemberExists(exec, o.ID)
}
