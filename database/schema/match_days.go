// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MatchDay is an object representing the database table.
type MatchDay struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	StartDate   time.Time   `boil:"start_date" json:"start_date" toml:"start_date" yaml:"start_date"`
	EndDate     time.Time   `boil:"end_date" json:"end_date" toml:"end_date" yaml:"end_date"`

	R *matchDayR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L matchDayL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MatchDayColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	Name        string
	Description string
	StartDate   string
	EndDate     string
}{
	ID:          "id",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	Name:        "name",
	Description: "description",
	StartDate:   "start_date",
	EndDate:     "end_date",
}

var MatchDayTableColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	Name        string
	Description string
	StartDate   string
	EndDate     string
}{
	ID:          "match_days.id",
	CreatedAt:   "match_days.created_at",
	UpdatedAt:   "match_days.updated_at",
	Name:        "match_days.name",
	Description: "match_days.description",
	StartDate:   "match_days.start_date",
	EndDate:     "match_days.end_date",
}

// Generated where

var MatchDayWhere = struct {
	ID          whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	Name        whereHelperstring
	Description whereHelpernull_String
	StartDate   whereHelpertime_Time
	EndDate     whereHelpertime_Time
}{
	ID:          whereHelperstring{field: "\"match_days\".\"id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"match_days\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"match_days\".\"updated_at\""},
	Name:        whereHelperstring{field: "\"match_days\".\"name\""},
	Description: whereHelpernull_String{field: "\"match_days\".\"description\""},
	StartDate:   whereHelpertime_Time{field: "\"match_days\".\"start_date\""},
	EndDate:     whereHelpertime_Time{field: "\"match_days\".\"end_date\""},
}

// MatchDayRels is where relationship names are stored.
var MatchDayRels = struct {
	Matches string
}{
	Matches: "Matches",
}

// matchDayR is where relationships are stored.
type matchDayR struct {
	Matches MatchSlice `boil:"Matches" json:"Matches" toml:"Matches" yaml:"Matches"`
}

// NewStruct creates a new relationship struct
func (*matchDayR) NewStruct() *matchDayR {
	return &matchDayR{}
}

func (r *matchDayR) GetMatches() MatchSlice {
	if r == nil {
		return nil
	}
	return r.Matches
}

// matchDayL is where Load methods for each relationship are stored.
type matchDayL struct{}

var (
	matchDayAllColumns            = []string{"id", "created_at", "updated_at", "name", "description", "start_date", "end_date"}
	matchDayColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "name", "start_date", "end_date"}
	matchDayColumnsWithDefault    = []string{"description"}
	matchDayPrimaryKeyColumns     = []string{"id"}
	matchDayGeneratedColumns      = []string{}
)

type (
	// MatchDaySlice is an alias for a slice of pointers to MatchDay.
	// This should almost always be used instead of []MatchDay.
	MatchDaySlice []*MatchDay

	matchDayQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	matchDayType                 = reflect.TypeOf(&MatchDay{})
	matchDayMapping              = queries.MakeStructMapping(matchDayType)
	matchDayPrimaryKeyMapping, _ = queries.BindMapping(matchDayType, matchDayMapping, matchDayPrimaryKeyColumns)
	matchDayInsertCacheMut       sync.RWMutex
	matchDayInsertCache          = make(map[string]insertCache)
	matchDayUpdateCacheMut       sync.RWMutex
	matchDayUpdateCache          = make(map[string]updateCache)
	matchDayUpsertCacheMut       sync.RWMutex
	matchDayUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single matchDay record from the query.
func (q matchDayQuery) One(exec boil.Executor) (*MatchDay, error) {
	o := &MatchDay{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for match_days")
	}

	return o, nil
}

// All returns all MatchDay records from the query.
func (q matchDayQuery) All(exec boil.Executor) (MatchDaySlice, error) {
	var o []*MatchDay

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to MatchDay slice")
	}

	return o, nil
}

// Count returns the count of all MatchDay records in the query.
func (q matchDayQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count match_days rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q matchDayQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if match_days exists")
	}

	return count > 0, nil
}

// Matches retrieves all the match's Matches with an executor.
func (o *MatchDay) Matches(mods ...qm.QueryMod) matchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"matches\".\"match_day_id\"=?", o.ID),
	)

	return Matches(queryMods...)
}

// LoadMatches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (matchDayL) LoadMatches(e boil.Executor, singular bool, maybeMatchDay interface{}, mods queries.Applicator) error {
	var slice []*MatchDay
	var object *MatchDay

	if singular {
		var ok bool
		object, ok = maybeMatchDay.(*MatchDay)
		if !ok {
			object = new(MatchDay)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchDay)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchDay))
			}
		}
	} else {
		s, ok := maybeMatchDay.(*[]*MatchDay)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchDay)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchDay))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchDayR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchDayR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.match_day_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load matches")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice matches")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if singular {
		object.R.Matches = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchR{}
			}
			foreign.R.MatchDay = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.MatchDayID) {
				local.R.Matches = append(local.R.Matches, foreign)
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.MatchDay = local
				break
			}
		}
	}

	return nil
}

// AddMatches adds the given related objects to the existing relationships
// of the match_day, optionally inserting them as new records.
// Appends related to o.R.Matches.
// Sets related.R.MatchDay appropriately.
func (o *MatchDay) AddMatches(exec boil.Executor, insert bool, related ...*Match) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MatchDayID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"matches\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"match_day_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MatchDayID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &matchDayR{
			Matches: related,
		}
	} else {
		o.R.Matches = append(o.R.Matches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchR{
				MatchDay: o,
			}
		} else {
			rel.R.MatchDay = o
		}
	}
	return nil
}

// SetMatches removes all previously related items of the
// match_day replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MatchDay's Matches accordingly.
// Replaces o.R.Matches with related.
// Sets related.R.MatchDay's Matches accordingly.
func (o *MatchDay) SetMatches(exec boil.Executor, insert bool, related ...*Match) error {
	query := "update \"matches\" set \"match_day_id\" = null where \"match_day_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Matches {
			queries.SetScanner(&rel.MatchDayID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.MatchDay = nil
		}
		o.R.Matches = nil
	}

	return o.AddMatches(exec, insert, related...)
}

// RemoveMatches relationships from objects passed in.
// Removes related items from R.Matches (uses pointer comparison, removal does not keep order)
// Sets related.R.MatchDay.
func (o *MatchDay) RemoveMatches(exec boil.Executor, related ...*Match) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MatchDayID, nil)
		if rel.R != nil {
			rel.R.MatchDay = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("match_day_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Matches {
			if rel != ri {
				continue
			}

			ln := len(o.R.Matches)
			if ln > 1 && i < ln-1 {
				o.R.Matches[i] = o.R.Matches[ln-1]
			}
			o.R.Matches = o.R.Matches[:ln-1]
			break
		}
	}

	return nil
}

// MatchDays retrieves all the records using an executor.
func MatchDays(mods ...qm.QueryMod) matchDayQuery {
	mods = append(mods, qm.From("\"match_days\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"match_days\".*"})
	}

	return matchDayQuery{q}
}

// FindMatchDay retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMatchDay(exec boil.Executor, iD string, selectCols ...string) (*MatchDay, error) {
	matchDayObj := &MatchDay{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"match_days\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, matchDayObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from match_days")
	}

	return matchDayObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MatchDay) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no match_days provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(matchDayColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	matchDayInsertCacheMut.RLock()
	cache, cached := matchDayInsertCache[key]
	matchDayInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			matchDayAllColumns,
			matchDayColumnsWithDefault,
			matchDayColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(matchDayType, matchDayMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(matchDayType, matchDayMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"match_days\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"match_days\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into match_days")
	}

	if !cached {
		matchDayInsertCacheMut.Lock()
		matchDayInsertCache[key] = cache
		matchDayInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the MatchDay.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MatchDay) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	matchDayUpdateCacheMut.RLock()
	cache, cached := matchDayUpdateCache[key]
	matchDayUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			matchDayAllColumns,
			matchDayPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update match_days, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"match_days\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, matchDayPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(matchDayType, matchDayMapping, append(wl, matchDayPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update match_days row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for match_days")
	}

	if !cached {
		matchDayUpdateCacheMut.Lock()
		matchDayUpdateCache[key] = cache
		matchDayUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q matchDayQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for match_days")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for match_days")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MatchDaySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchDayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"match_days\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, matchDayPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in matchDay slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all matchDay")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MatchDay) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no match_days provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(matchDayColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	matchDayUpsertCacheMut.RLock()
	cache, cached := matchDayUpsertCache[key]
	matchDayUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			matchDayAllColumns,
			matchDayColumnsWithDefault,
			matchDayColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			matchDayAllColumns,
			matchDayPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert match_days, could not build update column list")
		}

		ret := strmangle.SetComplement(matchDayAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(matchDayPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert match_days, could not build conflict column list")
			}

			conflict = make([]string, len(matchDayPrimaryKeyColumns))
			copy(conflict, matchDayPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"match_days\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(matchDayType, matchDayMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(matchDayType, matchDayMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert match_days")
	}

	if !cached {
		matchDayUpsertCacheMut.Lock()
		matchDayUpsertCache[key] = cache
		matchDayUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single MatchDay record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MatchDay) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no MatchDay provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), matchDayPrimaryKeyMapping)
	sql := "DELETE FROM \"match_days\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from match_days")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for match_days")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q matchDayQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no matchDayQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from match_days")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for match_days")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MatchDaySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchDayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"match_days\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, matchDayPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from matchDay slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for match_days")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MatchDay) Reload(exec boil.Executor) error {
	ret, err := FindMatchDay(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MatchDaySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MatchDaySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchDayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"match_days\".* FROM \"match_days\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, matchDayPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in MatchDaySlice")
	}

	*o = slice

	return nil
}

// MatchDayExists checks if the MatchDay row exists.
func MatchDayExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"match_days\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if match_days exists")
	}

	return exists, nil
}

// Exists checks if the MatchDay row exists.
func (o *MatchDay) Exists(exec boil.Executor) (bool, error) {
	return MatchDayExists(exec, o.ID)
}
