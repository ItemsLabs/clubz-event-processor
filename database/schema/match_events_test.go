// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMatchEvents(t *testing.T) {
	t.Parallel()

	query := MatchEvents()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMatchEventsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEvent{}
	if err = randomize.Struct(seed, o, matchEventDBTypes, true, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MatchEvents().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMatchEventsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEvent{}
	if err = randomize.Struct(seed, o, matchEventDBTypes, true, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MatchEvents().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MatchEvents().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMatchEventsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEvent{}
	if err = randomize.Struct(seed, o, matchEventDBTypes, true, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MatchEventSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MatchEvents().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMatchEventsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEvent{}
	if err = randomize.Struct(seed, o, matchEventDBTypes, true, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MatchEventExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MatchEvent exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MatchEventExists to return true, but got false.")
	}
}

func testMatchEventsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEvent{}
	if err = randomize.Struct(seed, o, matchEventDBTypes, true, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	matchEventFound, err := FindMatchEvent(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if matchEventFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMatchEventsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEvent{}
	if err = randomize.Struct(seed, o, matchEventDBTypes, true, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MatchEvents().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testMatchEventsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEvent{}
	if err = randomize.Struct(seed, o, matchEventDBTypes, true, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MatchEvents().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMatchEventsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	matchEventOne := &MatchEvent{}
	matchEventTwo := &MatchEvent{}
	if err = randomize.Struct(seed, matchEventOne, matchEventDBTypes, false, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}
	if err = randomize.Struct(seed, matchEventTwo, matchEventDBTypes, false, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = matchEventOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = matchEventTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MatchEvents().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMatchEventsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	matchEventOne := &MatchEvent{}
	matchEventTwo := &MatchEvent{}
	if err = randomize.Struct(seed, matchEventOne, matchEventDBTypes, false, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}
	if err = randomize.Struct(seed, matchEventTwo, matchEventDBTypes, false, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = matchEventOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = matchEventTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MatchEvents().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testMatchEventsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEvent{}
	if err = randomize.Struct(seed, o, matchEventDBTypes, true, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MatchEvents().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMatchEventsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEvent{}
	if err = randomize.Struct(seed, o, matchEventDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(matchEventColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MatchEvents().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMatchEventToManyGameEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchEvent
	var b, c GameEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchEventDBTypes, true, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, gameEventDBTypes, false, gameEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameEventDBTypes, false, gameEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.MatchEventID, a.ID)
	queries.Assign(&c.MatchEventID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GameEvents().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.MatchEventID, b.MatchEventID) {
			bFound = true
		}
		if queries.Equal(v.MatchEventID, c.MatchEventID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MatchEventSlice{&a}
	if err = a.L.LoadGameEvents(tx, false, (*[]*MatchEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GameEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GameEvents = nil
	if err = a.L.LoadGameEvents(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GameEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMatchEventToManyMatchEventSimulations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchEvent
	var b, c MatchEventSimulation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchEventDBTypes, true, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchEventSimulationDBTypes, false, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchEventSimulationDBTypes, false, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.MatchEventID = a.ID
	c.MatchEventID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MatchEventSimulations().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.MatchEventID == b.MatchEventID {
			bFound = true
		}
		if v.MatchEventID == c.MatchEventID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MatchEventSlice{&a}
	if err = a.L.LoadMatchEventSimulations(tx, false, (*[]*MatchEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchEventSimulations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MatchEventSimulations = nil
	if err = a.L.LoadMatchEventSimulations(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchEventSimulations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMatchEventToManyAddOpGameEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchEvent
	var b, c, d, e GameEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GameEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gameEventDBTypes, false, strmangle.SetComplement(gameEventPrimaryKeyColumns, gameEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GameEvent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGameEvents(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.MatchEventID) {
			t.Error("foreign key was wrong value", a.ID, first.MatchEventID)
		}
		if !queries.Equal(a.ID, second.MatchEventID) {
			t.Error("foreign key was wrong value", a.ID, second.MatchEventID)
		}

		if first.R.MatchEvent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.MatchEvent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GameEvents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GameEvents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GameEvents().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMatchEventToManySetOpGameEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchEvent
	var b, c, d, e GameEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GameEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gameEventDBTypes, false, strmangle.SetComplement(gameEventPrimaryKeyColumns, gameEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetGameEvents(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.GameEvents().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetGameEvents(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.GameEvents().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MatchEventID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MatchEventID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.MatchEventID) {
		t.Error("foreign key was wrong value", a.ID, d.MatchEventID)
	}
	if !queries.Equal(a.ID, e.MatchEventID) {
		t.Error("foreign key was wrong value", a.ID, e.MatchEventID)
	}

	if b.R.MatchEvent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.MatchEvent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.MatchEvent != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.MatchEvent != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.GameEvents[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.GameEvents[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMatchEventToManyRemoveOpGameEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchEvent
	var b, c, d, e GameEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GameEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gameEventDBTypes, false, strmangle.SetComplement(gameEventPrimaryKeyColumns, gameEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddGameEvents(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.GameEvents().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveGameEvents(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.GameEvents().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MatchEventID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MatchEventID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.MatchEvent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.MatchEvent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.MatchEvent != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.MatchEvent != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.GameEvents) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.GameEvents[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.GameEvents[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMatchEventToManyAddOpMatchEventSimulations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchEvent
	var b, c, d, e MatchEventSimulation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchEventSimulation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchEventSimulationDBTypes, false, strmangle.SetComplement(matchEventSimulationPrimaryKeyColumns, matchEventSimulationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MatchEventSimulation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMatchEventSimulations(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.MatchEventID {
			t.Error("foreign key was wrong value", a.ID, first.MatchEventID)
		}
		if a.ID != second.MatchEventID {
			t.Error("foreign key was wrong value", a.ID, second.MatchEventID)
		}

		if first.R.MatchEvent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.MatchEvent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MatchEventSimulations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MatchEventSimulations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MatchEventSimulations().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMatchEventToOneMatchUsingMatch(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local MatchEvent
	var foreign Match

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchEventDBTypes, false, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MatchID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Match().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchEventSlice{&local}
	if err = local.L.LoadMatch(tx, false, (*[]*MatchEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Match == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Match = nil
	if err = local.L.LoadMatch(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Match == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchEventToOneOptaFeedItemVersionUsingOptaFeedItemVersion(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local MatchEvent
	var foreign OptaFeedItemVersion

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchEventDBTypes, true, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, optaFeedItemVersionDBTypes, false, optaFeedItemVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptaFeedItemVersion struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OptaFeedItemVersionID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OptaFeedItemVersion().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchEventSlice{&local}
	if err = local.L.LoadOptaFeedItemVersion(tx, false, (*[]*MatchEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OptaFeedItemVersion == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OptaFeedItemVersion = nil
	if err = local.L.LoadOptaFeedItemVersion(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OptaFeedItemVersion == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchEventToOnePlayerUsingPlayer(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local MatchEvent
	var foreign Player

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchEventDBTypes, true, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PlayerID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Player().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchEventSlice{&local}
	if err = local.L.LoadPlayer(tx, false, (*[]*MatchEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Player == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Player = nil
	if err = local.L.LoadPlayer(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Player == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchEventToOneTeamUsingTeam(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local MatchEvent
	var foreign Team

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchEventDBTypes, true, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TeamID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Team().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchEventSlice{&local}
	if err = local.L.LoadTeam(tx, false, (*[]*MatchEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Team = nil
	if err = local.L.LoadTeam(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchEventToOneSetOpMatchUsingMatch(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchEvent
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Match{&b, &c} {
		err = a.SetMatch(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Match != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MatchEvents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MatchID != x.ID {
			t.Error("foreign key was wrong value", a.MatchID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MatchID))
		reflect.Indirect(reflect.ValueOf(&a.MatchID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MatchID != x.ID {
			t.Error("foreign key was wrong value", a.MatchID, x.ID)
		}
	}
}
func testMatchEventToOneSetOpOptaFeedItemVersionUsingOptaFeedItemVersion(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchEvent
	var b, c OptaFeedItemVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, optaFeedItemVersionDBTypes, false, strmangle.SetComplement(optaFeedItemVersionPrimaryKeyColumns, optaFeedItemVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, optaFeedItemVersionDBTypes, false, strmangle.SetComplement(optaFeedItemVersionPrimaryKeyColumns, optaFeedItemVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OptaFeedItemVersion{&b, &c} {
		err = a.SetOptaFeedItemVersion(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OptaFeedItemVersion != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MatchEvents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OptaFeedItemVersionID, x.ID) {
			t.Error("foreign key was wrong value", a.OptaFeedItemVersionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OptaFeedItemVersionID))
		reflect.Indirect(reflect.ValueOf(&a.OptaFeedItemVersionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OptaFeedItemVersionID, x.ID) {
			t.Error("foreign key was wrong value", a.OptaFeedItemVersionID, x.ID)
		}
	}
}

func testMatchEventToOneRemoveOpOptaFeedItemVersionUsingOptaFeedItemVersion(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchEvent
	var b OptaFeedItemVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, optaFeedItemVersionDBTypes, false, strmangle.SetComplement(optaFeedItemVersionPrimaryKeyColumns, optaFeedItemVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOptaFeedItemVersion(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOptaFeedItemVersion(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.OptaFeedItemVersion().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.OptaFeedItemVersion != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.OptaFeedItemVersionID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.MatchEvents) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMatchEventToOneSetOpPlayerUsingPlayer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchEvent
	var b, c Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Player{&b, &c} {
		err = a.SetPlayer(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Player != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MatchEvents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PlayerID, x.ID) {
			t.Error("foreign key was wrong value", a.PlayerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PlayerID))
		reflect.Indirect(reflect.ValueOf(&a.PlayerID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PlayerID, x.ID) {
			t.Error("foreign key was wrong value", a.PlayerID, x.ID)
		}
	}
}

func testMatchEventToOneRemoveOpPlayerUsingPlayer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchEvent
	var b Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPlayer(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePlayer(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Player().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Player != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PlayerID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.MatchEvents) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMatchEventToOneSetOpTeamUsingTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchEvent
	var b, c Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Team{&b, &c} {
		err = a.SetTeam(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Team != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MatchEvents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TeamID, x.ID) {
			t.Error("foreign key was wrong value", a.TeamID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TeamID))
		reflect.Indirect(reflect.ValueOf(&a.TeamID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TeamID, x.ID) {
			t.Error("foreign key was wrong value", a.TeamID, x.ID)
		}
	}
}

func testMatchEventToOneRemoveOpTeamUsingTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchEvent
	var b Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTeam(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTeam(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Team().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Team != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TeamID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.MatchEvents) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMatchEventsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEvent{}
	if err = randomize.Struct(seed, o, matchEventDBTypes, true, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testMatchEventsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEvent{}
	if err = randomize.Struct(seed, o, matchEventDBTypes, true, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MatchEventSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testMatchEventsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEvent{}
	if err = randomize.Struct(seed, o, matchEventDBTypes, true, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MatchEvents().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	matchEventDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `Timestamp`: `timestamp with time zone`, `Type`: `integer`, `Points`: `double precision`, `Payload`: `text`, `Minute`: `integer`, `Second`: `integer`, `X`: `double precision`, `Y`: `double precision`, `MatchEventID`: `integer`, `ProviderID`: `character varying`, `MatchID`: `uuid`, `PlayerID`: `uuid`, `TeamID`: `uuid`, `OptaFeedItemVersionID`: `uuid`, `Status`: `integer`, `Period`: `integer`, `HasRealTimestamp`: `boolean`}
	_                 = bytes.MinRead
)

func testMatchEventsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(matchEventPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(matchEventAllColumns) == len(matchEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MatchEvent{}
	if err = randomize.Struct(seed, o, matchEventDBTypes, true, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MatchEvents().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, matchEventDBTypes, true, matchEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMatchEventsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(matchEventAllColumns) == len(matchEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MatchEvent{}
	if err = randomize.Struct(seed, o, matchEventDBTypes, true, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MatchEvents().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, matchEventDBTypes, true, matchEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(matchEventAllColumns, matchEventPrimaryKeyColumns) {
		fields = matchEventAllColumns
	} else {
		fields = strmangle.SetComplement(
			matchEventAllColumns,
			matchEventPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MatchEventSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMatchEventsUpsert(t *testing.T) {
	t.Parallel()

	if len(matchEventAllColumns) == len(matchEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MatchEvent{}
	if err = randomize.Struct(seed, &o, matchEventDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MatchEvent: %s", err)
	}

	count, err := MatchEvents().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, matchEventDBTypes, false, matchEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MatchEvent: %s", err)
	}

	count, err = MatchEvents().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
