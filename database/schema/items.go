// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Item is an object representing the database table.
type Item struct {
	ID                int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Price             float64     `boil:"price" json:"price" toml:"price" yaml:"price"`
	Title             null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Description       null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	PageURL           null.String `boil:"page_url" json:"page_url,omitempty" toml:"page_url" yaml:"page_url,omitempty"`
	PurchaseImgURL    null.String `boil:"purchase_img_url" json:"purchase_img_url,omitempty" toml:"purchase_img_url" yaml:"purchase_img_url,omitempty"`
	ContractAbbr      string      `boil:"contract_abbr" json:"contract_abbr" toml:"contract_abbr" yaml:"contract_abbr"`
	ContractAddress   string      `boil:"contract_address" json:"contract_address" toml:"contract_address" yaml:"contract_address"`
	TokenID           null.String `boil:"token_id" json:"token_id,omitempty" toml:"token_id" yaml:"token_id,omitempty"`
	StripePriceID     null.String `boil:"stripe_price_id" json:"stripe_price_id,omitempty" toml:"stripe_price_id" yaml:"stripe_price_id,omitempty"`
	MinQuantity       null.Int    `boil:"min_quantity" json:"min_quantity,omitempty" toml:"min_quantity" yaml:"min_quantity,omitempty"`
	DefaultQuantity   null.Int    `boil:"default_quantity" json:"default_quantity,omitempty" toml:"default_quantity" yaml:"default_quantity,omitempty"`
	MaxQuantity       null.Int    `boil:"max_quantity" json:"max_quantity,omitempty" toml:"max_quantity" yaml:"max_quantity,omitempty"`
	WhitelistRequired bool        `boil:"whitelist_required" json:"whitelist_required" toml:"whitelist_required" yaml:"whitelist_required"`
	StartDateAt       time.Time   `boil:"start_date_at" json:"start_date_at" toml:"start_date_at" yaml:"start_date_at"`
	CloseDateAt       time.Time   `boil:"close_date_at" json:"close_date_at" toml:"close_date_at" yaml:"close_date_at"`
	BonusQuantity     types.JSON  `boil:"bonus_quantity" json:"bonus_quantity" toml:"bonus_quantity" yaml:"bonus_quantity"`
	Type              int         `boil:"type" json:"type" toml:"type" yaml:"type"`

	R *itemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L itemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ItemColumns = struct {
	ID                string
	Price             string
	Title             string
	Description       string
	PageURL           string
	PurchaseImgURL    string
	ContractAbbr      string
	ContractAddress   string
	TokenID           string
	StripePriceID     string
	MinQuantity       string
	DefaultQuantity   string
	MaxQuantity       string
	WhitelistRequired string
	StartDateAt       string
	CloseDateAt       string
	BonusQuantity     string
	Type              string
}{
	ID:                "id",
	Price:             "price",
	Title:             "title",
	Description:       "description",
	PageURL:           "page_url",
	PurchaseImgURL:    "purchase_img_url",
	ContractAbbr:      "contract_abbr",
	ContractAddress:   "contract_address",
	TokenID:           "token_id",
	StripePriceID:     "stripe_price_id",
	MinQuantity:       "min_quantity",
	DefaultQuantity:   "default_quantity",
	MaxQuantity:       "max_quantity",
	WhitelistRequired: "whitelist_required",
	StartDateAt:       "start_date_at",
	CloseDateAt:       "close_date_at",
	BonusQuantity:     "bonus_quantity",
	Type:              "type",
}

var ItemTableColumns = struct {
	ID                string
	Price             string
	Title             string
	Description       string
	PageURL           string
	PurchaseImgURL    string
	ContractAbbr      string
	ContractAddress   string
	TokenID           string
	StripePriceID     string
	MinQuantity       string
	DefaultQuantity   string
	MaxQuantity       string
	WhitelistRequired string
	StartDateAt       string
	CloseDateAt       string
	BonusQuantity     string
	Type              string
}{
	ID:                "items.id",
	Price:             "items.price",
	Title:             "items.title",
	Description:       "items.description",
	PageURL:           "items.page_url",
	PurchaseImgURL:    "items.purchase_img_url",
	ContractAbbr:      "items.contract_abbr",
	ContractAddress:   "items.contract_address",
	TokenID:           "items.token_id",
	StripePriceID:     "items.stripe_price_id",
	MinQuantity:       "items.min_quantity",
	DefaultQuantity:   "items.default_quantity",
	MaxQuantity:       "items.max_quantity",
	WhitelistRequired: "items.whitelist_required",
	StartDateAt:       "items.start_date_at",
	CloseDateAt:       "items.close_date_at",
	BonusQuantity:     "items.bonus_quantity",
	Type:              "items.type",
}

// Generated where

var ItemWhere = struct {
	ID                whereHelperint
	Price             whereHelperfloat64
	Title             whereHelpernull_String
	Description       whereHelpernull_String
	PageURL           whereHelpernull_String
	PurchaseImgURL    whereHelpernull_String
	ContractAbbr      whereHelperstring
	ContractAddress   whereHelperstring
	TokenID           whereHelpernull_String
	StripePriceID     whereHelpernull_String
	MinQuantity       whereHelpernull_Int
	DefaultQuantity   whereHelpernull_Int
	MaxQuantity       whereHelpernull_Int
	WhitelistRequired whereHelperbool
	StartDateAt       whereHelpertime_Time
	CloseDateAt       whereHelpertime_Time
	BonusQuantity     whereHelpertypes_JSON
	Type              whereHelperint
}{
	ID:                whereHelperint{field: "\"items\".\"id\""},
	Price:             whereHelperfloat64{field: "\"items\".\"price\""},
	Title:             whereHelpernull_String{field: "\"items\".\"title\""},
	Description:       whereHelpernull_String{field: "\"items\".\"description\""},
	PageURL:           whereHelpernull_String{field: "\"items\".\"page_url\""},
	PurchaseImgURL:    whereHelpernull_String{field: "\"items\".\"purchase_img_url\""},
	ContractAbbr:      whereHelperstring{field: "\"items\".\"contract_abbr\""},
	ContractAddress:   whereHelperstring{field: "\"items\".\"contract_address\""},
	TokenID:           whereHelpernull_String{field: "\"items\".\"token_id\""},
	StripePriceID:     whereHelpernull_String{field: "\"items\".\"stripe_price_id\""},
	MinQuantity:       whereHelpernull_Int{field: "\"items\".\"min_quantity\""},
	DefaultQuantity:   whereHelpernull_Int{field: "\"items\".\"default_quantity\""},
	MaxQuantity:       whereHelpernull_Int{field: "\"items\".\"max_quantity\""},
	WhitelistRequired: whereHelperbool{field: "\"items\".\"whitelist_required\""},
	StartDateAt:       whereHelpertime_Time{field: "\"items\".\"start_date_at\""},
	CloseDateAt:       whereHelpertime_Time{field: "\"items\".\"close_date_at\""},
	BonusQuantity:     whereHelpertypes_JSON{field: "\"items\".\"bonus_quantity\""},
	Type:              whereHelperint{field: "\"items\".\"type\""},
}

// ItemRels is where relationship names are stored.
var ItemRels = struct {
	Orders string
}{
	Orders: "Orders",
}

// itemR is where relationships are stored.
type itemR struct {
	Orders OrderSlice `boil:"Orders" json:"Orders" toml:"Orders" yaml:"Orders"`
}

// NewStruct creates a new relationship struct
func (*itemR) NewStruct() *itemR {
	return &itemR{}
}

func (r *itemR) GetOrders() OrderSlice {
	if r == nil {
		return nil
	}
	return r.Orders
}

// itemL is where Load methods for each relationship are stored.
type itemL struct{}

var (
	itemAllColumns            = []string{"id", "price", "title", "description", "page_url", "purchase_img_url", "contract_abbr", "contract_address", "token_id", "stripe_price_id", "min_quantity", "default_quantity", "max_quantity", "whitelist_required", "start_date_at", "close_date_at", "bonus_quantity", "type"}
	itemColumnsWithoutDefault = []string{"price", "contract_abbr", "contract_address", "whitelist_required", "start_date_at", "close_date_at", "bonus_quantity", "type"}
	itemColumnsWithDefault    = []string{"id", "title", "description", "page_url", "purchase_img_url", "token_id", "stripe_price_id", "min_quantity", "default_quantity", "max_quantity"}
	itemPrimaryKeyColumns     = []string{"id"}
	itemGeneratedColumns      = []string{}
)

type (
	// ItemSlice is an alias for a slice of pointers to Item.
	// This should almost always be used instead of []Item.
	ItemSlice []*Item

	itemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	itemType                 = reflect.TypeOf(&Item{})
	itemMapping              = queries.MakeStructMapping(itemType)
	itemPrimaryKeyMapping, _ = queries.BindMapping(itemType, itemMapping, itemPrimaryKeyColumns)
	itemInsertCacheMut       sync.RWMutex
	itemInsertCache          = make(map[string]insertCache)
	itemUpdateCacheMut       sync.RWMutex
	itemUpdateCache          = make(map[string]updateCache)
	itemUpsertCacheMut       sync.RWMutex
	itemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single item record from the query.
func (q itemQuery) One(exec boil.Executor) (*Item, error) {
	o := &Item{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for items")
	}

	return o, nil
}

// All returns all Item records from the query.
func (q itemQuery) All(exec boil.Executor) (ItemSlice, error) {
	var o []*Item

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to Item slice")
	}

	return o, nil
}

// Count returns the count of all Item records in the query.
func (q itemQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q itemQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if items exists")
	}

	return count > 0, nil
}

// Orders retrieves all the order's Orders with an executor.
func (o *Item) Orders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"item_id\"=?", o.ID),
	)

	return Orders(queryMods...)
}

// LoadOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (itemL) LoadOrders(e boil.Executor, singular bool, maybeItem interface{}, mods queries.Applicator) error {
	var slice []*Item
	var object *Item

	if singular {
		var ok bool
		object, ok = maybeItem.(*Item)
		if !ok {
			object = new(Item)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeItem))
			}
		}
	} else {
		s, ok := maybeItem.(*[]*Item)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &itemR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &itemR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.item_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if singular {
		object.R.Orders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.Item = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ItemID) {
				local.R.Orders = append(local.R.Orders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.Item = local
				break
			}
		}
	}

	return nil
}

// AddOrders adds the given related objects to the existing relationships
// of the item, optionally inserting them as new records.
// Appends related to o.R.Orders.
// Sets related.R.Item appropriately.
func (o *Item) AddOrders(exec boil.Executor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ItemID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"item_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ItemID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &itemR{
			Orders: related,
		}
	} else {
		o.R.Orders = append(o.R.Orders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				Item: o,
			}
		} else {
			rel.R.Item = o
		}
	}
	return nil
}

// SetOrders removes all previously related items of the
// item replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Item's Orders accordingly.
// Replaces o.R.Orders with related.
// Sets related.R.Item's Orders accordingly.
func (o *Item) SetOrders(exec boil.Executor, insert bool, related ...*Order) error {
	query := "update \"orders\" set \"item_id\" = null where \"item_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Orders {
			queries.SetScanner(&rel.ItemID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Item = nil
		}
		o.R.Orders = nil
	}

	return o.AddOrders(exec, insert, related...)
}

// RemoveOrders relationships from objects passed in.
// Removes related items from R.Orders (uses pointer comparison, removal does not keep order)
// Sets related.R.Item.
func (o *Item) RemoveOrders(exec boil.Executor, related ...*Order) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ItemID, nil)
		if rel.R != nil {
			rel.R.Item = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("item_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Orders {
			if rel != ri {
				continue
			}

			ln := len(o.R.Orders)
			if ln > 1 && i < ln-1 {
				o.R.Orders[i] = o.R.Orders[ln-1]
			}
			o.R.Orders = o.R.Orders[:ln-1]
			break
		}
	}

	return nil
}

// Items retrieves all the records using an executor.
func Items(mods ...qm.QueryMod) itemQuery {
	mods = append(mods, qm.From("\"items\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"items\".*"})
	}

	return itemQuery{q}
}

// FindItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindItem(exec boil.Executor, iD int, selectCols ...string) (*Item, error) {
	itemObj := &Item{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"items\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, itemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from items")
	}

	return itemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Item) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no items provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(itemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	itemInsertCacheMut.RLock()
	cache, cached := itemInsertCache[key]
	itemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			itemAllColumns,
			itemColumnsWithDefault,
			itemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(itemType, itemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(itemType, itemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into items")
	}

	if !cached {
		itemInsertCacheMut.Lock()
		itemInsertCache[key] = cache
		itemInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Item.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Item) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	itemUpdateCacheMut.RLock()
	cache, cached := itemUpdateCache[key]
	itemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			itemAllColumns,
			itemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, itemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(itemType, itemMapping, append(wl, itemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for items")
	}

	if !cached {
		itemUpdateCacheMut.Lock()
		itemUpdateCache[key] = cache
		itemUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q itemQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ItemSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), itemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, itemPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in item slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all item")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Item) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no items provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(itemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	itemUpsertCacheMut.RLock()
	cache, cached := itemUpsertCache[key]
	itemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			itemAllColumns,
			itemColumnsWithDefault,
			itemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			itemAllColumns,
			itemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert items, could not build update column list")
		}

		ret := strmangle.SetComplement(itemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(itemPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert items, could not build conflict column list")
			}

			conflict = make([]string, len(itemPrimaryKeyColumns))
			copy(conflict, itemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"items\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(itemType, itemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(itemType, itemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert items")
	}

	if !cached {
		itemUpsertCacheMut.Lock()
		itemUpsertCache[key] = cache
		itemUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Item record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Item) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no Item provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), itemPrimaryKeyMapping)
	sql := "DELETE FROM \"items\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q itemQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no itemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ItemSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), itemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, itemPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from item slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for items")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Item) Reload(exec boil.Executor) error {
	ret, err := FindItem(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ItemSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), itemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"items\".* FROM \"items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, itemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in ItemSlice")
	}

	*o = slice

	return nil
}

// ItemExists checks if the Item row exists.
func ItemExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"items\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if items exists")
	}

	return exists, nil
}

// Exists checks if the Item row exists.
func (o *Item) Exists(exec boil.Executor) (bool, error) {
	return ItemExists(exec, o.ID)
}
