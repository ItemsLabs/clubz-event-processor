// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OptaFeed is an object representing the database table.
type OptaFeed struct {
	ID                int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt         time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ProcessingStarted null.Time   `boil:"processing_started" json:"processing_started,omitempty" toml:"processing_started" yaml:"processing_started,omitempty"`
	ProcessingEnded   null.Time   `boil:"processing_ended" json:"processing_ended,omitempty" toml:"processing_ended" yaml:"processing_ended,omitempty"`
	FeedObjectID      string      `boil:"feed_object_id" json:"feed_object_id" toml:"feed_object_id" yaml:"feed_object_id"`
	FeedHash          null.String `boil:"feed_hash" json:"feed_hash,omitempty" toml:"feed_hash" yaml:"feed_hash,omitempty"`
	FeedType          string      `boil:"feed_type" json:"feed_type" toml:"feed_type" yaml:"feed_type"`
	Status            int         `boil:"status" json:"status" toml:"status" yaml:"status"`
	Headers           string      `boil:"headers" json:"headers" toml:"headers" yaml:"headers"`
	MatchID           null.String `boil:"match_id" json:"match_id,omitempty" toml:"match_id" yaml:"match_id,omitempty"`

	R *optaFeedR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L optaFeedL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OptaFeedColumns = struct {
	ID                string
	CreatedAt         string
	ProcessingStarted string
	ProcessingEnded   string
	FeedObjectID      string
	FeedHash          string
	FeedType          string
	Status            string
	Headers           string
	MatchID           string
}{
	ID:                "id",
	CreatedAt:         "created_at",
	ProcessingStarted: "processing_started",
	ProcessingEnded:   "processing_ended",
	FeedObjectID:      "feed_object_id",
	FeedHash:          "feed_hash",
	FeedType:          "feed_type",
	Status:            "status",
	Headers:           "headers",
	MatchID:           "match_id",
}

var OptaFeedTableColumns = struct {
	ID                string
	CreatedAt         string
	ProcessingStarted string
	ProcessingEnded   string
	FeedObjectID      string
	FeedHash          string
	FeedType          string
	Status            string
	Headers           string
	MatchID           string
}{
	ID:                "opta_feeds.id",
	CreatedAt:         "opta_feeds.created_at",
	ProcessingStarted: "opta_feeds.processing_started",
	ProcessingEnded:   "opta_feeds.processing_ended",
	FeedObjectID:      "opta_feeds.feed_object_id",
	FeedHash:          "opta_feeds.feed_hash",
	FeedType:          "opta_feeds.feed_type",
	Status:            "opta_feeds.status",
	Headers:           "opta_feeds.headers",
	MatchID:           "opta_feeds.match_id",
}

// Generated where

var OptaFeedWhere = struct {
	ID                whereHelperint
	CreatedAt         whereHelpertime_Time
	ProcessingStarted whereHelpernull_Time
	ProcessingEnded   whereHelpernull_Time
	FeedObjectID      whereHelperstring
	FeedHash          whereHelpernull_String
	FeedType          whereHelperstring
	Status            whereHelperint
	Headers           whereHelperstring
	MatchID           whereHelpernull_String
}{
	ID:                whereHelperint{field: "\"opta_feeds\".\"id\""},
	CreatedAt:         whereHelpertime_Time{field: "\"opta_feeds\".\"created_at\""},
	ProcessingStarted: whereHelpernull_Time{field: "\"opta_feeds\".\"processing_started\""},
	ProcessingEnded:   whereHelpernull_Time{field: "\"opta_feeds\".\"processing_ended\""},
	FeedObjectID:      whereHelperstring{field: "\"opta_feeds\".\"feed_object_id\""},
	FeedHash:          whereHelpernull_String{field: "\"opta_feeds\".\"feed_hash\""},
	FeedType:          whereHelperstring{field: "\"opta_feeds\".\"feed_type\""},
	Status:            whereHelperint{field: "\"opta_feeds\".\"status\""},
	Headers:           whereHelperstring{field: "\"opta_feeds\".\"headers\""},
	MatchID:           whereHelpernull_String{field: "\"opta_feeds\".\"match_id\""},
}

// OptaFeedRels is where relationship names are stored.
var OptaFeedRels = struct {
	Match string
}{
	Match: "Match",
}

// optaFeedR is where relationships are stored.
type optaFeedR struct {
	Match *Match `boil:"Match" json:"Match" toml:"Match" yaml:"Match"`
}

// NewStruct creates a new relationship struct
func (*optaFeedR) NewStruct() *optaFeedR {
	return &optaFeedR{}
}

func (r *optaFeedR) GetMatch() *Match {
	if r == nil {
		return nil
	}
	return r.Match
}

// optaFeedL is where Load methods for each relationship are stored.
type optaFeedL struct{}

var (
	optaFeedAllColumns            = []string{"id", "created_at", "processing_started", "processing_ended", "feed_object_id", "feed_hash", "feed_type", "status", "headers", "match_id"}
	optaFeedColumnsWithoutDefault = []string{"created_at", "feed_object_id", "feed_type", "status", "headers"}
	optaFeedColumnsWithDefault    = []string{"id", "processing_started", "processing_ended", "feed_hash", "match_id"}
	optaFeedPrimaryKeyColumns     = []string{"id"}
	optaFeedGeneratedColumns      = []string{}
)

type (
	// OptaFeedSlice is an alias for a slice of pointers to OptaFeed.
	// This should almost always be used instead of []OptaFeed.
	OptaFeedSlice []*OptaFeed

	optaFeedQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	optaFeedType                 = reflect.TypeOf(&OptaFeed{})
	optaFeedMapping              = queries.MakeStructMapping(optaFeedType)
	optaFeedPrimaryKeyMapping, _ = queries.BindMapping(optaFeedType, optaFeedMapping, optaFeedPrimaryKeyColumns)
	optaFeedInsertCacheMut       sync.RWMutex
	optaFeedInsertCache          = make(map[string]insertCache)
	optaFeedUpdateCacheMut       sync.RWMutex
	optaFeedUpdateCache          = make(map[string]updateCache)
	optaFeedUpsertCacheMut       sync.RWMutex
	optaFeedUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single optaFeed record from the query.
func (q optaFeedQuery) One(exec boil.Executor) (*OptaFeed, error) {
	o := &OptaFeed{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for opta_feeds")
	}

	return o, nil
}

// All returns all OptaFeed records from the query.
func (q optaFeedQuery) All(exec boil.Executor) (OptaFeedSlice, error) {
	var o []*OptaFeed

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to OptaFeed slice")
	}

	return o, nil
}

// Count returns the count of all OptaFeed records in the query.
func (q optaFeedQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count opta_feeds rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q optaFeedQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if opta_feeds exists")
	}

	return count > 0, nil
}

// Match pointed to by the foreign key.
func (o *OptaFeed) Match(mods ...qm.QueryMod) matchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MatchID),
	}

	queryMods = append(queryMods, mods...)

	return Matches(queryMods...)
}

// LoadMatch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (optaFeedL) LoadMatch(e boil.Executor, singular bool, maybeOptaFeed interface{}, mods queries.Applicator) error {
	var slice []*OptaFeed
	var object *OptaFeed

	if singular {
		var ok bool
		object, ok = maybeOptaFeed.(*OptaFeed)
		if !ok {
			object = new(OptaFeed)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOptaFeed)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOptaFeed))
			}
		}
	} else {
		s, ok := maybeOptaFeed.(*[]*OptaFeed)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOptaFeed)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOptaFeed))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &optaFeedR{}
		}
		if !queries.IsNil(object.MatchID) {
			args[object.MatchID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &optaFeedR{}
			}

			if !queries.IsNil(obj.MatchID) {
				args[obj.MatchID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Match")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Match")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Match = foreign
		if foreign.R == nil {
			foreign.R = &matchR{}
		}
		foreign.R.OptaFeeds = append(foreign.R.OptaFeeds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MatchID, foreign.ID) {
				local.R.Match = foreign
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.OptaFeeds = append(foreign.R.OptaFeeds, local)
				break
			}
		}
	}

	return nil
}

// SetMatch of the optaFeed to the related item.
// Sets o.R.Match to related.
// Adds o to related.R.OptaFeeds.
func (o *OptaFeed) SetMatch(exec boil.Executor, insert bool, related *Match) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"opta_feeds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"match_id"}),
		strmangle.WhereClause("\"", "\"", 2, optaFeedPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MatchID, related.ID)
	if o.R == nil {
		o.R = &optaFeedR{
			Match: related,
		}
	} else {
		o.R.Match = related
	}

	if related.R == nil {
		related.R = &matchR{
			OptaFeeds: OptaFeedSlice{o},
		}
	} else {
		related.R.OptaFeeds = append(related.R.OptaFeeds, o)
	}

	return nil
}

// RemoveMatch relationship.
// Sets o.R.Match to nil.
// Removes o from all passed in related items' relationships struct.
func (o *OptaFeed) RemoveMatch(exec boil.Executor, related *Match) error {
	var err error

	queries.SetScanner(&o.MatchID, nil)
	if _, err = o.Update(exec, boil.Whitelist("match_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Match = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OptaFeeds {
		if queries.Equal(o.MatchID, ri.MatchID) {
			continue
		}

		ln := len(related.R.OptaFeeds)
		if ln > 1 && i < ln-1 {
			related.R.OptaFeeds[i] = related.R.OptaFeeds[ln-1]
		}
		related.R.OptaFeeds = related.R.OptaFeeds[:ln-1]
		break
	}
	return nil
}

// OptaFeeds retrieves all the records using an executor.
func OptaFeeds(mods ...qm.QueryMod) optaFeedQuery {
	mods = append(mods, qm.From("\"opta_feeds\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"opta_feeds\".*"})
	}

	return optaFeedQuery{q}
}

// FindOptaFeed retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOptaFeed(exec boil.Executor, iD int, selectCols ...string) (*OptaFeed, error) {
	optaFeedObj := &OptaFeed{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"opta_feeds\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, optaFeedObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from opta_feeds")
	}

	return optaFeedObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OptaFeed) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no opta_feeds provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(optaFeedColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	optaFeedInsertCacheMut.RLock()
	cache, cached := optaFeedInsertCache[key]
	optaFeedInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			optaFeedAllColumns,
			optaFeedColumnsWithDefault,
			optaFeedColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(optaFeedType, optaFeedMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(optaFeedType, optaFeedMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"opta_feeds\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"opta_feeds\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into opta_feeds")
	}

	if !cached {
		optaFeedInsertCacheMut.Lock()
		optaFeedInsertCache[key] = cache
		optaFeedInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the OptaFeed.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OptaFeed) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	optaFeedUpdateCacheMut.RLock()
	cache, cached := optaFeedUpdateCache[key]
	optaFeedUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			optaFeedAllColumns,
			optaFeedPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update opta_feeds, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"opta_feeds\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, optaFeedPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(optaFeedType, optaFeedMapping, append(wl, optaFeedPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update opta_feeds row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for opta_feeds")
	}

	if !cached {
		optaFeedUpdateCacheMut.Lock()
		optaFeedUpdateCache[key] = cache
		optaFeedUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q optaFeedQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for opta_feeds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for opta_feeds")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OptaFeedSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), optaFeedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"opta_feeds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, optaFeedPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in optaFeed slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all optaFeed")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OptaFeed) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no opta_feeds provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(optaFeedColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	optaFeedUpsertCacheMut.RLock()
	cache, cached := optaFeedUpsertCache[key]
	optaFeedUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			optaFeedAllColumns,
			optaFeedColumnsWithDefault,
			optaFeedColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			optaFeedAllColumns,
			optaFeedPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert opta_feeds, could not build update column list")
		}

		ret := strmangle.SetComplement(optaFeedAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(optaFeedPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert opta_feeds, could not build conflict column list")
			}

			conflict = make([]string, len(optaFeedPrimaryKeyColumns))
			copy(conflict, optaFeedPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"opta_feeds\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(optaFeedType, optaFeedMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(optaFeedType, optaFeedMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert opta_feeds")
	}

	if !cached {
		optaFeedUpsertCacheMut.Lock()
		optaFeedUpsertCache[key] = cache
		optaFeedUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single OptaFeed record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OptaFeed) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no OptaFeed provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), optaFeedPrimaryKeyMapping)
	sql := "DELETE FROM \"opta_feeds\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from opta_feeds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for opta_feeds")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q optaFeedQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no optaFeedQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from opta_feeds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for opta_feeds")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OptaFeedSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), optaFeedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"opta_feeds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, optaFeedPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from optaFeed slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for opta_feeds")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OptaFeed) Reload(exec boil.Executor) error {
	ret, err := FindOptaFeed(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OptaFeedSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OptaFeedSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), optaFeedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"opta_feeds\".* FROM \"opta_feeds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, optaFeedPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in OptaFeedSlice")
	}

	*o = slice

	return nil
}

// OptaFeedExists checks if the OptaFeed row exists.
func OptaFeedExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"opta_feeds\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if opta_feeds exists")
	}

	return exists, nil
}

// Exists checks if the OptaFeed row exists.
func (o *OptaFeed) Exists(exec boil.Executor) (bool, error) {
	return OptaFeedExists(exec, o.ID)
}
