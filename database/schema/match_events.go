// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MatchEvent is an object representing the database table.
type MatchEvent struct {
	ID                    int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt             time.Time    `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Timestamp             time.Time    `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	Type                  int          `boil:"type" json:"type" toml:"type" yaml:"type"`
	Points                null.Float64 `boil:"points" json:"points,omitempty" toml:"points" yaml:"points,omitempty"`
	Payload               null.String  `boil:"payload" json:"payload,omitempty" toml:"payload" yaml:"payload,omitempty"`
	Minute                int          `boil:"minute" json:"minute" toml:"minute" yaml:"minute"`
	Second                int          `boil:"second" json:"second" toml:"second" yaml:"second"`
	X                     float64      `boil:"x" json:"x" toml:"x" yaml:"x"`
	Y                     float64      `boil:"y" json:"y" toml:"y" yaml:"y"`
	MatchEventID          int          `boil:"match_event_id" json:"match_event_id" toml:"match_event_id" yaml:"match_event_id"`
	ProviderID            string       `boil:"provider_id" json:"provider_id" toml:"provider_id" yaml:"provider_id"`
	MatchID               string       `boil:"match_id" json:"match_id" toml:"match_id" yaml:"match_id"`
	PlayerID              null.String  `boil:"player_id" json:"player_id,omitempty" toml:"player_id" yaml:"player_id,omitempty"`
	TeamID                null.String  `boil:"team_id" json:"team_id,omitempty" toml:"team_id" yaml:"team_id,omitempty"`
	OptaFeedItemVersionID null.String  `boil:"opta_feed_item_version_id" json:"opta_feed_item_version_id,omitempty" toml:"opta_feed_item_version_id" yaml:"opta_feed_item_version_id,omitempty"`
	Status                int          `boil:"status" json:"status" toml:"status" yaml:"status"`
	Period                null.Int     `boil:"period" json:"period,omitempty" toml:"period" yaml:"period,omitempty"`
	HasRealTimestamp      bool         `boil:"has_real_timestamp" json:"has_real_timestamp" toml:"has_real_timestamp" yaml:"has_real_timestamp"`

	R *matchEventR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L matchEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MatchEventColumns = struct {
	ID                    string
	CreatedAt             string
	Timestamp             string
	Type                  string
	Points                string
	Payload               string
	Minute                string
	Second                string
	X                     string
	Y                     string
	MatchEventID          string
	ProviderID            string
	MatchID               string
	PlayerID              string
	TeamID                string
	OptaFeedItemVersionID string
	Status                string
	Period                string
	HasRealTimestamp      string
}{
	ID:                    "id",
	CreatedAt:             "created_at",
	Timestamp:             "timestamp",
	Type:                  "type",
	Points:                "points",
	Payload:               "payload",
	Minute:                "minute",
	Second:                "second",
	X:                     "x",
	Y:                     "y",
	MatchEventID:          "match_event_id",
	ProviderID:            "provider_id",
	MatchID:               "match_id",
	PlayerID:              "player_id",
	TeamID:                "team_id",
	OptaFeedItemVersionID: "opta_feed_item_version_id",
	Status:                "status",
	Period:                "period",
	HasRealTimestamp:      "has_real_timestamp",
}

var MatchEventTableColumns = struct {
	ID                    string
	CreatedAt             string
	Timestamp             string
	Type                  string
	Points                string
	Payload               string
	Minute                string
	Second                string
	X                     string
	Y                     string
	MatchEventID          string
	ProviderID            string
	MatchID               string
	PlayerID              string
	TeamID                string
	OptaFeedItemVersionID string
	Status                string
	Period                string
	HasRealTimestamp      string
}{
	ID:                    "match_events.id",
	CreatedAt:             "match_events.created_at",
	Timestamp:             "match_events.timestamp",
	Type:                  "match_events.type",
	Points:                "match_events.points",
	Payload:               "match_events.payload",
	Minute:                "match_events.minute",
	Second:                "match_events.second",
	X:                     "match_events.x",
	Y:                     "match_events.y",
	MatchEventID:          "match_events.match_event_id",
	ProviderID:            "match_events.provider_id",
	MatchID:               "match_events.match_id",
	PlayerID:              "match_events.player_id",
	TeamID:                "match_events.team_id",
	OptaFeedItemVersionID: "match_events.opta_feed_item_version_id",
	Status:                "match_events.status",
	Period:                "match_events.period",
	HasRealTimestamp:      "match_events.has_real_timestamp",
}

// Generated where

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var MatchEventWhere = struct {
	ID                    whereHelperint
	CreatedAt             whereHelpertime_Time
	Timestamp             whereHelpertime_Time
	Type                  whereHelperint
	Points                whereHelpernull_Float64
	Payload               whereHelpernull_String
	Minute                whereHelperint
	Second                whereHelperint
	X                     whereHelperfloat64
	Y                     whereHelperfloat64
	MatchEventID          whereHelperint
	ProviderID            whereHelperstring
	MatchID               whereHelperstring
	PlayerID              whereHelpernull_String
	TeamID                whereHelpernull_String
	OptaFeedItemVersionID whereHelpernull_String
	Status                whereHelperint
	Period                whereHelpernull_Int
	HasRealTimestamp      whereHelperbool
}{
	ID:                    whereHelperint{field: "\"match_events\".\"id\""},
	CreatedAt:             whereHelpertime_Time{field: "\"match_events\".\"created_at\""},
	Timestamp:             whereHelpertime_Time{field: "\"match_events\".\"timestamp\""},
	Type:                  whereHelperint{field: "\"match_events\".\"type\""},
	Points:                whereHelpernull_Float64{field: "\"match_events\".\"points\""},
	Payload:               whereHelpernull_String{field: "\"match_events\".\"payload\""},
	Minute:                whereHelperint{field: "\"match_events\".\"minute\""},
	Second:                whereHelperint{field: "\"match_events\".\"second\""},
	X:                     whereHelperfloat64{field: "\"match_events\".\"x\""},
	Y:                     whereHelperfloat64{field: "\"match_events\".\"y\""},
	MatchEventID:          whereHelperint{field: "\"match_events\".\"match_event_id\""},
	ProviderID:            whereHelperstring{field: "\"match_events\".\"provider_id\""},
	MatchID:               whereHelperstring{field: "\"match_events\".\"match_id\""},
	PlayerID:              whereHelpernull_String{field: "\"match_events\".\"player_id\""},
	TeamID:                whereHelpernull_String{field: "\"match_events\".\"team_id\""},
	OptaFeedItemVersionID: whereHelpernull_String{field: "\"match_events\".\"opta_feed_item_version_id\""},
	Status:                whereHelperint{field: "\"match_events\".\"status\""},
	Period:                whereHelpernull_Int{field: "\"match_events\".\"period\""},
	HasRealTimestamp:      whereHelperbool{field: "\"match_events\".\"has_real_timestamp\""},
}

// MatchEventRels is where relationship names are stored.
var MatchEventRels = struct {
	Match                 string
	OptaFeedItemVersion   string
	Player                string
	Team                  string
	GameEvents            string
	MatchEventSimulations string
}{
	Match:                 "Match",
	OptaFeedItemVersion:   "OptaFeedItemVersion",
	Player:                "Player",
	Team:                  "Team",
	GameEvents:            "GameEvents",
	MatchEventSimulations: "MatchEventSimulations",
}

// matchEventR is where relationships are stored.
type matchEventR struct {
	Match                 *Match                    `boil:"Match" json:"Match" toml:"Match" yaml:"Match"`
	OptaFeedItemVersion   *OptaFeedItemVersion      `boil:"OptaFeedItemVersion" json:"OptaFeedItemVersion" toml:"OptaFeedItemVersion" yaml:"OptaFeedItemVersion"`
	Player                *Player                   `boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
	Team                  *Team                     `boil:"Team" json:"Team" toml:"Team" yaml:"Team"`
	GameEvents            GameEventSlice            `boil:"GameEvents" json:"GameEvents" toml:"GameEvents" yaml:"GameEvents"`
	MatchEventSimulations MatchEventSimulationSlice `boil:"MatchEventSimulations" json:"MatchEventSimulations" toml:"MatchEventSimulations" yaml:"MatchEventSimulations"`
}

// NewStruct creates a new relationship struct
func (*matchEventR) NewStruct() *matchEventR {
	return &matchEventR{}
}

func (r *matchEventR) GetMatch() *Match {
	if r == nil {
		return nil
	}
	return r.Match
}

func (r *matchEventR) GetOptaFeedItemVersion() *OptaFeedItemVersion {
	if r == nil {
		return nil
	}
	return r.OptaFeedItemVersion
}

func (r *matchEventR) GetPlayer() *Player {
	if r == nil {
		return nil
	}
	return r.Player
}

func (r *matchEventR) GetTeam() *Team {
	if r == nil {
		return nil
	}
	return r.Team
}

func (r *matchEventR) GetGameEvents() GameEventSlice {
	if r == nil {
		return nil
	}
	return r.GameEvents
}

func (r *matchEventR) GetMatchEventSimulations() MatchEventSimulationSlice {
	if r == nil {
		return nil
	}
	return r.MatchEventSimulations
}

// matchEventL is where Load methods for each relationship are stored.
type matchEventL struct{}

var (
	matchEventAllColumns            = []string{"id", "created_at", "timestamp", "type", "points", "payload", "minute", "second", "x", "y", "match_event_id", "provider_id", "match_id", "player_id", "team_id", "opta_feed_item_version_id", "status", "period", "has_real_timestamp"}
	matchEventColumnsWithoutDefault = []string{"created_at", "timestamp", "type", "minute", "second", "x", "y", "match_event_id", "provider_id", "match_id", "status", "has_real_timestamp"}
	matchEventColumnsWithDefault    = []string{"id", "points", "payload", "player_id", "team_id", "opta_feed_item_version_id", "period"}
	matchEventPrimaryKeyColumns     = []string{"id"}
	matchEventGeneratedColumns      = []string{}
)

type (
	// MatchEventSlice is an alias for a slice of pointers to MatchEvent.
	// This should almost always be used instead of []MatchEvent.
	MatchEventSlice []*MatchEvent

	matchEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	matchEventType                 = reflect.TypeOf(&MatchEvent{})
	matchEventMapping              = queries.MakeStructMapping(matchEventType)
	matchEventPrimaryKeyMapping, _ = queries.BindMapping(matchEventType, matchEventMapping, matchEventPrimaryKeyColumns)
	matchEventInsertCacheMut       sync.RWMutex
	matchEventInsertCache          = make(map[string]insertCache)
	matchEventUpdateCacheMut       sync.RWMutex
	matchEventUpdateCache          = make(map[string]updateCache)
	matchEventUpsertCacheMut       sync.RWMutex
	matchEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single matchEvent record from the query.
func (q matchEventQuery) One(exec boil.Executor) (*MatchEvent, error) {
	o := &MatchEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for match_events")
	}

	return o, nil
}

// All returns all MatchEvent records from the query.
func (q matchEventQuery) All(exec boil.Executor) (MatchEventSlice, error) {
	var o []*MatchEvent

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to MatchEvent slice")
	}

	return o, nil
}

// Count returns the count of all MatchEvent records in the query.
func (q matchEventQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count match_events rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q matchEventQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if match_events exists")
	}

	return count > 0, nil
}

// Match pointed to by the foreign key.
func (o *MatchEvent) Match(mods ...qm.QueryMod) matchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MatchID),
	}

	queryMods = append(queryMods, mods...)

	return Matches(queryMods...)
}

// OptaFeedItemVersion pointed to by the foreign key.
func (o *MatchEvent) OptaFeedItemVersion(mods ...qm.QueryMod) optaFeedItemVersionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OptaFeedItemVersionID),
	}

	queryMods = append(queryMods, mods...)

	return OptaFeedItemVersions(queryMods...)
}

// Player pointed to by the foreign key.
func (o *MatchEvent) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
	}

	queryMods = append(queryMods, mods...)

	return Players(queryMods...)
}

// Team pointed to by the foreign key.
func (o *MatchEvent) Team(mods ...qm.QueryMod) teamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TeamID),
	}

	queryMods = append(queryMods, mods...)

	return Teams(queryMods...)
}

// GameEvents retrieves all the game_event's GameEvents with an executor.
func (o *MatchEvent) GameEvents(mods ...qm.QueryMod) gameEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"game_events\".\"match_event_id\"=?", o.ID),
	)

	return GameEvents(queryMods...)
}

// MatchEventSimulations retrieves all the match_event_simulation's MatchEventSimulations with an executor.
func (o *MatchEvent) MatchEventSimulations(mods ...qm.QueryMod) matchEventSimulationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"match_event_simulations\".\"match_event_id\"=?", o.ID),
	)

	return MatchEventSimulations(queryMods...)
}

// LoadMatch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchEventL) LoadMatch(e boil.Executor, singular bool, maybeMatchEvent interface{}, mods queries.Applicator) error {
	var slice []*MatchEvent
	var object *MatchEvent

	if singular {
		var ok bool
		object, ok = maybeMatchEvent.(*MatchEvent)
		if !ok {
			object = new(MatchEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchEvent))
			}
		}
	} else {
		s, ok := maybeMatchEvent.(*[]*MatchEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchEvent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchEventR{}
		}
		args[object.MatchID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchEventR{}
			}

			args[obj.MatchID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Match")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Match")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Match = foreign
		if foreign.R == nil {
			foreign.R = &matchR{}
		}
		foreign.R.MatchEvents = append(foreign.R.MatchEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MatchID == foreign.ID {
				local.R.Match = foreign
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.MatchEvents = append(foreign.R.MatchEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadOptaFeedItemVersion allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchEventL) LoadOptaFeedItemVersion(e boil.Executor, singular bool, maybeMatchEvent interface{}, mods queries.Applicator) error {
	var slice []*MatchEvent
	var object *MatchEvent

	if singular {
		var ok bool
		object, ok = maybeMatchEvent.(*MatchEvent)
		if !ok {
			object = new(MatchEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchEvent))
			}
		}
	} else {
		s, ok := maybeMatchEvent.(*[]*MatchEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchEvent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchEventR{}
		}
		if !queries.IsNil(object.OptaFeedItemVersionID) {
			args[object.OptaFeedItemVersionID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchEventR{}
			}

			if !queries.IsNil(obj.OptaFeedItemVersionID) {
				args[obj.OptaFeedItemVersionID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`opta_feed_item_versions`),
		qm.WhereIn(`opta_feed_item_versions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OptaFeedItemVersion")
	}

	var resultSlice []*OptaFeedItemVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OptaFeedItemVersion")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for opta_feed_item_versions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for opta_feed_item_versions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OptaFeedItemVersion = foreign
		if foreign.R == nil {
			foreign.R = &optaFeedItemVersionR{}
		}
		foreign.R.MatchEvents = append(foreign.R.MatchEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OptaFeedItemVersionID, foreign.ID) {
				local.R.OptaFeedItemVersion = foreign
				if foreign.R == nil {
					foreign.R = &optaFeedItemVersionR{}
				}
				foreign.R.MatchEvents = append(foreign.R.MatchEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchEventL) LoadPlayer(e boil.Executor, singular bool, maybeMatchEvent interface{}, mods queries.Applicator) error {
	var slice []*MatchEvent
	var object *MatchEvent

	if singular {
		var ok bool
		object, ok = maybeMatchEvent.(*MatchEvent)
		if !ok {
			object = new(MatchEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchEvent))
			}
		}
	} else {
		s, ok := maybeMatchEvent.(*[]*MatchEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchEvent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchEventR{}
		}
		if !queries.IsNil(object.PlayerID) {
			args[object.PlayerID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchEventR{}
			}

			if !queries.IsNil(obj.PlayerID) {
				args[obj.PlayerID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.MatchEvents = append(foreign.R.MatchEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PlayerID, foreign.ID) {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.MatchEvents = append(foreign.R.MatchEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchEventL) LoadTeam(e boil.Executor, singular bool, maybeMatchEvent interface{}, mods queries.Applicator) error {
	var slice []*MatchEvent
	var object *MatchEvent

	if singular {
		var ok bool
		object, ok = maybeMatchEvent.(*MatchEvent)
		if !ok {
			object = new(MatchEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchEvent))
			}
		}
	} else {
		s, ok := maybeMatchEvent.(*[]*MatchEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchEvent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchEventR{}
		}
		if !queries.IsNil(object.TeamID) {
			args[object.TeamID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchEventR{}
			}

			if !queries.IsNil(obj.TeamID) {
				args[obj.TeamID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`teams`),
		qm.WhereIn(`teams.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for teams")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Team = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.MatchEvents = append(foreign.R.MatchEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TeamID, foreign.ID) {
				local.R.Team = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.MatchEvents = append(foreign.R.MatchEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadGameEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (matchEventL) LoadGameEvents(e boil.Executor, singular bool, maybeMatchEvent interface{}, mods queries.Applicator) error {
	var slice []*MatchEvent
	var object *MatchEvent

	if singular {
		var ok bool
		object, ok = maybeMatchEvent.(*MatchEvent)
		if !ok {
			object = new(MatchEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchEvent))
			}
		}
	} else {
		s, ok := maybeMatchEvent.(*[]*MatchEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchEvent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchEventR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchEventR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`game_events`),
		qm.WhereIn(`game_events.match_event_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load game_events")
	}

	var resultSlice []*GameEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice game_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on game_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_events")
	}

	if singular {
		object.R.GameEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gameEventR{}
			}
			foreign.R.MatchEvent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.MatchEventID) {
				local.R.GameEvents = append(local.R.GameEvents, foreign)
				if foreign.R == nil {
					foreign.R = &gameEventR{}
				}
				foreign.R.MatchEvent = local
				break
			}
		}
	}

	return nil
}

// LoadMatchEventSimulations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (matchEventL) LoadMatchEventSimulations(e boil.Executor, singular bool, maybeMatchEvent interface{}, mods queries.Applicator) error {
	var slice []*MatchEvent
	var object *MatchEvent

	if singular {
		var ok bool
		object, ok = maybeMatchEvent.(*MatchEvent)
		if !ok {
			object = new(MatchEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchEvent))
			}
		}
	} else {
		s, ok := maybeMatchEvent.(*[]*MatchEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchEvent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchEventR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchEventR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`match_event_simulations`),
		qm.WhereIn(`match_event_simulations.match_event_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load match_event_simulations")
	}

	var resultSlice []*MatchEventSimulation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice match_event_simulations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on match_event_simulations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for match_event_simulations")
	}

	if singular {
		object.R.MatchEventSimulations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchEventSimulationR{}
			}
			foreign.R.MatchEvent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MatchEventID {
				local.R.MatchEventSimulations = append(local.R.MatchEventSimulations, foreign)
				if foreign.R == nil {
					foreign.R = &matchEventSimulationR{}
				}
				foreign.R.MatchEvent = local
				break
			}
		}
	}

	return nil
}

// SetMatch of the matchEvent to the related item.
// Sets o.R.Match to related.
// Adds o to related.R.MatchEvents.
func (o *MatchEvent) SetMatch(exec boil.Executor, insert bool, related *Match) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"match_id"}),
		strmangle.WhereClause("\"", "\"", 2, matchEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MatchID = related.ID
	if o.R == nil {
		o.R = &matchEventR{
			Match: related,
		}
	} else {
		o.R.Match = related
	}

	if related.R == nil {
		related.R = &matchR{
			MatchEvents: MatchEventSlice{o},
		}
	} else {
		related.R.MatchEvents = append(related.R.MatchEvents, o)
	}

	return nil
}

// SetOptaFeedItemVersion of the matchEvent to the related item.
// Sets o.R.OptaFeedItemVersion to related.
// Adds o to related.R.MatchEvents.
func (o *MatchEvent) SetOptaFeedItemVersion(exec boil.Executor, insert bool, related *OptaFeedItemVersion) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"opta_feed_item_version_id"}),
		strmangle.WhereClause("\"", "\"", 2, matchEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OptaFeedItemVersionID, related.ID)
	if o.R == nil {
		o.R = &matchEventR{
			OptaFeedItemVersion: related,
		}
	} else {
		o.R.OptaFeedItemVersion = related
	}

	if related.R == nil {
		related.R = &optaFeedItemVersionR{
			MatchEvents: MatchEventSlice{o},
		}
	} else {
		related.R.MatchEvents = append(related.R.MatchEvents, o)
	}

	return nil
}

// RemoveOptaFeedItemVersion relationship.
// Sets o.R.OptaFeedItemVersion to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MatchEvent) RemoveOptaFeedItemVersion(exec boil.Executor, related *OptaFeedItemVersion) error {
	var err error

	queries.SetScanner(&o.OptaFeedItemVersionID, nil)
	if _, err = o.Update(exec, boil.Whitelist("opta_feed_item_version_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OptaFeedItemVersion = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MatchEvents {
		if queries.Equal(o.OptaFeedItemVersionID, ri.OptaFeedItemVersionID) {
			continue
		}

		ln := len(related.R.MatchEvents)
		if ln > 1 && i < ln-1 {
			related.R.MatchEvents[i] = related.R.MatchEvents[ln-1]
		}
		related.R.MatchEvents = related.R.MatchEvents[:ln-1]
		break
	}
	return nil
}

// SetPlayer of the matchEvent to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.MatchEvents.
func (o *MatchEvent) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, matchEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PlayerID, related.ID)
	if o.R == nil {
		o.R = &matchEventR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			MatchEvents: MatchEventSlice{o},
		}
	} else {
		related.R.MatchEvents = append(related.R.MatchEvents, o)
	}

	return nil
}

// RemovePlayer relationship.
// Sets o.R.Player to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MatchEvent) RemovePlayer(exec boil.Executor, related *Player) error {
	var err error

	queries.SetScanner(&o.PlayerID, nil)
	if _, err = o.Update(exec, boil.Whitelist("player_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Player = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MatchEvents {
		if queries.Equal(o.PlayerID, ri.PlayerID) {
			continue
		}

		ln := len(related.R.MatchEvents)
		if ln > 1 && i < ln-1 {
			related.R.MatchEvents[i] = related.R.MatchEvents[ln-1]
		}
		related.R.MatchEvents = related.R.MatchEvents[:ln-1]
		break
	}
	return nil
}

// SetTeam of the matchEvent to the related item.
// Sets o.R.Team to related.
// Adds o to related.R.MatchEvents.
func (o *MatchEvent) SetTeam(exec boil.Executor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
		strmangle.WhereClause("\"", "\"", 2, matchEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TeamID, related.ID)
	if o.R == nil {
		o.R = &matchEventR{
			Team: related,
		}
	} else {
		o.R.Team = related
	}

	if related.R == nil {
		related.R = &teamR{
			MatchEvents: MatchEventSlice{o},
		}
	} else {
		related.R.MatchEvents = append(related.R.MatchEvents, o)
	}

	return nil
}

// RemoveTeam relationship.
// Sets o.R.Team to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MatchEvent) RemoveTeam(exec boil.Executor, related *Team) error {
	var err error

	queries.SetScanner(&o.TeamID, nil)
	if _, err = o.Update(exec, boil.Whitelist("team_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Team = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MatchEvents {
		if queries.Equal(o.TeamID, ri.TeamID) {
			continue
		}

		ln := len(related.R.MatchEvents)
		if ln > 1 && i < ln-1 {
			related.R.MatchEvents[i] = related.R.MatchEvents[ln-1]
		}
		related.R.MatchEvents = related.R.MatchEvents[:ln-1]
		break
	}
	return nil
}

// AddGameEvents adds the given related objects to the existing relationships
// of the match_event, optionally inserting them as new records.
// Appends related to o.R.GameEvents.
// Sets related.R.MatchEvent appropriately.
func (o *MatchEvent) AddGameEvents(exec boil.Executor, insert bool, related ...*GameEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MatchEventID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"game_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"match_event_id"}),
				strmangle.WhereClause("\"", "\"", 2, gameEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MatchEventID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &matchEventR{
			GameEvents: related,
		}
	} else {
		o.R.GameEvents = append(o.R.GameEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gameEventR{
				MatchEvent: o,
			}
		} else {
			rel.R.MatchEvent = o
		}
	}
	return nil
}

// SetGameEvents removes all previously related items of the
// match_event replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MatchEvent's GameEvents accordingly.
// Replaces o.R.GameEvents with related.
// Sets related.R.MatchEvent's GameEvents accordingly.
func (o *MatchEvent) SetGameEvents(exec boil.Executor, insert bool, related ...*GameEvent) error {
	query := "update \"game_events\" set \"match_event_id\" = null where \"match_event_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.GameEvents {
			queries.SetScanner(&rel.MatchEventID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.MatchEvent = nil
		}
		o.R.GameEvents = nil
	}

	return o.AddGameEvents(exec, insert, related...)
}

// RemoveGameEvents relationships from objects passed in.
// Removes related items from R.GameEvents (uses pointer comparison, removal does not keep order)
// Sets related.R.MatchEvent.
func (o *MatchEvent) RemoveGameEvents(exec boil.Executor, related ...*GameEvent) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MatchEventID, nil)
		if rel.R != nil {
			rel.R.MatchEvent = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("match_event_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.GameEvents {
			if rel != ri {
				continue
			}

			ln := len(o.R.GameEvents)
			if ln > 1 && i < ln-1 {
				o.R.GameEvents[i] = o.R.GameEvents[ln-1]
			}
			o.R.GameEvents = o.R.GameEvents[:ln-1]
			break
		}
	}

	return nil
}

// AddMatchEventSimulations adds the given related objects to the existing relationships
// of the match_event, optionally inserting them as new records.
// Appends related to o.R.MatchEventSimulations.
// Sets related.R.MatchEvent appropriately.
func (o *MatchEvent) AddMatchEventSimulations(exec boil.Executor, insert bool, related ...*MatchEventSimulation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MatchEventID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"match_event_simulations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"match_event_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchEventSimulationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MatchEventID = o.ID
		}
	}

	if o.R == nil {
		o.R = &matchEventR{
			MatchEventSimulations: related,
		}
	} else {
		o.R.MatchEventSimulations = append(o.R.MatchEventSimulations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchEventSimulationR{
				MatchEvent: o,
			}
		} else {
			rel.R.MatchEvent = o
		}
	}
	return nil
}

// MatchEvents retrieves all the records using an executor.
func MatchEvents(mods ...qm.QueryMod) matchEventQuery {
	mods = append(mods, qm.From("\"match_events\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"match_events\".*"})
	}

	return matchEventQuery{q}
}

// FindMatchEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMatchEvent(exec boil.Executor, iD int, selectCols ...string) (*MatchEvent, error) {
	matchEventObj := &MatchEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"match_events\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, matchEventObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from match_events")
	}

	return matchEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MatchEvent) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no match_events provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(matchEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	matchEventInsertCacheMut.RLock()
	cache, cached := matchEventInsertCache[key]
	matchEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			matchEventAllColumns,
			matchEventColumnsWithDefault,
			matchEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(matchEventType, matchEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(matchEventType, matchEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"match_events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"match_events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into match_events")
	}

	if !cached {
		matchEventInsertCacheMut.Lock()
		matchEventInsertCache[key] = cache
		matchEventInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the MatchEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MatchEvent) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	matchEventUpdateCacheMut.RLock()
	cache, cached := matchEventUpdateCache[key]
	matchEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			matchEventAllColumns,
			matchEventPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update match_events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"match_events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, matchEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(matchEventType, matchEventMapping, append(wl, matchEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update match_events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for match_events")
	}

	if !cached {
		matchEventUpdateCacheMut.Lock()
		matchEventUpdateCache[key] = cache
		matchEventUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q matchEventQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for match_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for match_events")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MatchEventSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"match_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, matchEventPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in matchEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all matchEvent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MatchEvent) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no match_events provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(matchEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	matchEventUpsertCacheMut.RLock()
	cache, cached := matchEventUpsertCache[key]
	matchEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			matchEventAllColumns,
			matchEventColumnsWithDefault,
			matchEventColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			matchEventAllColumns,
			matchEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert match_events, could not build update column list")
		}

		ret := strmangle.SetComplement(matchEventAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(matchEventPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert match_events, could not build conflict column list")
			}

			conflict = make([]string, len(matchEventPrimaryKeyColumns))
			copy(conflict, matchEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"match_events\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(matchEventType, matchEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(matchEventType, matchEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert match_events")
	}

	if !cached {
		matchEventUpsertCacheMut.Lock()
		matchEventUpsertCache[key] = cache
		matchEventUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single MatchEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MatchEvent) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no MatchEvent provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), matchEventPrimaryKeyMapping)
	sql := "DELETE FROM \"match_events\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from match_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for match_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q matchEventQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no matchEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from match_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for match_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MatchEventSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"match_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, matchEventPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from matchEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for match_events")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MatchEvent) Reload(exec boil.Executor) error {
	ret, err := FindMatchEvent(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MatchEventSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MatchEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"match_events\".* FROM \"match_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, matchEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in MatchEventSlice")
	}

	*o = slice

	return nil
}

// MatchEventExists checks if the MatchEvent row exists.
func MatchEventExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"match_events\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if match_events exists")
	}

	return exists, nil
}

// Exists checks if the MatchEvent row exists.
func (o *MatchEvent) Exists(exec boil.Executor) (bool, error) {
	return MatchEventExists(exec, o.ID)
}
