// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AuthUser is an object representing the database table.
type AuthUser struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Password    string    `boil:"password" json:"password" toml:"password" yaml:"password"`
	LastLogin   null.Time `boil:"last_login" json:"last_login,omitempty" toml:"last_login" yaml:"last_login,omitempty"`
	IsSuperuser bool      `boil:"is_superuser" json:"is_superuser" toml:"is_superuser" yaml:"is_superuser"`
	Username    string    `boil:"username" json:"username" toml:"username" yaml:"username"`
	FirstName   string    `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	LastName    string    `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	Email       string    `boil:"email" json:"email" toml:"email" yaml:"email"`
	IsStaff     bool      `boil:"is_staff" json:"is_staff" toml:"is_staff" yaml:"is_staff"`
	IsActive    bool      `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	DateJoined  time.Time `boil:"date_joined" json:"date_joined" toml:"date_joined" yaml:"date_joined"`

	R *authUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthUserColumns = struct {
	ID          string
	Password    string
	LastLogin   string
	IsSuperuser string
	Username    string
	FirstName   string
	LastName    string
	Email       string
	IsStaff     string
	IsActive    string
	DateJoined  string
}{
	ID:          "id",
	Password:    "password",
	LastLogin:   "last_login",
	IsSuperuser: "is_superuser",
	Username:    "username",
	FirstName:   "first_name",
	LastName:    "last_name",
	Email:       "email",
	IsStaff:     "is_staff",
	IsActive:    "is_active",
	DateJoined:  "date_joined",
}

var AuthUserTableColumns = struct {
	ID          string
	Password    string
	LastLogin   string
	IsSuperuser string
	Username    string
	FirstName   string
	LastName    string
	Email       string
	IsStaff     string
	IsActive    string
	DateJoined  string
}{
	ID:          "auth_user.id",
	Password:    "auth_user.password",
	LastLogin:   "auth_user.last_login",
	IsSuperuser: "auth_user.is_superuser",
	Username:    "auth_user.username",
	FirstName:   "auth_user.first_name",
	LastName:    "auth_user.last_name",
	Email:       "auth_user.email",
	IsStaff:     "auth_user.is_staff",
	IsActive:    "auth_user.is_active",
	DateJoined:  "auth_user.date_joined",
}

// Generated where

var AuthUserWhere = struct {
	ID          whereHelperint
	Password    whereHelperstring
	LastLogin   whereHelpernull_Time
	IsSuperuser whereHelperbool
	Username    whereHelperstring
	FirstName   whereHelperstring
	LastName    whereHelperstring
	Email       whereHelperstring
	IsStaff     whereHelperbool
	IsActive    whereHelperbool
	DateJoined  whereHelpertime_Time
}{
	ID:          whereHelperint{field: "\"auth_user\".\"id\""},
	Password:    whereHelperstring{field: "\"auth_user\".\"password\""},
	LastLogin:   whereHelpernull_Time{field: "\"auth_user\".\"last_login\""},
	IsSuperuser: whereHelperbool{field: "\"auth_user\".\"is_superuser\""},
	Username:    whereHelperstring{field: "\"auth_user\".\"username\""},
	FirstName:   whereHelperstring{field: "\"auth_user\".\"first_name\""},
	LastName:    whereHelperstring{field: "\"auth_user\".\"last_name\""},
	Email:       whereHelperstring{field: "\"auth_user\".\"email\""},
	IsStaff:     whereHelperbool{field: "\"auth_user\".\"is_staff\""},
	IsActive:    whereHelperbool{field: "\"auth_user\".\"is_active\""},
	DateJoined:  whereHelpertime_Time{field: "\"auth_user\".\"date_joined\""},
}

// AuthUserRels is where relationship names are stored.
var AuthUserRels = struct {
	UserAuthUserGroups          string
	UserAuthUserUserPermissions string
	UserDjangoAdminLogs         string
}{
	UserAuthUserGroups:          "UserAuthUserGroups",
	UserAuthUserUserPermissions: "UserAuthUserUserPermissions",
	UserDjangoAdminLogs:         "UserDjangoAdminLogs",
}

// authUserR is where relationships are stored.
type authUserR struct {
	UserAuthUserGroups          AuthUserGroupSlice          `boil:"UserAuthUserGroups" json:"UserAuthUserGroups" toml:"UserAuthUserGroups" yaml:"UserAuthUserGroups"`
	UserAuthUserUserPermissions AuthUserUserPermissionSlice `boil:"UserAuthUserUserPermissions" json:"UserAuthUserUserPermissions" toml:"UserAuthUserUserPermissions" yaml:"UserAuthUserUserPermissions"`
	UserDjangoAdminLogs         DjangoAdminLogSlice         `boil:"UserDjangoAdminLogs" json:"UserDjangoAdminLogs" toml:"UserDjangoAdminLogs" yaml:"UserDjangoAdminLogs"`
}

// NewStruct creates a new relationship struct
func (*authUserR) NewStruct() *authUserR {
	return &authUserR{}
}

func (r *authUserR) GetUserAuthUserGroups() AuthUserGroupSlice {
	if r == nil {
		return nil
	}
	return r.UserAuthUserGroups
}

func (r *authUserR) GetUserAuthUserUserPermissions() AuthUserUserPermissionSlice {
	if r == nil {
		return nil
	}
	return r.UserAuthUserUserPermissions
}

func (r *authUserR) GetUserDjangoAdminLogs() DjangoAdminLogSlice {
	if r == nil {
		return nil
	}
	return r.UserDjangoAdminLogs
}

// authUserL is where Load methods for each relationship are stored.
type authUserL struct{}

var (
	authUserAllColumns            = []string{"id", "password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined"}
	authUserColumnsWithoutDefault = []string{"password", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined"}
	authUserColumnsWithDefault    = []string{"id", "last_login"}
	authUserPrimaryKeyColumns     = []string{"id"}
	authUserGeneratedColumns      = []string{}
)

type (
	// AuthUserSlice is an alias for a slice of pointers to AuthUser.
	// This should almost always be used instead of []AuthUser.
	AuthUserSlice []*AuthUser

	authUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authUserType                 = reflect.TypeOf(&AuthUser{})
	authUserMapping              = queries.MakeStructMapping(authUserType)
	authUserPrimaryKeyMapping, _ = queries.BindMapping(authUserType, authUserMapping, authUserPrimaryKeyColumns)
	authUserInsertCacheMut       sync.RWMutex
	authUserInsertCache          = make(map[string]insertCache)
	authUserUpdateCacheMut       sync.RWMutex
	authUserUpdateCache          = make(map[string]updateCache)
	authUserUpsertCacheMut       sync.RWMutex
	authUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single authUser record from the query.
func (q authUserQuery) One(exec boil.Executor) (*AuthUser, error) {
	o := &AuthUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for auth_user")
	}

	return o, nil
}

// All returns all AuthUser records from the query.
func (q authUserQuery) All(exec boil.Executor) (AuthUserSlice, error) {
	var o []*AuthUser

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to AuthUser slice")
	}

	return o, nil
}

// Count returns the count of all AuthUser records in the query.
func (q authUserQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count auth_user rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q authUserQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if auth_user exists")
	}

	return count > 0, nil
}

// UserAuthUserGroups retrieves all the auth_user_group's AuthUserGroups with an executor via user_id column.
func (o *AuthUser) UserAuthUserGroups(mods ...qm.QueryMod) authUserGroupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"auth_user_groups\".\"user_id\"=?", o.ID),
	)

	return AuthUserGroups(queryMods...)
}

// UserAuthUserUserPermissions retrieves all the auth_user_user_permission's AuthUserUserPermissions with an executor via user_id column.
func (o *AuthUser) UserAuthUserUserPermissions(mods ...qm.QueryMod) authUserUserPermissionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"auth_user_user_permissions\".\"user_id\"=?", o.ID),
	)

	return AuthUserUserPermissions(queryMods...)
}

// UserDjangoAdminLogs retrieves all the django_admin_log's DjangoAdminLogs with an executor via user_id column.
func (o *AuthUser) UserDjangoAdminLogs(mods ...qm.QueryMod) djangoAdminLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"django_admin_log\".\"user_id\"=?", o.ID),
	)

	return DjangoAdminLogs(queryMods...)
}

// LoadUserAuthUserGroups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (authUserL) LoadUserAuthUserGroups(e boil.Executor, singular bool, maybeAuthUser interface{}, mods queries.Applicator) error {
	var slice []*AuthUser
	var object *AuthUser

	if singular {
		var ok bool
		object, ok = maybeAuthUser.(*AuthUser)
		if !ok {
			object = new(AuthUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuthUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuthUser))
			}
		}
	} else {
		s, ok := maybeAuthUser.(*[]*AuthUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuthUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuthUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &authUserR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authUserR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`auth_user_groups`),
		qm.WhereIn(`auth_user_groups.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auth_user_groups")
	}

	var resultSlice []*AuthUserGroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auth_user_groups")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on auth_user_groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auth_user_groups")
	}

	if singular {
		object.R.UserAuthUserGroups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &authUserGroupR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserAuthUserGroups = append(local.R.UserAuthUserGroups, foreign)
				if foreign.R == nil {
					foreign.R = &authUserGroupR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserAuthUserUserPermissions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (authUserL) LoadUserAuthUserUserPermissions(e boil.Executor, singular bool, maybeAuthUser interface{}, mods queries.Applicator) error {
	var slice []*AuthUser
	var object *AuthUser

	if singular {
		var ok bool
		object, ok = maybeAuthUser.(*AuthUser)
		if !ok {
			object = new(AuthUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuthUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuthUser))
			}
		}
	} else {
		s, ok := maybeAuthUser.(*[]*AuthUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuthUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuthUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &authUserR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authUserR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`auth_user_user_permissions`),
		qm.WhereIn(`auth_user_user_permissions.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auth_user_user_permissions")
	}

	var resultSlice []*AuthUserUserPermission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auth_user_user_permissions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on auth_user_user_permissions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auth_user_user_permissions")
	}

	if singular {
		object.R.UserAuthUserUserPermissions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &authUserUserPermissionR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserAuthUserUserPermissions = append(local.R.UserAuthUserUserPermissions, foreign)
				if foreign.R == nil {
					foreign.R = &authUserUserPermissionR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserDjangoAdminLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (authUserL) LoadUserDjangoAdminLogs(e boil.Executor, singular bool, maybeAuthUser interface{}, mods queries.Applicator) error {
	var slice []*AuthUser
	var object *AuthUser

	if singular {
		var ok bool
		object, ok = maybeAuthUser.(*AuthUser)
		if !ok {
			object = new(AuthUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuthUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuthUser))
			}
		}
	} else {
		s, ok := maybeAuthUser.(*[]*AuthUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuthUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuthUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &authUserR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authUserR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`django_admin_log`),
		qm.WhereIn(`django_admin_log.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load django_admin_log")
	}

	var resultSlice []*DjangoAdminLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice django_admin_log")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on django_admin_log")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for django_admin_log")
	}

	if singular {
		object.R.UserDjangoAdminLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &djangoAdminLogR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserDjangoAdminLogs = append(local.R.UserDjangoAdminLogs, foreign)
				if foreign.R == nil {
					foreign.R = &djangoAdminLogR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// AddUserAuthUserGroups adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserAuthUserGroups.
// Sets related.R.User appropriately.
func (o *AuthUser) AddUserAuthUserGroups(exec boil.Executor, insert bool, related ...*AuthUserGroup) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"auth_user_groups\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, authUserGroupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &authUserR{
			UserAuthUserGroups: related,
		}
	} else {
		o.R.UserAuthUserGroups = append(o.R.UserAuthUserGroups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authUserGroupR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserAuthUserUserPermissions adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserAuthUserUserPermissions.
// Sets related.R.User appropriately.
func (o *AuthUser) AddUserAuthUserUserPermissions(exec boil.Executor, insert bool, related ...*AuthUserUserPermission) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"auth_user_user_permissions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, authUserUserPermissionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &authUserR{
			UserAuthUserUserPermissions: related,
		}
	} else {
		o.R.UserAuthUserUserPermissions = append(o.R.UserAuthUserUserPermissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authUserUserPermissionR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserDjangoAdminLogs adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserDjangoAdminLogs.
// Sets related.R.User appropriately.
func (o *AuthUser) AddUserDjangoAdminLogs(exec boil.Executor, insert bool, related ...*DjangoAdminLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"django_admin_log\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, djangoAdminLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &authUserR{
			UserDjangoAdminLogs: related,
		}
	} else {
		o.R.UserDjangoAdminLogs = append(o.R.UserDjangoAdminLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &djangoAdminLogR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AuthUsers retrieves all the records using an executor.
func AuthUsers(mods ...qm.QueryMod) authUserQuery {
	mods = append(mods, qm.From("\"auth_user\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"auth_user\".*"})
	}

	return authUserQuery{q}
}

// FindAuthUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthUser(exec boil.Executor, iD int, selectCols ...string) (*AuthUser, error) {
	authUserObj := &AuthUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"auth_user\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, authUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from auth_user")
	}

	return authUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuthUser) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no auth_user provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(authUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authUserInsertCacheMut.RLock()
	cache, cached := authUserInsertCache[key]
	authUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authUserAllColumns,
			authUserColumnsWithDefault,
			authUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authUserType, authUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authUserType, authUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"auth_user\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"auth_user\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into auth_user")
	}

	if !cached {
		authUserInsertCacheMut.Lock()
		authUserInsertCache[key] = cache
		authUserInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the AuthUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuthUser) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	authUserUpdateCacheMut.RLock()
	cache, cached := authUserUpdateCache[key]
	authUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authUserAllColumns,
			authUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update auth_user, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"auth_user\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, authUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authUserType, authUserMapping, append(wl, authUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update auth_user row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for auth_user")
	}

	if !cached {
		authUserUpdateCacheMut.Lock()
		authUserUpdateCache[key] = cache
		authUserUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q authUserQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for auth_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for auth_user")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthUserSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"auth_user\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, authUserPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in authUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all authUser")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuthUser) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no auth_user provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(authUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authUserUpsertCacheMut.RLock()
	cache, cached := authUserUpsertCache[key]
	authUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			authUserAllColumns,
			authUserColumnsWithDefault,
			authUserColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			authUserAllColumns,
			authUserPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert auth_user, could not build update column list")
		}

		ret := strmangle.SetComplement(authUserAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(authUserPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert auth_user, could not build conflict column list")
			}

			conflict = make([]string, len(authUserPrimaryKeyColumns))
			copy(conflict, authUserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"auth_user\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(authUserType, authUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authUserType, authUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert auth_user")
	}

	if !cached {
		authUserUpsertCacheMut.Lock()
		authUserUpsertCache[key] = cache
		authUserUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single AuthUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthUser) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no AuthUser provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authUserPrimaryKeyMapping)
	sql := "DELETE FROM \"auth_user\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from auth_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for auth_user")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q authUserQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no authUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from auth_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for auth_user")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthUserSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"auth_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authUserPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from authUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for auth_user")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthUser) Reload(exec boil.Executor) error {
	ret, err := FindAuthUser(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthUserSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"auth_user\".* FROM \"auth_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in AuthUserSlice")
	}

	*o = slice

	return nil
}

// AuthUserExists checks if the AuthUser row exists.
func AuthUserExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"auth_user\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if auth_user exists")
	}

	return exists, nil
}

// Exists checks if the AuthUser row exists.
func (o *AuthUser) Exists(exec boil.Executor) (bool, error) {
	return AuthUserExists(exec, o.ID)
}
