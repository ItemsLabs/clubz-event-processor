// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTeams(t *testing.T) {
	t.Parallel()

	query := Teams()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTeamsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Teams().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeamsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Teams().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Teams().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeamsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TeamSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Teams().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeamsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TeamExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Team exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TeamExists to return true, but got false.")
	}
}

func testTeamsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	teamFound, err := FindTeam(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if teamFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTeamsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Teams().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testTeamsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Teams().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTeamsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teamOne := &Team{}
	teamTwo := &Team{}
	if err = randomize.Struct(seed, teamOne, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}
	if err = randomize.Struct(seed, teamTwo, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = teamOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = teamTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Teams().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTeamsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	teamOne := &Team{}
	teamTwo := &Team{}
	if err = randomize.Struct(seed, teamOne, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}
	if err = randomize.Struct(seed, teamTwo, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = teamOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = teamTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Teams().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testTeamsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Teams().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTeamsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(teamColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Teams().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTeamToManyGameEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c GameEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, gameEventDBTypes, false, gameEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameEventDBTypes, false, gameEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TeamID = a.ID
	c.TeamID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GameEvents().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TeamID == b.TeamID {
			bFound = true
		}
		if v.TeamID == c.TeamID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadGameEvents(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GameEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GameEvents = nil
	if err = a.L.LoadGameEvents(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GameEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManyLeaderboards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c Leaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, leaderboardDBTypes, false, leaderboardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, leaderboardDBTypes, false, leaderboardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.TeamID, a.ID)
	queries.Assign(&c.TeamID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Leaderboards().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.TeamID, b.TeamID) {
			bFound = true
		}
		if queries.Equal(v.TeamID, c.TeamID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadLeaderboards(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Leaderboards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Leaderboards = nil
	if err = a.L.LoadLeaderboards(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Leaderboards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManyMatchEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c MatchEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchEventDBTypes, false, matchEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchEventDBTypes, false, matchEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.TeamID, a.ID)
	queries.Assign(&c.TeamID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MatchEvents().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.TeamID, b.TeamID) {
			bFound = true
		}
		if queries.Equal(v.TeamID, c.TeamID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadMatchEvents(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MatchEvents = nil
	if err = a.L.LoadMatchEvents(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManyMatchPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c MatchPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchPlayerDBTypes, false, matchPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchPlayerDBTypes, false, matchPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TeamID = a.ID
	c.TeamID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MatchPlayers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TeamID == b.TeamID {
			bFound = true
		}
		if v.TeamID == c.TeamID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadMatchPlayers(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MatchPlayers = nil
	if err = a.L.LoadMatchPlayers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManyAwayTeamMatches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.AwayTeamID = a.ID
	c.AwayTeamID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AwayTeamMatches().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.AwayTeamID == b.AwayTeamID {
			bFound = true
		}
		if v.AwayTeamID == c.AwayTeamID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadAwayTeamMatches(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AwayTeamMatches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AwayTeamMatches = nil
	if err = a.L.LoadAwayTeamMatches(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AwayTeamMatches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManyHomeTeamMatches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.HomeTeamID = a.ID
	c.HomeTeamID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.HomeTeamMatches().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.HomeTeamID == b.HomeTeamID {
			bFound = true
		}
		if v.HomeTeamID == c.HomeTeamID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadHomeTeamMatches(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.HomeTeamMatches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.HomeTeamMatches = nil
	if err = a.L.LoadHomeTeamMatches(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.HomeTeamMatches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManyPlayerBuckets(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c PlayerBucket

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, playerBucketDBTypes, false, playerBucketColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playerBucketDBTypes, false, playerBucketColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TeamID = a.ID
	c.TeamID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PlayerBuckets().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TeamID == b.TeamID {
			bFound = true
		}
		if v.TeamID == c.TeamID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadPlayerBuckets(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlayerBuckets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PlayerBuckets = nil
	if err = a.L.LoadPlayerBuckets(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlayerBuckets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManySeasonCompetitionMembers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c SeasonCompetitionMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, seasonCompetitionMemberDBTypes, false, seasonCompetitionMemberColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, seasonCompetitionMemberDBTypes, false, seasonCompetitionMemberColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TeamID = a.ID
	c.TeamID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SeasonCompetitionMembers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TeamID == b.TeamID {
			bFound = true
		}
		if v.TeamID == c.TeamID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadSeasonCompetitionMembers(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SeasonCompetitionMembers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SeasonCompetitionMembers = nil
	if err = a.L.LoadSeasonCompetitionMembers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SeasonCompetitionMembers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManySeasonTeamPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c SeasonTeamPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, seasonTeamPlayerDBTypes, false, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, seasonTeamPlayerDBTypes, false, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TeamID = a.ID
	c.TeamID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SeasonTeamPlayers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TeamID == b.TeamID {
			bFound = true
		}
		if v.TeamID == c.TeamID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadSeasonTeamPlayers(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SeasonTeamPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SeasonTeamPlayers = nil
	if err = a.L.LoadSeasonTeamPlayers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SeasonTeamPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManyAddOpGameEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e GameEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GameEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gameEventDBTypes, false, strmangle.SetComplement(gameEventPrimaryKeyColumns, gameEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GameEvent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGameEvents(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TeamID {
			t.Error("foreign key was wrong value", a.ID, first.TeamID)
		}
		if a.ID != second.TeamID {
			t.Error("foreign key was wrong value", a.ID, second.TeamID)
		}

		if first.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GameEvents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GameEvents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GameEvents().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTeamToManyAddOpLeaderboards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Leaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Leaderboard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, leaderboardDBTypes, false, strmangle.SetComplement(leaderboardPrimaryKeyColumns, leaderboardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Leaderboard{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLeaderboards(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.TeamID) {
			t.Error("foreign key was wrong value", a.ID, first.TeamID)
		}
		if !queries.Equal(a.ID, second.TeamID) {
			t.Error("foreign key was wrong value", a.ID, second.TeamID)
		}

		if first.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Leaderboards[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Leaderboards[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Leaderboards().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTeamToManySetOpLeaderboards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Leaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Leaderboard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, leaderboardDBTypes, false, strmangle.SetComplement(leaderboardPrimaryKeyColumns, leaderboardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetLeaderboards(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Leaderboards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetLeaderboards(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Leaderboards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TeamID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TeamID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.TeamID) {
		t.Error("foreign key was wrong value", a.ID, d.TeamID)
	}
	if !queries.Equal(a.ID, e.TeamID) {
		t.Error("foreign key was wrong value", a.ID, e.TeamID)
	}

	if b.R.Team != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Team != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Team != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Team != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Leaderboards[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Leaderboards[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTeamToManyRemoveOpLeaderboards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Leaderboard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Leaderboard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, leaderboardDBTypes, false, strmangle.SetComplement(leaderboardPrimaryKeyColumns, leaderboardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddLeaderboards(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Leaderboards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveLeaderboards(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Leaderboards().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TeamID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TeamID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Team != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Team != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Team != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Team != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Leaderboards) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Leaderboards[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Leaderboards[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTeamToManyAddOpMatchEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e MatchEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MatchEvent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMatchEvents(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.TeamID) {
			t.Error("foreign key was wrong value", a.ID, first.TeamID)
		}
		if !queries.Equal(a.ID, second.TeamID) {
			t.Error("foreign key was wrong value", a.ID, second.TeamID)
		}

		if first.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MatchEvents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MatchEvents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MatchEvents().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTeamToManySetOpMatchEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e MatchEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMatchEvents(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MatchEvents().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMatchEvents(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MatchEvents().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TeamID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TeamID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.TeamID) {
		t.Error("foreign key was wrong value", a.ID, d.TeamID)
	}
	if !queries.Equal(a.ID, e.TeamID) {
		t.Error("foreign key was wrong value", a.ID, e.TeamID)
	}

	if b.R.Team != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Team != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Team != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Team != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.MatchEvents[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.MatchEvents[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTeamToManyRemoveOpMatchEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e MatchEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMatchEvents(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MatchEvents().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMatchEvents(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MatchEvents().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TeamID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TeamID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Team != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Team != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Team != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Team != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.MatchEvents) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.MatchEvents[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.MatchEvents[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTeamToManyAddOpMatchPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e MatchPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchPlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchPlayerDBTypes, false, strmangle.SetComplement(matchPlayerPrimaryKeyColumns, matchPlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MatchPlayer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMatchPlayers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TeamID {
			t.Error("foreign key was wrong value", a.ID, first.TeamID)
		}
		if a.ID != second.TeamID {
			t.Error("foreign key was wrong value", a.ID, second.TeamID)
		}

		if first.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MatchPlayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MatchPlayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MatchPlayers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTeamToManyAddOpAwayTeamMatches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Match{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAwayTeamMatches(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.AwayTeamID {
			t.Error("foreign key was wrong value", a.ID, first.AwayTeamID)
		}
		if a.ID != second.AwayTeamID {
			t.Error("foreign key was wrong value", a.ID, second.AwayTeamID)
		}

		if first.R.AwayTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.AwayTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AwayTeamMatches[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AwayTeamMatches[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AwayTeamMatches().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTeamToManyAddOpHomeTeamMatches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Match{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddHomeTeamMatches(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.HomeTeamID {
			t.Error("foreign key was wrong value", a.ID, first.HomeTeamID)
		}
		if a.ID != second.HomeTeamID {
			t.Error("foreign key was wrong value", a.ID, second.HomeTeamID)
		}

		if first.R.HomeTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.HomeTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.HomeTeamMatches[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.HomeTeamMatches[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.HomeTeamMatches().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTeamToManyAddOpPlayerBuckets(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e PlayerBucket

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PlayerBucket{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playerBucketDBTypes, false, strmangle.SetComplement(playerBucketPrimaryKeyColumns, playerBucketColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PlayerBucket{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPlayerBuckets(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TeamID {
			t.Error("foreign key was wrong value", a.ID, first.TeamID)
		}
		if a.ID != second.TeamID {
			t.Error("foreign key was wrong value", a.ID, second.TeamID)
		}

		if first.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PlayerBuckets[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PlayerBuckets[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PlayerBuckets().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTeamToManyAddOpSeasonCompetitionMembers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e SeasonCompetitionMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SeasonCompetitionMember{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, seasonCompetitionMemberDBTypes, false, strmangle.SetComplement(seasonCompetitionMemberPrimaryKeyColumns, seasonCompetitionMemberColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SeasonCompetitionMember{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSeasonCompetitionMembers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TeamID {
			t.Error("foreign key was wrong value", a.ID, first.TeamID)
		}
		if a.ID != second.TeamID {
			t.Error("foreign key was wrong value", a.ID, second.TeamID)
		}

		if first.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SeasonCompetitionMembers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SeasonCompetitionMembers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SeasonCompetitionMembers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTeamToManyAddOpSeasonTeamPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e SeasonTeamPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SeasonTeamPlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, seasonTeamPlayerDBTypes, false, strmangle.SetComplement(seasonTeamPlayerPrimaryKeyColumns, seasonTeamPlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SeasonTeamPlayer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSeasonTeamPlayers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TeamID {
			t.Error("foreign key was wrong value", a.ID, first.TeamID)
		}
		if a.ID != second.TeamID {
			t.Error("foreign key was wrong value", a.ID, second.TeamID)
		}

		if first.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SeasonTeamPlayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SeasonTeamPlayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SeasonTeamPlayers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTeamToOneCountryUsingCountry(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Team
	var foreign Country

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, countryDBTypes, false, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CountryID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Country().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TeamSlice{&local}
	if err = local.L.LoadCountry(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Country = nil
	if err = local.L.LoadCountry(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testTeamToOneRegionUsingRegion(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Team
	var foreign Region

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, regionDBTypes, false, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.RegionID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Region().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TeamSlice{&local}
	if err = local.L.LoadRegion(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Region == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Region = nil
	if err = local.L.LoadRegion(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Region == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testTeamToOneSetOpCountryUsingCountry(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c Country

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Country{&b, &c} {
		err = a.SetCountry(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Country != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Teams[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CountryID, x.ID) {
			t.Error("foreign key was wrong value", a.CountryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CountryID))
		reflect.Indirect(reflect.ValueOf(&a.CountryID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CountryID, x.ID) {
			t.Error("foreign key was wrong value", a.CountryID, x.ID)
		}
	}
}

func testTeamToOneRemoveOpCountryUsingCountry(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b Country

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCountry(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCountry(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Country().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Country != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CountryID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Teams) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTeamToOneSetOpRegionUsingRegion(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c Region

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, regionDBTypes, false, strmangle.SetComplement(regionPrimaryKeyColumns, regionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, regionDBTypes, false, strmangle.SetComplement(regionPrimaryKeyColumns, regionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Region{&b, &c} {
		err = a.SetRegion(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Region != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Teams[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.RegionID, x.ID) {
			t.Error("foreign key was wrong value", a.RegionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RegionID))
		reflect.Indirect(reflect.ValueOf(&a.RegionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.RegionID, x.ID) {
			t.Error("foreign key was wrong value", a.RegionID, x.ID)
		}
	}
}

func testTeamToOneRemoveOpRegionUsingRegion(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b Region

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, regionDBTypes, false, strmangle.SetComplement(regionPrimaryKeyColumns, regionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRegion(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRegion(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Region().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Region != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.RegionID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Teams) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTeamsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTeamsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TeamSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testTeamsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Teams().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	teamDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `ImportID`: `character varying`, `Name`: `text`, `ShortName`: `text`, `CountryID`: `uuid`, `RegionID`: `uuid`, `CrestURL`: `text`, `Abbr`: `character varying`, `OrtecSelectionID`: `character varying`, `OptaSelectionID`: `character varying`}
	_           = bytes.MinRead
)

func testTeamsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(teamPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(teamAllColumns) == len(teamPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Teams().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, teamDBTypes, true, teamPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTeamsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(teamAllColumns) == len(teamPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Teams().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, teamDBTypes, true, teamPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(teamAllColumns, teamPrimaryKeyColumns) {
		fields = teamAllColumns
	} else {
		fields = strmangle.SetComplement(
			teamAllColumns,
			teamPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TeamSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTeamsUpsert(t *testing.T) {
	t.Parallel()

	if len(teamAllColumns) == len(teamPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Team{}
	if err = randomize.Struct(seed, &o, teamDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Team: %s", err)
	}

	count, err := Teams().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, teamDBTypes, false, teamPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Team: %s", err)
	}

	count, err = Teams().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
