// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDjangoMigrations(t *testing.T) {
	t.Parallel()

	query := DjangoMigrations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDjangoMigrationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoMigration{}
	if err = randomize.Struct(seed, o, djangoMigrationDBTypes, true, djangoMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DjangoMigrations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDjangoMigrationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoMigration{}
	if err = randomize.Struct(seed, o, djangoMigrationDBTypes, true, djangoMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DjangoMigrations().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DjangoMigrations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDjangoMigrationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoMigration{}
	if err = randomize.Struct(seed, o, djangoMigrationDBTypes, true, djangoMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DjangoMigrationSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DjangoMigrations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDjangoMigrationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoMigration{}
	if err = randomize.Struct(seed, o, djangoMigrationDBTypes, true, djangoMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DjangoMigrationExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DjangoMigration exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DjangoMigrationExists to return true, but got false.")
	}
}

func testDjangoMigrationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoMigration{}
	if err = randomize.Struct(seed, o, djangoMigrationDBTypes, true, djangoMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	djangoMigrationFound, err := FindDjangoMigration(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if djangoMigrationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDjangoMigrationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoMigration{}
	if err = randomize.Struct(seed, o, djangoMigrationDBTypes, true, djangoMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DjangoMigrations().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testDjangoMigrationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoMigration{}
	if err = randomize.Struct(seed, o, djangoMigrationDBTypes, true, djangoMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DjangoMigrations().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDjangoMigrationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	djangoMigrationOne := &DjangoMigration{}
	djangoMigrationTwo := &DjangoMigration{}
	if err = randomize.Struct(seed, djangoMigrationOne, djangoMigrationDBTypes, false, djangoMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}
	if err = randomize.Struct(seed, djangoMigrationTwo, djangoMigrationDBTypes, false, djangoMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = djangoMigrationOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = djangoMigrationTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DjangoMigrations().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDjangoMigrationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	djangoMigrationOne := &DjangoMigration{}
	djangoMigrationTwo := &DjangoMigration{}
	if err = randomize.Struct(seed, djangoMigrationOne, djangoMigrationDBTypes, false, djangoMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}
	if err = randomize.Struct(seed, djangoMigrationTwo, djangoMigrationDBTypes, false, djangoMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = djangoMigrationOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = djangoMigrationTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DjangoMigrations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testDjangoMigrationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoMigration{}
	if err = randomize.Struct(seed, o, djangoMigrationDBTypes, true, djangoMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DjangoMigrations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDjangoMigrationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoMigration{}
	if err = randomize.Struct(seed, o, djangoMigrationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(djangoMigrationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DjangoMigrations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDjangoMigrationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoMigration{}
	if err = randomize.Struct(seed, o, djangoMigrationDBTypes, true, djangoMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testDjangoMigrationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoMigration{}
	if err = randomize.Struct(seed, o, djangoMigrationDBTypes, true, djangoMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DjangoMigrationSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testDjangoMigrationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DjangoMigration{}
	if err = randomize.Struct(seed, o, djangoMigrationDBTypes, true, djangoMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DjangoMigrations().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	djangoMigrationDBTypes = map[string]string{`ID`: `integer`, `App`: `character varying`, `Name`: `character varying`, `Applied`: `timestamp with time zone`}
	_                      = bytes.MinRead
)

func testDjangoMigrationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(djangoMigrationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(djangoMigrationAllColumns) == len(djangoMigrationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DjangoMigration{}
	if err = randomize.Struct(seed, o, djangoMigrationDBTypes, true, djangoMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DjangoMigrations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, djangoMigrationDBTypes, true, djangoMigrationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDjangoMigrationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(djangoMigrationAllColumns) == len(djangoMigrationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DjangoMigration{}
	if err = randomize.Struct(seed, o, djangoMigrationDBTypes, true, djangoMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DjangoMigrations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, djangoMigrationDBTypes, true, djangoMigrationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(djangoMigrationAllColumns, djangoMigrationPrimaryKeyColumns) {
		fields = djangoMigrationAllColumns
	} else {
		fields = strmangle.SetComplement(
			djangoMigrationAllColumns,
			djangoMigrationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DjangoMigrationSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDjangoMigrationsUpsert(t *testing.T) {
	t.Parallel()

	if len(djangoMigrationAllColumns) == len(djangoMigrationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DjangoMigration{}
	if err = randomize.Struct(seed, &o, djangoMigrationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DjangoMigration: %s", err)
	}

	count, err := DjangoMigrations().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, djangoMigrationDBTypes, false, djangoMigrationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DjangoMigration struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DjangoMigration: %s", err)
	}

	count, err = DjangoMigrations().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
