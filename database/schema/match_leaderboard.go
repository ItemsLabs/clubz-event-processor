// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MatchLeaderboard is an object representing the database table.
type MatchLeaderboard struct {
	ID                int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	Score             null.Float64 `boil:"score" json:"score,omitempty" toml:"score" yaml:"score,omitempty"`
	Position          null.Int     `boil:"position" json:"position,omitempty" toml:"position" yaml:"position,omitempty"`
	GameID            string       `boil:"game_id" json:"game_id" toml:"game_id" yaml:"game_id"`
	MatchID           string       `boil:"match_id" json:"match_id" toml:"match_id" yaml:"match_id"`
	UserID            string       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	LeaderboardTypeID null.Int     `boil:"leaderboard_type_id" json:"leaderboard_type_id,omitempty" toml:"leaderboard_type_id" yaml:"leaderboard_type_id,omitempty"`
	TransactionID     null.String  `boil:"transaction_id" json:"transaction_id,omitempty" toml:"transaction_id" yaml:"transaction_id,omitempty"`
	DivisionID        null.String  `boil:"division_id" json:"division_id,omitempty" toml:"division_id" yaml:"division_id,omitempty"`

	R *matchLeaderboardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L matchLeaderboardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MatchLeaderboardColumns = struct {
	ID                string
	Score             string
	Position          string
	GameID            string
	MatchID           string
	UserID            string
	LeaderboardTypeID string
	TransactionID     string
	DivisionID        string
}{
	ID:                "id",
	Score:             "score",
	Position:          "position",
	GameID:            "game_id",
	MatchID:           "match_id",
	UserID:            "user_id",
	LeaderboardTypeID: "leaderboard_type_id",
	TransactionID:     "transaction_id",
	DivisionID:        "division_id",
}

var MatchLeaderboardTableColumns = struct {
	ID                string
	Score             string
	Position          string
	GameID            string
	MatchID           string
	UserID            string
	LeaderboardTypeID string
	TransactionID     string
	DivisionID        string
}{
	ID:                "match_leaderboard.id",
	Score:             "match_leaderboard.score",
	Position:          "match_leaderboard.position",
	GameID:            "match_leaderboard.game_id",
	MatchID:           "match_leaderboard.match_id",
	UserID:            "match_leaderboard.user_id",
	LeaderboardTypeID: "match_leaderboard.leaderboard_type_id",
	TransactionID:     "match_leaderboard.transaction_id",
	DivisionID:        "match_leaderboard.division_id",
}

// Generated where

var MatchLeaderboardWhere = struct {
	ID                whereHelperint
	Score             whereHelpernull_Float64
	Position          whereHelpernull_Int
	GameID            whereHelperstring
	MatchID           whereHelperstring
	UserID            whereHelperstring
	LeaderboardTypeID whereHelpernull_Int
	TransactionID     whereHelpernull_String
	DivisionID        whereHelpernull_String
}{
	ID:                whereHelperint{field: "\"match_leaderboard\".\"id\""},
	Score:             whereHelpernull_Float64{field: "\"match_leaderboard\".\"score\""},
	Position:          whereHelpernull_Int{field: "\"match_leaderboard\".\"position\""},
	GameID:            whereHelperstring{field: "\"match_leaderboard\".\"game_id\""},
	MatchID:           whereHelperstring{field: "\"match_leaderboard\".\"match_id\""},
	UserID:            whereHelperstring{field: "\"match_leaderboard\".\"user_id\""},
	LeaderboardTypeID: whereHelpernull_Int{field: "\"match_leaderboard\".\"leaderboard_type_id\""},
	TransactionID:     whereHelpernull_String{field: "\"match_leaderboard\".\"transaction_id\""},
	DivisionID:        whereHelpernull_String{field: "\"match_leaderboard\".\"division_id\""},
}

// MatchLeaderboardRels is where relationship names are stored.
var MatchLeaderboardRels = struct {
	Division             string
	Game                 string
	LeaderboardType      string
	Match                string
	Transaction          string
	User                 string
	LeaderboardGameWeeks string
}{
	Division:             "Division",
	Game:                 "Game",
	LeaderboardType:      "LeaderboardType",
	Match:                "Match",
	Transaction:          "Transaction",
	User:                 "User",
	LeaderboardGameWeeks: "LeaderboardGameWeeks",
}

// matchLeaderboardR is where relationships are stored.
type matchLeaderboardR struct {
	Division             *Division        `boil:"Division" json:"Division" toml:"Division" yaml:"Division"`
	Game                 *Game            `boil:"Game" json:"Game" toml:"Game" yaml:"Game"`
	LeaderboardType      *LeaderboardType `boil:"LeaderboardType" json:"LeaderboardType" toml:"LeaderboardType" yaml:"LeaderboardType"`
	Match                *Match           `boil:"Match" json:"Match" toml:"Match" yaml:"Match"`
	Transaction          *Transaction     `boil:"Transaction" json:"Transaction" toml:"Transaction" yaml:"Transaction"`
	User                 *User            `boil:"User" json:"User" toml:"User" yaml:"User"`
	LeaderboardGameWeeks GameWeekSlice    `boil:"LeaderboardGameWeeks" json:"LeaderboardGameWeeks" toml:"LeaderboardGameWeeks" yaml:"LeaderboardGameWeeks"`
}

// NewStruct creates a new relationship struct
func (*matchLeaderboardR) NewStruct() *matchLeaderboardR {
	return &matchLeaderboardR{}
}

func (r *matchLeaderboardR) GetDivision() *Division {
	if r == nil {
		return nil
	}
	return r.Division
}

func (r *matchLeaderboardR) GetGame() *Game {
	if r == nil {
		return nil
	}
	return r.Game
}

func (r *matchLeaderboardR) GetLeaderboardType() *LeaderboardType {
	if r == nil {
		return nil
	}
	return r.LeaderboardType
}

func (r *matchLeaderboardR) GetMatch() *Match {
	if r == nil {
		return nil
	}
	return r.Match
}

func (r *matchLeaderboardR) GetTransaction() *Transaction {
	if r == nil {
		return nil
	}
	return r.Transaction
}

func (r *matchLeaderboardR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *matchLeaderboardR) GetLeaderboardGameWeeks() GameWeekSlice {
	if r == nil {
		return nil
	}
	return r.LeaderboardGameWeeks
}

// matchLeaderboardL is where Load methods for each relationship are stored.
type matchLeaderboardL struct{}

var (
	matchLeaderboardAllColumns            = []string{"id", "score", "position", "game_id", "match_id", "user_id", "leaderboard_type_id", "transaction_id", "division_id"}
	matchLeaderboardColumnsWithoutDefault = []string{"game_id", "match_id", "user_id"}
	matchLeaderboardColumnsWithDefault    = []string{"id", "score", "position", "leaderboard_type_id", "transaction_id", "division_id"}
	matchLeaderboardPrimaryKeyColumns     = []string{"id"}
	matchLeaderboardGeneratedColumns      = []string{}
)

type (
	// MatchLeaderboardSlice is an alias for a slice of pointers to MatchLeaderboard.
	// This should almost always be used instead of []MatchLeaderboard.
	MatchLeaderboardSlice []*MatchLeaderboard

	matchLeaderboardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	matchLeaderboardType                 = reflect.TypeOf(&MatchLeaderboard{})
	matchLeaderboardMapping              = queries.MakeStructMapping(matchLeaderboardType)
	matchLeaderboardPrimaryKeyMapping, _ = queries.BindMapping(matchLeaderboardType, matchLeaderboardMapping, matchLeaderboardPrimaryKeyColumns)
	matchLeaderboardInsertCacheMut       sync.RWMutex
	matchLeaderboardInsertCache          = make(map[string]insertCache)
	matchLeaderboardUpdateCacheMut       sync.RWMutex
	matchLeaderboardUpdateCache          = make(map[string]updateCache)
	matchLeaderboardUpsertCacheMut       sync.RWMutex
	matchLeaderboardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single matchLeaderboard record from the query.
func (q matchLeaderboardQuery) One(exec boil.Executor) (*MatchLeaderboard, error) {
	o := &MatchLeaderboard{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for match_leaderboard")
	}

	return o, nil
}

// All returns all MatchLeaderboard records from the query.
func (q matchLeaderboardQuery) All(exec boil.Executor) (MatchLeaderboardSlice, error) {
	var o []*MatchLeaderboard

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to MatchLeaderboard slice")
	}

	return o, nil
}

// Count returns the count of all MatchLeaderboard records in the query.
func (q matchLeaderboardQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count match_leaderboard rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q matchLeaderboardQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if match_leaderboard exists")
	}

	return count > 0, nil
}

// Division pointed to by the foreign key.
func (o *MatchLeaderboard) Division(mods ...qm.QueryMod) divisionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DivisionID),
	}

	queryMods = append(queryMods, mods...)

	return Divisions(queryMods...)
}

// Game pointed to by the foreign key.
func (o *MatchLeaderboard) Game(mods ...qm.QueryMod) gameQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GameID),
	}

	queryMods = append(queryMods, mods...)

	return Games(queryMods...)
}

// LeaderboardType pointed to by the foreign key.
func (o *MatchLeaderboard) LeaderboardType(mods ...qm.QueryMod) leaderboardTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LeaderboardTypeID),
	}

	queryMods = append(queryMods, mods...)

	return LeaderboardTypes(queryMods...)
}

// Match pointed to by the foreign key.
func (o *MatchLeaderboard) Match(mods ...qm.QueryMod) matchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MatchID),
	}

	queryMods = append(queryMods, mods...)

	return Matches(queryMods...)
}

// Transaction pointed to by the foreign key.
func (o *MatchLeaderboard) Transaction(mods ...qm.QueryMod) transactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TransactionID),
	}

	queryMods = append(queryMods, mods...)

	return Transactions(queryMods...)
}

// User pointed to by the foreign key.
func (o *MatchLeaderboard) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LeaderboardGameWeeks retrieves all the game_week's GameWeeks with an executor via leaderboards_id column.
func (o *MatchLeaderboard) LeaderboardGameWeeks(mods ...qm.QueryMod) gameWeekQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"game_weeks\".\"leaderboards_id\"=?", o.ID),
	)

	return GameWeeks(queryMods...)
}

// LoadDivision allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchLeaderboardL) LoadDivision(e boil.Executor, singular bool, maybeMatchLeaderboard interface{}, mods queries.Applicator) error {
	var slice []*MatchLeaderboard
	var object *MatchLeaderboard

	if singular {
		var ok bool
		object, ok = maybeMatchLeaderboard.(*MatchLeaderboard)
		if !ok {
			object = new(MatchLeaderboard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchLeaderboard))
			}
		}
	} else {
		s, ok := maybeMatchLeaderboard.(*[]*MatchLeaderboard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchLeaderboard))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchLeaderboardR{}
		}
		if !queries.IsNil(object.DivisionID) {
			args[object.DivisionID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchLeaderboardR{}
			}

			if !queries.IsNil(obj.DivisionID) {
				args[obj.DivisionID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`divisions`),
		qm.WhereIn(`divisions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Division")
	}

	var resultSlice []*Division
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Division")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for divisions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for divisions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Division = foreign
		if foreign.R == nil {
			foreign.R = &divisionR{}
		}
		foreign.R.MatchLeaderboards = append(foreign.R.MatchLeaderboards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DivisionID, foreign.ID) {
				local.R.Division = foreign
				if foreign.R == nil {
					foreign.R = &divisionR{}
				}
				foreign.R.MatchLeaderboards = append(foreign.R.MatchLeaderboards, local)
				break
			}
		}
	}

	return nil
}

// LoadGame allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchLeaderboardL) LoadGame(e boil.Executor, singular bool, maybeMatchLeaderboard interface{}, mods queries.Applicator) error {
	var slice []*MatchLeaderboard
	var object *MatchLeaderboard

	if singular {
		var ok bool
		object, ok = maybeMatchLeaderboard.(*MatchLeaderboard)
		if !ok {
			object = new(MatchLeaderboard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchLeaderboard))
			}
		}
	} else {
		s, ok := maybeMatchLeaderboard.(*[]*MatchLeaderboard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchLeaderboard))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchLeaderboardR{}
		}
		args[object.GameID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchLeaderboardR{}
			}

			args[obj.GameID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`games`),
		qm.WhereIn(`games.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Game")
	}

	var resultSlice []*Game
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Game")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for games")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for games")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Game = foreign
		if foreign.R == nil {
			foreign.R = &gameR{}
		}
		foreign.R.MatchLeaderboards = append(foreign.R.MatchLeaderboards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GameID == foreign.ID {
				local.R.Game = foreign
				if foreign.R == nil {
					foreign.R = &gameR{}
				}
				foreign.R.MatchLeaderboards = append(foreign.R.MatchLeaderboards, local)
				break
			}
		}
	}

	return nil
}

// LoadLeaderboardType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchLeaderboardL) LoadLeaderboardType(e boil.Executor, singular bool, maybeMatchLeaderboard interface{}, mods queries.Applicator) error {
	var slice []*MatchLeaderboard
	var object *MatchLeaderboard

	if singular {
		var ok bool
		object, ok = maybeMatchLeaderboard.(*MatchLeaderboard)
		if !ok {
			object = new(MatchLeaderboard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchLeaderboard))
			}
		}
	} else {
		s, ok := maybeMatchLeaderboard.(*[]*MatchLeaderboard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchLeaderboard))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchLeaderboardR{}
		}
		if !queries.IsNil(object.LeaderboardTypeID) {
			args[object.LeaderboardTypeID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchLeaderboardR{}
			}

			if !queries.IsNil(obj.LeaderboardTypeID) {
				args[obj.LeaderboardTypeID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`leaderboard_types`),
		qm.WhereIn(`leaderboard_types.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load LeaderboardType")
	}

	var resultSlice []*LeaderboardType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice LeaderboardType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for leaderboard_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for leaderboard_types")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LeaderboardType = foreign
		if foreign.R == nil {
			foreign.R = &leaderboardTypeR{}
		}
		foreign.R.MatchLeaderboards = append(foreign.R.MatchLeaderboards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.LeaderboardTypeID, foreign.ID) {
				local.R.LeaderboardType = foreign
				if foreign.R == nil {
					foreign.R = &leaderboardTypeR{}
				}
				foreign.R.MatchLeaderboards = append(foreign.R.MatchLeaderboards, local)
				break
			}
		}
	}

	return nil
}

// LoadMatch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchLeaderboardL) LoadMatch(e boil.Executor, singular bool, maybeMatchLeaderboard interface{}, mods queries.Applicator) error {
	var slice []*MatchLeaderboard
	var object *MatchLeaderboard

	if singular {
		var ok bool
		object, ok = maybeMatchLeaderboard.(*MatchLeaderboard)
		if !ok {
			object = new(MatchLeaderboard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchLeaderboard))
			}
		}
	} else {
		s, ok := maybeMatchLeaderboard.(*[]*MatchLeaderboard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchLeaderboard))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchLeaderboardR{}
		}
		args[object.MatchID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchLeaderboardR{}
			}

			args[obj.MatchID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Match")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Match")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Match = foreign
		if foreign.R == nil {
			foreign.R = &matchR{}
		}
		foreign.R.MatchLeaderboards = append(foreign.R.MatchLeaderboards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MatchID == foreign.ID {
				local.R.Match = foreign
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.MatchLeaderboards = append(foreign.R.MatchLeaderboards, local)
				break
			}
		}
	}

	return nil
}

// LoadTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchLeaderboardL) LoadTransaction(e boil.Executor, singular bool, maybeMatchLeaderboard interface{}, mods queries.Applicator) error {
	var slice []*MatchLeaderboard
	var object *MatchLeaderboard

	if singular {
		var ok bool
		object, ok = maybeMatchLeaderboard.(*MatchLeaderboard)
		if !ok {
			object = new(MatchLeaderboard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchLeaderboard))
			}
		}
	} else {
		s, ok := maybeMatchLeaderboard.(*[]*MatchLeaderboard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchLeaderboard))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchLeaderboardR{}
		}
		if !queries.IsNil(object.TransactionID) {
			args[object.TransactionID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchLeaderboardR{}
			}

			if !queries.IsNil(obj.TransactionID) {
				args[obj.TransactionID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`transactions`),
		qm.WhereIn(`transactions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transaction")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Transaction = foreign
		if foreign.R == nil {
			foreign.R = &transactionR{}
		}
		foreign.R.MatchLeaderboards = append(foreign.R.MatchLeaderboards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TransactionID, foreign.ID) {
				local.R.Transaction = foreign
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.MatchLeaderboards = append(foreign.R.MatchLeaderboards, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchLeaderboardL) LoadUser(e boil.Executor, singular bool, maybeMatchLeaderboard interface{}, mods queries.Applicator) error {
	var slice []*MatchLeaderboard
	var object *MatchLeaderboard

	if singular {
		var ok bool
		object, ok = maybeMatchLeaderboard.(*MatchLeaderboard)
		if !ok {
			object = new(MatchLeaderboard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchLeaderboard))
			}
		}
	} else {
		s, ok := maybeMatchLeaderboard.(*[]*MatchLeaderboard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchLeaderboard))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchLeaderboardR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchLeaderboardR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.MatchLeaderboards = append(foreign.R.MatchLeaderboards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.MatchLeaderboards = append(foreign.R.MatchLeaderboards, local)
				break
			}
		}
	}

	return nil
}

// LoadLeaderboardGameWeeks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (matchLeaderboardL) LoadLeaderboardGameWeeks(e boil.Executor, singular bool, maybeMatchLeaderboard interface{}, mods queries.Applicator) error {
	var slice []*MatchLeaderboard
	var object *MatchLeaderboard

	if singular {
		var ok bool
		object, ok = maybeMatchLeaderboard.(*MatchLeaderboard)
		if !ok {
			object = new(MatchLeaderboard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchLeaderboard))
			}
		}
	} else {
		s, ok := maybeMatchLeaderboard.(*[]*MatchLeaderboard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchLeaderboard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchLeaderboard))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchLeaderboardR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchLeaderboardR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`game_weeks`),
		qm.WhereIn(`game_weeks.leaderboards_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load game_weeks")
	}

	var resultSlice []*GameWeek
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice game_weeks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on game_weeks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_weeks")
	}

	if singular {
		object.R.LeaderboardGameWeeks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gameWeekR{}
			}
			foreign.R.Leaderboard = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.LeaderboardsID) {
				local.R.LeaderboardGameWeeks = append(local.R.LeaderboardGameWeeks, foreign)
				if foreign.R == nil {
					foreign.R = &gameWeekR{}
				}
				foreign.R.Leaderboard = local
				break
			}
		}
	}

	return nil
}

// SetDivision of the matchLeaderboard to the related item.
// Sets o.R.Division to related.
// Adds o to related.R.MatchLeaderboards.
func (o *MatchLeaderboard) SetDivision(exec boil.Executor, insert bool, related *Division) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match_leaderboard\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"division_id"}),
		strmangle.WhereClause("\"", "\"", 2, matchLeaderboardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DivisionID, related.ID)
	if o.R == nil {
		o.R = &matchLeaderboardR{
			Division: related,
		}
	} else {
		o.R.Division = related
	}

	if related.R == nil {
		related.R = &divisionR{
			MatchLeaderboards: MatchLeaderboardSlice{o},
		}
	} else {
		related.R.MatchLeaderboards = append(related.R.MatchLeaderboards, o)
	}

	return nil
}

// RemoveDivision relationship.
// Sets o.R.Division to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MatchLeaderboard) RemoveDivision(exec boil.Executor, related *Division) error {
	var err error

	queries.SetScanner(&o.DivisionID, nil)
	if _, err = o.Update(exec, boil.Whitelist("division_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Division = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MatchLeaderboards {
		if queries.Equal(o.DivisionID, ri.DivisionID) {
			continue
		}

		ln := len(related.R.MatchLeaderboards)
		if ln > 1 && i < ln-1 {
			related.R.MatchLeaderboards[i] = related.R.MatchLeaderboards[ln-1]
		}
		related.R.MatchLeaderboards = related.R.MatchLeaderboards[:ln-1]
		break
	}
	return nil
}

// SetGame of the matchLeaderboard to the related item.
// Sets o.R.Game to related.
// Adds o to related.R.MatchLeaderboards.
func (o *MatchLeaderboard) SetGame(exec boil.Executor, insert bool, related *Game) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match_leaderboard\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"game_id"}),
		strmangle.WhereClause("\"", "\"", 2, matchLeaderboardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GameID = related.ID
	if o.R == nil {
		o.R = &matchLeaderboardR{
			Game: related,
		}
	} else {
		o.R.Game = related
	}

	if related.R == nil {
		related.R = &gameR{
			MatchLeaderboards: MatchLeaderboardSlice{o},
		}
	} else {
		related.R.MatchLeaderboards = append(related.R.MatchLeaderboards, o)
	}

	return nil
}

// SetLeaderboardType of the matchLeaderboard to the related item.
// Sets o.R.LeaderboardType to related.
// Adds o to related.R.MatchLeaderboards.
func (o *MatchLeaderboard) SetLeaderboardType(exec boil.Executor, insert bool, related *LeaderboardType) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match_leaderboard\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"leaderboard_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, matchLeaderboardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.LeaderboardTypeID, related.ID)
	if o.R == nil {
		o.R = &matchLeaderboardR{
			LeaderboardType: related,
		}
	} else {
		o.R.LeaderboardType = related
	}

	if related.R == nil {
		related.R = &leaderboardTypeR{
			MatchLeaderboards: MatchLeaderboardSlice{o},
		}
	} else {
		related.R.MatchLeaderboards = append(related.R.MatchLeaderboards, o)
	}

	return nil
}

// RemoveLeaderboardType relationship.
// Sets o.R.LeaderboardType to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MatchLeaderboard) RemoveLeaderboardType(exec boil.Executor, related *LeaderboardType) error {
	var err error

	queries.SetScanner(&o.LeaderboardTypeID, nil)
	if _, err = o.Update(exec, boil.Whitelist("leaderboard_type_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.LeaderboardType = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MatchLeaderboards {
		if queries.Equal(o.LeaderboardTypeID, ri.LeaderboardTypeID) {
			continue
		}

		ln := len(related.R.MatchLeaderboards)
		if ln > 1 && i < ln-1 {
			related.R.MatchLeaderboards[i] = related.R.MatchLeaderboards[ln-1]
		}
		related.R.MatchLeaderboards = related.R.MatchLeaderboards[:ln-1]
		break
	}
	return nil
}

// SetMatch of the matchLeaderboard to the related item.
// Sets o.R.Match to related.
// Adds o to related.R.MatchLeaderboards.
func (o *MatchLeaderboard) SetMatch(exec boil.Executor, insert bool, related *Match) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match_leaderboard\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"match_id"}),
		strmangle.WhereClause("\"", "\"", 2, matchLeaderboardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MatchID = related.ID
	if o.R == nil {
		o.R = &matchLeaderboardR{
			Match: related,
		}
	} else {
		o.R.Match = related
	}

	if related.R == nil {
		related.R = &matchR{
			MatchLeaderboards: MatchLeaderboardSlice{o},
		}
	} else {
		related.R.MatchLeaderboards = append(related.R.MatchLeaderboards, o)
	}

	return nil
}

// SetTransaction of the matchLeaderboard to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.MatchLeaderboards.
func (o *MatchLeaderboard) SetTransaction(exec boil.Executor, insert bool, related *Transaction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match_leaderboard\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"transaction_id"}),
		strmangle.WhereClause("\"", "\"", 2, matchLeaderboardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TransactionID, related.ID)
	if o.R == nil {
		o.R = &matchLeaderboardR{
			Transaction: related,
		}
	} else {
		o.R.Transaction = related
	}

	if related.R == nil {
		related.R = &transactionR{
			MatchLeaderboards: MatchLeaderboardSlice{o},
		}
	} else {
		related.R.MatchLeaderboards = append(related.R.MatchLeaderboards, o)
	}

	return nil
}

// RemoveTransaction relationship.
// Sets o.R.Transaction to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MatchLeaderboard) RemoveTransaction(exec boil.Executor, related *Transaction) error {
	var err error

	queries.SetScanner(&o.TransactionID, nil)
	if _, err = o.Update(exec, boil.Whitelist("transaction_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Transaction = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MatchLeaderboards {
		if queries.Equal(o.TransactionID, ri.TransactionID) {
			continue
		}

		ln := len(related.R.MatchLeaderboards)
		if ln > 1 && i < ln-1 {
			related.R.MatchLeaderboards[i] = related.R.MatchLeaderboards[ln-1]
		}
		related.R.MatchLeaderboards = related.R.MatchLeaderboards[:ln-1]
		break
	}
	return nil
}

// SetUser of the matchLeaderboard to the related item.
// Sets o.R.User to related.
// Adds o to related.R.MatchLeaderboards.
func (o *MatchLeaderboard) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match_leaderboard\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, matchLeaderboardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &matchLeaderboardR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			MatchLeaderboards: MatchLeaderboardSlice{o},
		}
	} else {
		related.R.MatchLeaderboards = append(related.R.MatchLeaderboards, o)
	}

	return nil
}

// AddLeaderboardGameWeeks adds the given related objects to the existing relationships
// of the match_leaderboard, optionally inserting them as new records.
// Appends related to o.R.LeaderboardGameWeeks.
// Sets related.R.Leaderboard appropriately.
func (o *MatchLeaderboard) AddLeaderboardGameWeeks(exec boil.Executor, insert bool, related ...*GameWeek) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.LeaderboardsID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"game_weeks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"leaderboards_id"}),
				strmangle.WhereClause("\"", "\"", 2, gameWeekPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.LeaderboardsID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &matchLeaderboardR{
			LeaderboardGameWeeks: related,
		}
	} else {
		o.R.LeaderboardGameWeeks = append(o.R.LeaderboardGameWeeks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gameWeekR{
				Leaderboard: o,
			}
		} else {
			rel.R.Leaderboard = o
		}
	}
	return nil
}

// SetLeaderboardGameWeeks removes all previously related items of the
// match_leaderboard replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Leaderboard's LeaderboardGameWeeks accordingly.
// Replaces o.R.LeaderboardGameWeeks with related.
// Sets related.R.Leaderboard's LeaderboardGameWeeks accordingly.
func (o *MatchLeaderboard) SetLeaderboardGameWeeks(exec boil.Executor, insert bool, related ...*GameWeek) error {
	query := "update \"game_weeks\" set \"leaderboards_id\" = null where \"leaderboards_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.LeaderboardGameWeeks {
			queries.SetScanner(&rel.LeaderboardsID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Leaderboard = nil
		}
		o.R.LeaderboardGameWeeks = nil
	}

	return o.AddLeaderboardGameWeeks(exec, insert, related...)
}

// RemoveLeaderboardGameWeeks relationships from objects passed in.
// Removes related items from R.LeaderboardGameWeeks (uses pointer comparison, removal does not keep order)
// Sets related.R.Leaderboard.
func (o *MatchLeaderboard) RemoveLeaderboardGameWeeks(exec boil.Executor, related ...*GameWeek) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.LeaderboardsID, nil)
		if rel.R != nil {
			rel.R.Leaderboard = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("leaderboards_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.LeaderboardGameWeeks {
			if rel != ri {
				continue
			}

			ln := len(o.R.LeaderboardGameWeeks)
			if ln > 1 && i < ln-1 {
				o.R.LeaderboardGameWeeks[i] = o.R.LeaderboardGameWeeks[ln-1]
			}
			o.R.LeaderboardGameWeeks = o.R.LeaderboardGameWeeks[:ln-1]
			break
		}
	}

	return nil
}

// MatchLeaderboards retrieves all the records using an executor.
func MatchLeaderboards(mods ...qm.QueryMod) matchLeaderboardQuery {
	mods = append(mods, qm.From("\"match_leaderboard\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"match_leaderboard\".*"})
	}

	return matchLeaderboardQuery{q}
}

// FindMatchLeaderboard retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMatchLeaderboard(exec boil.Executor, iD int, selectCols ...string) (*MatchLeaderboard, error) {
	matchLeaderboardObj := &MatchLeaderboard{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"match_leaderboard\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, matchLeaderboardObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from match_leaderboard")
	}

	return matchLeaderboardObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MatchLeaderboard) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no match_leaderboard provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(matchLeaderboardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	matchLeaderboardInsertCacheMut.RLock()
	cache, cached := matchLeaderboardInsertCache[key]
	matchLeaderboardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			matchLeaderboardAllColumns,
			matchLeaderboardColumnsWithDefault,
			matchLeaderboardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(matchLeaderboardType, matchLeaderboardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(matchLeaderboardType, matchLeaderboardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"match_leaderboard\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"match_leaderboard\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into match_leaderboard")
	}

	if !cached {
		matchLeaderboardInsertCacheMut.Lock()
		matchLeaderboardInsertCache[key] = cache
		matchLeaderboardInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the MatchLeaderboard.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MatchLeaderboard) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	matchLeaderboardUpdateCacheMut.RLock()
	cache, cached := matchLeaderboardUpdateCache[key]
	matchLeaderboardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			matchLeaderboardAllColumns,
			matchLeaderboardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update match_leaderboard, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"match_leaderboard\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, matchLeaderboardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(matchLeaderboardType, matchLeaderboardMapping, append(wl, matchLeaderboardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update match_leaderboard row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for match_leaderboard")
	}

	if !cached {
		matchLeaderboardUpdateCacheMut.Lock()
		matchLeaderboardUpdateCache[key] = cache
		matchLeaderboardUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q matchLeaderboardQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for match_leaderboard")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for match_leaderboard")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MatchLeaderboardSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchLeaderboardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"match_leaderboard\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, matchLeaderboardPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in matchLeaderboard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all matchLeaderboard")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MatchLeaderboard) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no match_leaderboard provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(matchLeaderboardColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	matchLeaderboardUpsertCacheMut.RLock()
	cache, cached := matchLeaderboardUpsertCache[key]
	matchLeaderboardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			matchLeaderboardAllColumns,
			matchLeaderboardColumnsWithDefault,
			matchLeaderboardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			matchLeaderboardAllColumns,
			matchLeaderboardPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert match_leaderboard, could not build update column list")
		}

		ret := strmangle.SetComplement(matchLeaderboardAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(matchLeaderboardPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert match_leaderboard, could not build conflict column list")
			}

			conflict = make([]string, len(matchLeaderboardPrimaryKeyColumns))
			copy(conflict, matchLeaderboardPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"match_leaderboard\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(matchLeaderboardType, matchLeaderboardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(matchLeaderboardType, matchLeaderboardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert match_leaderboard")
	}

	if !cached {
		matchLeaderboardUpsertCacheMut.Lock()
		matchLeaderboardUpsertCache[key] = cache
		matchLeaderboardUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single MatchLeaderboard record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MatchLeaderboard) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no MatchLeaderboard provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), matchLeaderboardPrimaryKeyMapping)
	sql := "DELETE FROM \"match_leaderboard\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from match_leaderboard")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for match_leaderboard")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q matchLeaderboardQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no matchLeaderboardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from match_leaderboard")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for match_leaderboard")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MatchLeaderboardSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchLeaderboardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"match_leaderboard\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, matchLeaderboardPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from matchLeaderboard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for match_leaderboard")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MatchLeaderboard) Reload(exec boil.Executor) error {
	ret, err := FindMatchLeaderboard(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MatchLeaderboardSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MatchLeaderboardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchLeaderboardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"match_leaderboard\".* FROM \"match_leaderboard\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, matchLeaderboardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in MatchLeaderboardSlice")
	}

	*o = slice

	return nil
}

// MatchLeaderboardExists checks if the MatchLeaderboard row exists.
func MatchLeaderboardExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"match_leaderboard\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if match_leaderboard exists")
	}

	return exists, nil
}

// Exists checks if the MatchLeaderboard row exists.
func (o *MatchLeaderboard) Exists(exec boil.Executor) (bool, error) {
	return MatchLeaderboardExists(exec, o.ID)
}
