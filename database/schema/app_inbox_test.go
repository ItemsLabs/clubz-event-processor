// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAppInboxes(t *testing.T) {
	t.Parallel()

	query := AppInboxes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAppInboxesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppInbox{}
	if err = randomize.Struct(seed, o, appInboxDBTypes, true, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AppInboxes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAppInboxesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppInbox{}
	if err = randomize.Struct(seed, o, appInboxDBTypes, true, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AppInboxes().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AppInboxes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAppInboxesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppInbox{}
	if err = randomize.Struct(seed, o, appInboxDBTypes, true, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AppInboxSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AppInboxes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAppInboxesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppInbox{}
	if err = randomize.Struct(seed, o, appInboxDBTypes, true, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AppInboxExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AppInbox exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AppInboxExists to return true, but got false.")
	}
}

func testAppInboxesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppInbox{}
	if err = randomize.Struct(seed, o, appInboxDBTypes, true, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	appInboxFound, err := FindAppInbox(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if appInboxFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAppInboxesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppInbox{}
	if err = randomize.Struct(seed, o, appInboxDBTypes, true, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AppInboxes().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testAppInboxesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppInbox{}
	if err = randomize.Struct(seed, o, appInboxDBTypes, true, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AppInboxes().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAppInboxesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	appInboxOne := &AppInbox{}
	appInboxTwo := &AppInbox{}
	if err = randomize.Struct(seed, appInboxOne, appInboxDBTypes, false, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}
	if err = randomize.Struct(seed, appInboxTwo, appInboxDBTypes, false, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = appInboxOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = appInboxTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AppInboxes().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAppInboxesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	appInboxOne := &AppInbox{}
	appInboxTwo := &AppInbox{}
	if err = randomize.Struct(seed, appInboxOne, appInboxDBTypes, false, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}
	if err = randomize.Struct(seed, appInboxTwo, appInboxDBTypes, false, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = appInboxOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = appInboxTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AppInboxes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testAppInboxesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppInbox{}
	if err = randomize.Struct(seed, o, appInboxDBTypes, true, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AppInboxes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAppInboxesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppInbox{}
	if err = randomize.Struct(seed, o, appInboxDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(appInboxColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AppInboxes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAppInboxToOneGameUsingGame(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local AppInbox
	var foreign Game

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, appInboxDBTypes, true, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, gameDBTypes, false, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.GameID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Game().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AppInboxSlice{&local}
	if err = local.L.LoadGame(tx, false, (*[]*AppInbox)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Game == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Game = nil
	if err = local.L.LoadGame(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Game == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testAppInboxToOneGameWeekUsingGameWeekID(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local AppInbox
	var foreign GameWeek

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, appInboxDBTypes, true, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, gameWeekDBTypes, false, gameWeekColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameWeek struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.GameWeekIDID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.GameWeekID().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AppInboxSlice{&local}
	if err = local.L.LoadGameWeekID(tx, false, (*[]*AppInbox)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.GameWeekID == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.GameWeekID = nil
	if err = local.L.LoadGameWeekID(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.GameWeekID == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testAppInboxToOneMatchUsingMatchID(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local AppInbox
	var foreign Match

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, appInboxDBTypes, true, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.MatchIDID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.MatchID().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AppInboxSlice{&local}
	if err = local.L.LoadMatchID(tx, false, (*[]*AppInbox)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MatchID == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.MatchID = nil
	if err = local.L.LoadMatchID(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MatchID == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testAppInboxToOneRewardUsingReward(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local AppInbox
	var foreign Reward

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, appInboxDBTypes, true, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, rewardDBTypes, false, rewardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reward struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.RewardID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Reward().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AppInboxSlice{&local}
	if err = local.L.LoadReward(tx, false, (*[]*AppInbox)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Reward == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Reward = nil
	if err = local.L.LoadReward(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Reward == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testAppInboxToOneUserUsingUser(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local AppInbox
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, appInboxDBTypes, true, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AppInboxSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*AppInbox)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testAppInboxToOneSetOpGameUsingGame(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AppInbox
	var b, c Game

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Game{&b, &c} {
		err = a.SetGame(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Game != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AppInboxes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.GameID, x.ID) {
			t.Error("foreign key was wrong value", a.GameID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GameID))
		reflect.Indirect(reflect.ValueOf(&a.GameID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.GameID, x.ID) {
			t.Error("foreign key was wrong value", a.GameID, x.ID)
		}
	}
}

func testAppInboxToOneRemoveOpGameUsingGame(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AppInbox
	var b Game

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetGame(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveGame(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Game().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Game != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.GameID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.AppInboxes) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAppInboxToOneSetOpGameWeekUsingGameWeekID(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AppInbox
	var b, c GameWeek

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*GameWeek{&b, &c} {
		err = a.SetGameWeekID(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.GameWeekID != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GameWeekIDAppInboxes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.GameWeekIDID, x.ID) {
			t.Error("foreign key was wrong value", a.GameWeekIDID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GameWeekIDID))
		reflect.Indirect(reflect.ValueOf(&a.GameWeekIDID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.GameWeekIDID, x.ID) {
			t.Error("foreign key was wrong value", a.GameWeekIDID, x.ID)
		}
	}
}

func testAppInboxToOneRemoveOpGameWeekUsingGameWeekID(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AppInbox
	var b GameWeek

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetGameWeekID(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveGameWeekID(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.GameWeekID().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.GameWeekID != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.GameWeekIDID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.GameWeekIDAppInboxes) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAppInboxToOneSetOpMatchUsingMatchID(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AppInbox
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Match{&b, &c} {
		err = a.SetMatchID(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.MatchID != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MatchIDAppInboxes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.MatchIDID, x.ID) {
			t.Error("foreign key was wrong value", a.MatchIDID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MatchIDID))
		reflect.Indirect(reflect.ValueOf(&a.MatchIDID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.MatchIDID, x.ID) {
			t.Error("foreign key was wrong value", a.MatchIDID, x.ID)
		}
	}
}

func testAppInboxToOneRemoveOpMatchUsingMatchID(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AppInbox
	var b Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetMatchID(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveMatchID(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.MatchID().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.MatchID != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.MatchIDID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.MatchIDAppInboxes) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAppInboxToOneSetOpRewardUsingReward(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AppInbox
	var b, c Reward

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, rewardDBTypes, false, strmangle.SetComplement(rewardPrimaryKeyColumns, rewardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, rewardDBTypes, false, strmangle.SetComplement(rewardPrimaryKeyColumns, rewardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Reward{&b, &c} {
		err = a.SetReward(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Reward != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AppInboxes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.RewardID, x.ID) {
			t.Error("foreign key was wrong value", a.RewardID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RewardID))
		reflect.Indirect(reflect.ValueOf(&a.RewardID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.RewardID, x.ID) {
			t.Error("foreign key was wrong value", a.RewardID, x.ID)
		}
	}
}

func testAppInboxToOneRemoveOpRewardUsingReward(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AppInbox
	var b Reward

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, rewardDBTypes, false, strmangle.SetComplement(rewardPrimaryKeyColumns, rewardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetReward(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveReward(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Reward().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Reward != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.RewardID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.AppInboxes) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAppInboxToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AppInbox
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AppInboxes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testAppInboxToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AppInbox
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appInboxDBTypes, false, strmangle.SetComplement(appInboxPrimaryKeyColumns, appInboxColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.AppInboxes) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAppInboxesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppInbox{}
	if err = randomize.Struct(seed, o, appInboxDBTypes, true, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testAppInboxesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppInbox{}
	if err = randomize.Struct(seed, o, appInboxDBTypes, true, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AppInboxSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testAppInboxesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppInbox{}
	if err = randomize.Struct(seed, o, appInboxDBTypes, true, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AppInboxes().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	appInboxDBTypes = map[string]string{`ID`: `uuid`, `Title`: `character varying`, `Description`: `text`, `Status`: `character varying`, `Priority`: `character varying`, `Category`: `character varying`, `ImageURL`: `character varying`, `LinkURL`: `character varying`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `Read`: `boolean`, `UserID`: `uuid`, `Claimed`: `boolean`, `ClamedAt`: `timestamp with time zone`, `RewardID`: `uuid`, `Clear`: `boolean`, `GameWeekIDID`: `uuid`, `MatchIDID`: `uuid`, `GameID`: `uuid`}
	_               = bytes.MinRead
)

func testAppInboxesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(appInboxPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(appInboxAllColumns) == len(appInboxPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AppInbox{}
	if err = randomize.Struct(seed, o, appInboxDBTypes, true, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AppInboxes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, appInboxDBTypes, true, appInboxPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAppInboxesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(appInboxAllColumns) == len(appInboxPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AppInbox{}
	if err = randomize.Struct(seed, o, appInboxDBTypes, true, appInboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AppInboxes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, appInboxDBTypes, true, appInboxPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(appInboxAllColumns, appInboxPrimaryKeyColumns) {
		fields = appInboxAllColumns
	} else {
		fields = strmangle.SetComplement(
			appInboxAllColumns,
			appInboxPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AppInboxSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAppInboxesUpsert(t *testing.T) {
	t.Parallel()

	if len(appInboxAllColumns) == len(appInboxPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AppInbox{}
	if err = randomize.Struct(seed, &o, appInboxDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AppInbox: %s", err)
	}

	count, err := AppInboxes().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, appInboxDBTypes, false, appInboxPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AppInbox struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AppInbox: %s", err)
	}

	count, err = AppInboxes().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
