// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAssignedPlayers(t *testing.T) {
	t.Parallel()

	query := AssignedPlayers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAssignedPlayersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPlayer{}
	if err = randomize.Struct(seed, o, assignedPlayerDBTypes, true, assignedPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AssignedPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignedPlayersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPlayer{}
	if err = randomize.Struct(seed, o, assignedPlayerDBTypes, true, assignedPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AssignedPlayers().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AssignedPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignedPlayersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPlayer{}
	if err = randomize.Struct(seed, o, assignedPlayerDBTypes, true, assignedPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AssignedPlayerSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AssignedPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignedPlayersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPlayer{}
	if err = randomize.Struct(seed, o, assignedPlayerDBTypes, true, assignedPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AssignedPlayerExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AssignedPlayer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AssignedPlayerExists to return true, but got false.")
	}
}

func testAssignedPlayersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPlayer{}
	if err = randomize.Struct(seed, o, assignedPlayerDBTypes, true, assignedPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	assignedPlayerFound, err := FindAssignedPlayer(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if assignedPlayerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAssignedPlayersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPlayer{}
	if err = randomize.Struct(seed, o, assignedPlayerDBTypes, true, assignedPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AssignedPlayers().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testAssignedPlayersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPlayer{}
	if err = randomize.Struct(seed, o, assignedPlayerDBTypes, true, assignedPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AssignedPlayers().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAssignedPlayersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	assignedPlayerOne := &AssignedPlayer{}
	assignedPlayerTwo := &AssignedPlayer{}
	if err = randomize.Struct(seed, assignedPlayerOne, assignedPlayerDBTypes, false, assignedPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}
	if err = randomize.Struct(seed, assignedPlayerTwo, assignedPlayerDBTypes, false, assignedPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = assignedPlayerOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = assignedPlayerTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AssignedPlayers().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAssignedPlayersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	assignedPlayerOne := &AssignedPlayer{}
	assignedPlayerTwo := &AssignedPlayer{}
	if err = randomize.Struct(seed, assignedPlayerOne, assignedPlayerDBTypes, false, assignedPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}
	if err = randomize.Struct(seed, assignedPlayerTwo, assignedPlayerDBTypes, false, assignedPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = assignedPlayerOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = assignedPlayerTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testAssignedPlayersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPlayer{}
	if err = randomize.Struct(seed, o, assignedPlayerDBTypes, true, assignedPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAssignedPlayersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPlayer{}
	if err = randomize.Struct(seed, o, assignedPlayerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(assignedPlayerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AssignedPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAssignedPlayerToManyGamePicks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AssignedPlayer
	var b, c GamePick

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedPlayerDBTypes, true, assignedPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, gamePickDBTypes, false, gamePickColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gamePickDBTypes, false, gamePickColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.AssignedPlayerID, a.ID)
	queries.Assign(&c.AssignedPlayerID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GamePicks().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.AssignedPlayerID, b.AssignedPlayerID) {
			bFound = true
		}
		if queries.Equal(v.AssignedPlayerID, c.AssignedPlayerID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AssignedPlayerSlice{&a}
	if err = a.L.LoadGamePicks(tx, false, (*[]*AssignedPlayer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GamePicks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GamePicks = nil
	if err = a.L.LoadGamePicks(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GamePicks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAssignedPlayerToManyAddOpGamePicks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AssignedPlayer
	var b, c, d, e GamePick

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedPlayerDBTypes, false, strmangle.SetComplement(assignedPlayerPrimaryKeyColumns, assignedPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GamePick{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gamePickDBTypes, false, strmangle.SetComplement(gamePickPrimaryKeyColumns, gamePickColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GamePick{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGamePicks(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.AssignedPlayerID) {
			t.Error("foreign key was wrong value", a.ID, first.AssignedPlayerID)
		}
		if !queries.Equal(a.ID, second.AssignedPlayerID) {
			t.Error("foreign key was wrong value", a.ID, second.AssignedPlayerID)
		}

		if first.R.AssignedPlayer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.AssignedPlayer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GamePicks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GamePicks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GamePicks().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAssignedPlayerToManySetOpGamePicks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AssignedPlayer
	var b, c, d, e GamePick

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedPlayerDBTypes, false, strmangle.SetComplement(assignedPlayerPrimaryKeyColumns, assignedPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GamePick{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gamePickDBTypes, false, strmangle.SetComplement(gamePickPrimaryKeyColumns, gamePickColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetGamePicks(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.GamePicks().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetGamePicks(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.GamePicks().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AssignedPlayerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AssignedPlayerID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.AssignedPlayerID) {
		t.Error("foreign key was wrong value", a.ID, d.AssignedPlayerID)
	}
	if !queries.Equal(a.ID, e.AssignedPlayerID) {
		t.Error("foreign key was wrong value", a.ID, e.AssignedPlayerID)
	}

	if b.R.AssignedPlayer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AssignedPlayer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AssignedPlayer != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.AssignedPlayer != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.GamePicks[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.GamePicks[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAssignedPlayerToManyRemoveOpGamePicks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AssignedPlayer
	var b, c, d, e GamePick

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedPlayerDBTypes, false, strmangle.SetComplement(assignedPlayerPrimaryKeyColumns, assignedPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GamePick{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gamePickDBTypes, false, strmangle.SetComplement(gamePickPrimaryKeyColumns, gamePickColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddGamePicks(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.GamePicks().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveGamePicks(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.GamePicks().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AssignedPlayerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AssignedPlayerID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.AssignedPlayer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AssignedPlayer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AssignedPlayer != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.AssignedPlayer != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.GamePicks) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.GamePicks[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.GamePicks[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAssignedPlayerToOneNFTBucketUsingPlayerNFT(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local AssignedPlayer
	var foreign NFTBucket

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assignedPlayerDBTypes, true, assignedPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, nftBucketDBTypes, false, nftBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTBucket struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PlayerNFTID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.PlayerNFT().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AssignedPlayerSlice{&local}
	if err = local.L.LoadPlayerNFT(tx, false, (*[]*AssignedPlayer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PlayerNFT == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.PlayerNFT = nil
	if err = local.L.LoadPlayerNFT(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PlayerNFT == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testAssignedPlayerToOneSetOpNFTBucketUsingPlayerNFT(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AssignedPlayer
	var b, c NFTBucket

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedPlayerDBTypes, false, strmangle.SetComplement(assignedPlayerPrimaryKeyColumns, assignedPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, nftBucketDBTypes, false, strmangle.SetComplement(nftBucketPrimaryKeyColumns, nftBucketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, nftBucketDBTypes, false, strmangle.SetComplement(nftBucketPrimaryKeyColumns, nftBucketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*NFTBucket{&b, &c} {
		err = a.SetPlayerNFT(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.PlayerNFT != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PlayerNFTAssignedPlayers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PlayerNFTID, x.ID) {
			t.Error("foreign key was wrong value", a.PlayerNFTID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PlayerNFTID))
		reflect.Indirect(reflect.ValueOf(&a.PlayerNFTID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PlayerNFTID, x.ID) {
			t.Error("foreign key was wrong value", a.PlayerNFTID, x.ID)
		}
	}
}

func testAssignedPlayerToOneRemoveOpNFTBucketUsingPlayerNFT(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AssignedPlayer
	var b NFTBucket

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedPlayerDBTypes, false, strmangle.SetComplement(assignedPlayerPrimaryKeyColumns, assignedPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, nftBucketDBTypes, false, strmangle.SetComplement(nftBucketPrimaryKeyColumns, nftBucketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPlayerNFT(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePlayerNFT(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.PlayerNFT().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.PlayerNFT != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PlayerNFTID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PlayerNFTAssignedPlayers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAssignedPlayersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPlayer{}
	if err = randomize.Struct(seed, o, assignedPlayerDBTypes, true, assignedPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testAssignedPlayersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPlayer{}
	if err = randomize.Struct(seed, o, assignedPlayerDBTypes, true, assignedPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AssignedPlayerSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testAssignedPlayersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPlayer{}
	if err = randomize.Struct(seed, o, assignedPlayerDBTypes, true, assignedPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AssignedPlayers().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	assignedPlayerDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `PlayerNFTID`: `uuid`, `NFTID`: `character varying`, `Rarity`: `character varying`}
	_                     = bytes.MinRead
)

func testAssignedPlayersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(assignedPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(assignedPlayerAllColumns) == len(assignedPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPlayer{}
	if err = randomize.Struct(seed, o, assignedPlayerDBTypes, true, assignedPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, assignedPlayerDBTypes, true, assignedPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAssignedPlayersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(assignedPlayerAllColumns) == len(assignedPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPlayer{}
	if err = randomize.Struct(seed, o, assignedPlayerDBTypes, true, assignedPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, assignedPlayerDBTypes, true, assignedPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(assignedPlayerAllColumns, assignedPlayerPrimaryKeyColumns) {
		fields = assignedPlayerAllColumns
	} else {
		fields = strmangle.SetComplement(
			assignedPlayerAllColumns,
			assignedPlayerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AssignedPlayerSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAssignedPlayersUpsert(t *testing.T) {
	t.Parallel()

	if len(assignedPlayerAllColumns) == len(assignedPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AssignedPlayer{}
	if err = randomize.Struct(seed, &o, assignedPlayerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AssignedPlayer: %s", err)
	}

	count, err := AssignedPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, assignedPlayerDBTypes, false, assignedPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AssignedPlayer: %s", err)
	}

	count, err = AssignedPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
