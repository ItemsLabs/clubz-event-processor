// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GameWeekDivision is an object representing the database table.
type GameWeekDivision struct {
	ID              int     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Capacity        int     `boil:"capacity" json:"capacity" toml:"capacity" yaml:"capacity"`
	PromotionCount  float64 `boil:"promotion_count" json:"promotion_count" toml:"promotion_count" yaml:"promotion_count"`
	RelegationCount float64 `boil:"relegation_count" json:"relegation_count" toml:"relegation_count" yaml:"relegation_count"`
	DivisionID      string  `boil:"division_id" json:"division_id" toml:"division_id" yaml:"division_id"`
	WeekID          string  `boil:"week_id" json:"week_id" toml:"week_id" yaml:"week_id"`

	R *gameWeekDivisionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gameWeekDivisionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GameWeekDivisionColumns = struct {
	ID              string
	Capacity        string
	PromotionCount  string
	RelegationCount string
	DivisionID      string
	WeekID          string
}{
	ID:              "id",
	Capacity:        "capacity",
	PromotionCount:  "promotion_count",
	RelegationCount: "relegation_count",
	DivisionID:      "division_id",
	WeekID:          "week_id",
}

var GameWeekDivisionTableColumns = struct {
	ID              string
	Capacity        string
	PromotionCount  string
	RelegationCount string
	DivisionID      string
	WeekID          string
}{
	ID:              "game_week_divisions.id",
	Capacity:        "game_week_divisions.capacity",
	PromotionCount:  "game_week_divisions.promotion_count",
	RelegationCount: "game_week_divisions.relegation_count",
	DivisionID:      "game_week_divisions.division_id",
	WeekID:          "game_week_divisions.week_id",
}

// Generated where

var GameWeekDivisionWhere = struct {
	ID              whereHelperint
	Capacity        whereHelperint
	PromotionCount  whereHelperfloat64
	RelegationCount whereHelperfloat64
	DivisionID      whereHelperstring
	WeekID          whereHelperstring
}{
	ID:              whereHelperint{field: "\"game_week_divisions\".\"id\""},
	Capacity:        whereHelperint{field: "\"game_week_divisions\".\"capacity\""},
	PromotionCount:  whereHelperfloat64{field: "\"game_week_divisions\".\"promotion_count\""},
	RelegationCount: whereHelperfloat64{field: "\"game_week_divisions\".\"relegation_count\""},
	DivisionID:      whereHelperstring{field: "\"game_week_divisions\".\"division_id\""},
	WeekID:          whereHelperstring{field: "\"game_week_divisions\".\"week_id\""},
}

// GameWeekDivisionRels is where relationship names are stored.
var GameWeekDivisionRels = struct {
	Division string
	Week     string
}{
	Division: "Division",
	Week:     "Week",
}

// gameWeekDivisionR is where relationships are stored.
type gameWeekDivisionR struct {
	Division *Division `boil:"Division" json:"Division" toml:"Division" yaml:"Division"`
	Week     *GameWeek `boil:"Week" json:"Week" toml:"Week" yaml:"Week"`
}

// NewStruct creates a new relationship struct
func (*gameWeekDivisionR) NewStruct() *gameWeekDivisionR {
	return &gameWeekDivisionR{}
}

func (r *gameWeekDivisionR) GetDivision() *Division {
	if r == nil {
		return nil
	}
	return r.Division
}

func (r *gameWeekDivisionR) GetWeek() *GameWeek {
	if r == nil {
		return nil
	}
	return r.Week
}

// gameWeekDivisionL is where Load methods for each relationship are stored.
type gameWeekDivisionL struct{}

var (
	gameWeekDivisionAllColumns            = []string{"id", "capacity", "promotion_count", "relegation_count", "division_id", "week_id"}
	gameWeekDivisionColumnsWithoutDefault = []string{"capacity", "promotion_count", "relegation_count", "division_id", "week_id"}
	gameWeekDivisionColumnsWithDefault    = []string{"id"}
	gameWeekDivisionPrimaryKeyColumns     = []string{"id"}
	gameWeekDivisionGeneratedColumns      = []string{}
)

type (
	// GameWeekDivisionSlice is an alias for a slice of pointers to GameWeekDivision.
	// This should almost always be used instead of []GameWeekDivision.
	GameWeekDivisionSlice []*GameWeekDivision

	gameWeekDivisionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gameWeekDivisionType                 = reflect.TypeOf(&GameWeekDivision{})
	gameWeekDivisionMapping              = queries.MakeStructMapping(gameWeekDivisionType)
	gameWeekDivisionPrimaryKeyMapping, _ = queries.BindMapping(gameWeekDivisionType, gameWeekDivisionMapping, gameWeekDivisionPrimaryKeyColumns)
	gameWeekDivisionInsertCacheMut       sync.RWMutex
	gameWeekDivisionInsertCache          = make(map[string]insertCache)
	gameWeekDivisionUpdateCacheMut       sync.RWMutex
	gameWeekDivisionUpdateCache          = make(map[string]updateCache)
	gameWeekDivisionUpsertCacheMut       sync.RWMutex
	gameWeekDivisionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single gameWeekDivision record from the query.
func (q gameWeekDivisionQuery) One(exec boil.Executor) (*GameWeekDivision, error) {
	o := &GameWeekDivision{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for game_week_divisions")
	}

	return o, nil
}

// All returns all GameWeekDivision records from the query.
func (q gameWeekDivisionQuery) All(exec boil.Executor) (GameWeekDivisionSlice, error) {
	var o []*GameWeekDivision

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to GameWeekDivision slice")
	}

	return o, nil
}

// Count returns the count of all GameWeekDivision records in the query.
func (q gameWeekDivisionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count game_week_divisions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gameWeekDivisionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if game_week_divisions exists")
	}

	return count > 0, nil
}

// Division pointed to by the foreign key.
func (o *GameWeekDivision) Division(mods ...qm.QueryMod) divisionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DivisionID),
	}

	queryMods = append(queryMods, mods...)

	return Divisions(queryMods...)
}

// Week pointed to by the foreign key.
func (o *GameWeekDivision) Week(mods ...qm.QueryMod) gameWeekQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WeekID),
	}

	queryMods = append(queryMods, mods...)

	return GameWeeks(queryMods...)
}

// LoadDivision allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gameWeekDivisionL) LoadDivision(e boil.Executor, singular bool, maybeGameWeekDivision interface{}, mods queries.Applicator) error {
	var slice []*GameWeekDivision
	var object *GameWeekDivision

	if singular {
		var ok bool
		object, ok = maybeGameWeekDivision.(*GameWeekDivision)
		if !ok {
			object = new(GameWeekDivision)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGameWeekDivision)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGameWeekDivision))
			}
		}
	} else {
		s, ok := maybeGameWeekDivision.(*[]*GameWeekDivision)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGameWeekDivision)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGameWeekDivision))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameWeekDivisionR{}
		}
		args[object.DivisionID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameWeekDivisionR{}
			}

			args[obj.DivisionID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`divisions`),
		qm.WhereIn(`divisions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Division")
	}

	var resultSlice []*Division
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Division")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for divisions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for divisions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Division = foreign
		if foreign.R == nil {
			foreign.R = &divisionR{}
		}
		foreign.R.GameWeekDivisions = append(foreign.R.GameWeekDivisions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DivisionID == foreign.ID {
				local.R.Division = foreign
				if foreign.R == nil {
					foreign.R = &divisionR{}
				}
				foreign.R.GameWeekDivisions = append(foreign.R.GameWeekDivisions, local)
				break
			}
		}
	}

	return nil
}

// LoadWeek allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gameWeekDivisionL) LoadWeek(e boil.Executor, singular bool, maybeGameWeekDivision interface{}, mods queries.Applicator) error {
	var slice []*GameWeekDivision
	var object *GameWeekDivision

	if singular {
		var ok bool
		object, ok = maybeGameWeekDivision.(*GameWeekDivision)
		if !ok {
			object = new(GameWeekDivision)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGameWeekDivision)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGameWeekDivision))
			}
		}
	} else {
		s, ok := maybeGameWeekDivision.(*[]*GameWeekDivision)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGameWeekDivision)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGameWeekDivision))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameWeekDivisionR{}
		}
		args[object.WeekID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameWeekDivisionR{}
			}

			args[obj.WeekID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`game_weeks`),
		qm.WhereIn(`game_weeks.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GameWeek")
	}

	var resultSlice []*GameWeek
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GameWeek")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for game_weeks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_weeks")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Week = foreign
		if foreign.R == nil {
			foreign.R = &gameWeekR{}
		}
		foreign.R.WeekGameWeekDivisions = append(foreign.R.WeekGameWeekDivisions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WeekID == foreign.ID {
				local.R.Week = foreign
				if foreign.R == nil {
					foreign.R = &gameWeekR{}
				}
				foreign.R.WeekGameWeekDivisions = append(foreign.R.WeekGameWeekDivisions, local)
				break
			}
		}
	}

	return nil
}

// SetDivision of the gameWeekDivision to the related item.
// Sets o.R.Division to related.
// Adds o to related.R.GameWeekDivisions.
func (o *GameWeekDivision) SetDivision(exec boil.Executor, insert bool, related *Division) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"game_week_divisions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"division_id"}),
		strmangle.WhereClause("\"", "\"", 2, gameWeekDivisionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DivisionID = related.ID
	if o.R == nil {
		o.R = &gameWeekDivisionR{
			Division: related,
		}
	} else {
		o.R.Division = related
	}

	if related.R == nil {
		related.R = &divisionR{
			GameWeekDivisions: GameWeekDivisionSlice{o},
		}
	} else {
		related.R.GameWeekDivisions = append(related.R.GameWeekDivisions, o)
	}

	return nil
}

// SetWeek of the gameWeekDivision to the related item.
// Sets o.R.Week to related.
// Adds o to related.R.WeekGameWeekDivisions.
func (o *GameWeekDivision) SetWeek(exec boil.Executor, insert bool, related *GameWeek) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"game_week_divisions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"week_id"}),
		strmangle.WhereClause("\"", "\"", 2, gameWeekDivisionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WeekID = related.ID
	if o.R == nil {
		o.R = &gameWeekDivisionR{
			Week: related,
		}
	} else {
		o.R.Week = related
	}

	if related.R == nil {
		related.R = &gameWeekR{
			WeekGameWeekDivisions: GameWeekDivisionSlice{o},
		}
	} else {
		related.R.WeekGameWeekDivisions = append(related.R.WeekGameWeekDivisions, o)
	}

	return nil
}

// GameWeekDivisions retrieves all the records using an executor.
func GameWeekDivisions(mods ...qm.QueryMod) gameWeekDivisionQuery {
	mods = append(mods, qm.From("\"game_week_divisions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"game_week_divisions\".*"})
	}

	return gameWeekDivisionQuery{q}
}

// FindGameWeekDivision retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGameWeekDivision(exec boil.Executor, iD int, selectCols ...string) (*GameWeekDivision, error) {
	gameWeekDivisionObj := &GameWeekDivision{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"game_week_divisions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, gameWeekDivisionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from game_week_divisions")
	}

	return gameWeekDivisionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GameWeekDivision) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no game_week_divisions provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(gameWeekDivisionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gameWeekDivisionInsertCacheMut.RLock()
	cache, cached := gameWeekDivisionInsertCache[key]
	gameWeekDivisionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gameWeekDivisionAllColumns,
			gameWeekDivisionColumnsWithDefault,
			gameWeekDivisionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gameWeekDivisionType, gameWeekDivisionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gameWeekDivisionType, gameWeekDivisionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"game_week_divisions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"game_week_divisions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into game_week_divisions")
	}

	if !cached {
		gameWeekDivisionInsertCacheMut.Lock()
		gameWeekDivisionInsertCache[key] = cache
		gameWeekDivisionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the GameWeekDivision.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GameWeekDivision) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	gameWeekDivisionUpdateCacheMut.RLock()
	cache, cached := gameWeekDivisionUpdateCache[key]
	gameWeekDivisionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gameWeekDivisionAllColumns,
			gameWeekDivisionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update game_week_divisions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"game_week_divisions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gameWeekDivisionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gameWeekDivisionType, gameWeekDivisionMapping, append(wl, gameWeekDivisionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update game_week_divisions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for game_week_divisions")
	}

	if !cached {
		gameWeekDivisionUpdateCacheMut.Lock()
		gameWeekDivisionUpdateCache[key] = cache
		gameWeekDivisionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q gameWeekDivisionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for game_week_divisions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for game_week_divisions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GameWeekDivisionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gameWeekDivisionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"game_week_divisions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gameWeekDivisionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in gameWeekDivision slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all gameWeekDivision")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GameWeekDivision) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no game_week_divisions provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(gameWeekDivisionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gameWeekDivisionUpsertCacheMut.RLock()
	cache, cached := gameWeekDivisionUpsertCache[key]
	gameWeekDivisionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			gameWeekDivisionAllColumns,
			gameWeekDivisionColumnsWithDefault,
			gameWeekDivisionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			gameWeekDivisionAllColumns,
			gameWeekDivisionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert game_week_divisions, could not build update column list")
		}

		ret := strmangle.SetComplement(gameWeekDivisionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(gameWeekDivisionPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert game_week_divisions, could not build conflict column list")
			}

			conflict = make([]string, len(gameWeekDivisionPrimaryKeyColumns))
			copy(conflict, gameWeekDivisionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"game_week_divisions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(gameWeekDivisionType, gameWeekDivisionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gameWeekDivisionType, gameWeekDivisionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert game_week_divisions")
	}

	if !cached {
		gameWeekDivisionUpsertCacheMut.Lock()
		gameWeekDivisionUpsertCache[key] = cache
		gameWeekDivisionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single GameWeekDivision record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GameWeekDivision) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no GameWeekDivision provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gameWeekDivisionPrimaryKeyMapping)
	sql := "DELETE FROM \"game_week_divisions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from game_week_divisions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for game_week_divisions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gameWeekDivisionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no gameWeekDivisionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from game_week_divisions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for game_week_divisions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GameWeekDivisionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gameWeekDivisionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"game_week_divisions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gameWeekDivisionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from gameWeekDivision slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for game_week_divisions")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GameWeekDivision) Reload(exec boil.Executor) error {
	ret, err := FindGameWeekDivision(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GameWeekDivisionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GameWeekDivisionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gameWeekDivisionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"game_week_divisions\".* FROM \"game_week_divisions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gameWeekDivisionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in GameWeekDivisionSlice")
	}

	*o = slice

	return nil
}

// GameWeekDivisionExists checks if the GameWeekDivision row exists.
func GameWeekDivisionExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"game_week_divisions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if game_week_divisions exists")
	}

	return exists, nil
}

// Exists checks if the GameWeekDivision row exists.
func (o *GameWeekDivision) Exists(exec boil.Executor) (bool, error) {
	return GameWeekDivisionExists(exec, o.ID)
}
