// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Game is an object representing the database table.
type Game struct {
	ID               string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt        time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Status           string      `boil:"status" json:"status" toml:"status" yaml:"status"`
	Version          int         `boil:"version" json:"version" toml:"version" yaml:"version"`
	Score            float64     `boil:"score" json:"score" toml:"score" yaml:"score"`
	MatchID          string      `boil:"match_id" json:"match_id" toml:"match_id" yaml:"match_id"`
	UserID           string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Premium          bool        `boil:"premium" json:"premium" toml:"premium" yaml:"premium"`
	Num              null.Int    `boil:"num" json:"num,omitempty" toml:"num" yaml:"num,omitempty"`
	SubscriptionTier int         `boil:"subscription_tier" json:"subscription_tier" toml:"subscription_tier" yaml:"subscription_tier"`
	SportID          null.String `boil:"sport_id" json:"sport_id,omitempty" toml:"sport_id" yaml:"sport_id,omitempty"`
	Notified         bool        `boil:"notified" json:"notified" toml:"notified" yaml:"notified"`

	R *gameR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gameL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GameColumns = struct {
	ID               string
	CreatedAt        string
	UpdatedAt        string
	Status           string
	Version          string
	Score            string
	MatchID          string
	UserID           string
	Premium          string
	Num              string
	SubscriptionTier string
	SportID          string
	Notified         string
}{
	ID:               "id",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	Status:           "status",
	Version:          "version",
	Score:            "score",
	MatchID:          "match_id",
	UserID:           "user_id",
	Premium:          "premium",
	Num:              "num",
	SubscriptionTier: "subscription_tier",
	SportID:          "sport_id",
	Notified:         "notified",
}

var GameTableColumns = struct {
	ID               string
	CreatedAt        string
	UpdatedAt        string
	Status           string
	Version          string
	Score            string
	MatchID          string
	UserID           string
	Premium          string
	Num              string
	SubscriptionTier string
	SportID          string
	Notified         string
}{
	ID:               "games.id",
	CreatedAt:        "games.created_at",
	UpdatedAt:        "games.updated_at",
	Status:           "games.status",
	Version:          "games.version",
	Score:            "games.score",
	MatchID:          "games.match_id",
	UserID:           "games.user_id",
	Premium:          "games.premium",
	Num:              "games.num",
	SubscriptionTier: "games.subscription_tier",
	SportID:          "games.sport_id",
	Notified:         "games.notified",
}

// Generated where

var GameWhere = struct {
	ID               whereHelperstring
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	Status           whereHelperstring
	Version          whereHelperint
	Score            whereHelperfloat64
	MatchID          whereHelperstring
	UserID           whereHelperstring
	Premium          whereHelperbool
	Num              whereHelpernull_Int
	SubscriptionTier whereHelperint
	SportID          whereHelpernull_String
	Notified         whereHelperbool
}{
	ID:               whereHelperstring{field: "\"games\".\"id\""},
	CreatedAt:        whereHelpertime_Time{field: "\"games\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"games\".\"updated_at\""},
	Status:           whereHelperstring{field: "\"games\".\"status\""},
	Version:          whereHelperint{field: "\"games\".\"version\""},
	Score:            whereHelperfloat64{field: "\"games\".\"score\""},
	MatchID:          whereHelperstring{field: "\"games\".\"match_id\""},
	UserID:           whereHelperstring{field: "\"games\".\"user_id\""},
	Premium:          whereHelperbool{field: "\"games\".\"premium\""},
	Num:              whereHelpernull_Int{field: "\"games\".\"num\""},
	SubscriptionTier: whereHelperint{field: "\"games\".\"subscription_tier\""},
	SportID:          whereHelpernull_String{field: "\"games\".\"sport_id\""},
	Notified:         whereHelperbool{field: "\"games\".\"notified\""},
}

// GameRels is where relationship names are stored.
var GameRels = struct {
	Match             string
	Sport             string
	User              string
	AppInboxes        string
	GameEvents        string
	GamePicks         string
	GamePowerups      string
	MatchLeaderboards string
}{
	Match:             "Match",
	Sport:             "Sport",
	User:              "User",
	AppInboxes:        "AppInboxes",
	GameEvents:        "GameEvents",
	GamePicks:         "GamePicks",
	GamePowerups:      "GamePowerups",
	MatchLeaderboards: "MatchLeaderboards",
}

// gameR is where relationships are stored.
type gameR struct {
	Match             *Match                `boil:"Match" json:"Match" toml:"Match" yaml:"Match"`
	Sport             *Sport                `boil:"Sport" json:"Sport" toml:"Sport" yaml:"Sport"`
	User              *User                 `boil:"User" json:"User" toml:"User" yaml:"User"`
	AppInboxes        AppInboxSlice         `boil:"AppInboxes" json:"AppInboxes" toml:"AppInboxes" yaml:"AppInboxes"`
	GameEvents        GameEventSlice        `boil:"GameEvents" json:"GameEvents" toml:"GameEvents" yaml:"GameEvents"`
	GamePicks         GamePickSlice         `boil:"GamePicks" json:"GamePicks" toml:"GamePicks" yaml:"GamePicks"`
	GamePowerups      GamePowerupSlice      `boil:"GamePowerups" json:"GamePowerups" toml:"GamePowerups" yaml:"GamePowerups"`
	MatchLeaderboards MatchLeaderboardSlice `boil:"MatchLeaderboards" json:"MatchLeaderboards" toml:"MatchLeaderboards" yaml:"MatchLeaderboards"`
}

// NewStruct creates a new relationship struct
func (*gameR) NewStruct() *gameR {
	return &gameR{}
}

func (r *gameR) GetMatch() *Match {
	if r == nil {
		return nil
	}
	return r.Match
}

func (r *gameR) GetSport() *Sport {
	if r == nil {
		return nil
	}
	return r.Sport
}

func (r *gameR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *gameR) GetAppInboxes() AppInboxSlice {
	if r == nil {
		return nil
	}
	return r.AppInboxes
}

func (r *gameR) GetGameEvents() GameEventSlice {
	if r == nil {
		return nil
	}
	return r.GameEvents
}

func (r *gameR) GetGamePicks() GamePickSlice {
	if r == nil {
		return nil
	}
	return r.GamePicks
}

func (r *gameR) GetGamePowerups() GamePowerupSlice {
	if r == nil {
		return nil
	}
	return r.GamePowerups
}

func (r *gameR) GetMatchLeaderboards() MatchLeaderboardSlice {
	if r == nil {
		return nil
	}
	return r.MatchLeaderboards
}

// gameL is where Load methods for each relationship are stored.
type gameL struct{}

var (
	gameAllColumns            = []string{"id", "created_at", "updated_at", "status", "version", "score", "match_id", "user_id", "premium", "num", "subscription_tier", "sport_id", "notified"}
	gameColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "status", "version", "score", "match_id", "user_id", "premium", "subscription_tier", "notified"}
	gameColumnsWithDefault    = []string{"num", "sport_id"}
	gamePrimaryKeyColumns     = []string{"id"}
	gameGeneratedColumns      = []string{}
)

type (
	// GameSlice is an alias for a slice of pointers to Game.
	// This should almost always be used instead of []Game.
	GameSlice []*Game

	gameQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gameType                 = reflect.TypeOf(&Game{})
	gameMapping              = queries.MakeStructMapping(gameType)
	gamePrimaryKeyMapping, _ = queries.BindMapping(gameType, gameMapping, gamePrimaryKeyColumns)
	gameInsertCacheMut       sync.RWMutex
	gameInsertCache          = make(map[string]insertCache)
	gameUpdateCacheMut       sync.RWMutex
	gameUpdateCache          = make(map[string]updateCache)
	gameUpsertCacheMut       sync.RWMutex
	gameUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single game record from the query.
func (q gameQuery) One(exec boil.Executor) (*Game, error) {
	o := &Game{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for games")
	}

	return o, nil
}

// All returns all Game records from the query.
func (q gameQuery) All(exec boil.Executor) (GameSlice, error) {
	var o []*Game

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to Game slice")
	}

	return o, nil
}

// Count returns the count of all Game records in the query.
func (q gameQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count games rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gameQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if games exists")
	}

	return count > 0, nil
}

// Match pointed to by the foreign key.
func (o *Game) Match(mods ...qm.QueryMod) matchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MatchID),
	}

	queryMods = append(queryMods, mods...)

	return Matches(queryMods...)
}

// Sport pointed to by the foreign key.
func (o *Game) Sport(mods ...qm.QueryMod) sportQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SportID),
	}

	queryMods = append(queryMods, mods...)

	return Sports(queryMods...)
}

// User pointed to by the foreign key.
func (o *Game) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// AppInboxes retrieves all the app_inbox's AppInboxes with an executor.
func (o *Game) AppInboxes(mods ...qm.QueryMod) appInboxQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"app_inbox\".\"game_id\"=?", o.ID),
	)

	return AppInboxes(queryMods...)
}

// GameEvents retrieves all the game_event's GameEvents with an executor.
func (o *Game) GameEvents(mods ...qm.QueryMod) gameEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"game_events\".\"game_id\"=?", o.ID),
	)

	return GameEvents(queryMods...)
}

// GamePicks retrieves all the game_pick's GamePicks with an executor.
func (o *Game) GamePicks(mods ...qm.QueryMod) gamePickQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"game_picks\".\"game_id\"=?", o.ID),
	)

	return GamePicks(queryMods...)
}

// GamePowerups retrieves all the game_powerup's GamePowerups with an executor.
func (o *Game) GamePowerups(mods ...qm.QueryMod) gamePowerupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"game_powerups\".\"game_id\"=?", o.ID),
	)

	return GamePowerups(queryMods...)
}

// MatchLeaderboards retrieves all the match_leaderboard's MatchLeaderboards with an executor.
func (o *Game) MatchLeaderboards(mods ...qm.QueryMod) matchLeaderboardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"match_leaderboard\".\"game_id\"=?", o.ID),
	)

	return MatchLeaderboards(queryMods...)
}

// LoadMatch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gameL) LoadMatch(e boil.Executor, singular bool, maybeGame interface{}, mods queries.Applicator) error {
	var slice []*Game
	var object *Game

	if singular {
		var ok bool
		object, ok = maybeGame.(*Game)
		if !ok {
			object = new(Game)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGame))
			}
		}
	} else {
		s, ok := maybeGame.(*[]*Game)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGame))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameR{}
		}
		args[object.MatchID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameR{}
			}

			args[obj.MatchID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Match")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Match")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Match = foreign
		if foreign.R == nil {
			foreign.R = &matchR{}
		}
		foreign.R.Games = append(foreign.R.Games, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MatchID == foreign.ID {
				local.R.Match = foreign
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.Games = append(foreign.R.Games, local)
				break
			}
		}
	}

	return nil
}

// LoadSport allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gameL) LoadSport(e boil.Executor, singular bool, maybeGame interface{}, mods queries.Applicator) error {
	var slice []*Game
	var object *Game

	if singular {
		var ok bool
		object, ok = maybeGame.(*Game)
		if !ok {
			object = new(Game)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGame))
			}
		}
	} else {
		s, ok := maybeGame.(*[]*Game)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGame))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameR{}
		}
		if !queries.IsNil(object.SportID) {
			args[object.SportID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameR{}
			}

			if !queries.IsNil(obj.SportID) {
				args[obj.SportID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sports`),
		qm.WhereIn(`sports.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Sport")
	}

	var resultSlice []*Sport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Sport")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sports")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sports")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Sport = foreign
		if foreign.R == nil {
			foreign.R = &sportR{}
		}
		foreign.R.Games = append(foreign.R.Games, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SportID, foreign.ID) {
				local.R.Sport = foreign
				if foreign.R == nil {
					foreign.R = &sportR{}
				}
				foreign.R.Games = append(foreign.R.Games, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gameL) LoadUser(e boil.Executor, singular bool, maybeGame interface{}, mods queries.Applicator) error {
	var slice []*Game
	var object *Game

	if singular {
		var ok bool
		object, ok = maybeGame.(*Game)
		if !ok {
			object = new(Game)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGame))
			}
		}
	} else {
		s, ok := maybeGame.(*[]*Game)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGame))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Games = append(foreign.R.Games, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Games = append(foreign.R.Games, local)
				break
			}
		}
	}

	return nil
}

// LoadAppInboxes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gameL) LoadAppInboxes(e boil.Executor, singular bool, maybeGame interface{}, mods queries.Applicator) error {
	var slice []*Game
	var object *Game

	if singular {
		var ok bool
		object, ok = maybeGame.(*Game)
		if !ok {
			object = new(Game)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGame))
			}
		}
	} else {
		s, ok := maybeGame.(*[]*Game)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGame))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`app_inbox`),
		qm.WhereIn(`app_inbox.game_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load app_inbox")
	}

	var resultSlice []*AppInbox
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice app_inbox")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on app_inbox")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for app_inbox")
	}

	if singular {
		object.R.AppInboxes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &appInboxR{}
			}
			foreign.R.Game = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.GameID) {
				local.R.AppInboxes = append(local.R.AppInboxes, foreign)
				if foreign.R == nil {
					foreign.R = &appInboxR{}
				}
				foreign.R.Game = local
				break
			}
		}
	}

	return nil
}

// LoadGameEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gameL) LoadGameEvents(e boil.Executor, singular bool, maybeGame interface{}, mods queries.Applicator) error {
	var slice []*Game
	var object *Game

	if singular {
		var ok bool
		object, ok = maybeGame.(*Game)
		if !ok {
			object = new(Game)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGame))
			}
		}
	} else {
		s, ok := maybeGame.(*[]*Game)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGame))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`game_events`),
		qm.WhereIn(`game_events.game_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load game_events")
	}

	var resultSlice []*GameEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice game_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on game_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_events")
	}

	if singular {
		object.R.GameEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gameEventR{}
			}
			foreign.R.Game = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GameID {
				local.R.GameEvents = append(local.R.GameEvents, foreign)
				if foreign.R == nil {
					foreign.R = &gameEventR{}
				}
				foreign.R.Game = local
				break
			}
		}
	}

	return nil
}

// LoadGamePicks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gameL) LoadGamePicks(e boil.Executor, singular bool, maybeGame interface{}, mods queries.Applicator) error {
	var slice []*Game
	var object *Game

	if singular {
		var ok bool
		object, ok = maybeGame.(*Game)
		if !ok {
			object = new(Game)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGame))
			}
		}
	} else {
		s, ok := maybeGame.(*[]*Game)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGame))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`game_picks`),
		qm.WhereIn(`game_picks.game_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load game_picks")
	}

	var resultSlice []*GamePick
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice game_picks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on game_picks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_picks")
	}

	if singular {
		object.R.GamePicks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gamePickR{}
			}
			foreign.R.Game = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GameID {
				local.R.GamePicks = append(local.R.GamePicks, foreign)
				if foreign.R == nil {
					foreign.R = &gamePickR{}
				}
				foreign.R.Game = local
				break
			}
		}
	}

	return nil
}

// LoadGamePowerups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gameL) LoadGamePowerups(e boil.Executor, singular bool, maybeGame interface{}, mods queries.Applicator) error {
	var slice []*Game
	var object *Game

	if singular {
		var ok bool
		object, ok = maybeGame.(*Game)
		if !ok {
			object = new(Game)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGame))
			}
		}
	} else {
		s, ok := maybeGame.(*[]*Game)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGame))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`game_powerups`),
		qm.WhereIn(`game_powerups.game_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load game_powerups")
	}

	var resultSlice []*GamePowerup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice game_powerups")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on game_powerups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_powerups")
	}

	if singular {
		object.R.GamePowerups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gamePowerupR{}
			}
			foreign.R.Game = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GameID {
				local.R.GamePowerups = append(local.R.GamePowerups, foreign)
				if foreign.R == nil {
					foreign.R = &gamePowerupR{}
				}
				foreign.R.Game = local
				break
			}
		}
	}

	return nil
}

// LoadMatchLeaderboards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gameL) LoadMatchLeaderboards(e boil.Executor, singular bool, maybeGame interface{}, mods queries.Applicator) error {
	var slice []*Game
	var object *Game

	if singular {
		var ok bool
		object, ok = maybeGame.(*Game)
		if !ok {
			object = new(Game)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGame))
			}
		}
	} else {
		s, ok := maybeGame.(*[]*Game)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGame))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`match_leaderboard`),
		qm.WhereIn(`match_leaderboard.game_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load match_leaderboard")
	}

	var resultSlice []*MatchLeaderboard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice match_leaderboard")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on match_leaderboard")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for match_leaderboard")
	}

	if singular {
		object.R.MatchLeaderboards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchLeaderboardR{}
			}
			foreign.R.Game = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GameID {
				local.R.MatchLeaderboards = append(local.R.MatchLeaderboards, foreign)
				if foreign.R == nil {
					foreign.R = &matchLeaderboardR{}
				}
				foreign.R.Game = local
				break
			}
		}
	}

	return nil
}

// SetMatch of the game to the related item.
// Sets o.R.Match to related.
// Adds o to related.R.Games.
func (o *Game) SetMatch(exec boil.Executor, insert bool, related *Match) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"games\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"match_id"}),
		strmangle.WhereClause("\"", "\"", 2, gamePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MatchID = related.ID
	if o.R == nil {
		o.R = &gameR{
			Match: related,
		}
	} else {
		o.R.Match = related
	}

	if related.R == nil {
		related.R = &matchR{
			Games: GameSlice{o},
		}
	} else {
		related.R.Games = append(related.R.Games, o)
	}

	return nil
}

// SetSport of the game to the related item.
// Sets o.R.Sport to related.
// Adds o to related.R.Games.
func (o *Game) SetSport(exec boil.Executor, insert bool, related *Sport) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"games\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sport_id"}),
		strmangle.WhereClause("\"", "\"", 2, gamePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SportID, related.ID)
	if o.R == nil {
		o.R = &gameR{
			Sport: related,
		}
	} else {
		o.R.Sport = related
	}

	if related.R == nil {
		related.R = &sportR{
			Games: GameSlice{o},
		}
	} else {
		related.R.Games = append(related.R.Games, o)
	}

	return nil
}

// RemoveSport relationship.
// Sets o.R.Sport to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Game) RemoveSport(exec boil.Executor, related *Sport) error {
	var err error

	queries.SetScanner(&o.SportID, nil)
	if _, err = o.Update(exec, boil.Whitelist("sport_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Sport = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Games {
		if queries.Equal(o.SportID, ri.SportID) {
			continue
		}

		ln := len(related.R.Games)
		if ln > 1 && i < ln-1 {
			related.R.Games[i] = related.R.Games[ln-1]
		}
		related.R.Games = related.R.Games[:ln-1]
		break
	}
	return nil
}

// SetUser of the game to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Games.
func (o *Game) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"games\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, gamePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &gameR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Games: GameSlice{o},
		}
	} else {
		related.R.Games = append(related.R.Games, o)
	}

	return nil
}

// AddAppInboxes adds the given related objects to the existing relationships
// of the game, optionally inserting them as new records.
// Appends related to o.R.AppInboxes.
// Sets related.R.Game appropriately.
func (o *Game) AddAppInboxes(exec boil.Executor, insert bool, related ...*AppInbox) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.GameID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"app_inbox\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"game_id"}),
				strmangle.WhereClause("\"", "\"", 2, appInboxPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.GameID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &gameR{
			AppInboxes: related,
		}
	} else {
		o.R.AppInboxes = append(o.R.AppInboxes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &appInboxR{
				Game: o,
			}
		} else {
			rel.R.Game = o
		}
	}
	return nil
}

// SetAppInboxes removes all previously related items of the
// game replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Game's AppInboxes accordingly.
// Replaces o.R.AppInboxes with related.
// Sets related.R.Game's AppInboxes accordingly.
func (o *Game) SetAppInboxes(exec boil.Executor, insert bool, related ...*AppInbox) error {
	query := "update \"app_inbox\" set \"game_id\" = null where \"game_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AppInboxes {
			queries.SetScanner(&rel.GameID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Game = nil
		}
		o.R.AppInboxes = nil
	}

	return o.AddAppInboxes(exec, insert, related...)
}

// RemoveAppInboxes relationships from objects passed in.
// Removes related items from R.AppInboxes (uses pointer comparison, removal does not keep order)
// Sets related.R.Game.
func (o *Game) RemoveAppInboxes(exec boil.Executor, related ...*AppInbox) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.GameID, nil)
		if rel.R != nil {
			rel.R.Game = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("game_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AppInboxes {
			if rel != ri {
				continue
			}

			ln := len(o.R.AppInboxes)
			if ln > 1 && i < ln-1 {
				o.R.AppInboxes[i] = o.R.AppInboxes[ln-1]
			}
			o.R.AppInboxes = o.R.AppInboxes[:ln-1]
			break
		}
	}

	return nil
}

// AddGameEvents adds the given related objects to the existing relationships
// of the game, optionally inserting them as new records.
// Appends related to o.R.GameEvents.
// Sets related.R.Game appropriately.
func (o *Game) AddGameEvents(exec boil.Executor, insert bool, related ...*GameEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GameID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"game_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"game_id"}),
				strmangle.WhereClause("\"", "\"", 2, gameEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GameID = o.ID
		}
	}

	if o.R == nil {
		o.R = &gameR{
			GameEvents: related,
		}
	} else {
		o.R.GameEvents = append(o.R.GameEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gameEventR{
				Game: o,
			}
		} else {
			rel.R.Game = o
		}
	}
	return nil
}

// AddGamePicks adds the given related objects to the existing relationships
// of the game, optionally inserting them as new records.
// Appends related to o.R.GamePicks.
// Sets related.R.Game appropriately.
func (o *Game) AddGamePicks(exec boil.Executor, insert bool, related ...*GamePick) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GameID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"game_picks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"game_id"}),
				strmangle.WhereClause("\"", "\"", 2, gamePickPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GameID = o.ID
		}
	}

	if o.R == nil {
		o.R = &gameR{
			GamePicks: related,
		}
	} else {
		o.R.GamePicks = append(o.R.GamePicks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gamePickR{
				Game: o,
			}
		} else {
			rel.R.Game = o
		}
	}
	return nil
}

// AddGamePowerups adds the given related objects to the existing relationships
// of the game, optionally inserting them as new records.
// Appends related to o.R.GamePowerups.
// Sets related.R.Game appropriately.
func (o *Game) AddGamePowerups(exec boil.Executor, insert bool, related ...*GamePowerup) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GameID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"game_powerups\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"game_id"}),
				strmangle.WhereClause("\"", "\"", 2, gamePowerupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GameID = o.ID
		}
	}

	if o.R == nil {
		o.R = &gameR{
			GamePowerups: related,
		}
	} else {
		o.R.GamePowerups = append(o.R.GamePowerups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gamePowerupR{
				Game: o,
			}
		} else {
			rel.R.Game = o
		}
	}
	return nil
}

// AddMatchLeaderboards adds the given related objects to the existing relationships
// of the game, optionally inserting them as new records.
// Appends related to o.R.MatchLeaderboards.
// Sets related.R.Game appropriately.
func (o *Game) AddMatchLeaderboards(exec boil.Executor, insert bool, related ...*MatchLeaderboard) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GameID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"match_leaderboard\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"game_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchLeaderboardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GameID = o.ID
		}
	}

	if o.R == nil {
		o.R = &gameR{
			MatchLeaderboards: related,
		}
	} else {
		o.R.MatchLeaderboards = append(o.R.MatchLeaderboards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchLeaderboardR{
				Game: o,
			}
		} else {
			rel.R.Game = o
		}
	}
	return nil
}

// Games retrieves all the records using an executor.
func Games(mods ...qm.QueryMod) gameQuery {
	mods = append(mods, qm.From("\"games\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"games\".*"})
	}

	return gameQuery{q}
}

// FindGame retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGame(exec boil.Executor, iD string, selectCols ...string) (*Game, error) {
	gameObj := &Game{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"games\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, gameObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from games")
	}

	return gameObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Game) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no games provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(gameColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gameInsertCacheMut.RLock()
	cache, cached := gameInsertCache[key]
	gameInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gameAllColumns,
			gameColumnsWithDefault,
			gameColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gameType, gameMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gameType, gameMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"games\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"games\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into games")
	}

	if !cached {
		gameInsertCacheMut.Lock()
		gameInsertCache[key] = cache
		gameInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Game.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Game) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	gameUpdateCacheMut.RLock()
	cache, cached := gameUpdateCache[key]
	gameUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gameAllColumns,
			gamePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update games, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"games\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gamePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gameType, gameMapping, append(wl, gamePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update games row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for games")
	}

	if !cached {
		gameUpdateCacheMut.Lock()
		gameUpdateCache[key] = cache
		gameUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q gameQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for games")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for games")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GameSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"games\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gamePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in game slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all game")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Game) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no games provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(gameColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gameUpsertCacheMut.RLock()
	cache, cached := gameUpsertCache[key]
	gameUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			gameAllColumns,
			gameColumnsWithDefault,
			gameColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			gameAllColumns,
			gamePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert games, could not build update column list")
		}

		ret := strmangle.SetComplement(gameAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(gamePrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert games, could not build conflict column list")
			}

			conflict = make([]string, len(gamePrimaryKeyColumns))
			copy(conflict, gamePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"games\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(gameType, gameMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gameType, gameMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert games")
	}

	if !cached {
		gameUpsertCacheMut.Lock()
		gameUpsertCache[key] = cache
		gameUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Game record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Game) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no Game provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gamePrimaryKeyMapping)
	sql := "DELETE FROM \"games\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from games")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for games")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gameQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no gameQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from games")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for games")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GameSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"games\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gamePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from game slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for games")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Game) Reload(exec boil.Executor) error {
	ret, err := FindGame(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GameSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GameSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"games\".* FROM \"games\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gamePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in GameSlice")
	}

	*o = slice

	return nil
}

// GameExists checks if the Game row exists.
func GameExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"games\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if games exists")
	}

	return exists, nil
}

// Exists checks if the Game row exists.
func (o *Game) Exists(exec boil.Executor) (bool, error) {
	return GameExists(exec, o.ID)
}
