// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGamePicks(t *testing.T) {
	t.Parallel()

	query := GamePicks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGamePicksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePick{}
	if err = randomize.Struct(seed, o, gamePickDBTypes, true, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GamePicks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGamePicksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePick{}
	if err = randomize.Struct(seed, o, gamePickDBTypes, true, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GamePicks().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GamePicks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGamePicksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePick{}
	if err = randomize.Struct(seed, o, gamePickDBTypes, true, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GamePickSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GamePicks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGamePicksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePick{}
	if err = randomize.Struct(seed, o, gamePickDBTypes, true, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GamePickExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if GamePick exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GamePickExists to return true, but got false.")
	}
}

func testGamePicksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePick{}
	if err = randomize.Struct(seed, o, gamePickDBTypes, true, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	gamePickFound, err := FindGamePick(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if gamePickFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGamePicksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePick{}
	if err = randomize.Struct(seed, o, gamePickDBTypes, true, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GamePicks().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testGamePicksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePick{}
	if err = randomize.Struct(seed, o, gamePickDBTypes, true, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GamePicks().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGamePicksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gamePickOne := &GamePick{}
	gamePickTwo := &GamePick{}
	if err = randomize.Struct(seed, gamePickOne, gamePickDBTypes, false, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}
	if err = randomize.Struct(seed, gamePickTwo, gamePickDBTypes, false, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = gamePickOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gamePickTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GamePicks().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGamePicksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	gamePickOne := &GamePick{}
	gamePickTwo := &GamePick{}
	if err = randomize.Struct(seed, gamePickOne, gamePickDBTypes, false, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}
	if err = randomize.Struct(seed, gamePickTwo, gamePickDBTypes, false, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = gamePickOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gamePickTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GamePicks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testGamePicksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePick{}
	if err = randomize.Struct(seed, o, gamePickDBTypes, true, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GamePicks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGamePicksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePick{}
	if err = randomize.Struct(seed, o, gamePickDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(gamePickColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GamePicks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGamePickToManyGameEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GamePick
	var b, c GameEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gamePickDBTypes, true, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, gameEventDBTypes, false, gameEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameEventDBTypes, false, gameEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GamePickID = a.ID
	c.GamePickID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GameEvents().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GamePickID == b.GamePickID {
			bFound = true
		}
		if v.GamePickID == c.GamePickID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GamePickSlice{&a}
	if err = a.L.LoadGameEvents(tx, false, (*[]*GamePick)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GameEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GameEvents = nil
	if err = a.L.LoadGameEvents(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GameEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGamePickToManyAddOpGameEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GamePick
	var b, c, d, e GameEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gamePickDBTypes, false, strmangle.SetComplement(gamePickPrimaryKeyColumns, gamePickColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GameEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gameEventDBTypes, false, strmangle.SetComplement(gameEventPrimaryKeyColumns, gameEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GameEvent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGameEvents(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GamePickID {
			t.Error("foreign key was wrong value", a.ID, first.GamePickID)
		}
		if a.ID != second.GamePickID {
			t.Error("foreign key was wrong value", a.ID, second.GamePickID)
		}

		if first.R.GamePick != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.GamePick != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GameEvents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GameEvents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GameEvents().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGamePickToOneAssignedPlayerUsingAssignedPlayer(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local GamePick
	var foreign AssignedPlayer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gamePickDBTypes, true, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, assignedPlayerDBTypes, false, assignedPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPlayer struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AssignedPlayerID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.AssignedPlayer().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GamePickSlice{&local}
	if err = local.L.LoadAssignedPlayer(tx, false, (*[]*GamePick)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AssignedPlayer == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.AssignedPlayer = nil
	if err = local.L.LoadAssignedPlayer(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AssignedPlayer == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testGamePickToOneGameUsingGame(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local GamePick
	var foreign Game

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gamePickDBTypes, false, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, gameDBTypes, false, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GameID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Game().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GamePickSlice{&local}
	if err = local.L.LoadGame(tx, false, (*[]*GamePick)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Game == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Game = nil
	if err = local.L.LoadGame(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Game == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testGamePickToOnePlayerUsingPlayer(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local GamePick
	var foreign Player

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gamePickDBTypes, false, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PlayerID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Player().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GamePickSlice{&local}
	if err = local.L.LoadPlayer(tx, false, (*[]*GamePick)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Player == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Player = nil
	if err = local.L.LoadPlayer(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Player == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testGamePickToOneSetOpAssignedPlayerUsingAssignedPlayer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GamePick
	var b, c AssignedPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gamePickDBTypes, false, strmangle.SetComplement(gamePickPrimaryKeyColumns, gamePickColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, assignedPlayerDBTypes, false, strmangle.SetComplement(assignedPlayerPrimaryKeyColumns, assignedPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assignedPlayerDBTypes, false, strmangle.SetComplement(assignedPlayerPrimaryKeyColumns, assignedPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AssignedPlayer{&b, &c} {
		err = a.SetAssignedPlayer(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.AssignedPlayer != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GamePicks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AssignedPlayerID, x.ID) {
			t.Error("foreign key was wrong value", a.AssignedPlayerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AssignedPlayerID))
		reflect.Indirect(reflect.ValueOf(&a.AssignedPlayerID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AssignedPlayerID, x.ID) {
			t.Error("foreign key was wrong value", a.AssignedPlayerID, x.ID)
		}
	}
}

func testGamePickToOneRemoveOpAssignedPlayerUsingAssignedPlayer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GamePick
	var b AssignedPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gamePickDBTypes, false, strmangle.SetComplement(gamePickPrimaryKeyColumns, gamePickColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, assignedPlayerDBTypes, false, strmangle.SetComplement(assignedPlayerPrimaryKeyColumns, assignedPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAssignedPlayer(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAssignedPlayer(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.AssignedPlayer().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.AssignedPlayer != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AssignedPlayerID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.GamePicks) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testGamePickToOneSetOpGameUsingGame(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GamePick
	var b, c Game

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gamePickDBTypes, false, strmangle.SetComplement(gamePickPrimaryKeyColumns, gamePickColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Game{&b, &c} {
		err = a.SetGame(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Game != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GamePicks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GameID != x.ID {
			t.Error("foreign key was wrong value", a.GameID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GameID))
		reflect.Indirect(reflect.ValueOf(&a.GameID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GameID != x.ID {
			t.Error("foreign key was wrong value", a.GameID, x.ID)
		}
	}
}
func testGamePickToOneSetOpPlayerUsingPlayer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GamePick
	var b, c Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gamePickDBTypes, false, strmangle.SetComplement(gamePickPrimaryKeyColumns, gamePickColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Player{&b, &c} {
		err = a.SetPlayer(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Player != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GamePicks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PlayerID != x.ID {
			t.Error("foreign key was wrong value", a.PlayerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PlayerID))
		reflect.Indirect(reflect.ValueOf(&a.PlayerID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PlayerID != x.ID {
			t.Error("foreign key was wrong value", a.PlayerID, x.ID)
		}
	}
}

func testGamePicksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePick{}
	if err = randomize.Struct(seed, o, gamePickDBTypes, true, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testGamePicksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePick{}
	if err = randomize.Struct(seed, o, gamePickDBTypes, true, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GamePickSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testGamePicksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GamePick{}
	if err = randomize.Struct(seed, o, gamePickDBTypes, true, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GamePicks().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	gamePickDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `EndedAt`: `timestamp with time zone`, `Position`: `integer`, `Score`: `double precision`, `GameID`: `uuid`, `PlayerID`: `uuid`, `Version`: `integer`, `Minute`: `integer`, `Second`: `integer`, `UserSwapped`: `boolean`, `EndedMinute`: `integer`, `EndedSecond`: `integer`, `AssignedPlayerID`: `uuid`}
	_               = bytes.MinRead
)

func testGamePicksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(gamePickPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(gamePickAllColumns) == len(gamePickPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GamePick{}
	if err = randomize.Struct(seed, o, gamePickDBTypes, true, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GamePicks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gamePickDBTypes, true, gamePickPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGamePicksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(gamePickAllColumns) == len(gamePickPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GamePick{}
	if err = randomize.Struct(seed, o, gamePickDBTypes, true, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GamePicks().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gamePickDBTypes, true, gamePickPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(gamePickAllColumns, gamePickPrimaryKeyColumns) {
		fields = gamePickAllColumns
	} else {
		fields = strmangle.SetComplement(
			gamePickAllColumns,
			gamePickPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GamePickSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGamePicksUpsert(t *testing.T) {
	t.Parallel()

	if len(gamePickAllColumns) == len(gamePickPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GamePick{}
	if err = randomize.Struct(seed, &o, gamePickDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GamePick: %s", err)
	}

	count, err := GamePicks().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, gamePickDBTypes, false, gamePickPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GamePick: %s", err)
	}

	count, err = GamePicks().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
