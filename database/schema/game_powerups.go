// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GamePowerup is an object representing the database table.
type GamePowerup struct {
	ID         string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	EndedAt    null.Time `boil:"ended_at" json:"ended_at,omitempty" toml:"ended_at" yaml:"ended_at,omitempty"`
	Position   int       `boil:"position" json:"position" toml:"position" yaml:"position"`
	Duration   int       `boil:"duration" json:"duration" toml:"duration" yaml:"duration"`
	Multiplier float64   `boil:"multiplier" json:"multiplier" toml:"multiplier" yaml:"multiplier"`
	GameID     string    `boil:"game_id" json:"game_id" toml:"game_id" yaml:"game_id"`
	PowerupID  int       `boil:"powerup_id" json:"powerup_id" toml:"powerup_id" yaml:"powerup_id"`
	Minute     int       `boil:"minute" json:"minute" toml:"minute" yaml:"minute"`
	Second     int       `boil:"second" json:"second" toml:"second" yaml:"second"`
	Bonus      bool      `boil:"bonus" json:"bonus" toml:"bonus" yaml:"bonus"`

	R *gamePowerupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gamePowerupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GamePowerupColumns = struct {
	ID         string
	CreatedAt  string
	UpdatedAt  string
	EndedAt    string
	Position   string
	Duration   string
	Multiplier string
	GameID     string
	PowerupID  string
	Minute     string
	Second     string
	Bonus      string
}{
	ID:         "id",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	EndedAt:    "ended_at",
	Position:   "position",
	Duration:   "duration",
	Multiplier: "multiplier",
	GameID:     "game_id",
	PowerupID:  "powerup_id",
	Minute:     "minute",
	Second:     "second",
	Bonus:      "bonus",
}

var GamePowerupTableColumns = struct {
	ID         string
	CreatedAt  string
	UpdatedAt  string
	EndedAt    string
	Position   string
	Duration   string
	Multiplier string
	GameID     string
	PowerupID  string
	Minute     string
	Second     string
	Bonus      string
}{
	ID:         "game_powerups.id",
	CreatedAt:  "game_powerups.created_at",
	UpdatedAt:  "game_powerups.updated_at",
	EndedAt:    "game_powerups.ended_at",
	Position:   "game_powerups.position",
	Duration:   "game_powerups.duration",
	Multiplier: "game_powerups.multiplier",
	GameID:     "game_powerups.game_id",
	PowerupID:  "game_powerups.powerup_id",
	Minute:     "game_powerups.minute",
	Second:     "game_powerups.second",
	Bonus:      "game_powerups.bonus",
}

// Generated where

var GamePowerupWhere = struct {
	ID         whereHelperstring
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
	EndedAt    whereHelpernull_Time
	Position   whereHelperint
	Duration   whereHelperint
	Multiplier whereHelperfloat64
	GameID     whereHelperstring
	PowerupID  whereHelperint
	Minute     whereHelperint
	Second     whereHelperint
	Bonus      whereHelperbool
}{
	ID:         whereHelperstring{field: "\"game_powerups\".\"id\""},
	CreatedAt:  whereHelpertime_Time{field: "\"game_powerups\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"game_powerups\".\"updated_at\""},
	EndedAt:    whereHelpernull_Time{field: "\"game_powerups\".\"ended_at\""},
	Position:   whereHelperint{field: "\"game_powerups\".\"position\""},
	Duration:   whereHelperint{field: "\"game_powerups\".\"duration\""},
	Multiplier: whereHelperfloat64{field: "\"game_powerups\".\"multiplier\""},
	GameID:     whereHelperstring{field: "\"game_powerups\".\"game_id\""},
	PowerupID:  whereHelperint{field: "\"game_powerups\".\"powerup_id\""},
	Minute:     whereHelperint{field: "\"game_powerups\".\"minute\""},
	Second:     whereHelperint{field: "\"game_powerups\".\"second\""},
	Bonus:      whereHelperbool{field: "\"game_powerups\".\"bonus\""},
}

// GamePowerupRels is where relationship names are stored.
var GamePowerupRels = struct {
	Game              string
	Powerup           string
	PowerupGameEvents string
}{
	Game:              "Game",
	Powerup:           "Powerup",
	PowerupGameEvents: "PowerupGameEvents",
}

// gamePowerupR is where relationships are stored.
type gamePowerupR struct {
	Game              *Game          `boil:"Game" json:"Game" toml:"Game" yaml:"Game"`
	Powerup           *Powerup       `boil:"Powerup" json:"Powerup" toml:"Powerup" yaml:"Powerup"`
	PowerupGameEvents GameEventSlice `boil:"PowerupGameEvents" json:"PowerupGameEvents" toml:"PowerupGameEvents" yaml:"PowerupGameEvents"`
}

// NewStruct creates a new relationship struct
func (*gamePowerupR) NewStruct() *gamePowerupR {
	return &gamePowerupR{}
}

func (r *gamePowerupR) GetGame() *Game {
	if r == nil {
		return nil
	}
	return r.Game
}

func (r *gamePowerupR) GetPowerup() *Powerup {
	if r == nil {
		return nil
	}
	return r.Powerup
}

func (r *gamePowerupR) GetPowerupGameEvents() GameEventSlice {
	if r == nil {
		return nil
	}
	return r.PowerupGameEvents
}

// gamePowerupL is where Load methods for each relationship are stored.
type gamePowerupL struct{}

var (
	gamePowerupAllColumns            = []string{"id", "created_at", "updated_at", "ended_at", "position", "duration", "multiplier", "game_id", "powerup_id", "minute", "second", "bonus"}
	gamePowerupColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "position", "duration", "multiplier", "game_id", "powerup_id", "minute", "second", "bonus"}
	gamePowerupColumnsWithDefault    = []string{"ended_at"}
	gamePowerupPrimaryKeyColumns     = []string{"id"}
	gamePowerupGeneratedColumns      = []string{}
)

type (
	// GamePowerupSlice is an alias for a slice of pointers to GamePowerup.
	// This should almost always be used instead of []GamePowerup.
	GamePowerupSlice []*GamePowerup

	gamePowerupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gamePowerupType                 = reflect.TypeOf(&GamePowerup{})
	gamePowerupMapping              = queries.MakeStructMapping(gamePowerupType)
	gamePowerupPrimaryKeyMapping, _ = queries.BindMapping(gamePowerupType, gamePowerupMapping, gamePowerupPrimaryKeyColumns)
	gamePowerupInsertCacheMut       sync.RWMutex
	gamePowerupInsertCache          = make(map[string]insertCache)
	gamePowerupUpdateCacheMut       sync.RWMutex
	gamePowerupUpdateCache          = make(map[string]updateCache)
	gamePowerupUpsertCacheMut       sync.RWMutex
	gamePowerupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single gamePowerup record from the query.
func (q gamePowerupQuery) One(exec boil.Executor) (*GamePowerup, error) {
	o := &GamePowerup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for game_powerups")
	}

	return o, nil
}

// All returns all GamePowerup records from the query.
func (q gamePowerupQuery) All(exec boil.Executor) (GamePowerupSlice, error) {
	var o []*GamePowerup

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to GamePowerup slice")
	}

	return o, nil
}

// Count returns the count of all GamePowerup records in the query.
func (q gamePowerupQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count game_powerups rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gamePowerupQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if game_powerups exists")
	}

	return count > 0, nil
}

// Game pointed to by the foreign key.
func (o *GamePowerup) Game(mods ...qm.QueryMod) gameQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GameID),
	}

	queryMods = append(queryMods, mods...)

	return Games(queryMods...)
}

// Powerup pointed to by the foreign key.
func (o *GamePowerup) Powerup(mods ...qm.QueryMod) powerupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PowerupID),
	}

	queryMods = append(queryMods, mods...)

	return Powerups(queryMods...)
}

// PowerupGameEvents retrieves all the game_event's GameEvents with an executor via powerup_id column.
func (o *GamePowerup) PowerupGameEvents(mods ...qm.QueryMod) gameEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"game_events\".\"powerup_id\"=?", o.ID),
	)

	return GameEvents(queryMods...)
}

// LoadGame allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gamePowerupL) LoadGame(e boil.Executor, singular bool, maybeGamePowerup interface{}, mods queries.Applicator) error {
	var slice []*GamePowerup
	var object *GamePowerup

	if singular {
		var ok bool
		object, ok = maybeGamePowerup.(*GamePowerup)
		if !ok {
			object = new(GamePowerup)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGamePowerup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGamePowerup))
			}
		}
	} else {
		s, ok := maybeGamePowerup.(*[]*GamePowerup)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGamePowerup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGamePowerup))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gamePowerupR{}
		}
		args[object.GameID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gamePowerupR{}
			}

			args[obj.GameID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`games`),
		qm.WhereIn(`games.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Game")
	}

	var resultSlice []*Game
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Game")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for games")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for games")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Game = foreign
		if foreign.R == nil {
			foreign.R = &gameR{}
		}
		foreign.R.GamePowerups = append(foreign.R.GamePowerups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GameID == foreign.ID {
				local.R.Game = foreign
				if foreign.R == nil {
					foreign.R = &gameR{}
				}
				foreign.R.GamePowerups = append(foreign.R.GamePowerups, local)
				break
			}
		}
	}

	return nil
}

// LoadPowerup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gamePowerupL) LoadPowerup(e boil.Executor, singular bool, maybeGamePowerup interface{}, mods queries.Applicator) error {
	var slice []*GamePowerup
	var object *GamePowerup

	if singular {
		var ok bool
		object, ok = maybeGamePowerup.(*GamePowerup)
		if !ok {
			object = new(GamePowerup)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGamePowerup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGamePowerup))
			}
		}
	} else {
		s, ok := maybeGamePowerup.(*[]*GamePowerup)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGamePowerup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGamePowerup))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gamePowerupR{}
		}
		args[object.PowerupID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gamePowerupR{}
			}

			args[obj.PowerupID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`powerups`),
		qm.WhereIn(`powerups.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Powerup")
	}

	var resultSlice []*Powerup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Powerup")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for powerups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for powerups")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Powerup = foreign
		if foreign.R == nil {
			foreign.R = &powerupR{}
		}
		foreign.R.GamePowerups = append(foreign.R.GamePowerups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PowerupID == foreign.ID {
				local.R.Powerup = foreign
				if foreign.R == nil {
					foreign.R = &powerupR{}
				}
				foreign.R.GamePowerups = append(foreign.R.GamePowerups, local)
				break
			}
		}
	}

	return nil
}

// LoadPowerupGameEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gamePowerupL) LoadPowerupGameEvents(e boil.Executor, singular bool, maybeGamePowerup interface{}, mods queries.Applicator) error {
	var slice []*GamePowerup
	var object *GamePowerup

	if singular {
		var ok bool
		object, ok = maybeGamePowerup.(*GamePowerup)
		if !ok {
			object = new(GamePowerup)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGamePowerup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGamePowerup))
			}
		}
	} else {
		s, ok := maybeGamePowerup.(*[]*GamePowerup)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGamePowerup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGamePowerup))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gamePowerupR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gamePowerupR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`game_events`),
		qm.WhereIn(`game_events.powerup_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load game_events")
	}

	var resultSlice []*GameEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice game_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on game_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_events")
	}

	if singular {
		object.R.PowerupGameEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gameEventR{}
			}
			foreign.R.Powerup = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.PowerupID) {
				local.R.PowerupGameEvents = append(local.R.PowerupGameEvents, foreign)
				if foreign.R == nil {
					foreign.R = &gameEventR{}
				}
				foreign.R.Powerup = local
				break
			}
		}
	}

	return nil
}

// SetGame of the gamePowerup to the related item.
// Sets o.R.Game to related.
// Adds o to related.R.GamePowerups.
func (o *GamePowerup) SetGame(exec boil.Executor, insert bool, related *Game) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"game_powerups\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"game_id"}),
		strmangle.WhereClause("\"", "\"", 2, gamePowerupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GameID = related.ID
	if o.R == nil {
		o.R = &gamePowerupR{
			Game: related,
		}
	} else {
		o.R.Game = related
	}

	if related.R == nil {
		related.R = &gameR{
			GamePowerups: GamePowerupSlice{o},
		}
	} else {
		related.R.GamePowerups = append(related.R.GamePowerups, o)
	}

	return nil
}

// SetPowerup of the gamePowerup to the related item.
// Sets o.R.Powerup to related.
// Adds o to related.R.GamePowerups.
func (o *GamePowerup) SetPowerup(exec boil.Executor, insert bool, related *Powerup) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"game_powerups\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"powerup_id"}),
		strmangle.WhereClause("\"", "\"", 2, gamePowerupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PowerupID = related.ID
	if o.R == nil {
		o.R = &gamePowerupR{
			Powerup: related,
		}
	} else {
		o.R.Powerup = related
	}

	if related.R == nil {
		related.R = &powerupR{
			GamePowerups: GamePowerupSlice{o},
		}
	} else {
		related.R.GamePowerups = append(related.R.GamePowerups, o)
	}

	return nil
}

// AddPowerupGameEvents adds the given related objects to the existing relationships
// of the game_powerup, optionally inserting them as new records.
// Appends related to o.R.PowerupGameEvents.
// Sets related.R.Powerup appropriately.
func (o *GamePowerup) AddPowerupGameEvents(exec boil.Executor, insert bool, related ...*GameEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PowerupID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"game_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"powerup_id"}),
				strmangle.WhereClause("\"", "\"", 2, gameEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PowerupID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &gamePowerupR{
			PowerupGameEvents: related,
		}
	} else {
		o.R.PowerupGameEvents = append(o.R.PowerupGameEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gameEventR{
				Powerup: o,
			}
		} else {
			rel.R.Powerup = o
		}
	}
	return nil
}

// SetPowerupGameEvents removes all previously related items of the
// game_powerup replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Powerup's PowerupGameEvents accordingly.
// Replaces o.R.PowerupGameEvents with related.
// Sets related.R.Powerup's PowerupGameEvents accordingly.
func (o *GamePowerup) SetPowerupGameEvents(exec boil.Executor, insert bool, related ...*GameEvent) error {
	query := "update \"game_events\" set \"powerup_id\" = null where \"powerup_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PowerupGameEvents {
			queries.SetScanner(&rel.PowerupID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Powerup = nil
		}
		o.R.PowerupGameEvents = nil
	}

	return o.AddPowerupGameEvents(exec, insert, related...)
}

// RemovePowerupGameEvents relationships from objects passed in.
// Removes related items from R.PowerupGameEvents (uses pointer comparison, removal does not keep order)
// Sets related.R.Powerup.
func (o *GamePowerup) RemovePowerupGameEvents(exec boil.Executor, related ...*GameEvent) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PowerupID, nil)
		if rel.R != nil {
			rel.R.Powerup = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("powerup_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PowerupGameEvents {
			if rel != ri {
				continue
			}

			ln := len(o.R.PowerupGameEvents)
			if ln > 1 && i < ln-1 {
				o.R.PowerupGameEvents[i] = o.R.PowerupGameEvents[ln-1]
			}
			o.R.PowerupGameEvents = o.R.PowerupGameEvents[:ln-1]
			break
		}
	}

	return nil
}

// GamePowerups retrieves all the records using an executor.
func GamePowerups(mods ...qm.QueryMod) gamePowerupQuery {
	mods = append(mods, qm.From("\"game_powerups\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"game_powerups\".*"})
	}

	return gamePowerupQuery{q}
}

// FindGamePowerup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGamePowerup(exec boil.Executor, iD string, selectCols ...string) (*GamePowerup, error) {
	gamePowerupObj := &GamePowerup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"game_powerups\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, gamePowerupObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from game_powerups")
	}

	return gamePowerupObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GamePowerup) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no game_powerups provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(gamePowerupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gamePowerupInsertCacheMut.RLock()
	cache, cached := gamePowerupInsertCache[key]
	gamePowerupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gamePowerupAllColumns,
			gamePowerupColumnsWithDefault,
			gamePowerupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gamePowerupType, gamePowerupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gamePowerupType, gamePowerupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"game_powerups\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"game_powerups\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into game_powerups")
	}

	if !cached {
		gamePowerupInsertCacheMut.Lock()
		gamePowerupInsertCache[key] = cache
		gamePowerupInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the GamePowerup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GamePowerup) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	gamePowerupUpdateCacheMut.RLock()
	cache, cached := gamePowerupUpdateCache[key]
	gamePowerupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gamePowerupAllColumns,
			gamePowerupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update game_powerups, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"game_powerups\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gamePowerupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gamePowerupType, gamePowerupMapping, append(wl, gamePowerupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update game_powerups row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for game_powerups")
	}

	if !cached {
		gamePowerupUpdateCacheMut.Lock()
		gamePowerupUpdateCache[key] = cache
		gamePowerupUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q gamePowerupQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for game_powerups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for game_powerups")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GamePowerupSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gamePowerupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"game_powerups\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gamePowerupPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in gamePowerup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all gamePowerup")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GamePowerup) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no game_powerups provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(gamePowerupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gamePowerupUpsertCacheMut.RLock()
	cache, cached := gamePowerupUpsertCache[key]
	gamePowerupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			gamePowerupAllColumns,
			gamePowerupColumnsWithDefault,
			gamePowerupColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			gamePowerupAllColumns,
			gamePowerupPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert game_powerups, could not build update column list")
		}

		ret := strmangle.SetComplement(gamePowerupAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(gamePowerupPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert game_powerups, could not build conflict column list")
			}

			conflict = make([]string, len(gamePowerupPrimaryKeyColumns))
			copy(conflict, gamePowerupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"game_powerups\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(gamePowerupType, gamePowerupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gamePowerupType, gamePowerupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert game_powerups")
	}

	if !cached {
		gamePowerupUpsertCacheMut.Lock()
		gamePowerupUpsertCache[key] = cache
		gamePowerupUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single GamePowerup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GamePowerup) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no GamePowerup provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gamePowerupPrimaryKeyMapping)
	sql := "DELETE FROM \"game_powerups\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from game_powerups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for game_powerups")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gamePowerupQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no gamePowerupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from game_powerups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for game_powerups")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GamePowerupSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gamePowerupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"game_powerups\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gamePowerupPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from gamePowerup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for game_powerups")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GamePowerup) Reload(exec boil.Executor) error {
	ret, err := FindGamePowerup(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GamePowerupSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GamePowerupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gamePowerupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"game_powerups\".* FROM \"game_powerups\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gamePowerupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in GamePowerupSlice")
	}

	*o = slice

	return nil
}

// GamePowerupExists checks if the GamePowerup row exists.
func GamePowerupExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"game_powerups\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if game_powerups exists")
	}

	return exists, nil
}

// Exists checks if the GamePowerup row exists.
func (o *GamePowerup) Exists(exec boil.Executor) (bool, error) {
	return GamePowerupExists(exec, o.ID)
}
