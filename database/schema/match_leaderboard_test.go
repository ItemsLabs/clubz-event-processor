// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMatchLeaderboards(t *testing.T) {
	t.Parallel()

	query := MatchLeaderboards()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMatchLeaderboardsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchLeaderboard{}
	if err = randomize.Struct(seed, o, matchLeaderboardDBTypes, true, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MatchLeaderboards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMatchLeaderboardsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchLeaderboard{}
	if err = randomize.Struct(seed, o, matchLeaderboardDBTypes, true, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MatchLeaderboards().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MatchLeaderboards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMatchLeaderboardsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchLeaderboard{}
	if err = randomize.Struct(seed, o, matchLeaderboardDBTypes, true, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MatchLeaderboardSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MatchLeaderboards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMatchLeaderboardsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchLeaderboard{}
	if err = randomize.Struct(seed, o, matchLeaderboardDBTypes, true, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MatchLeaderboardExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MatchLeaderboard exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MatchLeaderboardExists to return true, but got false.")
	}
}

func testMatchLeaderboardsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchLeaderboard{}
	if err = randomize.Struct(seed, o, matchLeaderboardDBTypes, true, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	matchLeaderboardFound, err := FindMatchLeaderboard(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if matchLeaderboardFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMatchLeaderboardsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchLeaderboard{}
	if err = randomize.Struct(seed, o, matchLeaderboardDBTypes, true, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MatchLeaderboards().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testMatchLeaderboardsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchLeaderboard{}
	if err = randomize.Struct(seed, o, matchLeaderboardDBTypes, true, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MatchLeaderboards().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMatchLeaderboardsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	matchLeaderboardOne := &MatchLeaderboard{}
	matchLeaderboardTwo := &MatchLeaderboard{}
	if err = randomize.Struct(seed, matchLeaderboardOne, matchLeaderboardDBTypes, false, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}
	if err = randomize.Struct(seed, matchLeaderboardTwo, matchLeaderboardDBTypes, false, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = matchLeaderboardOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = matchLeaderboardTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MatchLeaderboards().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMatchLeaderboardsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	matchLeaderboardOne := &MatchLeaderboard{}
	matchLeaderboardTwo := &MatchLeaderboard{}
	if err = randomize.Struct(seed, matchLeaderboardOne, matchLeaderboardDBTypes, false, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}
	if err = randomize.Struct(seed, matchLeaderboardTwo, matchLeaderboardDBTypes, false, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = matchLeaderboardOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = matchLeaderboardTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MatchLeaderboards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testMatchLeaderboardsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchLeaderboard{}
	if err = randomize.Struct(seed, o, matchLeaderboardDBTypes, true, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MatchLeaderboards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMatchLeaderboardsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchLeaderboard{}
	if err = randomize.Struct(seed, o, matchLeaderboardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(matchLeaderboardColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MatchLeaderboards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMatchLeaderboardToManyLeaderboardGameWeeks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchLeaderboard
	var b, c GameWeek

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchLeaderboardDBTypes, true, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, gameWeekDBTypes, false, gameWeekColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameWeekDBTypes, false, gameWeekColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.LeaderboardsID, a.ID)
	queries.Assign(&c.LeaderboardsID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.LeaderboardGameWeeks().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.LeaderboardsID, b.LeaderboardsID) {
			bFound = true
		}
		if queries.Equal(v.LeaderboardsID, c.LeaderboardsID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MatchLeaderboardSlice{&a}
	if err = a.L.LoadLeaderboardGameWeeks(tx, false, (*[]*MatchLeaderboard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LeaderboardGameWeeks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.LeaderboardGameWeeks = nil
	if err = a.L.LoadLeaderboardGameWeeks(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LeaderboardGameWeeks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMatchLeaderboardToManyAddOpLeaderboardGameWeeks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchLeaderboard
	var b, c, d, e GameWeek

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GameWeek{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GameWeek{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLeaderboardGameWeeks(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.LeaderboardsID) {
			t.Error("foreign key was wrong value", a.ID, first.LeaderboardsID)
		}
		if !queries.Equal(a.ID, second.LeaderboardsID) {
			t.Error("foreign key was wrong value", a.ID, second.LeaderboardsID)
		}

		if first.R.Leaderboard != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Leaderboard != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.LeaderboardGameWeeks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.LeaderboardGameWeeks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.LeaderboardGameWeeks().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMatchLeaderboardToManySetOpLeaderboardGameWeeks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchLeaderboard
	var b, c, d, e GameWeek

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GameWeek{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetLeaderboardGameWeeks(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.LeaderboardGameWeeks().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetLeaderboardGameWeeks(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.LeaderboardGameWeeks().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.LeaderboardsID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.LeaderboardsID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.LeaderboardsID) {
		t.Error("foreign key was wrong value", a.ID, d.LeaderboardsID)
	}
	if !queries.Equal(a.ID, e.LeaderboardsID) {
		t.Error("foreign key was wrong value", a.ID, e.LeaderboardsID)
	}

	if b.R.Leaderboard != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Leaderboard != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Leaderboard != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Leaderboard != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.LeaderboardGameWeeks[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.LeaderboardGameWeeks[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMatchLeaderboardToManyRemoveOpLeaderboardGameWeeks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchLeaderboard
	var b, c, d, e GameWeek

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GameWeek{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gameWeekDBTypes, false, strmangle.SetComplement(gameWeekPrimaryKeyColumns, gameWeekColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddLeaderboardGameWeeks(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.LeaderboardGameWeeks().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveLeaderboardGameWeeks(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.LeaderboardGameWeeks().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.LeaderboardsID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.LeaderboardsID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Leaderboard != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Leaderboard != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Leaderboard != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Leaderboard != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.LeaderboardGameWeeks) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.LeaderboardGameWeeks[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.LeaderboardGameWeeks[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMatchLeaderboardToOneDivisionUsingDivision(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local MatchLeaderboard
	var foreign Division

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchLeaderboardDBTypes, true, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, divisionDBTypes, false, divisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Division struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DivisionID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Division().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchLeaderboardSlice{&local}
	if err = local.L.LoadDivision(tx, false, (*[]*MatchLeaderboard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Division == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Division = nil
	if err = local.L.LoadDivision(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Division == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchLeaderboardToOneGameUsingGame(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local MatchLeaderboard
	var foreign Game

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchLeaderboardDBTypes, false, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, gameDBTypes, false, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GameID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Game().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchLeaderboardSlice{&local}
	if err = local.L.LoadGame(tx, false, (*[]*MatchLeaderboard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Game == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Game = nil
	if err = local.L.LoadGame(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Game == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchLeaderboardToOneLeaderboardTypeUsingLeaderboardType(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local MatchLeaderboard
	var foreign LeaderboardType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchLeaderboardDBTypes, true, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, leaderboardTypeDBTypes, false, leaderboardTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LeaderboardType struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.LeaderboardTypeID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.LeaderboardType().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchLeaderboardSlice{&local}
	if err = local.L.LoadLeaderboardType(tx, false, (*[]*MatchLeaderboard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LeaderboardType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.LeaderboardType = nil
	if err = local.L.LoadLeaderboardType(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LeaderboardType == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchLeaderboardToOneMatchUsingMatch(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local MatchLeaderboard
	var foreign Match

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchLeaderboardDBTypes, false, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MatchID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Match().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchLeaderboardSlice{&local}
	if err = local.L.LoadMatch(tx, false, (*[]*MatchLeaderboard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Match == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Match = nil
	if err = local.L.LoadMatch(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Match == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchLeaderboardToOneTransactionUsingTransaction(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local MatchLeaderboard
	var foreign Transaction

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchLeaderboardDBTypes, true, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Transaction struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TransactionID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Transaction().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchLeaderboardSlice{&local}
	if err = local.L.LoadTransaction(tx, false, (*[]*MatchLeaderboard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Transaction == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Transaction = nil
	if err = local.L.LoadTransaction(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Transaction == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchLeaderboardToOneUserUsingUser(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local MatchLeaderboard
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchLeaderboardDBTypes, false, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchLeaderboardSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*MatchLeaderboard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchLeaderboardToOneSetOpDivisionUsingDivision(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchLeaderboard
	var b, c Division

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Division{&b, &c} {
		err = a.SetDivision(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Division != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MatchLeaderboards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DivisionID, x.ID) {
			t.Error("foreign key was wrong value", a.DivisionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DivisionID))
		reflect.Indirect(reflect.ValueOf(&a.DivisionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DivisionID, x.ID) {
			t.Error("foreign key was wrong value", a.DivisionID, x.ID)
		}
	}
}

func testMatchLeaderboardToOneRemoveOpDivisionUsingDivision(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchLeaderboard
	var b Division

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, divisionDBTypes, false, strmangle.SetComplement(divisionPrimaryKeyColumns, divisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDivision(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDivision(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Division().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Division != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.DivisionID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.MatchLeaderboards) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMatchLeaderboardToOneSetOpGameUsingGame(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchLeaderboard
	var b, c Game

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Game{&b, &c} {
		err = a.SetGame(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Game != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MatchLeaderboards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GameID != x.ID {
			t.Error("foreign key was wrong value", a.GameID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GameID))
		reflect.Indirect(reflect.ValueOf(&a.GameID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GameID != x.ID {
			t.Error("foreign key was wrong value", a.GameID, x.ID)
		}
	}
}
func testMatchLeaderboardToOneSetOpLeaderboardTypeUsingLeaderboardType(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchLeaderboard
	var b, c LeaderboardType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, leaderboardTypeDBTypes, false, strmangle.SetComplement(leaderboardTypePrimaryKeyColumns, leaderboardTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, leaderboardTypeDBTypes, false, strmangle.SetComplement(leaderboardTypePrimaryKeyColumns, leaderboardTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*LeaderboardType{&b, &c} {
		err = a.SetLeaderboardType(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.LeaderboardType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MatchLeaderboards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.LeaderboardTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.LeaderboardTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LeaderboardTypeID))
		reflect.Indirect(reflect.ValueOf(&a.LeaderboardTypeID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.LeaderboardTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.LeaderboardTypeID, x.ID)
		}
	}
}

func testMatchLeaderboardToOneRemoveOpLeaderboardTypeUsingLeaderboardType(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchLeaderboard
	var b LeaderboardType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, leaderboardTypeDBTypes, false, strmangle.SetComplement(leaderboardTypePrimaryKeyColumns, leaderboardTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetLeaderboardType(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveLeaderboardType(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.LeaderboardType().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.LeaderboardType != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.LeaderboardTypeID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.MatchLeaderboards) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMatchLeaderboardToOneSetOpMatchUsingMatch(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchLeaderboard
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Match{&b, &c} {
		err = a.SetMatch(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Match != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MatchLeaderboards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MatchID != x.ID {
			t.Error("foreign key was wrong value", a.MatchID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MatchID))
		reflect.Indirect(reflect.ValueOf(&a.MatchID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MatchID != x.ID {
			t.Error("foreign key was wrong value", a.MatchID, x.ID)
		}
	}
}
func testMatchLeaderboardToOneSetOpTransactionUsingTransaction(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchLeaderboard
	var b, c Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Transaction{&b, &c} {
		err = a.SetTransaction(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Transaction != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MatchLeaderboards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TransactionID, x.ID) {
			t.Error("foreign key was wrong value", a.TransactionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TransactionID))
		reflect.Indirect(reflect.ValueOf(&a.TransactionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TransactionID, x.ID) {
			t.Error("foreign key was wrong value", a.TransactionID, x.ID)
		}
	}
}

func testMatchLeaderboardToOneRemoveOpTransactionUsingTransaction(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchLeaderboard
	var b Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTransaction(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTransaction(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Transaction().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Transaction != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TransactionID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.MatchLeaderboards) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMatchLeaderboardToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchLeaderboard
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchLeaderboardDBTypes, false, strmangle.SetComplement(matchLeaderboardPrimaryKeyColumns, matchLeaderboardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MatchLeaderboards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testMatchLeaderboardsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchLeaderboard{}
	if err = randomize.Struct(seed, o, matchLeaderboardDBTypes, true, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testMatchLeaderboardsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchLeaderboard{}
	if err = randomize.Struct(seed, o, matchLeaderboardDBTypes, true, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MatchLeaderboardSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testMatchLeaderboardsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchLeaderboard{}
	if err = randomize.Struct(seed, o, matchLeaderboardDBTypes, true, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MatchLeaderboards().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	matchLeaderboardDBTypes = map[string]string{`ID`: `integer`, `Score`: `double precision`, `Position`: `integer`, `GameID`: `uuid`, `MatchID`: `uuid`, `UserID`: `uuid`, `LeaderboardTypeID`: `integer`, `TransactionID`: `uuid`, `DivisionID`: `uuid`}
	_                       = bytes.MinRead
)

func testMatchLeaderboardsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(matchLeaderboardPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(matchLeaderboardAllColumns) == len(matchLeaderboardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MatchLeaderboard{}
	if err = randomize.Struct(seed, o, matchLeaderboardDBTypes, true, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MatchLeaderboards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, matchLeaderboardDBTypes, true, matchLeaderboardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMatchLeaderboardsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(matchLeaderboardAllColumns) == len(matchLeaderboardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MatchLeaderboard{}
	if err = randomize.Struct(seed, o, matchLeaderboardDBTypes, true, matchLeaderboardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MatchLeaderboards().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, matchLeaderboardDBTypes, true, matchLeaderboardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(matchLeaderboardAllColumns, matchLeaderboardPrimaryKeyColumns) {
		fields = matchLeaderboardAllColumns
	} else {
		fields = strmangle.SetComplement(
			matchLeaderboardAllColumns,
			matchLeaderboardPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MatchLeaderboardSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMatchLeaderboardsUpsert(t *testing.T) {
	t.Parallel()

	if len(matchLeaderboardAllColumns) == len(matchLeaderboardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MatchLeaderboard{}
	if err = randomize.Struct(seed, &o, matchLeaderboardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MatchLeaderboard: %s", err)
	}

	count, err := MatchLeaderboards().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, matchLeaderboardDBTypes, false, matchLeaderboardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MatchLeaderboard struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MatchLeaderboard: %s", err)
	}

	count, err = MatchLeaderboards().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
