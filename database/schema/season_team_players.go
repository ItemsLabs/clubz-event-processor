// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SeasonTeamPlayer is an object representing the database table.
type SeasonTeamPlayer struct {
	ID           string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Position     null.String `boil:"position" json:"position,omitempty" toml:"position" yaml:"position,omitempty"`
	JerseyNumber null.Int    `boil:"jersey_number" json:"jersey_number,omitempty" toml:"jersey_number" yaml:"jersey_number,omitempty"`
	PlayerID     string      `boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	SeasonID     string      `boil:"season_id" json:"season_id" toml:"season_id" yaml:"season_id"`
	TeamID       string      `boil:"team_id" json:"team_id" toml:"team_id" yaml:"team_id"`

	R *seasonTeamPlayerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L seasonTeamPlayerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SeasonTeamPlayerColumns = struct {
	ID           string
	CreatedAt    string
	UpdatedAt    string
	Position     string
	JerseyNumber string
	PlayerID     string
	SeasonID     string
	TeamID       string
}{
	ID:           "id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	Position:     "position",
	JerseyNumber: "jersey_number",
	PlayerID:     "player_id",
	SeasonID:     "season_id",
	TeamID:       "team_id",
}

var SeasonTeamPlayerTableColumns = struct {
	ID           string
	CreatedAt    string
	UpdatedAt    string
	Position     string
	JerseyNumber string
	PlayerID     string
	SeasonID     string
	TeamID       string
}{
	ID:           "season_team_players.id",
	CreatedAt:    "season_team_players.created_at",
	UpdatedAt:    "season_team_players.updated_at",
	Position:     "season_team_players.position",
	JerseyNumber: "season_team_players.jersey_number",
	PlayerID:     "season_team_players.player_id",
	SeasonID:     "season_team_players.season_id",
	TeamID:       "season_team_players.team_id",
}

// Generated where

var SeasonTeamPlayerWhere = struct {
	ID           whereHelperstring
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	Position     whereHelpernull_String
	JerseyNumber whereHelpernull_Int
	PlayerID     whereHelperstring
	SeasonID     whereHelperstring
	TeamID       whereHelperstring
}{
	ID:           whereHelperstring{field: "\"season_team_players\".\"id\""},
	CreatedAt:    whereHelpertime_Time{field: "\"season_team_players\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"season_team_players\".\"updated_at\""},
	Position:     whereHelpernull_String{field: "\"season_team_players\".\"position\""},
	JerseyNumber: whereHelpernull_Int{field: "\"season_team_players\".\"jersey_number\""},
	PlayerID:     whereHelperstring{field: "\"season_team_players\".\"player_id\""},
	SeasonID:     whereHelperstring{field: "\"season_team_players\".\"season_id\""},
	TeamID:       whereHelperstring{field: "\"season_team_players\".\"team_id\""},
}

// SeasonTeamPlayerRels is where relationship names are stored.
var SeasonTeamPlayerRels = struct {
	Player string
	Season string
	Team   string
}{
	Player: "Player",
	Season: "Season",
	Team:   "Team",
}

// seasonTeamPlayerR is where relationships are stored.
type seasonTeamPlayerR struct {
	Player *Player `boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
	Season *Season `boil:"Season" json:"Season" toml:"Season" yaml:"Season"`
	Team   *Team   `boil:"Team" json:"Team" toml:"Team" yaml:"Team"`
}

// NewStruct creates a new relationship struct
func (*seasonTeamPlayerR) NewStruct() *seasonTeamPlayerR {
	return &seasonTeamPlayerR{}
}

func (r *seasonTeamPlayerR) GetPlayer() *Player {
	if r == nil {
		return nil
	}
	return r.Player
}

func (r *seasonTeamPlayerR) GetSeason() *Season {
	if r == nil {
		return nil
	}
	return r.Season
}

func (r *seasonTeamPlayerR) GetTeam() *Team {
	if r == nil {
		return nil
	}
	return r.Team
}

// seasonTeamPlayerL is where Load methods for each relationship are stored.
type seasonTeamPlayerL struct{}

var (
	seasonTeamPlayerAllColumns            = []string{"id", "created_at", "updated_at", "position", "jersey_number", "player_id", "season_id", "team_id"}
	seasonTeamPlayerColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "player_id", "season_id", "team_id"}
	seasonTeamPlayerColumnsWithDefault    = []string{"position", "jersey_number"}
	seasonTeamPlayerPrimaryKeyColumns     = []string{"id"}
	seasonTeamPlayerGeneratedColumns      = []string{}
)

type (
	// SeasonTeamPlayerSlice is an alias for a slice of pointers to SeasonTeamPlayer.
	// This should almost always be used instead of []SeasonTeamPlayer.
	SeasonTeamPlayerSlice []*SeasonTeamPlayer

	seasonTeamPlayerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	seasonTeamPlayerType                 = reflect.TypeOf(&SeasonTeamPlayer{})
	seasonTeamPlayerMapping              = queries.MakeStructMapping(seasonTeamPlayerType)
	seasonTeamPlayerPrimaryKeyMapping, _ = queries.BindMapping(seasonTeamPlayerType, seasonTeamPlayerMapping, seasonTeamPlayerPrimaryKeyColumns)
	seasonTeamPlayerInsertCacheMut       sync.RWMutex
	seasonTeamPlayerInsertCache          = make(map[string]insertCache)
	seasonTeamPlayerUpdateCacheMut       sync.RWMutex
	seasonTeamPlayerUpdateCache          = make(map[string]updateCache)
	seasonTeamPlayerUpsertCacheMut       sync.RWMutex
	seasonTeamPlayerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single seasonTeamPlayer record from the query.
func (q seasonTeamPlayerQuery) One(exec boil.Executor) (*SeasonTeamPlayer, error) {
	o := &SeasonTeamPlayer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for season_team_players")
	}

	return o, nil
}

// All returns all SeasonTeamPlayer records from the query.
func (q seasonTeamPlayerQuery) All(exec boil.Executor) (SeasonTeamPlayerSlice, error) {
	var o []*SeasonTeamPlayer

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to SeasonTeamPlayer slice")
	}

	return o, nil
}

// Count returns the count of all SeasonTeamPlayer records in the query.
func (q seasonTeamPlayerQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count season_team_players rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q seasonTeamPlayerQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if season_team_players exists")
	}

	return count > 0, nil
}

// Player pointed to by the foreign key.
func (o *SeasonTeamPlayer) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
	}

	queryMods = append(queryMods, mods...)

	return Players(queryMods...)
}

// Season pointed to by the foreign key.
func (o *SeasonTeamPlayer) Season(mods ...qm.QueryMod) seasonQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SeasonID),
	}

	queryMods = append(queryMods, mods...)

	return Seasons(queryMods...)
}

// Team pointed to by the foreign key.
func (o *SeasonTeamPlayer) Team(mods ...qm.QueryMod) teamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TeamID),
	}

	queryMods = append(queryMods, mods...)

	return Teams(queryMods...)
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (seasonTeamPlayerL) LoadPlayer(e boil.Executor, singular bool, maybeSeasonTeamPlayer interface{}, mods queries.Applicator) error {
	var slice []*SeasonTeamPlayer
	var object *SeasonTeamPlayer

	if singular {
		var ok bool
		object, ok = maybeSeasonTeamPlayer.(*SeasonTeamPlayer)
		if !ok {
			object = new(SeasonTeamPlayer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSeasonTeamPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSeasonTeamPlayer))
			}
		}
	} else {
		s, ok := maybeSeasonTeamPlayer.(*[]*SeasonTeamPlayer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSeasonTeamPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSeasonTeamPlayer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &seasonTeamPlayerR{}
		}
		args[object.PlayerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seasonTeamPlayerR{}
			}

			args[obj.PlayerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.SeasonTeamPlayers = append(foreign.R.SeasonTeamPlayers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.SeasonTeamPlayers = append(foreign.R.SeasonTeamPlayers, local)
				break
			}
		}
	}

	return nil
}

// LoadSeason allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (seasonTeamPlayerL) LoadSeason(e boil.Executor, singular bool, maybeSeasonTeamPlayer interface{}, mods queries.Applicator) error {
	var slice []*SeasonTeamPlayer
	var object *SeasonTeamPlayer

	if singular {
		var ok bool
		object, ok = maybeSeasonTeamPlayer.(*SeasonTeamPlayer)
		if !ok {
			object = new(SeasonTeamPlayer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSeasonTeamPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSeasonTeamPlayer))
			}
		}
	} else {
		s, ok := maybeSeasonTeamPlayer.(*[]*SeasonTeamPlayer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSeasonTeamPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSeasonTeamPlayer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &seasonTeamPlayerR{}
		}
		args[object.SeasonID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seasonTeamPlayerR{}
			}

			args[obj.SeasonID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`seasons`),
		qm.WhereIn(`seasons.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Season")
	}

	var resultSlice []*Season
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Season")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for seasons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seasons")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Season = foreign
		if foreign.R == nil {
			foreign.R = &seasonR{}
		}
		foreign.R.SeasonTeamPlayers = append(foreign.R.SeasonTeamPlayers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SeasonID == foreign.ID {
				local.R.Season = foreign
				if foreign.R == nil {
					foreign.R = &seasonR{}
				}
				foreign.R.SeasonTeamPlayers = append(foreign.R.SeasonTeamPlayers, local)
				break
			}
		}
	}

	return nil
}

// LoadTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (seasonTeamPlayerL) LoadTeam(e boil.Executor, singular bool, maybeSeasonTeamPlayer interface{}, mods queries.Applicator) error {
	var slice []*SeasonTeamPlayer
	var object *SeasonTeamPlayer

	if singular {
		var ok bool
		object, ok = maybeSeasonTeamPlayer.(*SeasonTeamPlayer)
		if !ok {
			object = new(SeasonTeamPlayer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSeasonTeamPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSeasonTeamPlayer))
			}
		}
	} else {
		s, ok := maybeSeasonTeamPlayer.(*[]*SeasonTeamPlayer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSeasonTeamPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSeasonTeamPlayer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &seasonTeamPlayerR{}
		}
		args[object.TeamID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seasonTeamPlayerR{}
			}

			args[obj.TeamID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`teams`),
		qm.WhereIn(`teams.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for teams")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Team = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.SeasonTeamPlayers = append(foreign.R.SeasonTeamPlayers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TeamID == foreign.ID {
				local.R.Team = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.SeasonTeamPlayers = append(foreign.R.SeasonTeamPlayers, local)
				break
			}
		}
	}

	return nil
}

// SetPlayer of the seasonTeamPlayer to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.SeasonTeamPlayers.
func (o *SeasonTeamPlayer) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"season_team_players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, seasonTeamPlayerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &seasonTeamPlayerR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			SeasonTeamPlayers: SeasonTeamPlayerSlice{o},
		}
	} else {
		related.R.SeasonTeamPlayers = append(related.R.SeasonTeamPlayers, o)
	}

	return nil
}

// SetSeason of the seasonTeamPlayer to the related item.
// Sets o.R.Season to related.
// Adds o to related.R.SeasonTeamPlayers.
func (o *SeasonTeamPlayer) SetSeason(exec boil.Executor, insert bool, related *Season) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"season_team_players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"season_id"}),
		strmangle.WhereClause("\"", "\"", 2, seasonTeamPlayerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SeasonID = related.ID
	if o.R == nil {
		o.R = &seasonTeamPlayerR{
			Season: related,
		}
	} else {
		o.R.Season = related
	}

	if related.R == nil {
		related.R = &seasonR{
			SeasonTeamPlayers: SeasonTeamPlayerSlice{o},
		}
	} else {
		related.R.SeasonTeamPlayers = append(related.R.SeasonTeamPlayers, o)
	}

	return nil
}

// SetTeam of the seasonTeamPlayer to the related item.
// Sets o.R.Team to related.
// Adds o to related.R.SeasonTeamPlayers.
func (o *SeasonTeamPlayer) SetTeam(exec boil.Executor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"season_team_players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
		strmangle.WhereClause("\"", "\"", 2, seasonTeamPlayerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TeamID = related.ID
	if o.R == nil {
		o.R = &seasonTeamPlayerR{
			Team: related,
		}
	} else {
		o.R.Team = related
	}

	if related.R == nil {
		related.R = &teamR{
			SeasonTeamPlayers: SeasonTeamPlayerSlice{o},
		}
	} else {
		related.R.SeasonTeamPlayers = append(related.R.SeasonTeamPlayers, o)
	}

	return nil
}

// SeasonTeamPlayers retrieves all the records using an executor.
func SeasonTeamPlayers(mods ...qm.QueryMod) seasonTeamPlayerQuery {
	mods = append(mods, qm.From("\"season_team_players\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"season_team_players\".*"})
	}

	return seasonTeamPlayerQuery{q}
}

// FindSeasonTeamPlayer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSeasonTeamPlayer(exec boil.Executor, iD string, selectCols ...string) (*SeasonTeamPlayer, error) {
	seasonTeamPlayerObj := &SeasonTeamPlayer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"season_team_players\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, seasonTeamPlayerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from season_team_players")
	}

	return seasonTeamPlayerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SeasonTeamPlayer) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no season_team_players provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(seasonTeamPlayerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	seasonTeamPlayerInsertCacheMut.RLock()
	cache, cached := seasonTeamPlayerInsertCache[key]
	seasonTeamPlayerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			seasonTeamPlayerAllColumns,
			seasonTeamPlayerColumnsWithDefault,
			seasonTeamPlayerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(seasonTeamPlayerType, seasonTeamPlayerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(seasonTeamPlayerType, seasonTeamPlayerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"season_team_players\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"season_team_players\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into season_team_players")
	}

	if !cached {
		seasonTeamPlayerInsertCacheMut.Lock()
		seasonTeamPlayerInsertCache[key] = cache
		seasonTeamPlayerInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the SeasonTeamPlayer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SeasonTeamPlayer) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	seasonTeamPlayerUpdateCacheMut.RLock()
	cache, cached := seasonTeamPlayerUpdateCache[key]
	seasonTeamPlayerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			seasonTeamPlayerAllColumns,
			seasonTeamPlayerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update season_team_players, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"season_team_players\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, seasonTeamPlayerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(seasonTeamPlayerType, seasonTeamPlayerMapping, append(wl, seasonTeamPlayerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update season_team_players row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for season_team_players")
	}

	if !cached {
		seasonTeamPlayerUpdateCacheMut.Lock()
		seasonTeamPlayerUpdateCache[key] = cache
		seasonTeamPlayerUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q seasonTeamPlayerQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for season_team_players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for season_team_players")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SeasonTeamPlayerSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seasonTeamPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"season_team_players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, seasonTeamPlayerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in seasonTeamPlayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all seasonTeamPlayer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SeasonTeamPlayer) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no season_team_players provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(seasonTeamPlayerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	seasonTeamPlayerUpsertCacheMut.RLock()
	cache, cached := seasonTeamPlayerUpsertCache[key]
	seasonTeamPlayerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			seasonTeamPlayerAllColumns,
			seasonTeamPlayerColumnsWithDefault,
			seasonTeamPlayerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			seasonTeamPlayerAllColumns,
			seasonTeamPlayerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert season_team_players, could not build update column list")
		}

		ret := strmangle.SetComplement(seasonTeamPlayerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(seasonTeamPlayerPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert season_team_players, could not build conflict column list")
			}

			conflict = make([]string, len(seasonTeamPlayerPrimaryKeyColumns))
			copy(conflict, seasonTeamPlayerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"season_team_players\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(seasonTeamPlayerType, seasonTeamPlayerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(seasonTeamPlayerType, seasonTeamPlayerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert season_team_players")
	}

	if !cached {
		seasonTeamPlayerUpsertCacheMut.Lock()
		seasonTeamPlayerUpsertCache[key] = cache
		seasonTeamPlayerUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single SeasonTeamPlayer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SeasonTeamPlayer) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no SeasonTeamPlayer provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), seasonTeamPlayerPrimaryKeyMapping)
	sql := "DELETE FROM \"season_team_players\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from season_team_players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for season_team_players")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q seasonTeamPlayerQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no seasonTeamPlayerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from season_team_players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for season_team_players")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SeasonTeamPlayerSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seasonTeamPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"season_team_players\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, seasonTeamPlayerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from seasonTeamPlayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for season_team_players")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SeasonTeamPlayer) Reload(exec boil.Executor) error {
	ret, err := FindSeasonTeamPlayer(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SeasonTeamPlayerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SeasonTeamPlayerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seasonTeamPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"season_team_players\".* FROM \"season_team_players\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, seasonTeamPlayerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in SeasonTeamPlayerSlice")
	}

	*o = slice

	return nil
}

// SeasonTeamPlayerExists checks if the SeasonTeamPlayer row exists.
func SeasonTeamPlayerExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"season_team_players\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if season_team_players exists")
	}

	return exists, nil
}

// Exists checks if the SeasonTeamPlayer row exists.
func (o *SeasonTeamPlayer) Exists(exec boil.Executor) (bool, error) {
	return SeasonTeamPlayerExists(exec, o.ID)
}
