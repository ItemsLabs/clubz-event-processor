// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserLeaderboardSubscription is an object representing the database table.
type UserLeaderboardSubscription struct {
	ID               string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt        time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	SubscriptionDate time.Time `boil:"subscription_date" json:"subscription_date" toml:"subscription_date" yaml:"subscription_date"`
	LeaderboardID    string    `boil:"leaderboard_id" json:"leaderboard_id" toml:"leaderboard_id" yaml:"leaderboard_id"`
	UserID           string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *userLeaderboardSubscriptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userLeaderboardSubscriptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserLeaderboardSubscriptionColumns = struct {
	ID               string
	CreatedAt        string
	UpdatedAt        string
	SubscriptionDate string
	LeaderboardID    string
	UserID           string
}{
	ID:               "id",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	SubscriptionDate: "subscription_date",
	LeaderboardID:    "leaderboard_id",
	UserID:           "user_id",
}

var UserLeaderboardSubscriptionTableColumns = struct {
	ID               string
	CreatedAt        string
	UpdatedAt        string
	SubscriptionDate string
	LeaderboardID    string
	UserID           string
}{
	ID:               "user_leaderboard_subscriptions.id",
	CreatedAt:        "user_leaderboard_subscriptions.created_at",
	UpdatedAt:        "user_leaderboard_subscriptions.updated_at",
	SubscriptionDate: "user_leaderboard_subscriptions.subscription_date",
	LeaderboardID:    "user_leaderboard_subscriptions.leaderboard_id",
	UserID:           "user_leaderboard_subscriptions.user_id",
}

// Generated where

var UserLeaderboardSubscriptionWhere = struct {
	ID               whereHelperstring
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	SubscriptionDate whereHelpertime_Time
	LeaderboardID    whereHelperstring
	UserID           whereHelperstring
}{
	ID:               whereHelperstring{field: "\"user_leaderboard_subscriptions\".\"id\""},
	CreatedAt:        whereHelpertime_Time{field: "\"user_leaderboard_subscriptions\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"user_leaderboard_subscriptions\".\"updated_at\""},
	SubscriptionDate: whereHelpertime_Time{field: "\"user_leaderboard_subscriptions\".\"subscription_date\""},
	LeaderboardID:    whereHelperstring{field: "\"user_leaderboard_subscriptions\".\"leaderboard_id\""},
	UserID:           whereHelperstring{field: "\"user_leaderboard_subscriptions\".\"user_id\""},
}

// UserLeaderboardSubscriptionRels is where relationship names are stored.
var UserLeaderboardSubscriptionRels = struct {
	Leaderboard string
	User        string
}{
	Leaderboard: "Leaderboard",
	User:        "User",
}

// userLeaderboardSubscriptionR is where relationships are stored.
type userLeaderboardSubscriptionR struct {
	Leaderboard *Leaderboard `boil:"Leaderboard" json:"Leaderboard" toml:"Leaderboard" yaml:"Leaderboard"`
	User        *User        `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userLeaderboardSubscriptionR) NewStruct() *userLeaderboardSubscriptionR {
	return &userLeaderboardSubscriptionR{}
}

func (r *userLeaderboardSubscriptionR) GetLeaderboard() *Leaderboard {
	if r == nil {
		return nil
	}
	return r.Leaderboard
}

func (r *userLeaderboardSubscriptionR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userLeaderboardSubscriptionL is where Load methods for each relationship are stored.
type userLeaderboardSubscriptionL struct{}

var (
	userLeaderboardSubscriptionAllColumns            = []string{"id", "created_at", "updated_at", "subscription_date", "leaderboard_id", "user_id"}
	userLeaderboardSubscriptionColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "subscription_date", "leaderboard_id", "user_id"}
	userLeaderboardSubscriptionColumnsWithDefault    = []string{}
	userLeaderboardSubscriptionPrimaryKeyColumns     = []string{"id"}
	userLeaderboardSubscriptionGeneratedColumns      = []string{}
)

type (
	// UserLeaderboardSubscriptionSlice is an alias for a slice of pointers to UserLeaderboardSubscription.
	// This should almost always be used instead of []UserLeaderboardSubscription.
	UserLeaderboardSubscriptionSlice []*UserLeaderboardSubscription

	userLeaderboardSubscriptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userLeaderboardSubscriptionType                 = reflect.TypeOf(&UserLeaderboardSubscription{})
	userLeaderboardSubscriptionMapping              = queries.MakeStructMapping(userLeaderboardSubscriptionType)
	userLeaderboardSubscriptionPrimaryKeyMapping, _ = queries.BindMapping(userLeaderboardSubscriptionType, userLeaderboardSubscriptionMapping, userLeaderboardSubscriptionPrimaryKeyColumns)
	userLeaderboardSubscriptionInsertCacheMut       sync.RWMutex
	userLeaderboardSubscriptionInsertCache          = make(map[string]insertCache)
	userLeaderboardSubscriptionUpdateCacheMut       sync.RWMutex
	userLeaderboardSubscriptionUpdateCache          = make(map[string]updateCache)
	userLeaderboardSubscriptionUpsertCacheMut       sync.RWMutex
	userLeaderboardSubscriptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single userLeaderboardSubscription record from the query.
func (q userLeaderboardSubscriptionQuery) One(exec boil.Executor) (*UserLeaderboardSubscription, error) {
	o := &UserLeaderboardSubscription{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for user_leaderboard_subscriptions")
	}

	return o, nil
}

// All returns all UserLeaderboardSubscription records from the query.
func (q userLeaderboardSubscriptionQuery) All(exec boil.Executor) (UserLeaderboardSubscriptionSlice, error) {
	var o []*UserLeaderboardSubscription

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to UserLeaderboardSubscription slice")
	}

	return o, nil
}

// Count returns the count of all UserLeaderboardSubscription records in the query.
func (q userLeaderboardSubscriptionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count user_leaderboard_subscriptions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userLeaderboardSubscriptionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if user_leaderboard_subscriptions exists")
	}

	return count > 0, nil
}

// Leaderboard pointed to by the foreign key.
func (o *UserLeaderboardSubscription) Leaderboard(mods ...qm.QueryMod) leaderboardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LeaderboardID),
	}

	queryMods = append(queryMods, mods...)

	return Leaderboards(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserLeaderboardSubscription) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadLeaderboard allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userLeaderboardSubscriptionL) LoadLeaderboard(e boil.Executor, singular bool, maybeUserLeaderboardSubscription interface{}, mods queries.Applicator) error {
	var slice []*UserLeaderboardSubscription
	var object *UserLeaderboardSubscription

	if singular {
		var ok bool
		object, ok = maybeUserLeaderboardSubscription.(*UserLeaderboardSubscription)
		if !ok {
			object = new(UserLeaderboardSubscription)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserLeaderboardSubscription)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserLeaderboardSubscription))
			}
		}
	} else {
		s, ok := maybeUserLeaderboardSubscription.(*[]*UserLeaderboardSubscription)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserLeaderboardSubscription)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserLeaderboardSubscription))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userLeaderboardSubscriptionR{}
		}
		args[object.LeaderboardID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userLeaderboardSubscriptionR{}
			}

			args[obj.LeaderboardID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`leaderboards`),
		qm.WhereIn(`leaderboards.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Leaderboard")
	}

	var resultSlice []*Leaderboard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Leaderboard")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for leaderboards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for leaderboards")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Leaderboard = foreign
		if foreign.R == nil {
			foreign.R = &leaderboardR{}
		}
		foreign.R.UserLeaderboardSubscriptions = append(foreign.R.UserLeaderboardSubscriptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LeaderboardID == foreign.ID {
				local.R.Leaderboard = foreign
				if foreign.R == nil {
					foreign.R = &leaderboardR{}
				}
				foreign.R.UserLeaderboardSubscriptions = append(foreign.R.UserLeaderboardSubscriptions, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userLeaderboardSubscriptionL) LoadUser(e boil.Executor, singular bool, maybeUserLeaderboardSubscription interface{}, mods queries.Applicator) error {
	var slice []*UserLeaderboardSubscription
	var object *UserLeaderboardSubscription

	if singular {
		var ok bool
		object, ok = maybeUserLeaderboardSubscription.(*UserLeaderboardSubscription)
		if !ok {
			object = new(UserLeaderboardSubscription)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserLeaderboardSubscription)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserLeaderboardSubscription))
			}
		}
	} else {
		s, ok := maybeUserLeaderboardSubscription.(*[]*UserLeaderboardSubscription)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserLeaderboardSubscription)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserLeaderboardSubscription))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userLeaderboardSubscriptionR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userLeaderboardSubscriptionR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserLeaderboardSubscriptions = append(foreign.R.UserLeaderboardSubscriptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserLeaderboardSubscriptions = append(foreign.R.UserLeaderboardSubscriptions, local)
				break
			}
		}
	}

	return nil
}

// SetLeaderboard of the userLeaderboardSubscription to the related item.
// Sets o.R.Leaderboard to related.
// Adds o to related.R.UserLeaderboardSubscriptions.
func (o *UserLeaderboardSubscription) SetLeaderboard(exec boil.Executor, insert bool, related *Leaderboard) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_leaderboard_subscriptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"leaderboard_id"}),
		strmangle.WhereClause("\"", "\"", 2, userLeaderboardSubscriptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LeaderboardID = related.ID
	if o.R == nil {
		o.R = &userLeaderboardSubscriptionR{
			Leaderboard: related,
		}
	} else {
		o.R.Leaderboard = related
	}

	if related.R == nil {
		related.R = &leaderboardR{
			UserLeaderboardSubscriptions: UserLeaderboardSubscriptionSlice{o},
		}
	} else {
		related.R.UserLeaderboardSubscriptions = append(related.R.UserLeaderboardSubscriptions, o)
	}

	return nil
}

// SetUser of the userLeaderboardSubscription to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserLeaderboardSubscriptions.
func (o *UserLeaderboardSubscription) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_leaderboard_subscriptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userLeaderboardSubscriptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userLeaderboardSubscriptionR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserLeaderboardSubscriptions: UserLeaderboardSubscriptionSlice{o},
		}
	} else {
		related.R.UserLeaderboardSubscriptions = append(related.R.UserLeaderboardSubscriptions, o)
	}

	return nil
}

// UserLeaderboardSubscriptions retrieves all the records using an executor.
func UserLeaderboardSubscriptions(mods ...qm.QueryMod) userLeaderboardSubscriptionQuery {
	mods = append(mods, qm.From("\"user_leaderboard_subscriptions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_leaderboard_subscriptions\".*"})
	}

	return userLeaderboardSubscriptionQuery{q}
}

// FindUserLeaderboardSubscription retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserLeaderboardSubscription(exec boil.Executor, iD string, selectCols ...string) (*UserLeaderboardSubscription, error) {
	userLeaderboardSubscriptionObj := &UserLeaderboardSubscription{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_leaderboard_subscriptions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userLeaderboardSubscriptionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from user_leaderboard_subscriptions")
	}

	return userLeaderboardSubscriptionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserLeaderboardSubscription) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no user_leaderboard_subscriptions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(userLeaderboardSubscriptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userLeaderboardSubscriptionInsertCacheMut.RLock()
	cache, cached := userLeaderboardSubscriptionInsertCache[key]
	userLeaderboardSubscriptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userLeaderboardSubscriptionAllColumns,
			userLeaderboardSubscriptionColumnsWithDefault,
			userLeaderboardSubscriptionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userLeaderboardSubscriptionType, userLeaderboardSubscriptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userLeaderboardSubscriptionType, userLeaderboardSubscriptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_leaderboard_subscriptions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_leaderboard_subscriptions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into user_leaderboard_subscriptions")
	}

	if !cached {
		userLeaderboardSubscriptionInsertCacheMut.Lock()
		userLeaderboardSubscriptionInsertCache[key] = cache
		userLeaderboardSubscriptionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the UserLeaderboardSubscription.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserLeaderboardSubscription) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	userLeaderboardSubscriptionUpdateCacheMut.RLock()
	cache, cached := userLeaderboardSubscriptionUpdateCache[key]
	userLeaderboardSubscriptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userLeaderboardSubscriptionAllColumns,
			userLeaderboardSubscriptionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update user_leaderboard_subscriptions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_leaderboard_subscriptions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userLeaderboardSubscriptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userLeaderboardSubscriptionType, userLeaderboardSubscriptionMapping, append(wl, userLeaderboardSubscriptionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update user_leaderboard_subscriptions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for user_leaderboard_subscriptions")
	}

	if !cached {
		userLeaderboardSubscriptionUpdateCacheMut.Lock()
		userLeaderboardSubscriptionUpdateCache[key] = cache
		userLeaderboardSubscriptionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q userLeaderboardSubscriptionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for user_leaderboard_subscriptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for user_leaderboard_subscriptions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserLeaderboardSubscriptionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLeaderboardSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_leaderboard_subscriptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userLeaderboardSubscriptionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in userLeaderboardSubscription slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all userLeaderboardSubscription")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserLeaderboardSubscription) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no user_leaderboard_subscriptions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(userLeaderboardSubscriptionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userLeaderboardSubscriptionUpsertCacheMut.RLock()
	cache, cached := userLeaderboardSubscriptionUpsertCache[key]
	userLeaderboardSubscriptionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userLeaderboardSubscriptionAllColumns,
			userLeaderboardSubscriptionColumnsWithDefault,
			userLeaderboardSubscriptionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userLeaderboardSubscriptionAllColumns,
			userLeaderboardSubscriptionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert user_leaderboard_subscriptions, could not build update column list")
		}

		ret := strmangle.SetComplement(userLeaderboardSubscriptionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userLeaderboardSubscriptionPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert user_leaderboard_subscriptions, could not build conflict column list")
			}

			conflict = make([]string, len(userLeaderboardSubscriptionPrimaryKeyColumns))
			copy(conflict, userLeaderboardSubscriptionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_leaderboard_subscriptions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userLeaderboardSubscriptionType, userLeaderboardSubscriptionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userLeaderboardSubscriptionType, userLeaderboardSubscriptionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert user_leaderboard_subscriptions")
	}

	if !cached {
		userLeaderboardSubscriptionUpsertCacheMut.Lock()
		userLeaderboardSubscriptionUpsertCache[key] = cache
		userLeaderboardSubscriptionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single UserLeaderboardSubscription record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserLeaderboardSubscription) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no UserLeaderboardSubscription provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userLeaderboardSubscriptionPrimaryKeyMapping)
	sql := "DELETE FROM \"user_leaderboard_subscriptions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from user_leaderboard_subscriptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for user_leaderboard_subscriptions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userLeaderboardSubscriptionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no userLeaderboardSubscriptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from user_leaderboard_subscriptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for user_leaderboard_subscriptions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserLeaderboardSubscriptionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLeaderboardSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_leaderboard_subscriptions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userLeaderboardSubscriptionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from userLeaderboardSubscription slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for user_leaderboard_subscriptions")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserLeaderboardSubscription) Reload(exec boil.Executor) error {
	ret, err := FindUserLeaderboardSubscription(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserLeaderboardSubscriptionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserLeaderboardSubscriptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLeaderboardSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_leaderboard_subscriptions\".* FROM \"user_leaderboard_subscriptions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userLeaderboardSubscriptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in UserLeaderboardSubscriptionSlice")
	}

	*o = slice

	return nil
}

// UserLeaderboardSubscriptionExists checks if the UserLeaderboardSubscription row exists.
func UserLeaderboardSubscriptionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_leaderboard_subscriptions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if user_leaderboard_subscriptions exists")
	}

	return exists, nil
}

// Exists checks if the UserLeaderboardSubscription row exists.
func (o *UserLeaderboardSubscription) Exists(exec boil.Executor) (bool, error) {
	return UserLeaderboardSubscriptionExists(exec, o.ID)
}
