// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CompetitionEdition is an object representing the database table.
type CompetitionEdition struct {
	ID            string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ImportID      null.String `boil:"import_id" json:"import_id,omitempty" toml:"import_id" yaml:"import_id,omitempty"`
	Name          string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Enabled       bool        `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`
	CompetitionID string      `boil:"competition_id" json:"competition_id" toml:"competition_id" yaml:"competition_id"`

	R *competitionEditionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L competitionEditionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CompetitionEditionColumns = struct {
	ID            string
	CreatedAt     string
	UpdatedAt     string
	ImportID      string
	Name          string
	Enabled       string
	CompetitionID string
}{
	ID:            "id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	ImportID:      "import_id",
	Name:          "name",
	Enabled:       "enabled",
	CompetitionID: "competition_id",
}

var CompetitionEditionTableColumns = struct {
	ID            string
	CreatedAt     string
	UpdatedAt     string
	ImportID      string
	Name          string
	Enabled       string
	CompetitionID string
}{
	ID:            "competition_editions.id",
	CreatedAt:     "competition_editions.created_at",
	UpdatedAt:     "competition_editions.updated_at",
	ImportID:      "competition_editions.import_id",
	Name:          "competition_editions.name",
	Enabled:       "competition_editions.enabled",
	CompetitionID: "competition_editions.competition_id",
}

// Generated where

var CompetitionEditionWhere = struct {
	ID            whereHelperstring
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	ImportID      whereHelpernull_String
	Name          whereHelperstring
	Enabled       whereHelperbool
	CompetitionID whereHelperstring
}{
	ID:            whereHelperstring{field: "\"competition_editions\".\"id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"competition_editions\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"competition_editions\".\"updated_at\""},
	ImportID:      whereHelpernull_String{field: "\"competition_editions\".\"import_id\""},
	Name:          whereHelperstring{field: "\"competition_editions\".\"name\""},
	Enabled:       whereHelperbool{field: "\"competition_editions\".\"enabled\""},
	CompetitionID: whereHelperstring{field: "\"competition_editions\".\"competition_id\""},
}

// CompetitionEditionRels is where relationship names are stored.
var CompetitionEditionRels = struct {
	Competition       string
	CompetitionPhases string
	EditionMatches    string
}{
	Competition:       "Competition",
	CompetitionPhases: "CompetitionPhases",
	EditionMatches:    "EditionMatches",
}

// competitionEditionR is where relationships are stored.
type competitionEditionR struct {
	Competition       *Competition          `boil:"Competition" json:"Competition" toml:"Competition" yaml:"Competition"`
	CompetitionPhases CompetitionPhaseSlice `boil:"CompetitionPhases" json:"CompetitionPhases" toml:"CompetitionPhases" yaml:"CompetitionPhases"`
	EditionMatches    MatchSlice            `boil:"EditionMatches" json:"EditionMatches" toml:"EditionMatches" yaml:"EditionMatches"`
}

// NewStruct creates a new relationship struct
func (*competitionEditionR) NewStruct() *competitionEditionR {
	return &competitionEditionR{}
}

func (r *competitionEditionR) GetCompetition() *Competition {
	if r == nil {
		return nil
	}
	return r.Competition
}

func (r *competitionEditionR) GetCompetitionPhases() CompetitionPhaseSlice {
	if r == nil {
		return nil
	}
	return r.CompetitionPhases
}

func (r *competitionEditionR) GetEditionMatches() MatchSlice {
	if r == nil {
		return nil
	}
	return r.EditionMatches
}

// competitionEditionL is where Load methods for each relationship are stored.
type competitionEditionL struct{}

var (
	competitionEditionAllColumns            = []string{"id", "created_at", "updated_at", "import_id", "name", "enabled", "competition_id"}
	competitionEditionColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "name", "enabled", "competition_id"}
	competitionEditionColumnsWithDefault    = []string{"import_id"}
	competitionEditionPrimaryKeyColumns     = []string{"id"}
	competitionEditionGeneratedColumns      = []string{}
)

type (
	// CompetitionEditionSlice is an alias for a slice of pointers to CompetitionEdition.
	// This should almost always be used instead of []CompetitionEdition.
	CompetitionEditionSlice []*CompetitionEdition

	competitionEditionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	competitionEditionType                 = reflect.TypeOf(&CompetitionEdition{})
	competitionEditionMapping              = queries.MakeStructMapping(competitionEditionType)
	competitionEditionPrimaryKeyMapping, _ = queries.BindMapping(competitionEditionType, competitionEditionMapping, competitionEditionPrimaryKeyColumns)
	competitionEditionInsertCacheMut       sync.RWMutex
	competitionEditionInsertCache          = make(map[string]insertCache)
	competitionEditionUpdateCacheMut       sync.RWMutex
	competitionEditionUpdateCache          = make(map[string]updateCache)
	competitionEditionUpsertCacheMut       sync.RWMutex
	competitionEditionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single competitionEdition record from the query.
func (q competitionEditionQuery) One(exec boil.Executor) (*CompetitionEdition, error) {
	o := &CompetitionEdition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for competition_editions")
	}

	return o, nil
}

// All returns all CompetitionEdition records from the query.
func (q competitionEditionQuery) All(exec boil.Executor) (CompetitionEditionSlice, error) {
	var o []*CompetitionEdition

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to CompetitionEdition slice")
	}

	return o, nil
}

// Count returns the count of all CompetitionEdition records in the query.
func (q competitionEditionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count competition_editions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q competitionEditionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if competition_editions exists")
	}

	return count > 0, nil
}

// Competition pointed to by the foreign key.
func (o *CompetitionEdition) Competition(mods ...qm.QueryMod) competitionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CompetitionID),
	}

	queryMods = append(queryMods, mods...)

	return Competitions(queryMods...)
}

// CompetitionPhases retrieves all the competition_phase's CompetitionPhases with an executor.
func (o *CompetitionEdition) CompetitionPhases(mods ...qm.QueryMod) competitionPhaseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"competition_phases\".\"competition_edition_id\"=?", o.ID),
	)

	return CompetitionPhases(queryMods...)
}

// EditionMatches retrieves all the match's Matches with an executor via edition_id column.
func (o *CompetitionEdition) EditionMatches(mods ...qm.QueryMod) matchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"matches\".\"edition_id\"=?", o.ID),
	)

	return Matches(queryMods...)
}

// LoadCompetition allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (competitionEditionL) LoadCompetition(e boil.Executor, singular bool, maybeCompetitionEdition interface{}, mods queries.Applicator) error {
	var slice []*CompetitionEdition
	var object *CompetitionEdition

	if singular {
		var ok bool
		object, ok = maybeCompetitionEdition.(*CompetitionEdition)
		if !ok {
			object = new(CompetitionEdition)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompetitionEdition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompetitionEdition))
			}
		}
	} else {
		s, ok := maybeCompetitionEdition.(*[]*CompetitionEdition)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompetitionEdition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompetitionEdition))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &competitionEditionR{}
		}
		args[object.CompetitionID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &competitionEditionR{}
			}

			args[obj.CompetitionID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`competitions`),
		qm.WhereIn(`competitions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Competition")
	}

	var resultSlice []*Competition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Competition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for competitions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for competitions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Competition = foreign
		if foreign.R == nil {
			foreign.R = &competitionR{}
		}
		foreign.R.CompetitionEditions = append(foreign.R.CompetitionEditions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CompetitionID == foreign.ID {
				local.R.Competition = foreign
				if foreign.R == nil {
					foreign.R = &competitionR{}
				}
				foreign.R.CompetitionEditions = append(foreign.R.CompetitionEditions, local)
				break
			}
		}
	}

	return nil
}

// LoadCompetitionPhases allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (competitionEditionL) LoadCompetitionPhases(e boil.Executor, singular bool, maybeCompetitionEdition interface{}, mods queries.Applicator) error {
	var slice []*CompetitionEdition
	var object *CompetitionEdition

	if singular {
		var ok bool
		object, ok = maybeCompetitionEdition.(*CompetitionEdition)
		if !ok {
			object = new(CompetitionEdition)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompetitionEdition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompetitionEdition))
			}
		}
	} else {
		s, ok := maybeCompetitionEdition.(*[]*CompetitionEdition)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompetitionEdition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompetitionEdition))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &competitionEditionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &competitionEditionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`competition_phases`),
		qm.WhereIn(`competition_phases.competition_edition_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load competition_phases")
	}

	var resultSlice []*CompetitionPhase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice competition_phases")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on competition_phases")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for competition_phases")
	}

	if singular {
		object.R.CompetitionPhases = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &competitionPhaseR{}
			}
			foreign.R.CompetitionEdition = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CompetitionEditionID {
				local.R.CompetitionPhases = append(local.R.CompetitionPhases, foreign)
				if foreign.R == nil {
					foreign.R = &competitionPhaseR{}
				}
				foreign.R.CompetitionEdition = local
				break
			}
		}
	}

	return nil
}

// LoadEditionMatches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (competitionEditionL) LoadEditionMatches(e boil.Executor, singular bool, maybeCompetitionEdition interface{}, mods queries.Applicator) error {
	var slice []*CompetitionEdition
	var object *CompetitionEdition

	if singular {
		var ok bool
		object, ok = maybeCompetitionEdition.(*CompetitionEdition)
		if !ok {
			object = new(CompetitionEdition)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompetitionEdition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompetitionEdition))
			}
		}
	} else {
		s, ok := maybeCompetitionEdition.(*[]*CompetitionEdition)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompetitionEdition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompetitionEdition))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &competitionEditionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &competitionEditionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.edition_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load matches")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice matches")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if singular {
		object.R.EditionMatches = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchR{}
			}
			foreign.R.Edition = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EditionID) {
				local.R.EditionMatches = append(local.R.EditionMatches, foreign)
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.Edition = local
				break
			}
		}
	}

	return nil
}

// SetCompetition of the competitionEdition to the related item.
// Sets o.R.Competition to related.
// Adds o to related.R.CompetitionEditions.
func (o *CompetitionEdition) SetCompetition(exec boil.Executor, insert bool, related *Competition) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"competition_editions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"competition_id"}),
		strmangle.WhereClause("\"", "\"", 2, competitionEditionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CompetitionID = related.ID
	if o.R == nil {
		o.R = &competitionEditionR{
			Competition: related,
		}
	} else {
		o.R.Competition = related
	}

	if related.R == nil {
		related.R = &competitionR{
			CompetitionEditions: CompetitionEditionSlice{o},
		}
	} else {
		related.R.CompetitionEditions = append(related.R.CompetitionEditions, o)
	}

	return nil
}

// AddCompetitionPhases adds the given related objects to the existing relationships
// of the competition_edition, optionally inserting them as new records.
// Appends related to o.R.CompetitionPhases.
// Sets related.R.CompetitionEdition appropriately.
func (o *CompetitionEdition) AddCompetitionPhases(exec boil.Executor, insert bool, related ...*CompetitionPhase) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CompetitionEditionID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"competition_phases\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"competition_edition_id"}),
				strmangle.WhereClause("\"", "\"", 2, competitionPhasePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CompetitionEditionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &competitionEditionR{
			CompetitionPhases: related,
		}
	} else {
		o.R.CompetitionPhases = append(o.R.CompetitionPhases, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &competitionPhaseR{
				CompetitionEdition: o,
			}
		} else {
			rel.R.CompetitionEdition = o
		}
	}
	return nil
}

// AddEditionMatches adds the given related objects to the existing relationships
// of the competition_edition, optionally inserting them as new records.
// Appends related to o.R.EditionMatches.
// Sets related.R.Edition appropriately.
func (o *CompetitionEdition) AddEditionMatches(exec boil.Executor, insert bool, related ...*Match) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EditionID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"matches\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"edition_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EditionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &competitionEditionR{
			EditionMatches: related,
		}
	} else {
		o.R.EditionMatches = append(o.R.EditionMatches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchR{
				Edition: o,
			}
		} else {
			rel.R.Edition = o
		}
	}
	return nil
}

// SetEditionMatches removes all previously related items of the
// competition_edition replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Edition's EditionMatches accordingly.
// Replaces o.R.EditionMatches with related.
// Sets related.R.Edition's EditionMatches accordingly.
func (o *CompetitionEdition) SetEditionMatches(exec boil.Executor, insert bool, related ...*Match) error {
	query := "update \"matches\" set \"edition_id\" = null where \"edition_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EditionMatches {
			queries.SetScanner(&rel.EditionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Edition = nil
		}
		o.R.EditionMatches = nil
	}

	return o.AddEditionMatches(exec, insert, related...)
}

// RemoveEditionMatches relationships from objects passed in.
// Removes related items from R.EditionMatches (uses pointer comparison, removal does not keep order)
// Sets related.R.Edition.
func (o *CompetitionEdition) RemoveEditionMatches(exec boil.Executor, related ...*Match) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EditionID, nil)
		if rel.R != nil {
			rel.R.Edition = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("edition_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EditionMatches {
			if rel != ri {
				continue
			}

			ln := len(o.R.EditionMatches)
			if ln > 1 && i < ln-1 {
				o.R.EditionMatches[i] = o.R.EditionMatches[ln-1]
			}
			o.R.EditionMatches = o.R.EditionMatches[:ln-1]
			break
		}
	}

	return nil
}

// CompetitionEditions retrieves all the records using an executor.
func CompetitionEditions(mods ...qm.QueryMod) competitionEditionQuery {
	mods = append(mods, qm.From("\"competition_editions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"competition_editions\".*"})
	}

	return competitionEditionQuery{q}
}

// FindCompetitionEdition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCompetitionEdition(exec boil.Executor, iD string, selectCols ...string) (*CompetitionEdition, error) {
	competitionEditionObj := &CompetitionEdition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"competition_editions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, competitionEditionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from competition_editions")
	}

	return competitionEditionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CompetitionEdition) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no competition_editions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(competitionEditionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	competitionEditionInsertCacheMut.RLock()
	cache, cached := competitionEditionInsertCache[key]
	competitionEditionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			competitionEditionAllColumns,
			competitionEditionColumnsWithDefault,
			competitionEditionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(competitionEditionType, competitionEditionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(competitionEditionType, competitionEditionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"competition_editions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"competition_editions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into competition_editions")
	}

	if !cached {
		competitionEditionInsertCacheMut.Lock()
		competitionEditionInsertCache[key] = cache
		competitionEditionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the CompetitionEdition.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CompetitionEdition) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	competitionEditionUpdateCacheMut.RLock()
	cache, cached := competitionEditionUpdateCache[key]
	competitionEditionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			competitionEditionAllColumns,
			competitionEditionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update competition_editions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"competition_editions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, competitionEditionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(competitionEditionType, competitionEditionMapping, append(wl, competitionEditionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update competition_editions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for competition_editions")
	}

	if !cached {
		competitionEditionUpdateCacheMut.Lock()
		competitionEditionUpdateCache[key] = cache
		competitionEditionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q competitionEditionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for competition_editions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for competition_editions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CompetitionEditionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), competitionEditionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"competition_editions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, competitionEditionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in competitionEdition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all competitionEdition")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CompetitionEdition) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no competition_editions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(competitionEditionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	competitionEditionUpsertCacheMut.RLock()
	cache, cached := competitionEditionUpsertCache[key]
	competitionEditionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			competitionEditionAllColumns,
			competitionEditionColumnsWithDefault,
			competitionEditionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			competitionEditionAllColumns,
			competitionEditionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert competition_editions, could not build update column list")
		}

		ret := strmangle.SetComplement(competitionEditionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(competitionEditionPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert competition_editions, could not build conflict column list")
			}

			conflict = make([]string, len(competitionEditionPrimaryKeyColumns))
			copy(conflict, competitionEditionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"competition_editions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(competitionEditionType, competitionEditionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(competitionEditionType, competitionEditionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert competition_editions")
	}

	if !cached {
		competitionEditionUpsertCacheMut.Lock()
		competitionEditionUpsertCache[key] = cache
		competitionEditionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single CompetitionEdition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CompetitionEdition) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no CompetitionEdition provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), competitionEditionPrimaryKeyMapping)
	sql := "DELETE FROM \"competition_editions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from competition_editions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for competition_editions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q competitionEditionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no competitionEditionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from competition_editions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for competition_editions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CompetitionEditionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), competitionEditionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"competition_editions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, competitionEditionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from competitionEdition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for competition_editions")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CompetitionEdition) Reload(exec boil.Executor) error {
	ret, err := FindCompetitionEdition(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CompetitionEditionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CompetitionEditionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), competitionEditionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"competition_editions\".* FROM \"competition_editions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, competitionEditionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in CompetitionEditionSlice")
	}

	*o = slice

	return nil
}

// CompetitionEditionExists checks if the CompetitionEdition row exists.
func CompetitionEditionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"competition_editions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if competition_editions exists")
	}

	return exists, nil
}

// Exists checks if the CompetitionEdition row exists.
func (o *CompetitionEdition) Exists(exec boil.Executor) (bool, error) {
	return CompetitionEditionExists(exec, o.ID)
}
