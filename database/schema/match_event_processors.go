// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MatchEventProcessor is an object representing the database table.
type MatchEventProcessor struct {
	ID              string `boil:"id" json:"id" toml:"id" yaml:"id"`
	Type            int    `boil:"type" json:"type" toml:"type" yaml:"type"`
	LastProcessedID int    `boil:"last_processed_id" json:"last_processed_id" toml:"last_processed_id" yaml:"last_processed_id"`
	MatchID         string `boil:"match_id" json:"match_id" toml:"match_id" yaml:"match_id"`

	R *matchEventProcessorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L matchEventProcessorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MatchEventProcessorColumns = struct {
	ID              string
	Type            string
	LastProcessedID string
	MatchID         string
}{
	ID:              "id",
	Type:            "type",
	LastProcessedID: "last_processed_id",
	MatchID:         "match_id",
}

var MatchEventProcessorTableColumns = struct {
	ID              string
	Type            string
	LastProcessedID string
	MatchID         string
}{
	ID:              "match_event_processors.id",
	Type:            "match_event_processors.type",
	LastProcessedID: "match_event_processors.last_processed_id",
	MatchID:         "match_event_processors.match_id",
}

// Generated where

var MatchEventProcessorWhere = struct {
	ID              whereHelperstring
	Type            whereHelperint
	LastProcessedID whereHelperint
	MatchID         whereHelperstring
}{
	ID:              whereHelperstring{field: "\"match_event_processors\".\"id\""},
	Type:            whereHelperint{field: "\"match_event_processors\".\"type\""},
	LastProcessedID: whereHelperint{field: "\"match_event_processors\".\"last_processed_id\""},
	MatchID:         whereHelperstring{field: "\"match_event_processors\".\"match_id\""},
}

// MatchEventProcessorRels is where relationship names are stored.
var MatchEventProcessorRels = struct {
	Match string
}{
	Match: "Match",
}

// matchEventProcessorR is where relationships are stored.
type matchEventProcessorR struct {
	Match *Match `boil:"Match" json:"Match" toml:"Match" yaml:"Match"`
}

// NewStruct creates a new relationship struct
func (*matchEventProcessorR) NewStruct() *matchEventProcessorR {
	return &matchEventProcessorR{}
}

func (r *matchEventProcessorR) GetMatch() *Match {
	if r == nil {
		return nil
	}
	return r.Match
}

// matchEventProcessorL is where Load methods for each relationship are stored.
type matchEventProcessorL struct{}

var (
	matchEventProcessorAllColumns            = []string{"id", "type", "last_processed_id", "match_id"}
	matchEventProcessorColumnsWithoutDefault = []string{"id", "type", "last_processed_id", "match_id"}
	matchEventProcessorColumnsWithDefault    = []string{}
	matchEventProcessorPrimaryKeyColumns     = []string{"id"}
	matchEventProcessorGeneratedColumns      = []string{}
)

type (
	// MatchEventProcessorSlice is an alias for a slice of pointers to MatchEventProcessor.
	// This should almost always be used instead of []MatchEventProcessor.
	MatchEventProcessorSlice []*MatchEventProcessor

	matchEventProcessorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	matchEventProcessorType                 = reflect.TypeOf(&MatchEventProcessor{})
	matchEventProcessorMapping              = queries.MakeStructMapping(matchEventProcessorType)
	matchEventProcessorPrimaryKeyMapping, _ = queries.BindMapping(matchEventProcessorType, matchEventProcessorMapping, matchEventProcessorPrimaryKeyColumns)
	matchEventProcessorInsertCacheMut       sync.RWMutex
	matchEventProcessorInsertCache          = make(map[string]insertCache)
	matchEventProcessorUpdateCacheMut       sync.RWMutex
	matchEventProcessorUpdateCache          = make(map[string]updateCache)
	matchEventProcessorUpsertCacheMut       sync.RWMutex
	matchEventProcessorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single matchEventProcessor record from the query.
func (q matchEventProcessorQuery) One(exec boil.Executor) (*MatchEventProcessor, error) {
	o := &MatchEventProcessor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for match_event_processors")
	}

	return o, nil
}

// All returns all MatchEventProcessor records from the query.
func (q matchEventProcessorQuery) All(exec boil.Executor) (MatchEventProcessorSlice, error) {
	var o []*MatchEventProcessor

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to MatchEventProcessor slice")
	}

	return o, nil
}

// Count returns the count of all MatchEventProcessor records in the query.
func (q matchEventProcessorQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count match_event_processors rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q matchEventProcessorQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if match_event_processors exists")
	}

	return count > 0, nil
}

// Match pointed to by the foreign key.
func (o *MatchEventProcessor) Match(mods ...qm.QueryMod) matchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MatchID),
	}

	queryMods = append(queryMods, mods...)

	return Matches(queryMods...)
}

// LoadMatch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchEventProcessorL) LoadMatch(e boil.Executor, singular bool, maybeMatchEventProcessor interface{}, mods queries.Applicator) error {
	var slice []*MatchEventProcessor
	var object *MatchEventProcessor

	if singular {
		var ok bool
		object, ok = maybeMatchEventProcessor.(*MatchEventProcessor)
		if !ok {
			object = new(MatchEventProcessor)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchEventProcessor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchEventProcessor))
			}
		}
	} else {
		s, ok := maybeMatchEventProcessor.(*[]*MatchEventProcessor)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchEventProcessor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchEventProcessor))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchEventProcessorR{}
		}
		args[object.MatchID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchEventProcessorR{}
			}

			args[obj.MatchID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Match")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Match")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Match = foreign
		if foreign.R == nil {
			foreign.R = &matchR{}
		}
		foreign.R.MatchEventProcessors = append(foreign.R.MatchEventProcessors, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MatchID == foreign.ID {
				local.R.Match = foreign
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.MatchEventProcessors = append(foreign.R.MatchEventProcessors, local)
				break
			}
		}
	}

	return nil
}

// SetMatch of the matchEventProcessor to the related item.
// Sets o.R.Match to related.
// Adds o to related.R.MatchEventProcessors.
func (o *MatchEventProcessor) SetMatch(exec boil.Executor, insert bool, related *Match) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match_event_processors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"match_id"}),
		strmangle.WhereClause("\"", "\"", 2, matchEventProcessorPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MatchID = related.ID
	if o.R == nil {
		o.R = &matchEventProcessorR{
			Match: related,
		}
	} else {
		o.R.Match = related
	}

	if related.R == nil {
		related.R = &matchR{
			MatchEventProcessors: MatchEventProcessorSlice{o},
		}
	} else {
		related.R.MatchEventProcessors = append(related.R.MatchEventProcessors, o)
	}

	return nil
}

// MatchEventProcessors retrieves all the records using an executor.
func MatchEventProcessors(mods ...qm.QueryMod) matchEventProcessorQuery {
	mods = append(mods, qm.From("\"match_event_processors\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"match_event_processors\".*"})
	}

	return matchEventProcessorQuery{q}
}

// FindMatchEventProcessor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMatchEventProcessor(exec boil.Executor, iD string, selectCols ...string) (*MatchEventProcessor, error) {
	matchEventProcessorObj := &MatchEventProcessor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"match_event_processors\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, matchEventProcessorObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from match_event_processors")
	}

	return matchEventProcessorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MatchEventProcessor) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no match_event_processors provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(matchEventProcessorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	matchEventProcessorInsertCacheMut.RLock()
	cache, cached := matchEventProcessorInsertCache[key]
	matchEventProcessorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			matchEventProcessorAllColumns,
			matchEventProcessorColumnsWithDefault,
			matchEventProcessorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(matchEventProcessorType, matchEventProcessorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(matchEventProcessorType, matchEventProcessorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"match_event_processors\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"match_event_processors\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into match_event_processors")
	}

	if !cached {
		matchEventProcessorInsertCacheMut.Lock()
		matchEventProcessorInsertCache[key] = cache
		matchEventProcessorInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the MatchEventProcessor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MatchEventProcessor) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	matchEventProcessorUpdateCacheMut.RLock()
	cache, cached := matchEventProcessorUpdateCache[key]
	matchEventProcessorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			matchEventProcessorAllColumns,
			matchEventProcessorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update match_event_processors, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"match_event_processors\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, matchEventProcessorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(matchEventProcessorType, matchEventProcessorMapping, append(wl, matchEventProcessorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update match_event_processors row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for match_event_processors")
	}

	if !cached {
		matchEventProcessorUpdateCacheMut.Lock()
		matchEventProcessorUpdateCache[key] = cache
		matchEventProcessorUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q matchEventProcessorQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for match_event_processors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for match_event_processors")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MatchEventProcessorSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchEventProcessorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"match_event_processors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, matchEventProcessorPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in matchEventProcessor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all matchEventProcessor")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MatchEventProcessor) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no match_event_processors provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(matchEventProcessorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	matchEventProcessorUpsertCacheMut.RLock()
	cache, cached := matchEventProcessorUpsertCache[key]
	matchEventProcessorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			matchEventProcessorAllColumns,
			matchEventProcessorColumnsWithDefault,
			matchEventProcessorColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			matchEventProcessorAllColumns,
			matchEventProcessorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert match_event_processors, could not build update column list")
		}

		ret := strmangle.SetComplement(matchEventProcessorAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(matchEventProcessorPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert match_event_processors, could not build conflict column list")
			}

			conflict = make([]string, len(matchEventProcessorPrimaryKeyColumns))
			copy(conflict, matchEventProcessorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"match_event_processors\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(matchEventProcessorType, matchEventProcessorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(matchEventProcessorType, matchEventProcessorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert match_event_processors")
	}

	if !cached {
		matchEventProcessorUpsertCacheMut.Lock()
		matchEventProcessorUpsertCache[key] = cache
		matchEventProcessorUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single MatchEventProcessor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MatchEventProcessor) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no MatchEventProcessor provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), matchEventProcessorPrimaryKeyMapping)
	sql := "DELETE FROM \"match_event_processors\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from match_event_processors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for match_event_processors")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q matchEventProcessorQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no matchEventProcessorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from match_event_processors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for match_event_processors")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MatchEventProcessorSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchEventProcessorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"match_event_processors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, matchEventProcessorPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from matchEventProcessor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for match_event_processors")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MatchEventProcessor) Reload(exec boil.Executor) error {
	ret, err := FindMatchEventProcessor(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MatchEventProcessorSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MatchEventProcessorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchEventProcessorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"match_event_processors\".* FROM \"match_event_processors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, matchEventProcessorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in MatchEventProcessorSlice")
	}

	*o = slice

	return nil
}

// MatchEventProcessorExists checks if the MatchEventProcessor row exists.
func MatchEventProcessorExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"match_event_processors\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if match_event_processors exists")
	}

	return exists, nil
}

// Exists checks if the MatchEventProcessor row exists.
func (o *MatchEventProcessor) Exists(exec boil.Executor) (bool, error) {
	return MatchEventProcessorExists(exec, o.ID)
}
