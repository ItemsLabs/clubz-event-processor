// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MatchEventSimulation is an object representing the database table.
type MatchEventSimulation struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Timestamp    time.Time `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	SimulatedAt  null.Time `boil:"simulated_at" json:"simulated_at,omitempty" toml:"simulated_at" yaml:"simulated_at,omitempty"`
	MatchID      string    `boil:"match_id" json:"match_id" toml:"match_id" yaml:"match_id"`
	MatchEventID int       `boil:"match_event_id" json:"match_event_id" toml:"match_event_id" yaml:"match_event_id"`

	R *matchEventSimulationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L matchEventSimulationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MatchEventSimulationColumns = struct {
	ID           string
	Timestamp    string
	SimulatedAt  string
	MatchID      string
	MatchEventID string
}{
	ID:           "id",
	Timestamp:    "timestamp",
	SimulatedAt:  "simulated_at",
	MatchID:      "match_id",
	MatchEventID: "match_event_id",
}

var MatchEventSimulationTableColumns = struct {
	ID           string
	Timestamp    string
	SimulatedAt  string
	MatchID      string
	MatchEventID string
}{
	ID:           "match_event_simulations.id",
	Timestamp:    "match_event_simulations.timestamp",
	SimulatedAt:  "match_event_simulations.simulated_at",
	MatchID:      "match_event_simulations.match_id",
	MatchEventID: "match_event_simulations.match_event_id",
}

// Generated where

var MatchEventSimulationWhere = struct {
	ID           whereHelperint
	Timestamp    whereHelpertime_Time
	SimulatedAt  whereHelpernull_Time
	MatchID      whereHelperstring
	MatchEventID whereHelperint
}{
	ID:           whereHelperint{field: "\"match_event_simulations\".\"id\""},
	Timestamp:    whereHelpertime_Time{field: "\"match_event_simulations\".\"timestamp\""},
	SimulatedAt:  whereHelpernull_Time{field: "\"match_event_simulations\".\"simulated_at\""},
	MatchID:      whereHelperstring{field: "\"match_event_simulations\".\"match_id\""},
	MatchEventID: whereHelperint{field: "\"match_event_simulations\".\"match_event_id\""},
}

// MatchEventSimulationRels is where relationship names are stored.
var MatchEventSimulationRels = struct {
	MatchEvent string
	Match      string
}{
	MatchEvent: "MatchEvent",
	Match:      "Match",
}

// matchEventSimulationR is where relationships are stored.
type matchEventSimulationR struct {
	MatchEvent *MatchEvent `boil:"MatchEvent" json:"MatchEvent" toml:"MatchEvent" yaml:"MatchEvent"`
	Match      *Match      `boil:"Match" json:"Match" toml:"Match" yaml:"Match"`
}

// NewStruct creates a new relationship struct
func (*matchEventSimulationR) NewStruct() *matchEventSimulationR {
	return &matchEventSimulationR{}
}

func (r *matchEventSimulationR) GetMatchEvent() *MatchEvent {
	if r == nil {
		return nil
	}
	return r.MatchEvent
}

func (r *matchEventSimulationR) GetMatch() *Match {
	if r == nil {
		return nil
	}
	return r.Match
}

// matchEventSimulationL is where Load methods for each relationship are stored.
type matchEventSimulationL struct{}

var (
	matchEventSimulationAllColumns            = []string{"id", "timestamp", "simulated_at", "match_id", "match_event_id"}
	matchEventSimulationColumnsWithoutDefault = []string{"timestamp", "match_id", "match_event_id"}
	matchEventSimulationColumnsWithDefault    = []string{"id", "simulated_at"}
	matchEventSimulationPrimaryKeyColumns     = []string{"id"}
	matchEventSimulationGeneratedColumns      = []string{}
)

type (
	// MatchEventSimulationSlice is an alias for a slice of pointers to MatchEventSimulation.
	// This should almost always be used instead of []MatchEventSimulation.
	MatchEventSimulationSlice []*MatchEventSimulation

	matchEventSimulationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	matchEventSimulationType                 = reflect.TypeOf(&MatchEventSimulation{})
	matchEventSimulationMapping              = queries.MakeStructMapping(matchEventSimulationType)
	matchEventSimulationPrimaryKeyMapping, _ = queries.BindMapping(matchEventSimulationType, matchEventSimulationMapping, matchEventSimulationPrimaryKeyColumns)
	matchEventSimulationInsertCacheMut       sync.RWMutex
	matchEventSimulationInsertCache          = make(map[string]insertCache)
	matchEventSimulationUpdateCacheMut       sync.RWMutex
	matchEventSimulationUpdateCache          = make(map[string]updateCache)
	matchEventSimulationUpsertCacheMut       sync.RWMutex
	matchEventSimulationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single matchEventSimulation record from the query.
func (q matchEventSimulationQuery) One(exec boil.Executor) (*MatchEventSimulation, error) {
	o := &MatchEventSimulation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for match_event_simulations")
	}

	return o, nil
}

// All returns all MatchEventSimulation records from the query.
func (q matchEventSimulationQuery) All(exec boil.Executor) (MatchEventSimulationSlice, error) {
	var o []*MatchEventSimulation

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to MatchEventSimulation slice")
	}

	return o, nil
}

// Count returns the count of all MatchEventSimulation records in the query.
func (q matchEventSimulationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count match_event_simulations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q matchEventSimulationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if match_event_simulations exists")
	}

	return count > 0, nil
}

// MatchEvent pointed to by the foreign key.
func (o *MatchEventSimulation) MatchEvent(mods ...qm.QueryMod) matchEventQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MatchEventID),
	}

	queryMods = append(queryMods, mods...)

	return MatchEvents(queryMods...)
}

// Match pointed to by the foreign key.
func (o *MatchEventSimulation) Match(mods ...qm.QueryMod) matchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MatchID),
	}

	queryMods = append(queryMods, mods...)

	return Matches(queryMods...)
}

// LoadMatchEvent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchEventSimulationL) LoadMatchEvent(e boil.Executor, singular bool, maybeMatchEventSimulation interface{}, mods queries.Applicator) error {
	var slice []*MatchEventSimulation
	var object *MatchEventSimulation

	if singular {
		var ok bool
		object, ok = maybeMatchEventSimulation.(*MatchEventSimulation)
		if !ok {
			object = new(MatchEventSimulation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchEventSimulation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchEventSimulation))
			}
		}
	} else {
		s, ok := maybeMatchEventSimulation.(*[]*MatchEventSimulation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchEventSimulation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchEventSimulation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchEventSimulationR{}
		}
		args[object.MatchEventID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchEventSimulationR{}
			}

			args[obj.MatchEventID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`match_events`),
		qm.WhereIn(`match_events.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MatchEvent")
	}

	var resultSlice []*MatchEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MatchEvent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for match_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for match_events")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MatchEvent = foreign
		if foreign.R == nil {
			foreign.R = &matchEventR{}
		}
		foreign.R.MatchEventSimulations = append(foreign.R.MatchEventSimulations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MatchEventID == foreign.ID {
				local.R.MatchEvent = foreign
				if foreign.R == nil {
					foreign.R = &matchEventR{}
				}
				foreign.R.MatchEventSimulations = append(foreign.R.MatchEventSimulations, local)
				break
			}
		}
	}

	return nil
}

// LoadMatch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchEventSimulationL) LoadMatch(e boil.Executor, singular bool, maybeMatchEventSimulation interface{}, mods queries.Applicator) error {
	var slice []*MatchEventSimulation
	var object *MatchEventSimulation

	if singular {
		var ok bool
		object, ok = maybeMatchEventSimulation.(*MatchEventSimulation)
		if !ok {
			object = new(MatchEventSimulation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchEventSimulation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchEventSimulation))
			}
		}
	} else {
		s, ok := maybeMatchEventSimulation.(*[]*MatchEventSimulation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchEventSimulation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchEventSimulation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchEventSimulationR{}
		}
		args[object.MatchID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchEventSimulationR{}
			}

			args[obj.MatchID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Match")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Match")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Match = foreign
		if foreign.R == nil {
			foreign.R = &matchR{}
		}
		foreign.R.MatchEventSimulations = append(foreign.R.MatchEventSimulations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MatchID == foreign.ID {
				local.R.Match = foreign
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.MatchEventSimulations = append(foreign.R.MatchEventSimulations, local)
				break
			}
		}
	}

	return nil
}

// SetMatchEvent of the matchEventSimulation to the related item.
// Sets o.R.MatchEvent to related.
// Adds o to related.R.MatchEventSimulations.
func (o *MatchEventSimulation) SetMatchEvent(exec boil.Executor, insert bool, related *MatchEvent) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match_event_simulations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"match_event_id"}),
		strmangle.WhereClause("\"", "\"", 2, matchEventSimulationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MatchEventID = related.ID
	if o.R == nil {
		o.R = &matchEventSimulationR{
			MatchEvent: related,
		}
	} else {
		o.R.MatchEvent = related
	}

	if related.R == nil {
		related.R = &matchEventR{
			MatchEventSimulations: MatchEventSimulationSlice{o},
		}
	} else {
		related.R.MatchEventSimulations = append(related.R.MatchEventSimulations, o)
	}

	return nil
}

// SetMatch of the matchEventSimulation to the related item.
// Sets o.R.Match to related.
// Adds o to related.R.MatchEventSimulations.
func (o *MatchEventSimulation) SetMatch(exec boil.Executor, insert bool, related *Match) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match_event_simulations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"match_id"}),
		strmangle.WhereClause("\"", "\"", 2, matchEventSimulationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MatchID = related.ID
	if o.R == nil {
		o.R = &matchEventSimulationR{
			Match: related,
		}
	} else {
		o.R.Match = related
	}

	if related.R == nil {
		related.R = &matchR{
			MatchEventSimulations: MatchEventSimulationSlice{o},
		}
	} else {
		related.R.MatchEventSimulations = append(related.R.MatchEventSimulations, o)
	}

	return nil
}

// MatchEventSimulations retrieves all the records using an executor.
func MatchEventSimulations(mods ...qm.QueryMod) matchEventSimulationQuery {
	mods = append(mods, qm.From("\"match_event_simulations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"match_event_simulations\".*"})
	}

	return matchEventSimulationQuery{q}
}

// FindMatchEventSimulation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMatchEventSimulation(exec boil.Executor, iD int, selectCols ...string) (*MatchEventSimulation, error) {
	matchEventSimulationObj := &MatchEventSimulation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"match_event_simulations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, matchEventSimulationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from match_event_simulations")
	}

	return matchEventSimulationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MatchEventSimulation) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no match_event_simulations provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(matchEventSimulationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	matchEventSimulationInsertCacheMut.RLock()
	cache, cached := matchEventSimulationInsertCache[key]
	matchEventSimulationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			matchEventSimulationAllColumns,
			matchEventSimulationColumnsWithDefault,
			matchEventSimulationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(matchEventSimulationType, matchEventSimulationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(matchEventSimulationType, matchEventSimulationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"match_event_simulations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"match_event_simulations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into match_event_simulations")
	}

	if !cached {
		matchEventSimulationInsertCacheMut.Lock()
		matchEventSimulationInsertCache[key] = cache
		matchEventSimulationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the MatchEventSimulation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MatchEventSimulation) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	matchEventSimulationUpdateCacheMut.RLock()
	cache, cached := matchEventSimulationUpdateCache[key]
	matchEventSimulationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			matchEventSimulationAllColumns,
			matchEventSimulationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update match_event_simulations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"match_event_simulations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, matchEventSimulationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(matchEventSimulationType, matchEventSimulationMapping, append(wl, matchEventSimulationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update match_event_simulations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for match_event_simulations")
	}

	if !cached {
		matchEventSimulationUpdateCacheMut.Lock()
		matchEventSimulationUpdateCache[key] = cache
		matchEventSimulationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q matchEventSimulationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for match_event_simulations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for match_event_simulations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MatchEventSimulationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchEventSimulationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"match_event_simulations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, matchEventSimulationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in matchEventSimulation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all matchEventSimulation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MatchEventSimulation) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no match_event_simulations provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(matchEventSimulationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	matchEventSimulationUpsertCacheMut.RLock()
	cache, cached := matchEventSimulationUpsertCache[key]
	matchEventSimulationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			matchEventSimulationAllColumns,
			matchEventSimulationColumnsWithDefault,
			matchEventSimulationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			matchEventSimulationAllColumns,
			matchEventSimulationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert match_event_simulations, could not build update column list")
		}

		ret := strmangle.SetComplement(matchEventSimulationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(matchEventSimulationPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert match_event_simulations, could not build conflict column list")
			}

			conflict = make([]string, len(matchEventSimulationPrimaryKeyColumns))
			copy(conflict, matchEventSimulationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"match_event_simulations\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(matchEventSimulationType, matchEventSimulationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(matchEventSimulationType, matchEventSimulationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert match_event_simulations")
	}

	if !cached {
		matchEventSimulationUpsertCacheMut.Lock()
		matchEventSimulationUpsertCache[key] = cache
		matchEventSimulationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single MatchEventSimulation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MatchEventSimulation) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no MatchEventSimulation provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), matchEventSimulationPrimaryKeyMapping)
	sql := "DELETE FROM \"match_event_simulations\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from match_event_simulations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for match_event_simulations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q matchEventSimulationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no matchEventSimulationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from match_event_simulations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for match_event_simulations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MatchEventSimulationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchEventSimulationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"match_event_simulations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, matchEventSimulationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from matchEventSimulation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for match_event_simulations")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MatchEventSimulation) Reload(exec boil.Executor) error {
	ret, err := FindMatchEventSimulation(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MatchEventSimulationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MatchEventSimulationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchEventSimulationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"match_event_simulations\".* FROM \"match_event_simulations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, matchEventSimulationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in MatchEventSimulationSlice")
	}

	*o = slice

	return nil
}

// MatchEventSimulationExists checks if the MatchEventSimulation row exists.
func MatchEventSimulationExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"match_event_simulations\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if match_event_simulations exists")
	}

	return exists, nil
}

// Exists checks if the MatchEventSimulation row exists.
func (o *MatchEventSimulation) Exists(exec boil.Executor) (bool, error) {
	return MatchEventSimulationExists(exec, o.ID)
}
