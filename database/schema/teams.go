// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Team is an object representing the database table.
type Team struct {
	ID               string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt        time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ImportID         null.String `boil:"import_id" json:"import_id,omitempty" toml:"import_id" yaml:"import_id,omitempty"`
	Name             string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	ShortName        null.String `boil:"short_name" json:"short_name,omitempty" toml:"short_name" yaml:"short_name,omitempty"`
	CountryID        null.String `boil:"country_id" json:"country_id,omitempty" toml:"country_id" yaml:"country_id,omitempty"`
	RegionID         null.String `boil:"region_id" json:"region_id,omitempty" toml:"region_id" yaml:"region_id,omitempty"`
	CrestURL         null.String `boil:"crest_url" json:"crest_url,omitempty" toml:"crest_url" yaml:"crest_url,omitempty"`
	Abbr             null.String `boil:"abbr" json:"abbr,omitempty" toml:"abbr" yaml:"abbr,omitempty"`
	OrtecSelectionID null.String `boil:"ortec_selection_id" json:"ortec_selection_id,omitempty" toml:"ortec_selection_id" yaml:"ortec_selection_id,omitempty"`
	OptaSelectionID  null.String `boil:"opta_selection_id" json:"opta_selection_id,omitempty" toml:"opta_selection_id" yaml:"opta_selection_id,omitempty"`

	R *teamR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L teamL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TeamColumns = struct {
	ID               string
	CreatedAt        string
	UpdatedAt        string
	ImportID         string
	Name             string
	ShortName        string
	CountryID        string
	RegionID         string
	CrestURL         string
	Abbr             string
	OrtecSelectionID string
	OptaSelectionID  string
}{
	ID:               "id",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	ImportID:         "import_id",
	Name:             "name",
	ShortName:        "short_name",
	CountryID:        "country_id",
	RegionID:         "region_id",
	CrestURL:         "crest_url",
	Abbr:             "abbr",
	OrtecSelectionID: "ortec_selection_id",
	OptaSelectionID:  "opta_selection_id",
}

var TeamTableColumns = struct {
	ID               string
	CreatedAt        string
	UpdatedAt        string
	ImportID         string
	Name             string
	ShortName        string
	CountryID        string
	RegionID         string
	CrestURL         string
	Abbr             string
	OrtecSelectionID string
	OptaSelectionID  string
}{
	ID:               "teams.id",
	CreatedAt:        "teams.created_at",
	UpdatedAt:        "teams.updated_at",
	ImportID:         "teams.import_id",
	Name:             "teams.name",
	ShortName:        "teams.short_name",
	CountryID:        "teams.country_id",
	RegionID:         "teams.region_id",
	CrestURL:         "teams.crest_url",
	Abbr:             "teams.abbr",
	OrtecSelectionID: "teams.ortec_selection_id",
	OptaSelectionID:  "teams.opta_selection_id",
}

// Generated where

var TeamWhere = struct {
	ID               whereHelperstring
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	ImportID         whereHelpernull_String
	Name             whereHelperstring
	ShortName        whereHelpernull_String
	CountryID        whereHelpernull_String
	RegionID         whereHelpernull_String
	CrestURL         whereHelpernull_String
	Abbr             whereHelpernull_String
	OrtecSelectionID whereHelpernull_String
	OptaSelectionID  whereHelpernull_String
}{
	ID:               whereHelperstring{field: "\"teams\".\"id\""},
	CreatedAt:        whereHelpertime_Time{field: "\"teams\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"teams\".\"updated_at\""},
	ImportID:         whereHelpernull_String{field: "\"teams\".\"import_id\""},
	Name:             whereHelperstring{field: "\"teams\".\"name\""},
	ShortName:        whereHelpernull_String{field: "\"teams\".\"short_name\""},
	CountryID:        whereHelpernull_String{field: "\"teams\".\"country_id\""},
	RegionID:         whereHelpernull_String{field: "\"teams\".\"region_id\""},
	CrestURL:         whereHelpernull_String{field: "\"teams\".\"crest_url\""},
	Abbr:             whereHelpernull_String{field: "\"teams\".\"abbr\""},
	OrtecSelectionID: whereHelpernull_String{field: "\"teams\".\"ortec_selection_id\""},
	OptaSelectionID:  whereHelpernull_String{field: "\"teams\".\"opta_selection_id\""},
}

// TeamRels is where relationship names are stored.
var TeamRels = struct {
	Country                  string
	Region                   string
	GameEvents               string
	Leaderboards             string
	MatchEvents              string
	MatchPlayers             string
	AwayTeamMatches          string
	HomeTeamMatches          string
	PlayerBuckets            string
	SeasonCompetitionMembers string
	SeasonTeamPlayers        string
}{
	Country:                  "Country",
	Region:                   "Region",
	GameEvents:               "GameEvents",
	Leaderboards:             "Leaderboards",
	MatchEvents:              "MatchEvents",
	MatchPlayers:             "MatchPlayers",
	AwayTeamMatches:          "AwayTeamMatches",
	HomeTeamMatches:          "HomeTeamMatches",
	PlayerBuckets:            "PlayerBuckets",
	SeasonCompetitionMembers: "SeasonCompetitionMembers",
	SeasonTeamPlayers:        "SeasonTeamPlayers",
}

// teamR is where relationships are stored.
type teamR struct {
	Country                  *Country                     `boil:"Country" json:"Country" toml:"Country" yaml:"Country"`
	Region                   *Region                      `boil:"Region" json:"Region" toml:"Region" yaml:"Region"`
	GameEvents               GameEventSlice               `boil:"GameEvents" json:"GameEvents" toml:"GameEvents" yaml:"GameEvents"`
	Leaderboards             LeaderboardSlice             `boil:"Leaderboards" json:"Leaderboards" toml:"Leaderboards" yaml:"Leaderboards"`
	MatchEvents              MatchEventSlice              `boil:"MatchEvents" json:"MatchEvents" toml:"MatchEvents" yaml:"MatchEvents"`
	MatchPlayers             MatchPlayerSlice             `boil:"MatchPlayers" json:"MatchPlayers" toml:"MatchPlayers" yaml:"MatchPlayers"`
	AwayTeamMatches          MatchSlice                   `boil:"AwayTeamMatches" json:"AwayTeamMatches" toml:"AwayTeamMatches" yaml:"AwayTeamMatches"`
	HomeTeamMatches          MatchSlice                   `boil:"HomeTeamMatches" json:"HomeTeamMatches" toml:"HomeTeamMatches" yaml:"HomeTeamMatches"`
	PlayerBuckets            PlayerBucketSlice            `boil:"PlayerBuckets" json:"PlayerBuckets" toml:"PlayerBuckets" yaml:"PlayerBuckets"`
	SeasonCompetitionMembers SeasonCompetitionMemberSlice `boil:"SeasonCompetitionMembers" json:"SeasonCompetitionMembers" toml:"SeasonCompetitionMembers" yaml:"SeasonCompetitionMembers"`
	SeasonTeamPlayers        SeasonTeamPlayerSlice        `boil:"SeasonTeamPlayers" json:"SeasonTeamPlayers" toml:"SeasonTeamPlayers" yaml:"SeasonTeamPlayers"`
}

// NewStruct creates a new relationship struct
func (*teamR) NewStruct() *teamR {
	return &teamR{}
}

func (r *teamR) GetCountry() *Country {
	if r == nil {
		return nil
	}
	return r.Country
}

func (r *teamR) GetRegion() *Region {
	if r == nil {
		return nil
	}
	return r.Region
}

func (r *teamR) GetGameEvents() GameEventSlice {
	if r == nil {
		return nil
	}
	return r.GameEvents
}

func (r *teamR) GetLeaderboards() LeaderboardSlice {
	if r == nil {
		return nil
	}
	return r.Leaderboards
}

func (r *teamR) GetMatchEvents() MatchEventSlice {
	if r == nil {
		return nil
	}
	return r.MatchEvents
}

func (r *teamR) GetMatchPlayers() MatchPlayerSlice {
	if r == nil {
		return nil
	}
	return r.MatchPlayers
}

func (r *teamR) GetAwayTeamMatches() MatchSlice {
	if r == nil {
		return nil
	}
	return r.AwayTeamMatches
}

func (r *teamR) GetHomeTeamMatches() MatchSlice {
	if r == nil {
		return nil
	}
	return r.HomeTeamMatches
}

func (r *teamR) GetPlayerBuckets() PlayerBucketSlice {
	if r == nil {
		return nil
	}
	return r.PlayerBuckets
}

func (r *teamR) GetSeasonCompetitionMembers() SeasonCompetitionMemberSlice {
	if r == nil {
		return nil
	}
	return r.SeasonCompetitionMembers
}

func (r *teamR) GetSeasonTeamPlayers() SeasonTeamPlayerSlice {
	if r == nil {
		return nil
	}
	return r.SeasonTeamPlayers
}

// teamL is where Load methods for each relationship are stored.
type teamL struct{}

var (
	teamAllColumns            = []string{"id", "created_at", "updated_at", "import_id", "name", "short_name", "country_id", "region_id", "crest_url", "abbr", "ortec_selection_id", "opta_selection_id"}
	teamColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "name"}
	teamColumnsWithDefault    = []string{"import_id", "short_name", "country_id", "region_id", "crest_url", "abbr", "ortec_selection_id", "opta_selection_id"}
	teamPrimaryKeyColumns     = []string{"id"}
	teamGeneratedColumns      = []string{}
)

type (
	// TeamSlice is an alias for a slice of pointers to Team.
	// This should almost always be used instead of []Team.
	TeamSlice []*Team

	teamQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	teamType                 = reflect.TypeOf(&Team{})
	teamMapping              = queries.MakeStructMapping(teamType)
	teamPrimaryKeyMapping, _ = queries.BindMapping(teamType, teamMapping, teamPrimaryKeyColumns)
	teamInsertCacheMut       sync.RWMutex
	teamInsertCache          = make(map[string]insertCache)
	teamUpdateCacheMut       sync.RWMutex
	teamUpdateCache          = make(map[string]updateCache)
	teamUpsertCacheMut       sync.RWMutex
	teamUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single team record from the query.
func (q teamQuery) One(exec boil.Executor) (*Team, error) {
	o := &Team{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for teams")
	}

	return o, nil
}

// All returns all Team records from the query.
func (q teamQuery) All(exec boil.Executor) (TeamSlice, error) {
	var o []*Team

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to Team slice")
	}

	return o, nil
}

// Count returns the count of all Team records in the query.
func (q teamQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count teams rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q teamQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if teams exists")
	}

	return count > 0, nil
}

// Country pointed to by the foreign key.
func (o *Team) Country(mods ...qm.QueryMod) countryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CountryID),
	}

	queryMods = append(queryMods, mods...)

	return Countries(queryMods...)
}

// Region pointed to by the foreign key.
func (o *Team) Region(mods ...qm.QueryMod) regionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RegionID),
	}

	queryMods = append(queryMods, mods...)

	return Regions(queryMods...)
}

// GameEvents retrieves all the game_event's GameEvents with an executor.
func (o *Team) GameEvents(mods ...qm.QueryMod) gameEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"game_events\".\"team_id\"=?", o.ID),
	)

	return GameEvents(queryMods...)
}

// Leaderboards retrieves all the leaderboard's Leaderboards with an executor.
func (o *Team) Leaderboards(mods ...qm.QueryMod) leaderboardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"leaderboards\".\"team_id\"=?", o.ID),
	)

	return Leaderboards(queryMods...)
}

// MatchEvents retrieves all the match_event's MatchEvents with an executor.
func (o *Team) MatchEvents(mods ...qm.QueryMod) matchEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"match_events\".\"team_id\"=?", o.ID),
	)

	return MatchEvents(queryMods...)
}

// MatchPlayers retrieves all the match_player's MatchPlayers with an executor.
func (o *Team) MatchPlayers(mods ...qm.QueryMod) matchPlayerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"match_players\".\"team_id\"=?", o.ID),
	)

	return MatchPlayers(queryMods...)
}

// AwayTeamMatches retrieves all the match's Matches with an executor via away_team_id column.
func (o *Team) AwayTeamMatches(mods ...qm.QueryMod) matchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"matches\".\"away_team_id\"=?", o.ID),
	)

	return Matches(queryMods...)
}

// HomeTeamMatches retrieves all the match's Matches with an executor via home_team_id column.
func (o *Team) HomeTeamMatches(mods ...qm.QueryMod) matchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"matches\".\"home_team_id\"=?", o.ID),
	)

	return Matches(queryMods...)
}

// PlayerBuckets retrieves all the player_bucket's PlayerBuckets with an executor.
func (o *Team) PlayerBuckets(mods ...qm.QueryMod) playerBucketQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"player_bucket\".\"team_id\"=?", o.ID),
	)

	return PlayerBuckets(queryMods...)
}

// SeasonCompetitionMembers retrieves all the season_competition_member's SeasonCompetitionMembers with an executor.
func (o *Team) SeasonCompetitionMembers(mods ...qm.QueryMod) seasonCompetitionMemberQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"season_competition_members\".\"team_id\"=?", o.ID),
	)

	return SeasonCompetitionMembers(queryMods...)
}

// SeasonTeamPlayers retrieves all the season_team_player's SeasonTeamPlayers with an executor.
func (o *Team) SeasonTeamPlayers(mods ...qm.QueryMod) seasonTeamPlayerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"season_team_players\".\"team_id\"=?", o.ID),
	)

	return SeasonTeamPlayers(queryMods...)
}

// LoadCountry allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamL) LoadCountry(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		var ok bool
		object, ok = maybeTeam.(*Team)
		if !ok {
			object = new(Team)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeam))
			}
		}
	} else {
		s, ok := maybeTeam.(*[]*Team)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeam))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		if !queries.IsNil(object.CountryID) {
			args[object.CountryID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			if !queries.IsNil(obj.CountryID) {
				args[obj.CountryID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`countries`),
		qm.WhereIn(`countries.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Country")
	}

	var resultSlice []*Country
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Country")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for countries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for countries")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Country = foreign
		if foreign.R == nil {
			foreign.R = &countryR{}
		}
		foreign.R.Teams = append(foreign.R.Teams, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CountryID, foreign.ID) {
				local.R.Country = foreign
				if foreign.R == nil {
					foreign.R = &countryR{}
				}
				foreign.R.Teams = append(foreign.R.Teams, local)
				break
			}
		}
	}

	return nil
}

// LoadRegion allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamL) LoadRegion(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		var ok bool
		object, ok = maybeTeam.(*Team)
		if !ok {
			object = new(Team)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeam))
			}
		}
	} else {
		s, ok := maybeTeam.(*[]*Team)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeam))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		if !queries.IsNil(object.RegionID) {
			args[object.RegionID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			if !queries.IsNil(obj.RegionID) {
				args[obj.RegionID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`regions`),
		qm.WhereIn(`regions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Region")
	}

	var resultSlice []*Region
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Region")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for regions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for regions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Region = foreign
		if foreign.R == nil {
			foreign.R = &regionR{}
		}
		foreign.R.Teams = append(foreign.R.Teams, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RegionID, foreign.ID) {
				local.R.Region = foreign
				if foreign.R == nil {
					foreign.R = &regionR{}
				}
				foreign.R.Teams = append(foreign.R.Teams, local)
				break
			}
		}
	}

	return nil
}

// LoadGameEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadGameEvents(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		var ok bool
		object, ok = maybeTeam.(*Team)
		if !ok {
			object = new(Team)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeam))
			}
		}
	} else {
		s, ok := maybeTeam.(*[]*Team)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeam))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`game_events`),
		qm.WhereIn(`game_events.team_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load game_events")
	}

	var resultSlice []*GameEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice game_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on game_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_events")
	}

	if singular {
		object.R.GameEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gameEventR{}
			}
			foreign.R.Team = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TeamID {
				local.R.GameEvents = append(local.R.GameEvents, foreign)
				if foreign.R == nil {
					foreign.R = &gameEventR{}
				}
				foreign.R.Team = local
				break
			}
		}
	}

	return nil
}

// LoadLeaderboards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadLeaderboards(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		var ok bool
		object, ok = maybeTeam.(*Team)
		if !ok {
			object = new(Team)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeam))
			}
		}
	} else {
		s, ok := maybeTeam.(*[]*Team)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeam))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`leaderboards`),
		qm.WhereIn(`leaderboards.team_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load leaderboards")
	}

	var resultSlice []*Leaderboard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice leaderboards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on leaderboards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for leaderboards")
	}

	if singular {
		object.R.Leaderboards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &leaderboardR{}
			}
			foreign.R.Team = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TeamID) {
				local.R.Leaderboards = append(local.R.Leaderboards, foreign)
				if foreign.R == nil {
					foreign.R = &leaderboardR{}
				}
				foreign.R.Team = local
				break
			}
		}
	}

	return nil
}

// LoadMatchEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadMatchEvents(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		var ok bool
		object, ok = maybeTeam.(*Team)
		if !ok {
			object = new(Team)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeam))
			}
		}
	} else {
		s, ok := maybeTeam.(*[]*Team)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeam))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`match_events`),
		qm.WhereIn(`match_events.team_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load match_events")
	}

	var resultSlice []*MatchEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice match_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on match_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for match_events")
	}

	if singular {
		object.R.MatchEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchEventR{}
			}
			foreign.R.Team = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TeamID) {
				local.R.MatchEvents = append(local.R.MatchEvents, foreign)
				if foreign.R == nil {
					foreign.R = &matchEventR{}
				}
				foreign.R.Team = local
				break
			}
		}
	}

	return nil
}

// LoadMatchPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadMatchPlayers(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		var ok bool
		object, ok = maybeTeam.(*Team)
		if !ok {
			object = new(Team)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeam))
			}
		}
	} else {
		s, ok := maybeTeam.(*[]*Team)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeam))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`match_players`),
		qm.WhereIn(`match_players.team_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load match_players")
	}

	var resultSlice []*MatchPlayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice match_players")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on match_players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for match_players")
	}

	if singular {
		object.R.MatchPlayers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchPlayerR{}
			}
			foreign.R.Team = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TeamID {
				local.R.MatchPlayers = append(local.R.MatchPlayers, foreign)
				if foreign.R == nil {
					foreign.R = &matchPlayerR{}
				}
				foreign.R.Team = local
				break
			}
		}
	}

	return nil
}

// LoadAwayTeamMatches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadAwayTeamMatches(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		var ok bool
		object, ok = maybeTeam.(*Team)
		if !ok {
			object = new(Team)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeam))
			}
		}
	} else {
		s, ok := maybeTeam.(*[]*Team)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeam))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.away_team_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load matches")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice matches")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if singular {
		object.R.AwayTeamMatches = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchR{}
			}
			foreign.R.AwayTeam = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AwayTeamID {
				local.R.AwayTeamMatches = append(local.R.AwayTeamMatches, foreign)
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.AwayTeam = local
				break
			}
		}
	}

	return nil
}

// LoadHomeTeamMatches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadHomeTeamMatches(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		var ok bool
		object, ok = maybeTeam.(*Team)
		if !ok {
			object = new(Team)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeam))
			}
		}
	} else {
		s, ok := maybeTeam.(*[]*Team)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeam))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.home_team_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load matches")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice matches")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if singular {
		object.R.HomeTeamMatches = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchR{}
			}
			foreign.R.HomeTeam = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.HomeTeamID {
				local.R.HomeTeamMatches = append(local.R.HomeTeamMatches, foreign)
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.HomeTeam = local
				break
			}
		}
	}

	return nil
}

// LoadPlayerBuckets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadPlayerBuckets(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		var ok bool
		object, ok = maybeTeam.(*Team)
		if !ok {
			object = new(Team)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeam))
			}
		}
	} else {
		s, ok := maybeTeam.(*[]*Team)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeam))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`player_bucket`),
		qm.WhereIn(`player_bucket.team_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load player_bucket")
	}

	var resultSlice []*PlayerBucket
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice player_bucket")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on player_bucket")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player_bucket")
	}

	if singular {
		object.R.PlayerBuckets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerBucketR{}
			}
			foreign.R.Team = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TeamID {
				local.R.PlayerBuckets = append(local.R.PlayerBuckets, foreign)
				if foreign.R == nil {
					foreign.R = &playerBucketR{}
				}
				foreign.R.Team = local
				break
			}
		}
	}

	return nil
}

// LoadSeasonCompetitionMembers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadSeasonCompetitionMembers(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		var ok bool
		object, ok = maybeTeam.(*Team)
		if !ok {
			object = new(Team)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeam))
			}
		}
	} else {
		s, ok := maybeTeam.(*[]*Team)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeam))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`season_competition_members`),
		qm.WhereIn(`season_competition_members.team_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load season_competition_members")
	}

	var resultSlice []*SeasonCompetitionMember
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice season_competition_members")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on season_competition_members")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for season_competition_members")
	}

	if singular {
		object.R.SeasonCompetitionMembers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &seasonCompetitionMemberR{}
			}
			foreign.R.Team = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TeamID {
				local.R.SeasonCompetitionMembers = append(local.R.SeasonCompetitionMembers, foreign)
				if foreign.R == nil {
					foreign.R = &seasonCompetitionMemberR{}
				}
				foreign.R.Team = local
				break
			}
		}
	}

	return nil
}

// LoadSeasonTeamPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadSeasonTeamPlayers(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		var ok bool
		object, ok = maybeTeam.(*Team)
		if !ok {
			object = new(Team)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeam))
			}
		}
	} else {
		s, ok := maybeTeam.(*[]*Team)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeam))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`season_team_players`),
		qm.WhereIn(`season_team_players.team_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load season_team_players")
	}

	var resultSlice []*SeasonTeamPlayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice season_team_players")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on season_team_players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for season_team_players")
	}

	if singular {
		object.R.SeasonTeamPlayers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &seasonTeamPlayerR{}
			}
			foreign.R.Team = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TeamID {
				local.R.SeasonTeamPlayers = append(local.R.SeasonTeamPlayers, foreign)
				if foreign.R == nil {
					foreign.R = &seasonTeamPlayerR{}
				}
				foreign.R.Team = local
				break
			}
		}
	}

	return nil
}

// SetCountry of the team to the related item.
// Sets o.R.Country to related.
// Adds o to related.R.Teams.
func (o *Team) SetCountry(exec boil.Executor, insert bool, related *Country) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"teams\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"country_id"}),
		strmangle.WhereClause("\"", "\"", 2, teamPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CountryID, related.ID)
	if o.R == nil {
		o.R = &teamR{
			Country: related,
		}
	} else {
		o.R.Country = related
	}

	if related.R == nil {
		related.R = &countryR{
			Teams: TeamSlice{o},
		}
	} else {
		related.R.Teams = append(related.R.Teams, o)
	}

	return nil
}

// RemoveCountry relationship.
// Sets o.R.Country to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Team) RemoveCountry(exec boil.Executor, related *Country) error {
	var err error

	queries.SetScanner(&o.CountryID, nil)
	if _, err = o.Update(exec, boil.Whitelist("country_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Country = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Teams {
		if queries.Equal(o.CountryID, ri.CountryID) {
			continue
		}

		ln := len(related.R.Teams)
		if ln > 1 && i < ln-1 {
			related.R.Teams[i] = related.R.Teams[ln-1]
		}
		related.R.Teams = related.R.Teams[:ln-1]
		break
	}
	return nil
}

// SetRegion of the team to the related item.
// Sets o.R.Region to related.
// Adds o to related.R.Teams.
func (o *Team) SetRegion(exec boil.Executor, insert bool, related *Region) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"teams\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"region_id"}),
		strmangle.WhereClause("\"", "\"", 2, teamPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RegionID, related.ID)
	if o.R == nil {
		o.R = &teamR{
			Region: related,
		}
	} else {
		o.R.Region = related
	}

	if related.R == nil {
		related.R = &regionR{
			Teams: TeamSlice{o},
		}
	} else {
		related.R.Teams = append(related.R.Teams, o)
	}

	return nil
}

// RemoveRegion relationship.
// Sets o.R.Region to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Team) RemoveRegion(exec boil.Executor, related *Region) error {
	var err error

	queries.SetScanner(&o.RegionID, nil)
	if _, err = o.Update(exec, boil.Whitelist("region_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Region = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Teams {
		if queries.Equal(o.RegionID, ri.RegionID) {
			continue
		}

		ln := len(related.R.Teams)
		if ln > 1 && i < ln-1 {
			related.R.Teams[i] = related.R.Teams[ln-1]
		}
		related.R.Teams = related.R.Teams[:ln-1]
		break
	}
	return nil
}

// AddGameEvents adds the given related objects to the existing relationships
// of the team, optionally inserting them as new records.
// Appends related to o.R.GameEvents.
// Sets related.R.Team appropriately.
func (o *Team) AddGameEvents(exec boil.Executor, insert bool, related ...*GameEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TeamID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"game_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
				strmangle.WhereClause("\"", "\"", 2, gameEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TeamID = o.ID
		}
	}

	if o.R == nil {
		o.R = &teamR{
			GameEvents: related,
		}
	} else {
		o.R.GameEvents = append(o.R.GameEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gameEventR{
				Team: o,
			}
		} else {
			rel.R.Team = o
		}
	}
	return nil
}

// AddLeaderboards adds the given related objects to the existing relationships
// of the team, optionally inserting them as new records.
// Appends related to o.R.Leaderboards.
// Sets related.R.Team appropriately.
func (o *Team) AddLeaderboards(exec boil.Executor, insert bool, related ...*Leaderboard) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TeamID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"leaderboards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
				strmangle.WhereClause("\"", "\"", 2, leaderboardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TeamID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &teamR{
			Leaderboards: related,
		}
	} else {
		o.R.Leaderboards = append(o.R.Leaderboards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &leaderboardR{
				Team: o,
			}
		} else {
			rel.R.Team = o
		}
	}
	return nil
}

// SetLeaderboards removes all previously related items of the
// team replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Team's Leaderboards accordingly.
// Replaces o.R.Leaderboards with related.
// Sets related.R.Team's Leaderboards accordingly.
func (o *Team) SetLeaderboards(exec boil.Executor, insert bool, related ...*Leaderboard) error {
	query := "update \"leaderboards\" set \"team_id\" = null where \"team_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Leaderboards {
			queries.SetScanner(&rel.TeamID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Team = nil
		}
		o.R.Leaderboards = nil
	}

	return o.AddLeaderboards(exec, insert, related...)
}

// RemoveLeaderboards relationships from objects passed in.
// Removes related items from R.Leaderboards (uses pointer comparison, removal does not keep order)
// Sets related.R.Team.
func (o *Team) RemoveLeaderboards(exec boil.Executor, related ...*Leaderboard) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TeamID, nil)
		if rel.R != nil {
			rel.R.Team = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("team_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Leaderboards {
			if rel != ri {
				continue
			}

			ln := len(o.R.Leaderboards)
			if ln > 1 && i < ln-1 {
				o.R.Leaderboards[i] = o.R.Leaderboards[ln-1]
			}
			o.R.Leaderboards = o.R.Leaderboards[:ln-1]
			break
		}
	}

	return nil
}

// AddMatchEvents adds the given related objects to the existing relationships
// of the team, optionally inserting them as new records.
// Appends related to o.R.MatchEvents.
// Sets related.R.Team appropriately.
func (o *Team) AddMatchEvents(exec boil.Executor, insert bool, related ...*MatchEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TeamID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"match_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TeamID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &teamR{
			MatchEvents: related,
		}
	} else {
		o.R.MatchEvents = append(o.R.MatchEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchEventR{
				Team: o,
			}
		} else {
			rel.R.Team = o
		}
	}
	return nil
}

// SetMatchEvents removes all previously related items of the
// team replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Team's MatchEvents accordingly.
// Replaces o.R.MatchEvents with related.
// Sets related.R.Team's MatchEvents accordingly.
func (o *Team) SetMatchEvents(exec boil.Executor, insert bool, related ...*MatchEvent) error {
	query := "update \"match_events\" set \"team_id\" = null where \"team_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.MatchEvents {
			queries.SetScanner(&rel.TeamID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Team = nil
		}
		o.R.MatchEvents = nil
	}

	return o.AddMatchEvents(exec, insert, related...)
}

// RemoveMatchEvents relationships from objects passed in.
// Removes related items from R.MatchEvents (uses pointer comparison, removal does not keep order)
// Sets related.R.Team.
func (o *Team) RemoveMatchEvents(exec boil.Executor, related ...*MatchEvent) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TeamID, nil)
		if rel.R != nil {
			rel.R.Team = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("team_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MatchEvents {
			if rel != ri {
				continue
			}

			ln := len(o.R.MatchEvents)
			if ln > 1 && i < ln-1 {
				o.R.MatchEvents[i] = o.R.MatchEvents[ln-1]
			}
			o.R.MatchEvents = o.R.MatchEvents[:ln-1]
			break
		}
	}

	return nil
}

// AddMatchPlayers adds the given related objects to the existing relationships
// of the team, optionally inserting them as new records.
// Appends related to o.R.MatchPlayers.
// Sets related.R.Team appropriately.
func (o *Team) AddMatchPlayers(exec boil.Executor, insert bool, related ...*MatchPlayer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TeamID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"match_players\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchPlayerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TeamID = o.ID
		}
	}

	if o.R == nil {
		o.R = &teamR{
			MatchPlayers: related,
		}
	} else {
		o.R.MatchPlayers = append(o.R.MatchPlayers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchPlayerR{
				Team: o,
			}
		} else {
			rel.R.Team = o
		}
	}
	return nil
}

// AddAwayTeamMatches adds the given related objects to the existing relationships
// of the team, optionally inserting them as new records.
// Appends related to o.R.AwayTeamMatches.
// Sets related.R.AwayTeam appropriately.
func (o *Team) AddAwayTeamMatches(exec boil.Executor, insert bool, related ...*Match) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AwayTeamID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"matches\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"away_team_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AwayTeamID = o.ID
		}
	}

	if o.R == nil {
		o.R = &teamR{
			AwayTeamMatches: related,
		}
	} else {
		o.R.AwayTeamMatches = append(o.R.AwayTeamMatches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchR{
				AwayTeam: o,
			}
		} else {
			rel.R.AwayTeam = o
		}
	}
	return nil
}

// AddHomeTeamMatches adds the given related objects to the existing relationships
// of the team, optionally inserting them as new records.
// Appends related to o.R.HomeTeamMatches.
// Sets related.R.HomeTeam appropriately.
func (o *Team) AddHomeTeamMatches(exec boil.Executor, insert bool, related ...*Match) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.HomeTeamID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"matches\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"home_team_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.HomeTeamID = o.ID
		}
	}

	if o.R == nil {
		o.R = &teamR{
			HomeTeamMatches: related,
		}
	} else {
		o.R.HomeTeamMatches = append(o.R.HomeTeamMatches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchR{
				HomeTeam: o,
			}
		} else {
			rel.R.HomeTeam = o
		}
	}
	return nil
}

// AddPlayerBuckets adds the given related objects to the existing relationships
// of the team, optionally inserting them as new records.
// Appends related to o.R.PlayerBuckets.
// Sets related.R.Team appropriately.
func (o *Team) AddPlayerBuckets(exec boil.Executor, insert bool, related ...*PlayerBucket) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TeamID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"player_bucket\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
				strmangle.WhereClause("\"", "\"", 2, playerBucketPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TeamID = o.ID
		}
	}

	if o.R == nil {
		o.R = &teamR{
			PlayerBuckets: related,
		}
	} else {
		o.R.PlayerBuckets = append(o.R.PlayerBuckets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerBucketR{
				Team: o,
			}
		} else {
			rel.R.Team = o
		}
	}
	return nil
}

// AddSeasonCompetitionMembers adds the given related objects to the existing relationships
// of the team, optionally inserting them as new records.
// Appends related to o.R.SeasonCompetitionMembers.
// Sets related.R.Team appropriately.
func (o *Team) AddSeasonCompetitionMembers(exec boil.Executor, insert bool, related ...*SeasonCompetitionMember) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TeamID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"season_competition_members\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
				strmangle.WhereClause("\"", "\"", 2, seasonCompetitionMemberPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TeamID = o.ID
		}
	}

	if o.R == nil {
		o.R = &teamR{
			SeasonCompetitionMembers: related,
		}
	} else {
		o.R.SeasonCompetitionMembers = append(o.R.SeasonCompetitionMembers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &seasonCompetitionMemberR{
				Team: o,
			}
		} else {
			rel.R.Team = o
		}
	}
	return nil
}

// AddSeasonTeamPlayers adds the given related objects to the existing relationships
// of the team, optionally inserting them as new records.
// Appends related to o.R.SeasonTeamPlayers.
// Sets related.R.Team appropriately.
func (o *Team) AddSeasonTeamPlayers(exec boil.Executor, insert bool, related ...*SeasonTeamPlayer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TeamID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"season_team_players\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
				strmangle.WhereClause("\"", "\"", 2, seasonTeamPlayerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TeamID = o.ID
		}
	}

	if o.R == nil {
		o.R = &teamR{
			SeasonTeamPlayers: related,
		}
	} else {
		o.R.SeasonTeamPlayers = append(o.R.SeasonTeamPlayers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &seasonTeamPlayerR{
				Team: o,
			}
		} else {
			rel.R.Team = o
		}
	}
	return nil
}

// Teams retrieves all the records using an executor.
func Teams(mods ...qm.QueryMod) teamQuery {
	mods = append(mods, qm.From("\"teams\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"teams\".*"})
	}

	return teamQuery{q}
}

// FindTeam retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTeam(exec boil.Executor, iD string, selectCols ...string) (*Team, error) {
	teamObj := &Team{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"teams\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, teamObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from teams")
	}

	return teamObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Team) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no teams provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(teamColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	teamInsertCacheMut.RLock()
	cache, cached := teamInsertCache[key]
	teamInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			teamAllColumns,
			teamColumnsWithDefault,
			teamColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(teamType, teamMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(teamType, teamMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"teams\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"teams\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into teams")
	}

	if !cached {
		teamInsertCacheMut.Lock()
		teamInsertCache[key] = cache
		teamInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Team.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Team) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	teamUpdateCacheMut.RLock()
	cache, cached := teamUpdateCache[key]
	teamUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			teamAllColumns,
			teamPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update teams, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"teams\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, teamPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(teamType, teamMapping, append(wl, teamPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update teams row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for teams")
	}

	if !cached {
		teamUpdateCacheMut.Lock()
		teamUpdateCache[key] = cache
		teamUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q teamQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for teams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for teams")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TeamSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"teams\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, teamPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in team slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all team")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Team) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no teams provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(teamColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	teamUpsertCacheMut.RLock()
	cache, cached := teamUpsertCache[key]
	teamUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			teamAllColumns,
			teamColumnsWithDefault,
			teamColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			teamAllColumns,
			teamPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert teams, could not build update column list")
		}

		ret := strmangle.SetComplement(teamAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(teamPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert teams, could not build conflict column list")
			}

			conflict = make([]string, len(teamPrimaryKeyColumns))
			copy(conflict, teamPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"teams\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(teamType, teamMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(teamType, teamMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert teams")
	}

	if !cached {
		teamUpsertCacheMut.Lock()
		teamUpsertCache[key] = cache
		teamUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Team record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Team) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no Team provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), teamPrimaryKeyMapping)
	sql := "DELETE FROM \"teams\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from teams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for teams")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q teamQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no teamQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from teams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for teams")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TeamSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"teams\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teamPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from team slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for teams")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Team) Reload(exec boil.Executor) error {
	ret, err := FindTeam(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TeamSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TeamSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"teams\".* FROM \"teams\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teamPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in TeamSlice")
	}

	*o = slice

	return nil
}

// TeamExists checks if the Team row exists.
func TeamExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"teams\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if teams exists")
	}

	return exists, nil
}

// Exists checks if the Team row exists.
func (o *Team) Exists(exec boil.Executor) (bool, error) {
	return TeamExists(exec, o.ID)
}
