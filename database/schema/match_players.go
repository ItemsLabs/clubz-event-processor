// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MatchPlayer is an object representing the database table.
type MatchPlayer struct {
	ID            string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt     time.Time    `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time    `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Position      null.String  `boil:"position" json:"position,omitempty" toml:"position" yaml:"position,omitempty"`
	JerseyNumber  null.Int     `boil:"jersey_number" json:"jersey_number,omitempty" toml:"jersey_number" yaml:"jersey_number,omitempty"`
	MatchID       string       `boil:"match_id" json:"match_id" toml:"match_id" yaml:"match_id"`
	PlayerID      string       `boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	TeamID        string       `boil:"team_id" json:"team_id" toml:"team_id" yaml:"team_id"`
	IsStar        bool         `boil:"is_star" json:"is_star" toml:"is_star" yaml:"is_star"`
	FromLineups   bool         `boil:"from_lineups" json:"from_lineups" toml:"from_lineups" yaml:"from_lineups"`
	Score         null.Float64 `boil:"score" json:"score,omitempty" toml:"score" yaml:"score,omitempty"`
	PlayedSeconds null.Int     `boil:"played_seconds" json:"played_seconds,omitempty" toml:"played_seconds" yaml:"played_seconds,omitempty"`
	AvgScore      null.Float64 `boil:"avg_score" json:"avg_score,omitempty" toml:"avg_score" yaml:"avg_score,omitempty"`

	R *matchPlayerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L matchPlayerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MatchPlayerColumns = struct {
	ID            string
	CreatedAt     string
	UpdatedAt     string
	Position      string
	JerseyNumber  string
	MatchID       string
	PlayerID      string
	TeamID        string
	IsStar        string
	FromLineups   string
	Score         string
	PlayedSeconds string
	AvgScore      string
}{
	ID:            "id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	Position:      "position",
	JerseyNumber:  "jersey_number",
	MatchID:       "match_id",
	PlayerID:      "player_id",
	TeamID:        "team_id",
	IsStar:        "is_star",
	FromLineups:   "from_lineups",
	Score:         "score",
	PlayedSeconds: "played_seconds",
	AvgScore:      "avg_score",
}

var MatchPlayerTableColumns = struct {
	ID            string
	CreatedAt     string
	UpdatedAt     string
	Position      string
	JerseyNumber  string
	MatchID       string
	PlayerID      string
	TeamID        string
	IsStar        string
	FromLineups   string
	Score         string
	PlayedSeconds string
	AvgScore      string
}{
	ID:            "match_players.id",
	CreatedAt:     "match_players.created_at",
	UpdatedAt:     "match_players.updated_at",
	Position:      "match_players.position",
	JerseyNumber:  "match_players.jersey_number",
	MatchID:       "match_players.match_id",
	PlayerID:      "match_players.player_id",
	TeamID:        "match_players.team_id",
	IsStar:        "match_players.is_star",
	FromLineups:   "match_players.from_lineups",
	Score:         "match_players.score",
	PlayedSeconds: "match_players.played_seconds",
	AvgScore:      "match_players.avg_score",
}

// Generated where

var MatchPlayerWhere = struct {
	ID            whereHelperstring
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	Position      whereHelpernull_String
	JerseyNumber  whereHelpernull_Int
	MatchID       whereHelperstring
	PlayerID      whereHelperstring
	TeamID        whereHelperstring
	IsStar        whereHelperbool
	FromLineups   whereHelperbool
	Score         whereHelpernull_Float64
	PlayedSeconds whereHelpernull_Int
	AvgScore      whereHelpernull_Float64
}{
	ID:            whereHelperstring{field: "\"match_players\".\"id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"match_players\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"match_players\".\"updated_at\""},
	Position:      whereHelpernull_String{field: "\"match_players\".\"position\""},
	JerseyNumber:  whereHelpernull_Int{field: "\"match_players\".\"jersey_number\""},
	MatchID:       whereHelperstring{field: "\"match_players\".\"match_id\""},
	PlayerID:      whereHelperstring{field: "\"match_players\".\"player_id\""},
	TeamID:        whereHelperstring{field: "\"match_players\".\"team_id\""},
	IsStar:        whereHelperbool{field: "\"match_players\".\"is_star\""},
	FromLineups:   whereHelperbool{field: "\"match_players\".\"from_lineups\""},
	Score:         whereHelpernull_Float64{field: "\"match_players\".\"score\""},
	PlayedSeconds: whereHelpernull_Int{field: "\"match_players\".\"played_seconds\""},
	AvgScore:      whereHelpernull_Float64{field: "\"match_players\".\"avg_score\""},
}

// MatchPlayerRels is where relationship names are stored.
var MatchPlayerRels = struct {
	Match  string
	Player string
	Team   string
}{
	Match:  "Match",
	Player: "Player",
	Team:   "Team",
}

// matchPlayerR is where relationships are stored.
type matchPlayerR struct {
	Match  *Match  `boil:"Match" json:"Match" toml:"Match" yaml:"Match"`
	Player *Player `boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
	Team   *Team   `boil:"Team" json:"Team" toml:"Team" yaml:"Team"`
}

// NewStruct creates a new relationship struct
func (*matchPlayerR) NewStruct() *matchPlayerR {
	return &matchPlayerR{}
}

func (r *matchPlayerR) GetMatch() *Match {
	if r == nil {
		return nil
	}
	return r.Match
}

func (r *matchPlayerR) GetPlayer() *Player {
	if r == nil {
		return nil
	}
	return r.Player
}

func (r *matchPlayerR) GetTeam() *Team {
	if r == nil {
		return nil
	}
	return r.Team
}

// matchPlayerL is where Load methods for each relationship are stored.
type matchPlayerL struct{}

var (
	matchPlayerAllColumns            = []string{"id", "created_at", "updated_at", "position", "jersey_number", "match_id", "player_id", "team_id", "is_star", "from_lineups", "score", "played_seconds", "avg_score"}
	matchPlayerColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "match_id", "player_id", "team_id", "is_star", "from_lineups"}
	matchPlayerColumnsWithDefault    = []string{"position", "jersey_number", "score", "played_seconds", "avg_score"}
	matchPlayerPrimaryKeyColumns     = []string{"id"}
	matchPlayerGeneratedColumns      = []string{}
)

type (
	// MatchPlayerSlice is an alias for a slice of pointers to MatchPlayer.
	// This should almost always be used instead of []MatchPlayer.
	MatchPlayerSlice []*MatchPlayer

	matchPlayerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	matchPlayerType                 = reflect.TypeOf(&MatchPlayer{})
	matchPlayerMapping              = queries.MakeStructMapping(matchPlayerType)
	matchPlayerPrimaryKeyMapping, _ = queries.BindMapping(matchPlayerType, matchPlayerMapping, matchPlayerPrimaryKeyColumns)
	matchPlayerInsertCacheMut       sync.RWMutex
	matchPlayerInsertCache          = make(map[string]insertCache)
	matchPlayerUpdateCacheMut       sync.RWMutex
	matchPlayerUpdateCache          = make(map[string]updateCache)
	matchPlayerUpsertCacheMut       sync.RWMutex
	matchPlayerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single matchPlayer record from the query.
func (q matchPlayerQuery) One(exec boil.Executor) (*MatchPlayer, error) {
	o := &MatchPlayer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for match_players")
	}

	return o, nil
}

// All returns all MatchPlayer records from the query.
func (q matchPlayerQuery) All(exec boil.Executor) (MatchPlayerSlice, error) {
	var o []*MatchPlayer

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to MatchPlayer slice")
	}

	return o, nil
}

// Count returns the count of all MatchPlayer records in the query.
func (q matchPlayerQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count match_players rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q matchPlayerQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if match_players exists")
	}

	return count > 0, nil
}

// Match pointed to by the foreign key.
func (o *MatchPlayer) Match(mods ...qm.QueryMod) matchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MatchID),
	}

	queryMods = append(queryMods, mods...)

	return Matches(queryMods...)
}

// Player pointed to by the foreign key.
func (o *MatchPlayer) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
	}

	queryMods = append(queryMods, mods...)

	return Players(queryMods...)
}

// Team pointed to by the foreign key.
func (o *MatchPlayer) Team(mods ...qm.QueryMod) teamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TeamID),
	}

	queryMods = append(queryMods, mods...)

	return Teams(queryMods...)
}

// LoadMatch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchPlayerL) LoadMatch(e boil.Executor, singular bool, maybeMatchPlayer interface{}, mods queries.Applicator) error {
	var slice []*MatchPlayer
	var object *MatchPlayer

	if singular {
		var ok bool
		object, ok = maybeMatchPlayer.(*MatchPlayer)
		if !ok {
			object = new(MatchPlayer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchPlayer))
			}
		}
	} else {
		s, ok := maybeMatchPlayer.(*[]*MatchPlayer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchPlayer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchPlayerR{}
		}
		args[object.MatchID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchPlayerR{}
			}

			args[obj.MatchID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Match")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Match")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Match = foreign
		if foreign.R == nil {
			foreign.R = &matchR{}
		}
		foreign.R.MatchPlayers = append(foreign.R.MatchPlayers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MatchID == foreign.ID {
				local.R.Match = foreign
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.MatchPlayers = append(foreign.R.MatchPlayers, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchPlayerL) LoadPlayer(e boil.Executor, singular bool, maybeMatchPlayer interface{}, mods queries.Applicator) error {
	var slice []*MatchPlayer
	var object *MatchPlayer

	if singular {
		var ok bool
		object, ok = maybeMatchPlayer.(*MatchPlayer)
		if !ok {
			object = new(MatchPlayer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchPlayer))
			}
		}
	} else {
		s, ok := maybeMatchPlayer.(*[]*MatchPlayer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchPlayer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchPlayerR{}
		}
		args[object.PlayerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchPlayerR{}
			}

			args[obj.PlayerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.MatchPlayers = append(foreign.R.MatchPlayers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.MatchPlayers = append(foreign.R.MatchPlayers, local)
				break
			}
		}
	}

	return nil
}

// LoadTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchPlayerL) LoadTeam(e boil.Executor, singular bool, maybeMatchPlayer interface{}, mods queries.Applicator) error {
	var slice []*MatchPlayer
	var object *MatchPlayer

	if singular {
		var ok bool
		object, ok = maybeMatchPlayer.(*MatchPlayer)
		if !ok {
			object = new(MatchPlayer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchPlayer))
			}
		}
	} else {
		s, ok := maybeMatchPlayer.(*[]*MatchPlayer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchPlayer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchPlayerR{}
		}
		args[object.TeamID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchPlayerR{}
			}

			args[obj.TeamID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`teams`),
		qm.WhereIn(`teams.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for teams")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Team = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.MatchPlayers = append(foreign.R.MatchPlayers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TeamID == foreign.ID {
				local.R.Team = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.MatchPlayers = append(foreign.R.MatchPlayers, local)
				break
			}
		}
	}

	return nil
}

// SetMatch of the matchPlayer to the related item.
// Sets o.R.Match to related.
// Adds o to related.R.MatchPlayers.
func (o *MatchPlayer) SetMatch(exec boil.Executor, insert bool, related *Match) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match_players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"match_id"}),
		strmangle.WhereClause("\"", "\"", 2, matchPlayerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MatchID = related.ID
	if o.R == nil {
		o.R = &matchPlayerR{
			Match: related,
		}
	} else {
		o.R.Match = related
	}

	if related.R == nil {
		related.R = &matchR{
			MatchPlayers: MatchPlayerSlice{o},
		}
	} else {
		related.R.MatchPlayers = append(related.R.MatchPlayers, o)
	}

	return nil
}

// SetPlayer of the matchPlayer to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.MatchPlayers.
func (o *MatchPlayer) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match_players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, matchPlayerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &matchPlayerR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			MatchPlayers: MatchPlayerSlice{o},
		}
	} else {
		related.R.MatchPlayers = append(related.R.MatchPlayers, o)
	}

	return nil
}

// SetTeam of the matchPlayer to the related item.
// Sets o.R.Team to related.
// Adds o to related.R.MatchPlayers.
func (o *MatchPlayer) SetTeam(exec boil.Executor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match_players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
		strmangle.WhereClause("\"", "\"", 2, matchPlayerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TeamID = related.ID
	if o.R == nil {
		o.R = &matchPlayerR{
			Team: related,
		}
	} else {
		o.R.Team = related
	}

	if related.R == nil {
		related.R = &teamR{
			MatchPlayers: MatchPlayerSlice{o},
		}
	} else {
		related.R.MatchPlayers = append(related.R.MatchPlayers, o)
	}

	return nil
}

// MatchPlayers retrieves all the records using an executor.
func MatchPlayers(mods ...qm.QueryMod) matchPlayerQuery {
	mods = append(mods, qm.From("\"match_players\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"match_players\".*"})
	}

	return matchPlayerQuery{q}
}

// FindMatchPlayer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMatchPlayer(exec boil.Executor, iD string, selectCols ...string) (*MatchPlayer, error) {
	matchPlayerObj := &MatchPlayer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"match_players\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, matchPlayerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from match_players")
	}

	return matchPlayerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MatchPlayer) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no match_players provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(matchPlayerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	matchPlayerInsertCacheMut.RLock()
	cache, cached := matchPlayerInsertCache[key]
	matchPlayerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			matchPlayerAllColumns,
			matchPlayerColumnsWithDefault,
			matchPlayerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(matchPlayerType, matchPlayerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(matchPlayerType, matchPlayerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"match_players\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"match_players\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into match_players")
	}

	if !cached {
		matchPlayerInsertCacheMut.Lock()
		matchPlayerInsertCache[key] = cache
		matchPlayerInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the MatchPlayer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MatchPlayer) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	matchPlayerUpdateCacheMut.RLock()
	cache, cached := matchPlayerUpdateCache[key]
	matchPlayerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			matchPlayerAllColumns,
			matchPlayerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update match_players, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"match_players\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, matchPlayerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(matchPlayerType, matchPlayerMapping, append(wl, matchPlayerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update match_players row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for match_players")
	}

	if !cached {
		matchPlayerUpdateCacheMut.Lock()
		matchPlayerUpdateCache[key] = cache
		matchPlayerUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q matchPlayerQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for match_players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for match_players")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MatchPlayerSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"match_players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, matchPlayerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in matchPlayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all matchPlayer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MatchPlayer) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no match_players provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(matchPlayerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	matchPlayerUpsertCacheMut.RLock()
	cache, cached := matchPlayerUpsertCache[key]
	matchPlayerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			matchPlayerAllColumns,
			matchPlayerColumnsWithDefault,
			matchPlayerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			matchPlayerAllColumns,
			matchPlayerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert match_players, could not build update column list")
		}

		ret := strmangle.SetComplement(matchPlayerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(matchPlayerPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert match_players, could not build conflict column list")
			}

			conflict = make([]string, len(matchPlayerPrimaryKeyColumns))
			copy(conflict, matchPlayerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"match_players\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(matchPlayerType, matchPlayerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(matchPlayerType, matchPlayerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert match_players")
	}

	if !cached {
		matchPlayerUpsertCacheMut.Lock()
		matchPlayerUpsertCache[key] = cache
		matchPlayerUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single MatchPlayer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MatchPlayer) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no MatchPlayer provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), matchPlayerPrimaryKeyMapping)
	sql := "DELETE FROM \"match_players\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from match_players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for match_players")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q matchPlayerQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no matchPlayerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from match_players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for match_players")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MatchPlayerSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"match_players\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, matchPlayerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from matchPlayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for match_players")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MatchPlayer) Reload(exec boil.Executor) error {
	ret, err := FindMatchPlayer(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MatchPlayerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MatchPlayerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"match_players\".* FROM \"match_players\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, matchPlayerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in MatchPlayerSlice")
	}

	*o = slice

	return nil
}

// MatchPlayerExists checks if the MatchPlayer row exists.
func MatchPlayerExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"match_players\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if match_players exists")
	}

	return exists, nil
}

// Exists checks if the MatchPlayer row exists.
func (o *MatchPlayer) Exists(exec boil.Executor) (bool, error) {
	return MatchPlayerExists(exec, o.ID)
}
