// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGameEvents(t *testing.T) {
	t.Parallel()

	query := GameEvents()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGameEventsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameEvent{}
	if err = randomize.Struct(seed, o, gameEventDBTypes, true, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GameEvents().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGameEventsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameEvent{}
	if err = randomize.Struct(seed, o, gameEventDBTypes, true, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GameEvents().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GameEvents().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGameEventsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameEvent{}
	if err = randomize.Struct(seed, o, gameEventDBTypes, true, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GameEventSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GameEvents().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGameEventsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameEvent{}
	if err = randomize.Struct(seed, o, gameEventDBTypes, true, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GameEventExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if GameEvent exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GameEventExists to return true, but got false.")
	}
}

func testGameEventsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameEvent{}
	if err = randomize.Struct(seed, o, gameEventDBTypes, true, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	gameEventFound, err := FindGameEvent(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if gameEventFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGameEventsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameEvent{}
	if err = randomize.Struct(seed, o, gameEventDBTypes, true, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GameEvents().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testGameEventsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameEvent{}
	if err = randomize.Struct(seed, o, gameEventDBTypes, true, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GameEvents().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGameEventsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gameEventOne := &GameEvent{}
	gameEventTwo := &GameEvent{}
	if err = randomize.Struct(seed, gameEventOne, gameEventDBTypes, false, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}
	if err = randomize.Struct(seed, gameEventTwo, gameEventDBTypes, false, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = gameEventOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gameEventTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GameEvents().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGameEventsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	gameEventOne := &GameEvent{}
	gameEventTwo := &GameEvent{}
	if err = randomize.Struct(seed, gameEventOne, gameEventDBTypes, false, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}
	if err = randomize.Struct(seed, gameEventTwo, gameEventDBTypes, false, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = gameEventOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gameEventTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GameEvents().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testGameEventsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameEvent{}
	if err = randomize.Struct(seed, o, gameEventDBTypes, true, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GameEvents().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGameEventsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameEvent{}
	if err = randomize.Struct(seed, o, gameEventDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(gameEventColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GameEvents().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGameEventToOneGameUsingGame(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local GameEvent
	var foreign Game

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gameEventDBTypes, false, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, gameDBTypes, false, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GameID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Game().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GameEventSlice{&local}
	if err = local.L.LoadGame(tx, false, (*[]*GameEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Game == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Game = nil
	if err = local.L.LoadGame(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Game == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testGameEventToOneGamePickUsingGamePick(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local GameEvent
	var foreign GamePick

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gameEventDBTypes, false, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, gamePickDBTypes, false, gamePickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePick struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GamePickID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.GamePick().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GameEventSlice{&local}
	if err = local.L.LoadGamePick(tx, false, (*[]*GameEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.GamePick == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.GamePick = nil
	if err = local.L.LoadGamePick(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.GamePick == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testGameEventToOneMatchEventUsingMatchEvent(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local GameEvent
	var foreign MatchEvent

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gameEventDBTypes, true, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, matchEventDBTypes, false, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.MatchEventID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.MatchEvent().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GameEventSlice{&local}
	if err = local.L.LoadMatchEvent(tx, false, (*[]*GameEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MatchEvent == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.MatchEvent = nil
	if err = local.L.LoadMatchEvent(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MatchEvent == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testGameEventToOnePlayerUsingPlayer(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local GameEvent
	var foreign Player

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gameEventDBTypes, false, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PlayerID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Player().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GameEventSlice{&local}
	if err = local.L.LoadPlayer(tx, false, (*[]*GameEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Player == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Player = nil
	if err = local.L.LoadPlayer(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Player == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testGameEventToOneGamePowerupUsingPowerup(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local GameEvent
	var foreign GamePowerup

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gameEventDBTypes, true, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, gamePowerupDBTypes, false, gamePowerupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GamePowerup struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PowerupID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Powerup().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GameEventSlice{&local}
	if err = local.L.LoadPowerup(tx, false, (*[]*GameEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Powerup == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Powerup = nil
	if err = local.L.LoadPowerup(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Powerup == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testGameEventToOneTeamUsingTeam(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local GameEvent
	var foreign Team

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gameEventDBTypes, false, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TeamID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Team().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GameEventSlice{&local}
	if err = local.L.LoadTeam(tx, false, (*[]*GameEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Team = nil
	if err = local.L.LoadTeam(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testGameEventToOneSetOpGameUsingGame(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameEvent
	var b, c Game

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameEventDBTypes, false, strmangle.SetComplement(gameEventPrimaryKeyColumns, gameEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Game{&b, &c} {
		err = a.SetGame(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Game != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GameEvents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GameID != x.ID {
			t.Error("foreign key was wrong value", a.GameID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GameID))
		reflect.Indirect(reflect.ValueOf(&a.GameID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GameID != x.ID {
			t.Error("foreign key was wrong value", a.GameID, x.ID)
		}
	}
}
func testGameEventToOneSetOpGamePickUsingGamePick(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameEvent
	var b, c GamePick

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameEventDBTypes, false, strmangle.SetComplement(gameEventPrimaryKeyColumns, gameEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gamePickDBTypes, false, strmangle.SetComplement(gamePickPrimaryKeyColumns, gamePickColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gamePickDBTypes, false, strmangle.SetComplement(gamePickPrimaryKeyColumns, gamePickColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*GamePick{&b, &c} {
		err = a.SetGamePick(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.GamePick != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GameEvents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GamePickID != x.ID {
			t.Error("foreign key was wrong value", a.GamePickID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GamePickID))
		reflect.Indirect(reflect.ValueOf(&a.GamePickID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GamePickID != x.ID {
			t.Error("foreign key was wrong value", a.GamePickID, x.ID)
		}
	}
}
func testGameEventToOneSetOpMatchEventUsingMatchEvent(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameEvent
	var b, c MatchEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameEventDBTypes, false, strmangle.SetComplement(gameEventPrimaryKeyColumns, gameEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MatchEvent{&b, &c} {
		err = a.SetMatchEvent(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.MatchEvent != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GameEvents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.MatchEventID, x.ID) {
			t.Error("foreign key was wrong value", a.MatchEventID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MatchEventID))
		reflect.Indirect(reflect.ValueOf(&a.MatchEventID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.MatchEventID, x.ID) {
			t.Error("foreign key was wrong value", a.MatchEventID, x.ID)
		}
	}
}

func testGameEventToOneRemoveOpMatchEventUsingMatchEvent(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameEvent
	var b MatchEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameEventDBTypes, false, strmangle.SetComplement(gameEventPrimaryKeyColumns, gameEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetMatchEvent(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveMatchEvent(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.MatchEvent().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.MatchEvent != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.MatchEventID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.GameEvents) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testGameEventToOneSetOpPlayerUsingPlayer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameEvent
	var b, c Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameEventDBTypes, false, strmangle.SetComplement(gameEventPrimaryKeyColumns, gameEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Player{&b, &c} {
		err = a.SetPlayer(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Player != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GameEvents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PlayerID != x.ID {
			t.Error("foreign key was wrong value", a.PlayerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PlayerID))
		reflect.Indirect(reflect.ValueOf(&a.PlayerID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PlayerID != x.ID {
			t.Error("foreign key was wrong value", a.PlayerID, x.ID)
		}
	}
}
func testGameEventToOneSetOpGamePowerupUsingPowerup(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameEvent
	var b, c GamePowerup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameEventDBTypes, false, strmangle.SetComplement(gameEventPrimaryKeyColumns, gameEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gamePowerupDBTypes, false, strmangle.SetComplement(gamePowerupPrimaryKeyColumns, gamePowerupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gamePowerupDBTypes, false, strmangle.SetComplement(gamePowerupPrimaryKeyColumns, gamePowerupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*GamePowerup{&b, &c} {
		err = a.SetPowerup(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Powerup != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PowerupGameEvents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PowerupID, x.ID) {
			t.Error("foreign key was wrong value", a.PowerupID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PowerupID))
		reflect.Indirect(reflect.ValueOf(&a.PowerupID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PowerupID, x.ID) {
			t.Error("foreign key was wrong value", a.PowerupID, x.ID)
		}
	}
}

func testGameEventToOneRemoveOpGamePowerupUsingPowerup(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameEvent
	var b GamePowerup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameEventDBTypes, false, strmangle.SetComplement(gameEventPrimaryKeyColumns, gameEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gamePowerupDBTypes, false, strmangle.SetComplement(gamePowerupPrimaryKeyColumns, gamePowerupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPowerup(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePowerup(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Powerup().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Powerup != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PowerupID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PowerupGameEvents) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testGameEventToOneSetOpTeamUsingTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a GameEvent
	var b, c Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameEventDBTypes, false, strmangle.SetComplement(gameEventPrimaryKeyColumns, gameEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Team{&b, &c} {
		err = a.SetTeam(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Team != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GameEvents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TeamID != x.ID {
			t.Error("foreign key was wrong value", a.TeamID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TeamID))
		reflect.Indirect(reflect.ValueOf(&a.TeamID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TeamID != x.ID {
			t.Error("foreign key was wrong value", a.TeamID, x.ID)
		}
	}
}

func testGameEventsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameEvent{}
	if err = randomize.Struct(seed, o, gameEventDBTypes, true, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testGameEventsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameEvent{}
	if err = randomize.Struct(seed, o, gameEventDBTypes, true, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GameEventSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testGameEventsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameEvent{}
	if err = randomize.Struct(seed, o, gameEventDBTypes, true, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GameEvents().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	gameEventDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `Minute`: `integer`, `Second`: `integer`, `Type`: `integer`, `Score`: `double precision`, `GameID`: `uuid`, `GamePickID`: `uuid`, `PlayerID`: `uuid`, `TeamID`: `uuid`, `InitialScore`: `double precision`, `PowerupID`: `uuid`, `MatchEventID`: `integer`, `BoostMultiplier`: `double precision`, `NFTImage`: `text`, `NFTMultiplier`: `double precision`}
	_                = bytes.MinRead
)

func testGameEventsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(gameEventPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(gameEventAllColumns) == len(gameEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GameEvent{}
	if err = randomize.Struct(seed, o, gameEventDBTypes, true, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GameEvents().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gameEventDBTypes, true, gameEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGameEventsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(gameEventAllColumns) == len(gameEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GameEvent{}
	if err = randomize.Struct(seed, o, gameEventDBTypes, true, gameEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GameEvents().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gameEventDBTypes, true, gameEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(gameEventAllColumns, gameEventPrimaryKeyColumns) {
		fields = gameEventAllColumns
	} else {
		fields = strmangle.SetComplement(
			gameEventAllColumns,
			gameEventPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GameEventSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGameEventsUpsert(t *testing.T) {
	t.Parallel()

	if len(gameEventAllColumns) == len(gameEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GameEvent{}
	if err = randomize.Struct(seed, &o, gameEventDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GameEvent: %s", err)
	}

	count, err := GameEvents().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, gameEventDBTypes, false, gameEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GameEvent struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GameEvent: %s", err)
	}

	count, err = GameEvents().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
