// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Reward is an object representing the database table.
type Reward struct {
	ID           string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Name         string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Credits      float64   `boil:"credits" json:"credits" toml:"credits" yaml:"credits"`
	GameToken    float64   `boil:"game_token" json:"game_token" toml:"game_token" yaml:"game_token"`
	LaptToken    float64   `boil:"lapt_token" json:"lapt_token" toml:"lapt_token" yaml:"lapt_token"`
	EventTickets int       `boil:"event_tickets" json:"event_tickets" toml:"event_tickets" yaml:"event_tickets"`
	Ball         int       `boil:"ball" json:"ball" toml:"ball" yaml:"ball"`
	SignedBall   int       `boil:"signed_ball" json:"signed_ball" toml:"signed_ball" yaml:"signed_ball"`
	Shirt        int       `boil:"shirt" json:"shirt" toml:"shirt" yaml:"shirt"`
	SignedShirt  int       `boil:"signed_shirt" json:"signed_shirt" toml:"signed_shirt" yaml:"signed_shirt"`
	KickoffPack1 int       `boil:"kickoff_pack_1" json:"kickoff_pack_1" toml:"kickoff_pack_1" yaml:"kickoff_pack_1"`
	KickoffPack2 int       `boil:"kickoff_pack_2" json:"kickoff_pack_2" toml:"kickoff_pack_2" yaml:"kickoff_pack_2"`
	KickoffPack3 int       `boil:"kickoff_pack_3" json:"kickoff_pack_3" toml:"kickoff_pack_3" yaml:"kickoff_pack_3"`
	SeasonPack1  int       `boil:"season_pack_1" json:"season_pack_1" toml:"season_pack_1" yaml:"season_pack_1"`
	SeasonPack2  int       `boil:"season_pack_2" json:"season_pack_2" toml:"season_pack_2" yaml:"season_pack_2"`
	SeasonPack3  int       `boil:"season_pack_3" json:"season_pack_3" toml:"season_pack_3" yaml:"season_pack_3"`

	R *rewardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rewardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RewardColumns = struct {
	ID           string
	CreatedAt    string
	UpdatedAt    string
	Name         string
	Credits      string
	GameToken    string
	LaptToken    string
	EventTickets string
	Ball         string
	SignedBall   string
	Shirt        string
	SignedShirt  string
	KickoffPack1 string
	KickoffPack2 string
	KickoffPack3 string
	SeasonPack1  string
	SeasonPack2  string
	SeasonPack3  string
}{
	ID:           "id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	Name:         "name",
	Credits:      "credits",
	GameToken:    "game_token",
	LaptToken:    "lapt_token",
	EventTickets: "event_tickets",
	Ball:         "ball",
	SignedBall:   "signed_ball",
	Shirt:        "shirt",
	SignedShirt:  "signed_shirt",
	KickoffPack1: "kickoff_pack_1",
	KickoffPack2: "kickoff_pack_2",
	KickoffPack3: "kickoff_pack_3",
	SeasonPack1:  "season_pack_1",
	SeasonPack2:  "season_pack_2",
	SeasonPack3:  "season_pack_3",
}

var RewardTableColumns = struct {
	ID           string
	CreatedAt    string
	UpdatedAt    string
	Name         string
	Credits      string
	GameToken    string
	LaptToken    string
	EventTickets string
	Ball         string
	SignedBall   string
	Shirt        string
	SignedShirt  string
	KickoffPack1 string
	KickoffPack2 string
	KickoffPack3 string
	SeasonPack1  string
	SeasonPack2  string
	SeasonPack3  string
}{
	ID:           "rewards.id",
	CreatedAt:    "rewards.created_at",
	UpdatedAt:    "rewards.updated_at",
	Name:         "rewards.name",
	Credits:      "rewards.credits",
	GameToken:    "rewards.game_token",
	LaptToken:    "rewards.lapt_token",
	EventTickets: "rewards.event_tickets",
	Ball:         "rewards.ball",
	SignedBall:   "rewards.signed_ball",
	Shirt:        "rewards.shirt",
	SignedShirt:  "rewards.signed_shirt",
	KickoffPack1: "rewards.kickoff_pack_1",
	KickoffPack2: "rewards.kickoff_pack_2",
	KickoffPack3: "rewards.kickoff_pack_3",
	SeasonPack1:  "rewards.season_pack_1",
	SeasonPack2:  "rewards.season_pack_2",
	SeasonPack3:  "rewards.season_pack_3",
}

// Generated where

var RewardWhere = struct {
	ID           whereHelperstring
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	Name         whereHelperstring
	Credits      whereHelperfloat64
	GameToken    whereHelperfloat64
	LaptToken    whereHelperfloat64
	EventTickets whereHelperint
	Ball         whereHelperint
	SignedBall   whereHelperint
	Shirt        whereHelperint
	SignedShirt  whereHelperint
	KickoffPack1 whereHelperint
	KickoffPack2 whereHelperint
	KickoffPack3 whereHelperint
	SeasonPack1  whereHelperint
	SeasonPack2  whereHelperint
	SeasonPack3  whereHelperint
}{
	ID:           whereHelperstring{field: "\"rewards\".\"id\""},
	CreatedAt:    whereHelpertime_Time{field: "\"rewards\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"rewards\".\"updated_at\""},
	Name:         whereHelperstring{field: "\"rewards\".\"name\""},
	Credits:      whereHelperfloat64{field: "\"rewards\".\"credits\""},
	GameToken:    whereHelperfloat64{field: "\"rewards\".\"game_token\""},
	LaptToken:    whereHelperfloat64{field: "\"rewards\".\"lapt_token\""},
	EventTickets: whereHelperint{field: "\"rewards\".\"event_tickets\""},
	Ball:         whereHelperint{field: "\"rewards\".\"ball\""},
	SignedBall:   whereHelperint{field: "\"rewards\".\"signed_ball\""},
	Shirt:        whereHelperint{field: "\"rewards\".\"shirt\""},
	SignedShirt:  whereHelperint{field: "\"rewards\".\"signed_shirt\""},
	KickoffPack1: whereHelperint{field: "\"rewards\".\"kickoff_pack_1\""},
	KickoffPack2: whereHelperint{field: "\"rewards\".\"kickoff_pack_2\""},
	KickoffPack3: whereHelperint{field: "\"rewards\".\"kickoff_pack_3\""},
	SeasonPack1:  whereHelperint{field: "\"rewards\".\"season_pack_1\""},
	SeasonPack2:  whereHelperint{field: "\"rewards\".\"season_pack_2\""},
	SeasonPack3:  whereHelperint{field: "\"rewards\".\"season_pack_3\""},
}

// RewardRels is where relationship names are stored.
var RewardRels = struct {
	AppInboxes      string
	DivisionRewards string
}{
	AppInboxes:      "AppInboxes",
	DivisionRewards: "DivisionRewards",
}

// rewardR is where relationships are stored.
type rewardR struct {
	AppInboxes      AppInboxSlice       `boil:"AppInboxes" json:"AppInboxes" toml:"AppInboxes" yaml:"AppInboxes"`
	DivisionRewards DivisionRewardSlice `boil:"DivisionRewards" json:"DivisionRewards" toml:"DivisionRewards" yaml:"DivisionRewards"`
}

// NewStruct creates a new relationship struct
func (*rewardR) NewStruct() *rewardR {
	return &rewardR{}
}

func (r *rewardR) GetAppInboxes() AppInboxSlice {
	if r == nil {
		return nil
	}
	return r.AppInboxes
}

func (r *rewardR) GetDivisionRewards() DivisionRewardSlice {
	if r == nil {
		return nil
	}
	return r.DivisionRewards
}

// rewardL is where Load methods for each relationship are stored.
type rewardL struct{}

var (
	rewardAllColumns            = []string{"id", "created_at", "updated_at", "name", "credits", "game_token", "lapt_token", "event_tickets", "ball", "signed_ball", "shirt", "signed_shirt", "kickoff_pack_1", "kickoff_pack_2", "kickoff_pack_3", "season_pack_1", "season_pack_2", "season_pack_3"}
	rewardColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "name", "credits", "game_token", "lapt_token", "event_tickets", "ball", "signed_ball", "shirt", "signed_shirt", "kickoff_pack_1", "kickoff_pack_2", "kickoff_pack_3", "season_pack_1", "season_pack_2", "season_pack_3"}
	rewardColumnsWithDefault    = []string{}
	rewardPrimaryKeyColumns     = []string{"id"}
	rewardGeneratedColumns      = []string{}
)

type (
	// RewardSlice is an alias for a slice of pointers to Reward.
	// This should almost always be used instead of []Reward.
	RewardSlice []*Reward

	rewardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rewardType                 = reflect.TypeOf(&Reward{})
	rewardMapping              = queries.MakeStructMapping(rewardType)
	rewardPrimaryKeyMapping, _ = queries.BindMapping(rewardType, rewardMapping, rewardPrimaryKeyColumns)
	rewardInsertCacheMut       sync.RWMutex
	rewardInsertCache          = make(map[string]insertCache)
	rewardUpdateCacheMut       sync.RWMutex
	rewardUpdateCache          = make(map[string]updateCache)
	rewardUpsertCacheMut       sync.RWMutex
	rewardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single reward record from the query.
func (q rewardQuery) One(exec boil.Executor) (*Reward, error) {
	o := &Reward{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for rewards")
	}

	return o, nil
}

// All returns all Reward records from the query.
func (q rewardQuery) All(exec boil.Executor) (RewardSlice, error) {
	var o []*Reward

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to Reward slice")
	}

	return o, nil
}

// Count returns the count of all Reward records in the query.
func (q rewardQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count rewards rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q rewardQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if rewards exists")
	}

	return count > 0, nil
}

// AppInboxes retrieves all the app_inbox's AppInboxes with an executor.
func (o *Reward) AppInboxes(mods ...qm.QueryMod) appInboxQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"app_inbox\".\"reward_id\"=?", o.ID),
	)

	return AppInboxes(queryMods...)
}

// DivisionRewards retrieves all the division_reward's DivisionRewards with an executor.
func (o *Reward) DivisionRewards(mods ...qm.QueryMod) divisionRewardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"division_rewards\".\"reward_id\"=?", o.ID),
	)

	return DivisionRewards(queryMods...)
}

// LoadAppInboxes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (rewardL) LoadAppInboxes(e boil.Executor, singular bool, maybeReward interface{}, mods queries.Applicator) error {
	var slice []*Reward
	var object *Reward

	if singular {
		var ok bool
		object, ok = maybeReward.(*Reward)
		if !ok {
			object = new(Reward)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReward))
			}
		}
	} else {
		s, ok := maybeReward.(*[]*Reward)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReward))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &rewardR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rewardR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`app_inbox`),
		qm.WhereIn(`app_inbox.reward_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load app_inbox")
	}

	var resultSlice []*AppInbox
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice app_inbox")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on app_inbox")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for app_inbox")
	}

	if singular {
		object.R.AppInboxes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &appInboxR{}
			}
			foreign.R.Reward = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RewardID) {
				local.R.AppInboxes = append(local.R.AppInboxes, foreign)
				if foreign.R == nil {
					foreign.R = &appInboxR{}
				}
				foreign.R.Reward = local
				break
			}
		}
	}

	return nil
}

// LoadDivisionRewards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (rewardL) LoadDivisionRewards(e boil.Executor, singular bool, maybeReward interface{}, mods queries.Applicator) error {
	var slice []*Reward
	var object *Reward

	if singular {
		var ok bool
		object, ok = maybeReward.(*Reward)
		if !ok {
			object = new(Reward)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReward))
			}
		}
	} else {
		s, ok := maybeReward.(*[]*Reward)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReward))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &rewardR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rewardR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`division_rewards`),
		qm.WhereIn(`division_rewards.reward_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load division_rewards")
	}

	var resultSlice []*DivisionReward
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice division_rewards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on division_rewards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for division_rewards")
	}

	if singular {
		object.R.DivisionRewards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &divisionRewardR{}
			}
			foreign.R.Reward = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RewardID) {
				local.R.DivisionRewards = append(local.R.DivisionRewards, foreign)
				if foreign.R == nil {
					foreign.R = &divisionRewardR{}
				}
				foreign.R.Reward = local
				break
			}
		}
	}

	return nil
}

// AddAppInboxes adds the given related objects to the existing relationships
// of the reward, optionally inserting them as new records.
// Appends related to o.R.AppInboxes.
// Sets related.R.Reward appropriately.
func (o *Reward) AddAppInboxes(exec boil.Executor, insert bool, related ...*AppInbox) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RewardID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"app_inbox\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"reward_id"}),
				strmangle.WhereClause("\"", "\"", 2, appInboxPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RewardID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &rewardR{
			AppInboxes: related,
		}
	} else {
		o.R.AppInboxes = append(o.R.AppInboxes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &appInboxR{
				Reward: o,
			}
		} else {
			rel.R.Reward = o
		}
	}
	return nil
}

// SetAppInboxes removes all previously related items of the
// reward replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Reward's AppInboxes accordingly.
// Replaces o.R.AppInboxes with related.
// Sets related.R.Reward's AppInboxes accordingly.
func (o *Reward) SetAppInboxes(exec boil.Executor, insert bool, related ...*AppInbox) error {
	query := "update \"app_inbox\" set \"reward_id\" = null where \"reward_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AppInboxes {
			queries.SetScanner(&rel.RewardID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Reward = nil
		}
		o.R.AppInboxes = nil
	}

	return o.AddAppInboxes(exec, insert, related...)
}

// RemoveAppInboxes relationships from objects passed in.
// Removes related items from R.AppInboxes (uses pointer comparison, removal does not keep order)
// Sets related.R.Reward.
func (o *Reward) RemoveAppInboxes(exec boil.Executor, related ...*AppInbox) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RewardID, nil)
		if rel.R != nil {
			rel.R.Reward = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("reward_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AppInboxes {
			if rel != ri {
				continue
			}

			ln := len(o.R.AppInboxes)
			if ln > 1 && i < ln-1 {
				o.R.AppInboxes[i] = o.R.AppInboxes[ln-1]
			}
			o.R.AppInboxes = o.R.AppInboxes[:ln-1]
			break
		}
	}

	return nil
}

// AddDivisionRewards adds the given related objects to the existing relationships
// of the reward, optionally inserting them as new records.
// Appends related to o.R.DivisionRewards.
// Sets related.R.Reward appropriately.
func (o *Reward) AddDivisionRewards(exec boil.Executor, insert bool, related ...*DivisionReward) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RewardID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"division_rewards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"reward_id"}),
				strmangle.WhereClause("\"", "\"", 2, divisionRewardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RewardID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &rewardR{
			DivisionRewards: related,
		}
	} else {
		o.R.DivisionRewards = append(o.R.DivisionRewards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &divisionRewardR{
				Reward: o,
			}
		} else {
			rel.R.Reward = o
		}
	}
	return nil
}

// SetDivisionRewards removes all previously related items of the
// reward replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Reward's DivisionRewards accordingly.
// Replaces o.R.DivisionRewards with related.
// Sets related.R.Reward's DivisionRewards accordingly.
func (o *Reward) SetDivisionRewards(exec boil.Executor, insert bool, related ...*DivisionReward) error {
	query := "update \"division_rewards\" set \"reward_id\" = null where \"reward_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DivisionRewards {
			queries.SetScanner(&rel.RewardID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Reward = nil
		}
		o.R.DivisionRewards = nil
	}

	return o.AddDivisionRewards(exec, insert, related...)
}

// RemoveDivisionRewards relationships from objects passed in.
// Removes related items from R.DivisionRewards (uses pointer comparison, removal does not keep order)
// Sets related.R.Reward.
func (o *Reward) RemoveDivisionRewards(exec boil.Executor, related ...*DivisionReward) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RewardID, nil)
		if rel.R != nil {
			rel.R.Reward = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("reward_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DivisionRewards {
			if rel != ri {
				continue
			}

			ln := len(o.R.DivisionRewards)
			if ln > 1 && i < ln-1 {
				o.R.DivisionRewards[i] = o.R.DivisionRewards[ln-1]
			}
			o.R.DivisionRewards = o.R.DivisionRewards[:ln-1]
			break
		}
	}

	return nil
}

// Rewards retrieves all the records using an executor.
func Rewards(mods ...qm.QueryMod) rewardQuery {
	mods = append(mods, qm.From("\"rewards\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"rewards\".*"})
	}

	return rewardQuery{q}
}

// FindReward retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReward(exec boil.Executor, iD string, selectCols ...string) (*Reward, error) {
	rewardObj := &Reward{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rewards\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, rewardObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from rewards")
	}

	return rewardObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Reward) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no rewards provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(rewardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rewardInsertCacheMut.RLock()
	cache, cached := rewardInsertCache[key]
	rewardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rewardAllColumns,
			rewardColumnsWithDefault,
			rewardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rewardType, rewardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rewardType, rewardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rewards\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rewards\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into rewards")
	}

	if !cached {
		rewardInsertCacheMut.Lock()
		rewardInsertCache[key] = cache
		rewardInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Reward.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Reward) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	rewardUpdateCacheMut.RLock()
	cache, cached := rewardUpdateCache[key]
	rewardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rewardAllColumns,
			rewardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update rewards, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rewards\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, rewardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rewardType, rewardMapping, append(wl, rewardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update rewards row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for rewards")
	}

	if !cached {
		rewardUpdateCacheMut.Lock()
		rewardUpdateCache[key] = cache
		rewardUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q rewardQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for rewards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for rewards")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RewardSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rewards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, rewardPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in reward slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all reward")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Reward) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no rewards provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(rewardColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rewardUpsertCacheMut.RLock()
	cache, cached := rewardUpsertCache[key]
	rewardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			rewardAllColumns,
			rewardColumnsWithDefault,
			rewardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			rewardAllColumns,
			rewardPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert rewards, could not build update column list")
		}

		ret := strmangle.SetComplement(rewardAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(rewardPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert rewards, could not build conflict column list")
			}

			conflict = make([]string, len(rewardPrimaryKeyColumns))
			copy(conflict, rewardPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"rewards\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(rewardType, rewardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rewardType, rewardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert rewards")
	}

	if !cached {
		rewardUpsertCacheMut.Lock()
		rewardUpsertCache[key] = cache
		rewardUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Reward record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Reward) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no Reward provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rewardPrimaryKeyMapping)
	sql := "DELETE FROM \"rewards\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from rewards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for rewards")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q rewardQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no rewardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from rewards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for rewards")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RewardSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rewards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rewardPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from reward slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for rewards")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Reward) Reload(exec boil.Executor) error {
	ret, err := FindReward(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RewardSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RewardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rewards\".* FROM \"rewards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rewardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in RewardSlice")
	}

	*o = slice

	return nil
}

// RewardExists checks if the Reward row exists.
func RewardExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rewards\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if rewards exists")
	}

	return exists, nil
}

// Exists checks if the Reward row exists.
func (o *Reward) Exists(exec boil.Executor) (bool, error) {
	return RewardExists(exec, o.ID)
}
