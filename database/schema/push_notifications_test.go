// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPushNotifications(t *testing.T) {
	t.Parallel()

	query := PushNotifications()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPushNotificationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PushNotification{}
	if err = randomize.Struct(seed, o, pushNotificationDBTypes, true, pushNotificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PushNotifications().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPushNotificationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PushNotification{}
	if err = randomize.Struct(seed, o, pushNotificationDBTypes, true, pushNotificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PushNotifications().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PushNotifications().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPushNotificationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PushNotification{}
	if err = randomize.Struct(seed, o, pushNotificationDBTypes, true, pushNotificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PushNotificationSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PushNotifications().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPushNotificationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PushNotification{}
	if err = randomize.Struct(seed, o, pushNotificationDBTypes, true, pushNotificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PushNotificationExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PushNotification exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PushNotificationExists to return true, but got false.")
	}
}

func testPushNotificationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PushNotification{}
	if err = randomize.Struct(seed, o, pushNotificationDBTypes, true, pushNotificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pushNotificationFound, err := FindPushNotification(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if pushNotificationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPushNotificationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PushNotification{}
	if err = randomize.Struct(seed, o, pushNotificationDBTypes, true, pushNotificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PushNotifications().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testPushNotificationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PushNotification{}
	if err = randomize.Struct(seed, o, pushNotificationDBTypes, true, pushNotificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PushNotifications().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPushNotificationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pushNotificationOne := &PushNotification{}
	pushNotificationTwo := &PushNotification{}
	if err = randomize.Struct(seed, pushNotificationOne, pushNotificationDBTypes, false, pushNotificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}
	if err = randomize.Struct(seed, pushNotificationTwo, pushNotificationDBTypes, false, pushNotificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = pushNotificationOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pushNotificationTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PushNotifications().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPushNotificationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pushNotificationOne := &PushNotification{}
	pushNotificationTwo := &PushNotification{}
	if err = randomize.Struct(seed, pushNotificationOne, pushNotificationDBTypes, false, pushNotificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}
	if err = randomize.Struct(seed, pushNotificationTwo, pushNotificationDBTypes, false, pushNotificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = pushNotificationOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pushNotificationTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PushNotifications().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testPushNotificationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PushNotification{}
	if err = randomize.Struct(seed, o, pushNotificationDBTypes, true, pushNotificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PushNotifications().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPushNotificationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PushNotification{}
	if err = randomize.Struct(seed, o, pushNotificationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(pushNotificationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PushNotifications().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPushNotificationToOneMatchUsingMatch(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local PushNotification
	var foreign Match

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pushNotificationDBTypes, true, pushNotificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.MatchID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Match().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PushNotificationSlice{&local}
	if err = local.L.LoadMatch(tx, false, (*[]*PushNotification)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Match == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Match = nil
	if err = local.L.LoadMatch(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Match == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testPushNotificationToOneUserUsingUser(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local PushNotification
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pushNotificationDBTypes, false, pushNotificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PushNotificationSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*PushNotification)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testPushNotificationToOneSetOpMatchUsingMatch(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a PushNotification
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pushNotificationDBTypes, false, strmangle.SetComplement(pushNotificationPrimaryKeyColumns, pushNotificationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Match{&b, &c} {
		err = a.SetMatch(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Match != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PushNotifications[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.MatchID, x.ID) {
			t.Error("foreign key was wrong value", a.MatchID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MatchID))
		reflect.Indirect(reflect.ValueOf(&a.MatchID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.MatchID, x.ID) {
			t.Error("foreign key was wrong value", a.MatchID, x.ID)
		}
	}
}

func testPushNotificationToOneRemoveOpMatchUsingMatch(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a PushNotification
	var b Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pushNotificationDBTypes, false, strmangle.SetComplement(pushNotificationPrimaryKeyColumns, pushNotificationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetMatch(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveMatch(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Match().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Match != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.MatchID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PushNotifications) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPushNotificationToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a PushNotification
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pushNotificationDBTypes, false, strmangle.SetComplement(pushNotificationPrimaryKeyColumns, pushNotificationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PushNotifications[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testPushNotificationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PushNotification{}
	if err = randomize.Struct(seed, o, pushNotificationDBTypes, true, pushNotificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPushNotificationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PushNotification{}
	if err = randomize.Struct(seed, o, pushNotificationDBTypes, true, pushNotificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PushNotificationSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testPushNotificationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PushNotification{}
	if err = randomize.Struct(seed, o, pushNotificationDBTypes, true, pushNotificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PushNotifications().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pushNotificationDBTypes = map[string]string{`ID`: `integer`, `Title`: `character varying`, `Message`: `character varying`, `Payload`: `jsonb`, `SentAt`: `timestamp with time zone`, `MatchID`: `uuid`, `UserID`: `uuid`}
	_                       = bytes.MinRead
)

func testPushNotificationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pushNotificationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pushNotificationAllColumns) == len(pushNotificationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PushNotification{}
	if err = randomize.Struct(seed, o, pushNotificationDBTypes, true, pushNotificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PushNotifications().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pushNotificationDBTypes, true, pushNotificationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPushNotificationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pushNotificationAllColumns) == len(pushNotificationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PushNotification{}
	if err = randomize.Struct(seed, o, pushNotificationDBTypes, true, pushNotificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PushNotifications().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pushNotificationDBTypes, true, pushNotificationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pushNotificationAllColumns, pushNotificationPrimaryKeyColumns) {
		fields = pushNotificationAllColumns
	} else {
		fields = strmangle.SetComplement(
			pushNotificationAllColumns,
			pushNotificationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PushNotificationSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPushNotificationsUpsert(t *testing.T) {
	t.Parallel()

	if len(pushNotificationAllColumns) == len(pushNotificationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PushNotification{}
	if err = randomize.Struct(seed, &o, pushNotificationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PushNotification: %s", err)
	}

	count, err := PushNotifications().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pushNotificationDBTypes, false, pushNotificationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PushNotification struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PushNotification: %s", err)
	}

	count, err = PushNotifications().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
