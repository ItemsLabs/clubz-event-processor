// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Player is an object representing the database table.
type Player struct {
	ID                 string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt          time.Time    `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time    `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ImportID           null.String  `boil:"import_id" json:"import_id,omitempty" toml:"import_id" yaml:"import_id,omitempty"`
	FirstName          null.String  `boil:"first_name" json:"first_name,omitempty" toml:"first_name" yaml:"first_name,omitempty"`
	LastName           null.String  `boil:"last_name" json:"last_name,omitempty" toml:"last_name" yaml:"last_name,omitempty"`
	FullName           null.String  `boil:"full_name" json:"full_name,omitempty" toml:"full_name" yaml:"full_name,omitempty"`
	AvgScore           null.Float64 `boil:"avg_score" json:"avg_score,omitempty" toml:"avg_score" yaml:"avg_score,omitempty"`
	BirthDate          null.Time    `boil:"birth_date" json:"birth_date,omitempty" toml:"birth_date" yaml:"birth_date,omitempty"`
	ImageURL           null.String  `boil:"image_url" json:"image_url,omitempty" toml:"image_url" yaml:"image_url,omitempty"`
	NickName           null.String  `boil:"nick_name" json:"nick_name,omitempty" toml:"nick_name" yaml:"nick_name,omitempty"`
	SoccerWikiPlayerID null.Int     `boil:"soccer_wiki_player_id" json:"soccer_wiki_player_id,omitempty" toml:"soccer_wiki_player_id" yaml:"soccer_wiki_player_id,omitempty"`
	NormalizedName     null.String  `boil:"normalized_name" json:"normalized_name,omitempty" toml:"normalized_name" yaml:"normalized_name,omitempty"`

	R *playerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L playerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlayerColumns = struct {
	ID                 string
	CreatedAt          string
	UpdatedAt          string
	ImportID           string
	FirstName          string
	LastName           string
	FullName           string
	AvgScore           string
	BirthDate          string
	ImageURL           string
	NickName           string
	SoccerWikiPlayerID string
	NormalizedName     string
}{
	ID:                 "id",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	ImportID:           "import_id",
	FirstName:          "first_name",
	LastName:           "last_name",
	FullName:           "full_name",
	AvgScore:           "avg_score",
	BirthDate:          "birth_date",
	ImageURL:           "image_url",
	NickName:           "nick_name",
	SoccerWikiPlayerID: "soccer_wiki_player_id",
	NormalizedName:     "normalized_name",
}

var PlayerTableColumns = struct {
	ID                 string
	CreatedAt          string
	UpdatedAt          string
	ImportID           string
	FirstName          string
	LastName           string
	FullName           string
	AvgScore           string
	BirthDate          string
	ImageURL           string
	NickName           string
	SoccerWikiPlayerID string
	NormalizedName     string
}{
	ID:                 "players.id",
	CreatedAt:          "players.created_at",
	UpdatedAt:          "players.updated_at",
	ImportID:           "players.import_id",
	FirstName:          "players.first_name",
	LastName:           "players.last_name",
	FullName:           "players.full_name",
	AvgScore:           "players.avg_score",
	BirthDate:          "players.birth_date",
	ImageURL:           "players.image_url",
	NickName:           "players.nick_name",
	SoccerWikiPlayerID: "players.soccer_wiki_player_id",
	NormalizedName:     "players.normalized_name",
}

// Generated where

var PlayerWhere = struct {
	ID                 whereHelperstring
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	ImportID           whereHelpernull_String
	FirstName          whereHelpernull_String
	LastName           whereHelpernull_String
	FullName           whereHelpernull_String
	AvgScore           whereHelpernull_Float64
	BirthDate          whereHelpernull_Time
	ImageURL           whereHelpernull_String
	NickName           whereHelpernull_String
	SoccerWikiPlayerID whereHelpernull_Int
	NormalizedName     whereHelpernull_String
}{
	ID:                 whereHelperstring{field: "\"players\".\"id\""},
	CreatedAt:          whereHelpertime_Time{field: "\"players\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"players\".\"updated_at\""},
	ImportID:           whereHelpernull_String{field: "\"players\".\"import_id\""},
	FirstName:          whereHelpernull_String{field: "\"players\".\"first_name\""},
	LastName:           whereHelpernull_String{field: "\"players\".\"last_name\""},
	FullName:           whereHelpernull_String{field: "\"players\".\"full_name\""},
	AvgScore:           whereHelpernull_Float64{field: "\"players\".\"avg_score\""},
	BirthDate:          whereHelpernull_Time{field: "\"players\".\"birth_date\""},
	ImageURL:           whereHelpernull_String{field: "\"players\".\"image_url\""},
	NickName:           whereHelpernull_String{field: "\"players\".\"nick_name\""},
	SoccerWikiPlayerID: whereHelpernull_Int{field: "\"players\".\"soccer_wiki_player_id\""},
	NormalizedName:     whereHelpernull_String{field: "\"players\".\"normalized_name\""},
}

// PlayerRels is where relationship names are stored.
var PlayerRels = struct {
	SoccerWikiPlayer     string
	GameEvents           string
	GamePicks            string
	MatchEvents          string
	MatchPlayers         string
	SeasonTeamPlayers    string
	SelectionTeamPlayers string
}{
	SoccerWikiPlayer:     "SoccerWikiPlayer",
	GameEvents:           "GameEvents",
	GamePicks:            "GamePicks",
	MatchEvents:          "MatchEvents",
	MatchPlayers:         "MatchPlayers",
	SeasonTeamPlayers:    "SeasonTeamPlayers",
	SelectionTeamPlayers: "SelectionTeamPlayers",
}

// playerR is where relationships are stored.
type playerR struct {
	SoccerWikiPlayer     *SoccerWikiPlayer        `boil:"SoccerWikiPlayer" json:"SoccerWikiPlayer" toml:"SoccerWikiPlayer" yaml:"SoccerWikiPlayer"`
	GameEvents           GameEventSlice           `boil:"GameEvents" json:"GameEvents" toml:"GameEvents" yaml:"GameEvents"`
	GamePicks            GamePickSlice            `boil:"GamePicks" json:"GamePicks" toml:"GamePicks" yaml:"GamePicks"`
	MatchEvents          MatchEventSlice          `boil:"MatchEvents" json:"MatchEvents" toml:"MatchEvents" yaml:"MatchEvents"`
	MatchPlayers         MatchPlayerSlice         `boil:"MatchPlayers" json:"MatchPlayers" toml:"MatchPlayers" yaml:"MatchPlayers"`
	SeasonTeamPlayers    SeasonTeamPlayerSlice    `boil:"SeasonTeamPlayers" json:"SeasonTeamPlayers" toml:"SeasonTeamPlayers" yaml:"SeasonTeamPlayers"`
	SelectionTeamPlayers SelectionTeamPlayerSlice `boil:"SelectionTeamPlayers" json:"SelectionTeamPlayers" toml:"SelectionTeamPlayers" yaml:"SelectionTeamPlayers"`
}

// NewStruct creates a new relationship struct
func (*playerR) NewStruct() *playerR {
	return &playerR{}
}

func (r *playerR) GetSoccerWikiPlayer() *SoccerWikiPlayer {
	if r == nil {
		return nil
	}
	return r.SoccerWikiPlayer
}

func (r *playerR) GetGameEvents() GameEventSlice {
	if r == nil {
		return nil
	}
	return r.GameEvents
}

func (r *playerR) GetGamePicks() GamePickSlice {
	if r == nil {
		return nil
	}
	return r.GamePicks
}

func (r *playerR) GetMatchEvents() MatchEventSlice {
	if r == nil {
		return nil
	}
	return r.MatchEvents
}

func (r *playerR) GetMatchPlayers() MatchPlayerSlice {
	if r == nil {
		return nil
	}
	return r.MatchPlayers
}

func (r *playerR) GetSeasonTeamPlayers() SeasonTeamPlayerSlice {
	if r == nil {
		return nil
	}
	return r.SeasonTeamPlayers
}

func (r *playerR) GetSelectionTeamPlayers() SelectionTeamPlayerSlice {
	if r == nil {
		return nil
	}
	return r.SelectionTeamPlayers
}

// playerL is where Load methods for each relationship are stored.
type playerL struct{}

var (
	playerAllColumns            = []string{"id", "created_at", "updated_at", "import_id", "first_name", "last_name", "full_name", "avg_score", "birth_date", "image_url", "nick_name", "soccer_wiki_player_id", "normalized_name"}
	playerColumnsWithoutDefault = []string{"id", "created_at", "updated_at"}
	playerColumnsWithDefault    = []string{"import_id", "first_name", "last_name", "full_name", "avg_score", "birth_date", "image_url", "nick_name", "soccer_wiki_player_id", "normalized_name"}
	playerPrimaryKeyColumns     = []string{"id"}
	playerGeneratedColumns      = []string{}
)

type (
	// PlayerSlice is an alias for a slice of pointers to Player.
	// This should almost always be used instead of []Player.
	PlayerSlice []*Player

	playerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playerType                 = reflect.TypeOf(&Player{})
	playerMapping              = queries.MakeStructMapping(playerType)
	playerPrimaryKeyMapping, _ = queries.BindMapping(playerType, playerMapping, playerPrimaryKeyColumns)
	playerInsertCacheMut       sync.RWMutex
	playerInsertCache          = make(map[string]insertCache)
	playerUpdateCacheMut       sync.RWMutex
	playerUpdateCache          = make(map[string]updateCache)
	playerUpsertCacheMut       sync.RWMutex
	playerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single player record from the query.
func (q playerQuery) One(exec boil.Executor) (*Player, error) {
	o := &Player{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for players")
	}

	return o, nil
}

// All returns all Player records from the query.
func (q playerQuery) All(exec boil.Executor) (PlayerSlice, error) {
	var o []*Player

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to Player slice")
	}

	return o, nil
}

// Count returns the count of all Player records in the query.
func (q playerQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count players rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playerQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if players exists")
	}

	return count > 0, nil
}

// SoccerWikiPlayer pointed to by the foreign key.
func (o *Player) SoccerWikiPlayer(mods ...qm.QueryMod) soccerWikiPlayerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SoccerWikiPlayerID),
	}

	queryMods = append(queryMods, mods...)

	return SoccerWikiPlayers(queryMods...)
}

// GameEvents retrieves all the game_event's GameEvents with an executor.
func (o *Player) GameEvents(mods ...qm.QueryMod) gameEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"game_events\".\"player_id\"=?", o.ID),
	)

	return GameEvents(queryMods...)
}

// GamePicks retrieves all the game_pick's GamePicks with an executor.
func (o *Player) GamePicks(mods ...qm.QueryMod) gamePickQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"game_picks\".\"player_id\"=?", o.ID),
	)

	return GamePicks(queryMods...)
}

// MatchEvents retrieves all the match_event's MatchEvents with an executor.
func (o *Player) MatchEvents(mods ...qm.QueryMod) matchEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"match_events\".\"player_id\"=?", o.ID),
	)

	return MatchEvents(queryMods...)
}

// MatchPlayers retrieves all the match_player's MatchPlayers with an executor.
func (o *Player) MatchPlayers(mods ...qm.QueryMod) matchPlayerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"match_players\".\"player_id\"=?", o.ID),
	)

	return MatchPlayers(queryMods...)
}

// SeasonTeamPlayers retrieves all the season_team_player's SeasonTeamPlayers with an executor.
func (o *Player) SeasonTeamPlayers(mods ...qm.QueryMod) seasonTeamPlayerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"season_team_players\".\"player_id\"=?", o.ID),
	)

	return SeasonTeamPlayers(queryMods...)
}

// SelectionTeamPlayers retrieves all the selection_team_player's SelectionTeamPlayers with an executor.
func (o *Player) SelectionTeamPlayers(mods ...qm.QueryMod) selectionTeamPlayerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"selection_team_players\".\"player_id\"=?", o.ID),
	)

	return SelectionTeamPlayers(queryMods...)
}

// LoadSoccerWikiPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerL) LoadSoccerWikiPlayer(e boil.Executor, singular bool, maybePlayer interface{}, mods queries.Applicator) error {
	var slice []*Player
	var object *Player

	if singular {
		var ok bool
		object, ok = maybePlayer.(*Player)
		if !ok {
			object = new(Player)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlayer))
			}
		}
	} else {
		s, ok := maybePlayer.(*[]*Player)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlayer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &playerR{}
		}
		if !queries.IsNil(object.SoccerWikiPlayerID) {
			args[object.SoccerWikiPlayerID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerR{}
			}

			if !queries.IsNil(obj.SoccerWikiPlayerID) {
				args[obj.SoccerWikiPlayerID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`soccer_wiki_players`),
		qm.WhereIn(`soccer_wiki_players.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SoccerWikiPlayer")
	}

	var resultSlice []*SoccerWikiPlayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SoccerWikiPlayer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for soccer_wiki_players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for soccer_wiki_players")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SoccerWikiPlayer = foreign
		if foreign.R == nil {
			foreign.R = &soccerWikiPlayerR{}
		}
		foreign.R.Players = append(foreign.R.Players, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SoccerWikiPlayerID, foreign.ID) {
				local.R.SoccerWikiPlayer = foreign
				if foreign.R == nil {
					foreign.R = &soccerWikiPlayerR{}
				}
				foreign.R.Players = append(foreign.R.Players, local)
				break
			}
		}
	}

	return nil
}

// LoadGameEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (playerL) LoadGameEvents(e boil.Executor, singular bool, maybePlayer interface{}, mods queries.Applicator) error {
	var slice []*Player
	var object *Player

	if singular {
		var ok bool
		object, ok = maybePlayer.(*Player)
		if !ok {
			object = new(Player)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlayer))
			}
		}
	} else {
		s, ok := maybePlayer.(*[]*Player)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlayer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &playerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`game_events`),
		qm.WhereIn(`game_events.player_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load game_events")
	}

	var resultSlice []*GameEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice game_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on game_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_events")
	}

	if singular {
		object.R.GameEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gameEventR{}
			}
			foreign.R.Player = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PlayerID {
				local.R.GameEvents = append(local.R.GameEvents, foreign)
				if foreign.R == nil {
					foreign.R = &gameEventR{}
				}
				foreign.R.Player = local
				break
			}
		}
	}

	return nil
}

// LoadGamePicks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (playerL) LoadGamePicks(e boil.Executor, singular bool, maybePlayer interface{}, mods queries.Applicator) error {
	var slice []*Player
	var object *Player

	if singular {
		var ok bool
		object, ok = maybePlayer.(*Player)
		if !ok {
			object = new(Player)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlayer))
			}
		}
	} else {
		s, ok := maybePlayer.(*[]*Player)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlayer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &playerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`game_picks`),
		qm.WhereIn(`game_picks.player_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load game_picks")
	}

	var resultSlice []*GamePick
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice game_picks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on game_picks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_picks")
	}

	if singular {
		object.R.GamePicks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gamePickR{}
			}
			foreign.R.Player = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PlayerID {
				local.R.GamePicks = append(local.R.GamePicks, foreign)
				if foreign.R == nil {
					foreign.R = &gamePickR{}
				}
				foreign.R.Player = local
				break
			}
		}
	}

	return nil
}

// LoadMatchEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (playerL) LoadMatchEvents(e boil.Executor, singular bool, maybePlayer interface{}, mods queries.Applicator) error {
	var slice []*Player
	var object *Player

	if singular {
		var ok bool
		object, ok = maybePlayer.(*Player)
		if !ok {
			object = new(Player)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlayer))
			}
		}
	} else {
		s, ok := maybePlayer.(*[]*Player)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlayer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &playerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`match_events`),
		qm.WhereIn(`match_events.player_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load match_events")
	}

	var resultSlice []*MatchEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice match_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on match_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for match_events")
	}

	if singular {
		object.R.MatchEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchEventR{}
			}
			foreign.R.Player = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.PlayerID) {
				local.R.MatchEvents = append(local.R.MatchEvents, foreign)
				if foreign.R == nil {
					foreign.R = &matchEventR{}
				}
				foreign.R.Player = local
				break
			}
		}
	}

	return nil
}

// LoadMatchPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (playerL) LoadMatchPlayers(e boil.Executor, singular bool, maybePlayer interface{}, mods queries.Applicator) error {
	var slice []*Player
	var object *Player

	if singular {
		var ok bool
		object, ok = maybePlayer.(*Player)
		if !ok {
			object = new(Player)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlayer))
			}
		}
	} else {
		s, ok := maybePlayer.(*[]*Player)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlayer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &playerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`match_players`),
		qm.WhereIn(`match_players.player_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load match_players")
	}

	var resultSlice []*MatchPlayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice match_players")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on match_players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for match_players")
	}

	if singular {
		object.R.MatchPlayers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchPlayerR{}
			}
			foreign.R.Player = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PlayerID {
				local.R.MatchPlayers = append(local.R.MatchPlayers, foreign)
				if foreign.R == nil {
					foreign.R = &matchPlayerR{}
				}
				foreign.R.Player = local
				break
			}
		}
	}

	return nil
}

// LoadSeasonTeamPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (playerL) LoadSeasonTeamPlayers(e boil.Executor, singular bool, maybePlayer interface{}, mods queries.Applicator) error {
	var slice []*Player
	var object *Player

	if singular {
		var ok bool
		object, ok = maybePlayer.(*Player)
		if !ok {
			object = new(Player)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlayer))
			}
		}
	} else {
		s, ok := maybePlayer.(*[]*Player)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlayer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &playerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`season_team_players`),
		qm.WhereIn(`season_team_players.player_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load season_team_players")
	}

	var resultSlice []*SeasonTeamPlayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice season_team_players")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on season_team_players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for season_team_players")
	}

	if singular {
		object.R.SeasonTeamPlayers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &seasonTeamPlayerR{}
			}
			foreign.R.Player = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PlayerID {
				local.R.SeasonTeamPlayers = append(local.R.SeasonTeamPlayers, foreign)
				if foreign.R == nil {
					foreign.R = &seasonTeamPlayerR{}
				}
				foreign.R.Player = local
				break
			}
		}
	}

	return nil
}

// LoadSelectionTeamPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (playerL) LoadSelectionTeamPlayers(e boil.Executor, singular bool, maybePlayer interface{}, mods queries.Applicator) error {
	var slice []*Player
	var object *Player

	if singular {
		var ok bool
		object, ok = maybePlayer.(*Player)
		if !ok {
			object = new(Player)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlayer))
			}
		}
	} else {
		s, ok := maybePlayer.(*[]*Player)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlayer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &playerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`selection_team_players`),
		qm.WhereIn(`selection_team_players.player_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load selection_team_players")
	}

	var resultSlice []*SelectionTeamPlayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice selection_team_players")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on selection_team_players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for selection_team_players")
	}

	if singular {
		object.R.SelectionTeamPlayers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &selectionTeamPlayerR{}
			}
			foreign.R.Player = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PlayerID {
				local.R.SelectionTeamPlayers = append(local.R.SelectionTeamPlayers, foreign)
				if foreign.R == nil {
					foreign.R = &selectionTeamPlayerR{}
				}
				foreign.R.Player = local
				break
			}
		}
	}

	return nil
}

// SetSoccerWikiPlayer of the player to the related item.
// Sets o.R.SoccerWikiPlayer to related.
// Adds o to related.R.Players.
func (o *Player) SetSoccerWikiPlayer(exec boil.Executor, insert bool, related *SoccerWikiPlayer) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"soccer_wiki_player_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SoccerWikiPlayerID, related.ID)
	if o.R == nil {
		o.R = &playerR{
			SoccerWikiPlayer: related,
		}
	} else {
		o.R.SoccerWikiPlayer = related
	}

	if related.R == nil {
		related.R = &soccerWikiPlayerR{
			Players: PlayerSlice{o},
		}
	} else {
		related.R.Players = append(related.R.Players, o)
	}

	return nil
}

// RemoveSoccerWikiPlayer relationship.
// Sets o.R.SoccerWikiPlayer to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Player) RemoveSoccerWikiPlayer(exec boil.Executor, related *SoccerWikiPlayer) error {
	var err error

	queries.SetScanner(&o.SoccerWikiPlayerID, nil)
	if _, err = o.Update(exec, boil.Whitelist("soccer_wiki_player_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SoccerWikiPlayer = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Players {
		if queries.Equal(o.SoccerWikiPlayerID, ri.SoccerWikiPlayerID) {
			continue
		}

		ln := len(related.R.Players)
		if ln > 1 && i < ln-1 {
			related.R.Players[i] = related.R.Players[ln-1]
		}
		related.R.Players = related.R.Players[:ln-1]
		break
	}
	return nil
}

// AddGameEvents adds the given related objects to the existing relationships
// of the player, optionally inserting them as new records.
// Appends related to o.R.GameEvents.
// Sets related.R.Player appropriately.
func (o *Player) AddGameEvents(exec boil.Executor, insert bool, related ...*GameEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlayerID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"game_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
				strmangle.WhereClause("\"", "\"", 2, gameEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlayerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &playerR{
			GameEvents: related,
		}
	} else {
		o.R.GameEvents = append(o.R.GameEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gameEventR{
				Player: o,
			}
		} else {
			rel.R.Player = o
		}
	}
	return nil
}

// AddGamePicks adds the given related objects to the existing relationships
// of the player, optionally inserting them as new records.
// Appends related to o.R.GamePicks.
// Sets related.R.Player appropriately.
func (o *Player) AddGamePicks(exec boil.Executor, insert bool, related ...*GamePick) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlayerID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"game_picks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
				strmangle.WhereClause("\"", "\"", 2, gamePickPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlayerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &playerR{
			GamePicks: related,
		}
	} else {
		o.R.GamePicks = append(o.R.GamePicks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gamePickR{
				Player: o,
			}
		} else {
			rel.R.Player = o
		}
	}
	return nil
}

// AddMatchEvents adds the given related objects to the existing relationships
// of the player, optionally inserting them as new records.
// Appends related to o.R.MatchEvents.
// Sets related.R.Player appropriately.
func (o *Player) AddMatchEvents(exec boil.Executor, insert bool, related ...*MatchEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PlayerID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"match_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PlayerID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &playerR{
			MatchEvents: related,
		}
	} else {
		o.R.MatchEvents = append(o.R.MatchEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchEventR{
				Player: o,
			}
		} else {
			rel.R.Player = o
		}
	}
	return nil
}

// SetMatchEvents removes all previously related items of the
// player replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Player's MatchEvents accordingly.
// Replaces o.R.MatchEvents with related.
// Sets related.R.Player's MatchEvents accordingly.
func (o *Player) SetMatchEvents(exec boil.Executor, insert bool, related ...*MatchEvent) error {
	query := "update \"match_events\" set \"player_id\" = null where \"player_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.MatchEvents {
			queries.SetScanner(&rel.PlayerID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Player = nil
		}
		o.R.MatchEvents = nil
	}

	return o.AddMatchEvents(exec, insert, related...)
}

// RemoveMatchEvents relationships from objects passed in.
// Removes related items from R.MatchEvents (uses pointer comparison, removal does not keep order)
// Sets related.R.Player.
func (o *Player) RemoveMatchEvents(exec boil.Executor, related ...*MatchEvent) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PlayerID, nil)
		if rel.R != nil {
			rel.R.Player = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("player_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MatchEvents {
			if rel != ri {
				continue
			}

			ln := len(o.R.MatchEvents)
			if ln > 1 && i < ln-1 {
				o.R.MatchEvents[i] = o.R.MatchEvents[ln-1]
			}
			o.R.MatchEvents = o.R.MatchEvents[:ln-1]
			break
		}
	}

	return nil
}

// AddMatchPlayers adds the given related objects to the existing relationships
// of the player, optionally inserting them as new records.
// Appends related to o.R.MatchPlayers.
// Sets related.R.Player appropriately.
func (o *Player) AddMatchPlayers(exec boil.Executor, insert bool, related ...*MatchPlayer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlayerID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"match_players\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchPlayerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlayerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &playerR{
			MatchPlayers: related,
		}
	} else {
		o.R.MatchPlayers = append(o.R.MatchPlayers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchPlayerR{
				Player: o,
			}
		} else {
			rel.R.Player = o
		}
	}
	return nil
}

// AddSeasonTeamPlayers adds the given related objects to the existing relationships
// of the player, optionally inserting them as new records.
// Appends related to o.R.SeasonTeamPlayers.
// Sets related.R.Player appropriately.
func (o *Player) AddSeasonTeamPlayers(exec boil.Executor, insert bool, related ...*SeasonTeamPlayer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlayerID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"season_team_players\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
				strmangle.WhereClause("\"", "\"", 2, seasonTeamPlayerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlayerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &playerR{
			SeasonTeamPlayers: related,
		}
	} else {
		o.R.SeasonTeamPlayers = append(o.R.SeasonTeamPlayers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &seasonTeamPlayerR{
				Player: o,
			}
		} else {
			rel.R.Player = o
		}
	}
	return nil
}

// AddSelectionTeamPlayers adds the given related objects to the existing relationships
// of the player, optionally inserting them as new records.
// Appends related to o.R.SelectionTeamPlayers.
// Sets related.R.Player appropriately.
func (o *Player) AddSelectionTeamPlayers(exec boil.Executor, insert bool, related ...*SelectionTeamPlayer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlayerID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"selection_team_players\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
				strmangle.WhereClause("\"", "\"", 2, selectionTeamPlayerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlayerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &playerR{
			SelectionTeamPlayers: related,
		}
	} else {
		o.R.SelectionTeamPlayers = append(o.R.SelectionTeamPlayers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &selectionTeamPlayerR{
				Player: o,
			}
		} else {
			rel.R.Player = o
		}
	}
	return nil
}

// Players retrieves all the records using an executor.
func Players(mods ...qm.QueryMod) playerQuery {
	mods = append(mods, qm.From("\"players\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"players\".*"})
	}

	return playerQuery{q}
}

// FindPlayer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlayer(exec boil.Executor, iD string, selectCols ...string) (*Player, error) {
	playerObj := &Player{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"players\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, playerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from players")
	}

	return playerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Player) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no players provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(playerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playerInsertCacheMut.RLock()
	cache, cached := playerInsertCache[key]
	playerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playerAllColumns,
			playerColumnsWithDefault,
			playerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playerType, playerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playerType, playerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"players\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"players\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into players")
	}

	if !cached {
		playerInsertCacheMut.Lock()
		playerInsertCache[key] = cache
		playerInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Player.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Player) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	playerUpdateCacheMut.RLock()
	cache, cached := playerUpdateCache[key]
	playerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playerAllColumns,
			playerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update players, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"players\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playerType, playerMapping, append(wl, playerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update players row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for players")
	}

	if !cached {
		playerUpdateCacheMut.Lock()
		playerUpdateCache[key] = cache
		playerUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q playerQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for players")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlayerSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in player slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all player")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Player) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no players provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(playerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playerUpsertCacheMut.RLock()
	cache, cached := playerUpsertCache[key]
	playerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			playerAllColumns,
			playerColumnsWithDefault,
			playerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			playerAllColumns,
			playerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert players, could not build update column list")
		}

		ret := strmangle.SetComplement(playerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(playerPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert players, could not build conflict column list")
			}

			conflict = make([]string, len(playerPrimaryKeyColumns))
			copy(conflict, playerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"players\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(playerType, playerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playerType, playerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert players")
	}

	if !cached {
		playerUpsertCacheMut.Lock()
		playerUpsertCache[key] = cache
		playerUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Player record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Player) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no Player provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playerPrimaryKeyMapping)
	sql := "DELETE FROM \"players\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for players")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q playerQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no playerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for players")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlayerSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"players\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from player slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for players")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Player) Reload(exec boil.Executor) error {
	ret, err := FindPlayer(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlayerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"players\".* FROM \"players\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in PlayerSlice")
	}

	*o = slice

	return nil
}

// PlayerExists checks if the Player row exists.
func PlayerExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"players\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if players exists")
	}

	return exists, nil
}

// Exists checks if the Player row exists.
func (o *Player) Exists(exec boil.Executor) (bool, error) {
	return PlayerExists(exec, o.ID)
}
