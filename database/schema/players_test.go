// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPlayers(t *testing.T) {
	t.Parallel()

	query := Players()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPlayersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Players().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlayersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Players().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Players().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlayersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlayerSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Players().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlayersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PlayerExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Player exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PlayerExists to return true, but got false.")
	}
}

func testPlayersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	playerFound, err := FindPlayer(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if playerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPlayersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Players().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testPlayersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Players().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPlayersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playerOne := &Player{}
	playerTwo := &Player{}
	if err = randomize.Struct(seed, playerOne, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}
	if err = randomize.Struct(seed, playerTwo, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = playerOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = playerTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Players().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPlayersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playerOne := &Player{}
	playerTwo := &Player{}
	if err = randomize.Struct(seed, playerOne, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}
	if err = randomize.Struct(seed, playerTwo, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = playerOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = playerTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Players().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testPlayersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Players().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlayersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(playerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Players().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlayerToManyGameEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c GameEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, gameEventDBTypes, false, gameEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameEventDBTypes, false, gameEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PlayerID = a.ID
	c.PlayerID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GameEvents().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PlayerID == b.PlayerID {
			bFound = true
		}
		if v.PlayerID == c.PlayerID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlayerSlice{&a}
	if err = a.L.LoadGameEvents(tx, false, (*[]*Player)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GameEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GameEvents = nil
	if err = a.L.LoadGameEvents(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GameEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPlayerToManyGamePicks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c GamePick

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, gamePickDBTypes, false, gamePickColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gamePickDBTypes, false, gamePickColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PlayerID = a.ID
	c.PlayerID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GamePicks().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PlayerID == b.PlayerID {
			bFound = true
		}
		if v.PlayerID == c.PlayerID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlayerSlice{&a}
	if err = a.L.LoadGamePicks(tx, false, (*[]*Player)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GamePicks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GamePicks = nil
	if err = a.L.LoadGamePicks(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GamePicks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPlayerToManyMatchEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c MatchEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchEventDBTypes, false, matchEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchEventDBTypes, false, matchEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PlayerID, a.ID)
	queries.Assign(&c.PlayerID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MatchEvents().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PlayerID, b.PlayerID) {
			bFound = true
		}
		if queries.Equal(v.PlayerID, c.PlayerID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlayerSlice{&a}
	if err = a.L.LoadMatchEvents(tx, false, (*[]*Player)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MatchEvents = nil
	if err = a.L.LoadMatchEvents(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPlayerToManyMatchPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c MatchPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchPlayerDBTypes, false, matchPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchPlayerDBTypes, false, matchPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PlayerID = a.ID
	c.PlayerID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MatchPlayers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PlayerID == b.PlayerID {
			bFound = true
		}
		if v.PlayerID == c.PlayerID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlayerSlice{&a}
	if err = a.L.LoadMatchPlayers(tx, false, (*[]*Player)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MatchPlayers = nil
	if err = a.L.LoadMatchPlayers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MatchPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPlayerToManySeasonTeamPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c SeasonTeamPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, seasonTeamPlayerDBTypes, false, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, seasonTeamPlayerDBTypes, false, seasonTeamPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PlayerID = a.ID
	c.PlayerID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SeasonTeamPlayers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PlayerID == b.PlayerID {
			bFound = true
		}
		if v.PlayerID == c.PlayerID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlayerSlice{&a}
	if err = a.L.LoadSeasonTeamPlayers(tx, false, (*[]*Player)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SeasonTeamPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SeasonTeamPlayers = nil
	if err = a.L.LoadSeasonTeamPlayers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SeasonTeamPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPlayerToManySelectionTeamPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c SelectionTeamPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, selectionTeamPlayerDBTypes, false, selectionTeamPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, selectionTeamPlayerDBTypes, false, selectionTeamPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PlayerID = a.ID
	c.PlayerID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SelectionTeamPlayers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PlayerID == b.PlayerID {
			bFound = true
		}
		if v.PlayerID == c.PlayerID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlayerSlice{&a}
	if err = a.L.LoadSelectionTeamPlayers(tx, false, (*[]*Player)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SelectionTeamPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SelectionTeamPlayers = nil
	if err = a.L.LoadSelectionTeamPlayers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SelectionTeamPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPlayerToManyAddOpGameEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c, d, e GameEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GameEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gameEventDBTypes, false, strmangle.SetComplement(gameEventPrimaryKeyColumns, gameEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GameEvent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGameEvents(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PlayerID {
			t.Error("foreign key was wrong value", a.ID, first.PlayerID)
		}
		if a.ID != second.PlayerID {
			t.Error("foreign key was wrong value", a.ID, second.PlayerID)
		}

		if first.R.Player != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Player != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GameEvents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GameEvents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GameEvents().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPlayerToManyAddOpGamePicks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c, d, e GamePick

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GamePick{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gamePickDBTypes, false, strmangle.SetComplement(gamePickPrimaryKeyColumns, gamePickColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GamePick{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGamePicks(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PlayerID {
			t.Error("foreign key was wrong value", a.ID, first.PlayerID)
		}
		if a.ID != second.PlayerID {
			t.Error("foreign key was wrong value", a.ID, second.PlayerID)
		}

		if first.R.Player != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Player != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GamePicks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GamePicks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GamePicks().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPlayerToManyAddOpMatchEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c, d, e MatchEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MatchEvent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMatchEvents(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.PlayerID) {
			t.Error("foreign key was wrong value", a.ID, first.PlayerID)
		}
		if !queries.Equal(a.ID, second.PlayerID) {
			t.Error("foreign key was wrong value", a.ID, second.PlayerID)
		}

		if first.R.Player != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Player != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MatchEvents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MatchEvents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MatchEvents().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPlayerToManySetOpMatchEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c, d, e MatchEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMatchEvents(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MatchEvents().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMatchEvents(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MatchEvents().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PlayerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PlayerID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.PlayerID) {
		t.Error("foreign key was wrong value", a.ID, d.PlayerID)
	}
	if !queries.Equal(a.ID, e.PlayerID) {
		t.Error("foreign key was wrong value", a.ID, e.PlayerID)
	}

	if b.R.Player != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Player != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Player != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Player != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.MatchEvents[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.MatchEvents[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPlayerToManyRemoveOpMatchEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c, d, e MatchEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMatchEvents(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MatchEvents().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMatchEvents(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MatchEvents().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PlayerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PlayerID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Player != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Player != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Player != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Player != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.MatchEvents) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.MatchEvents[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.MatchEvents[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPlayerToManyAddOpMatchPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c, d, e MatchPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MatchPlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchPlayerDBTypes, false, strmangle.SetComplement(matchPlayerPrimaryKeyColumns, matchPlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MatchPlayer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMatchPlayers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PlayerID {
			t.Error("foreign key was wrong value", a.ID, first.PlayerID)
		}
		if a.ID != second.PlayerID {
			t.Error("foreign key was wrong value", a.ID, second.PlayerID)
		}

		if first.R.Player != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Player != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MatchPlayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MatchPlayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MatchPlayers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPlayerToManyAddOpSeasonTeamPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c, d, e SeasonTeamPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SeasonTeamPlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, seasonTeamPlayerDBTypes, false, strmangle.SetComplement(seasonTeamPlayerPrimaryKeyColumns, seasonTeamPlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SeasonTeamPlayer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSeasonTeamPlayers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PlayerID {
			t.Error("foreign key was wrong value", a.ID, first.PlayerID)
		}
		if a.ID != second.PlayerID {
			t.Error("foreign key was wrong value", a.ID, second.PlayerID)
		}

		if first.R.Player != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Player != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SeasonTeamPlayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SeasonTeamPlayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SeasonTeamPlayers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPlayerToManyAddOpSelectionTeamPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c, d, e SelectionTeamPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SelectionTeamPlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, selectionTeamPlayerDBTypes, false, strmangle.SetComplement(selectionTeamPlayerPrimaryKeyColumns, selectionTeamPlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SelectionTeamPlayer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSelectionTeamPlayers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PlayerID {
			t.Error("foreign key was wrong value", a.ID, first.PlayerID)
		}
		if a.ID != second.PlayerID {
			t.Error("foreign key was wrong value", a.ID, second.PlayerID)
		}

		if first.R.Player != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Player != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SelectionTeamPlayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SelectionTeamPlayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SelectionTeamPlayers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPlayerToOneSoccerWikiPlayerUsingSoccerWikiPlayer(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Player
	var foreign SoccerWikiPlayer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, soccerWikiPlayerDBTypes, false, soccerWikiPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoccerWikiPlayer struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SoccerWikiPlayerID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SoccerWikiPlayer().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PlayerSlice{&local}
	if err = local.L.LoadSoccerWikiPlayer(tx, false, (*[]*Player)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SoccerWikiPlayer == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SoccerWikiPlayer = nil
	if err = local.L.LoadSoccerWikiPlayer(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SoccerWikiPlayer == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testPlayerToOneSetOpSoccerWikiPlayerUsingSoccerWikiPlayer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c SoccerWikiPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, soccerWikiPlayerDBTypes, false, strmangle.SetComplement(soccerWikiPlayerPrimaryKeyColumns, soccerWikiPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soccerWikiPlayerDBTypes, false, strmangle.SetComplement(soccerWikiPlayerPrimaryKeyColumns, soccerWikiPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SoccerWikiPlayer{&b, &c} {
		err = a.SetSoccerWikiPlayer(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SoccerWikiPlayer != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Players[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SoccerWikiPlayerID, x.ID) {
			t.Error("foreign key was wrong value", a.SoccerWikiPlayerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SoccerWikiPlayerID))
		reflect.Indirect(reflect.ValueOf(&a.SoccerWikiPlayerID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SoccerWikiPlayerID, x.ID) {
			t.Error("foreign key was wrong value", a.SoccerWikiPlayerID, x.ID)
		}
	}
}

func testPlayerToOneRemoveOpSoccerWikiPlayerUsingSoccerWikiPlayer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b SoccerWikiPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, soccerWikiPlayerDBTypes, false, strmangle.SetComplement(soccerWikiPlayerPrimaryKeyColumns, soccerWikiPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSoccerWikiPlayer(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSoccerWikiPlayer(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.SoccerWikiPlayer().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.SoccerWikiPlayer != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SoccerWikiPlayerID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Players) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPlayersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPlayersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlayerSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testPlayersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Players().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	playerDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `ImportID`: `character varying`, `FirstName`: `text`, `LastName`: `text`, `FullName`: `text`, `AvgScore`: `double precision`, `BirthDate`: `date`, `ImageURL`: `text`, `NickName`: `text`, `SoccerWikiPlayerID`: `integer`, `NormalizedName`: `text`}
	_             = bytes.MinRead
)

func testPlayersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(playerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(playerAllColumns) == len(playerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Players().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, playerDBTypes, true, playerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPlayersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(playerAllColumns) == len(playerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Players().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, playerDBTypes, true, playerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(playerAllColumns, playerPrimaryKeyColumns) {
		fields = playerAllColumns
	} else {
		fields = strmangle.SetComplement(
			playerAllColumns,
			playerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PlayerSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPlayersUpsert(t *testing.T) {
	t.Parallel()

	if len(playerAllColumns) == len(playerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Player{}
	if err = randomize.Struct(seed, &o, playerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Player: %s", err)
	}

	count, err := Players().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, playerDBTypes, false, playerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Player: %s", err)
	}

	count, err = Players().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
