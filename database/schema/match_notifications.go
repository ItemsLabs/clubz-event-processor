// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MatchNotification is an object representing the database table.
type MatchNotification struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Type      int         `boil:"type" json:"type" toml:"type" yaml:"type"`
	MatchID   string      `boil:"match_id" json:"match_id" toml:"match_id" yaml:"match_id"`
	UserID    null.String `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`

	R *matchNotificationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L matchNotificationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MatchNotificationColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Type      string
	MatchID   string
	UserID    string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	Type:      "type",
	MatchID:   "match_id",
	UserID:    "user_id",
}

var MatchNotificationTableColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Type      string
	MatchID   string
	UserID    string
}{
	ID:        "match_notifications.id",
	CreatedAt: "match_notifications.created_at",
	UpdatedAt: "match_notifications.updated_at",
	Type:      "match_notifications.type",
	MatchID:   "match_notifications.match_id",
	UserID:    "match_notifications.user_id",
}

// Generated where

var MatchNotificationWhere = struct {
	ID        whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	Type      whereHelperint
	MatchID   whereHelperstring
	UserID    whereHelpernull_String
}{
	ID:        whereHelperstring{field: "\"match_notifications\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"match_notifications\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"match_notifications\".\"updated_at\""},
	Type:      whereHelperint{field: "\"match_notifications\".\"type\""},
	MatchID:   whereHelperstring{field: "\"match_notifications\".\"match_id\""},
	UserID:    whereHelpernull_String{field: "\"match_notifications\".\"user_id\""},
}

// MatchNotificationRels is where relationship names are stored.
var MatchNotificationRels = struct {
	Match string
	User  string
}{
	Match: "Match",
	User:  "User",
}

// matchNotificationR is where relationships are stored.
type matchNotificationR struct {
	Match *Match `boil:"Match" json:"Match" toml:"Match" yaml:"Match"`
	User  *User  `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*matchNotificationR) NewStruct() *matchNotificationR {
	return &matchNotificationR{}
}

func (r *matchNotificationR) GetMatch() *Match {
	if r == nil {
		return nil
	}
	return r.Match
}

func (r *matchNotificationR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// matchNotificationL is where Load methods for each relationship are stored.
type matchNotificationL struct{}

var (
	matchNotificationAllColumns            = []string{"id", "created_at", "updated_at", "type", "match_id", "user_id"}
	matchNotificationColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "type", "match_id"}
	matchNotificationColumnsWithDefault    = []string{"user_id"}
	matchNotificationPrimaryKeyColumns     = []string{"id"}
	matchNotificationGeneratedColumns      = []string{}
)

type (
	// MatchNotificationSlice is an alias for a slice of pointers to MatchNotification.
	// This should almost always be used instead of []MatchNotification.
	MatchNotificationSlice []*MatchNotification

	matchNotificationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	matchNotificationType                 = reflect.TypeOf(&MatchNotification{})
	matchNotificationMapping              = queries.MakeStructMapping(matchNotificationType)
	matchNotificationPrimaryKeyMapping, _ = queries.BindMapping(matchNotificationType, matchNotificationMapping, matchNotificationPrimaryKeyColumns)
	matchNotificationInsertCacheMut       sync.RWMutex
	matchNotificationInsertCache          = make(map[string]insertCache)
	matchNotificationUpdateCacheMut       sync.RWMutex
	matchNotificationUpdateCache          = make(map[string]updateCache)
	matchNotificationUpsertCacheMut       sync.RWMutex
	matchNotificationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single matchNotification record from the query.
func (q matchNotificationQuery) One(exec boil.Executor) (*MatchNotification, error) {
	o := &MatchNotification{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for match_notifications")
	}

	return o, nil
}

// All returns all MatchNotification records from the query.
func (q matchNotificationQuery) All(exec boil.Executor) (MatchNotificationSlice, error) {
	var o []*MatchNotification

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to MatchNotification slice")
	}

	return o, nil
}

// Count returns the count of all MatchNotification records in the query.
func (q matchNotificationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count match_notifications rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q matchNotificationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if match_notifications exists")
	}

	return count > 0, nil
}

// Match pointed to by the foreign key.
func (o *MatchNotification) Match(mods ...qm.QueryMod) matchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MatchID),
	}

	queryMods = append(queryMods, mods...)

	return Matches(queryMods...)
}

// User pointed to by the foreign key.
func (o *MatchNotification) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadMatch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchNotificationL) LoadMatch(e boil.Executor, singular bool, maybeMatchNotification interface{}, mods queries.Applicator) error {
	var slice []*MatchNotification
	var object *MatchNotification

	if singular {
		var ok bool
		object, ok = maybeMatchNotification.(*MatchNotification)
		if !ok {
			object = new(MatchNotification)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchNotification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchNotification))
			}
		}
	} else {
		s, ok := maybeMatchNotification.(*[]*MatchNotification)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchNotification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchNotification))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchNotificationR{}
		}
		args[object.MatchID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchNotificationR{}
			}

			args[obj.MatchID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Match")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Match")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Match = foreign
		if foreign.R == nil {
			foreign.R = &matchR{}
		}
		foreign.R.MatchNotifications = append(foreign.R.MatchNotifications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MatchID == foreign.ID {
				local.R.Match = foreign
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.MatchNotifications = append(foreign.R.MatchNotifications, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchNotificationL) LoadUser(e boil.Executor, singular bool, maybeMatchNotification interface{}, mods queries.Applicator) error {
	var slice []*MatchNotification
	var object *MatchNotification

	if singular {
		var ok bool
		object, ok = maybeMatchNotification.(*MatchNotification)
		if !ok {
			object = new(MatchNotification)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchNotification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchNotification))
			}
		}
	} else {
		s, ok := maybeMatchNotification.(*[]*MatchNotification)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchNotification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchNotification))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchNotificationR{}
		}
		if !queries.IsNil(object.UserID) {
			args[object.UserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchNotificationR{}
			}

			if !queries.IsNil(obj.UserID) {
				args[obj.UserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.MatchNotifications = append(foreign.R.MatchNotifications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.MatchNotifications = append(foreign.R.MatchNotifications, local)
				break
			}
		}
	}

	return nil
}

// SetMatch of the matchNotification to the related item.
// Sets o.R.Match to related.
// Adds o to related.R.MatchNotifications.
func (o *MatchNotification) SetMatch(exec boil.Executor, insert bool, related *Match) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match_notifications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"match_id"}),
		strmangle.WhereClause("\"", "\"", 2, matchNotificationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MatchID = related.ID
	if o.R == nil {
		o.R = &matchNotificationR{
			Match: related,
		}
	} else {
		o.R.Match = related
	}

	if related.R == nil {
		related.R = &matchR{
			MatchNotifications: MatchNotificationSlice{o},
		}
	} else {
		related.R.MatchNotifications = append(related.R.MatchNotifications, o)
	}

	return nil
}

// SetUser of the matchNotification to the related item.
// Sets o.R.User to related.
// Adds o to related.R.MatchNotifications.
func (o *MatchNotification) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match_notifications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, matchNotificationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &matchNotificationR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			MatchNotifications: MatchNotificationSlice{o},
		}
	} else {
		related.R.MatchNotifications = append(related.R.MatchNotifications, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MatchNotification) RemoveUser(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MatchNotifications {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.MatchNotifications)
		if ln > 1 && i < ln-1 {
			related.R.MatchNotifications[i] = related.R.MatchNotifications[ln-1]
		}
		related.R.MatchNotifications = related.R.MatchNotifications[:ln-1]
		break
	}
	return nil
}

// MatchNotifications retrieves all the records using an executor.
func MatchNotifications(mods ...qm.QueryMod) matchNotificationQuery {
	mods = append(mods, qm.From("\"match_notifications\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"match_notifications\".*"})
	}

	return matchNotificationQuery{q}
}

// FindMatchNotification retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMatchNotification(exec boil.Executor, iD string, selectCols ...string) (*MatchNotification, error) {
	matchNotificationObj := &MatchNotification{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"match_notifications\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, matchNotificationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from match_notifications")
	}

	return matchNotificationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MatchNotification) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no match_notifications provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(matchNotificationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	matchNotificationInsertCacheMut.RLock()
	cache, cached := matchNotificationInsertCache[key]
	matchNotificationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			matchNotificationAllColumns,
			matchNotificationColumnsWithDefault,
			matchNotificationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(matchNotificationType, matchNotificationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(matchNotificationType, matchNotificationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"match_notifications\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"match_notifications\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into match_notifications")
	}

	if !cached {
		matchNotificationInsertCacheMut.Lock()
		matchNotificationInsertCache[key] = cache
		matchNotificationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the MatchNotification.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MatchNotification) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	matchNotificationUpdateCacheMut.RLock()
	cache, cached := matchNotificationUpdateCache[key]
	matchNotificationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			matchNotificationAllColumns,
			matchNotificationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update match_notifications, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"match_notifications\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, matchNotificationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(matchNotificationType, matchNotificationMapping, append(wl, matchNotificationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update match_notifications row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for match_notifications")
	}

	if !cached {
		matchNotificationUpdateCacheMut.Lock()
		matchNotificationUpdateCache[key] = cache
		matchNotificationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q matchNotificationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for match_notifications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for match_notifications")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MatchNotificationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchNotificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"match_notifications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, matchNotificationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in matchNotification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all matchNotification")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MatchNotification) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no match_notifications provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(matchNotificationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	matchNotificationUpsertCacheMut.RLock()
	cache, cached := matchNotificationUpsertCache[key]
	matchNotificationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			matchNotificationAllColumns,
			matchNotificationColumnsWithDefault,
			matchNotificationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			matchNotificationAllColumns,
			matchNotificationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert match_notifications, could not build update column list")
		}

		ret := strmangle.SetComplement(matchNotificationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(matchNotificationPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert match_notifications, could not build conflict column list")
			}

			conflict = make([]string, len(matchNotificationPrimaryKeyColumns))
			copy(conflict, matchNotificationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"match_notifications\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(matchNotificationType, matchNotificationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(matchNotificationType, matchNotificationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert match_notifications")
	}

	if !cached {
		matchNotificationUpsertCacheMut.Lock()
		matchNotificationUpsertCache[key] = cache
		matchNotificationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single MatchNotification record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MatchNotification) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no MatchNotification provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), matchNotificationPrimaryKeyMapping)
	sql := "DELETE FROM \"match_notifications\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from match_notifications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for match_notifications")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q matchNotificationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no matchNotificationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from match_notifications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for match_notifications")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MatchNotificationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchNotificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"match_notifications\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, matchNotificationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from matchNotification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for match_notifications")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MatchNotification) Reload(exec boil.Executor) error {
	ret, err := FindMatchNotification(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MatchNotificationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MatchNotificationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchNotificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"match_notifications\".* FROM \"match_notifications\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, matchNotificationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in MatchNotificationSlice")
	}

	*o = slice

	return nil
}

// MatchNotificationExists checks if the MatchNotification row exists.
func MatchNotificationExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"match_notifications\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if match_notifications exists")
	}

	return exists, nil
}

// Exists checks if the MatchNotification row exists.
func (o *MatchNotification) Exists(exec boil.Executor) (bool, error) {
	return MatchNotificationExists(exec, o.ID)
}
