// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PushNotification is an object representing the database table.
type PushNotification struct {
	ID      int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title   null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Message null.String `boil:"message" json:"message,omitempty" toml:"message" yaml:"message,omitempty"`
	Payload null.JSON   `boil:"payload" json:"payload,omitempty" toml:"payload" yaml:"payload,omitempty"`
	SentAt  time.Time   `boil:"sent_at" json:"sent_at" toml:"sent_at" yaml:"sent_at"`
	MatchID null.String `boil:"match_id" json:"match_id,omitempty" toml:"match_id" yaml:"match_id,omitempty"`
	UserID  string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *pushNotificationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pushNotificationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PushNotificationColumns = struct {
	ID      string
	Title   string
	Message string
	Payload string
	SentAt  string
	MatchID string
	UserID  string
}{
	ID:      "id",
	Title:   "title",
	Message: "message",
	Payload: "payload",
	SentAt:  "sent_at",
	MatchID: "match_id",
	UserID:  "user_id",
}

var PushNotificationTableColumns = struct {
	ID      string
	Title   string
	Message string
	Payload string
	SentAt  string
	MatchID string
	UserID  string
}{
	ID:      "push_notifications.id",
	Title:   "push_notifications.title",
	Message: "push_notifications.message",
	Payload: "push_notifications.payload",
	SentAt:  "push_notifications.sent_at",
	MatchID: "push_notifications.match_id",
	UserID:  "push_notifications.user_id",
}

// Generated where

var PushNotificationWhere = struct {
	ID      whereHelperint
	Title   whereHelpernull_String
	Message whereHelpernull_String
	Payload whereHelpernull_JSON
	SentAt  whereHelpertime_Time
	MatchID whereHelpernull_String
	UserID  whereHelperstring
}{
	ID:      whereHelperint{field: "\"push_notifications\".\"id\""},
	Title:   whereHelpernull_String{field: "\"push_notifications\".\"title\""},
	Message: whereHelpernull_String{field: "\"push_notifications\".\"message\""},
	Payload: whereHelpernull_JSON{field: "\"push_notifications\".\"payload\""},
	SentAt:  whereHelpertime_Time{field: "\"push_notifications\".\"sent_at\""},
	MatchID: whereHelpernull_String{field: "\"push_notifications\".\"match_id\""},
	UserID:  whereHelperstring{field: "\"push_notifications\".\"user_id\""},
}

// PushNotificationRels is where relationship names are stored.
var PushNotificationRels = struct {
	Match string
	User  string
}{
	Match: "Match",
	User:  "User",
}

// pushNotificationR is where relationships are stored.
type pushNotificationR struct {
	Match *Match `boil:"Match" json:"Match" toml:"Match" yaml:"Match"`
	User  *User  `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*pushNotificationR) NewStruct() *pushNotificationR {
	return &pushNotificationR{}
}

func (r *pushNotificationR) GetMatch() *Match {
	if r == nil {
		return nil
	}
	return r.Match
}

func (r *pushNotificationR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// pushNotificationL is where Load methods for each relationship are stored.
type pushNotificationL struct{}

var (
	pushNotificationAllColumns            = []string{"id", "title", "message", "payload", "sent_at", "match_id", "user_id"}
	pushNotificationColumnsWithoutDefault = []string{"sent_at", "user_id"}
	pushNotificationColumnsWithDefault    = []string{"id", "title", "message", "payload", "match_id"}
	pushNotificationPrimaryKeyColumns     = []string{"id"}
	pushNotificationGeneratedColumns      = []string{}
)

type (
	// PushNotificationSlice is an alias for a slice of pointers to PushNotification.
	// This should almost always be used instead of []PushNotification.
	PushNotificationSlice []*PushNotification

	pushNotificationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pushNotificationType                 = reflect.TypeOf(&PushNotification{})
	pushNotificationMapping              = queries.MakeStructMapping(pushNotificationType)
	pushNotificationPrimaryKeyMapping, _ = queries.BindMapping(pushNotificationType, pushNotificationMapping, pushNotificationPrimaryKeyColumns)
	pushNotificationInsertCacheMut       sync.RWMutex
	pushNotificationInsertCache          = make(map[string]insertCache)
	pushNotificationUpdateCacheMut       sync.RWMutex
	pushNotificationUpdateCache          = make(map[string]updateCache)
	pushNotificationUpsertCacheMut       sync.RWMutex
	pushNotificationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single pushNotification record from the query.
func (q pushNotificationQuery) One(exec boil.Executor) (*PushNotification, error) {
	o := &PushNotification{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for push_notifications")
	}

	return o, nil
}

// All returns all PushNotification records from the query.
func (q pushNotificationQuery) All(exec boil.Executor) (PushNotificationSlice, error) {
	var o []*PushNotification

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to PushNotification slice")
	}

	return o, nil
}

// Count returns the count of all PushNotification records in the query.
func (q pushNotificationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count push_notifications rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pushNotificationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if push_notifications exists")
	}

	return count > 0, nil
}

// Match pointed to by the foreign key.
func (o *PushNotification) Match(mods ...qm.QueryMod) matchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MatchID),
	}

	queryMods = append(queryMods, mods...)

	return Matches(queryMods...)
}

// User pointed to by the foreign key.
func (o *PushNotification) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadMatch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pushNotificationL) LoadMatch(e boil.Executor, singular bool, maybePushNotification interface{}, mods queries.Applicator) error {
	var slice []*PushNotification
	var object *PushNotification

	if singular {
		var ok bool
		object, ok = maybePushNotification.(*PushNotification)
		if !ok {
			object = new(PushNotification)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePushNotification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePushNotification))
			}
		}
	} else {
		s, ok := maybePushNotification.(*[]*PushNotification)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePushNotification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePushNotification))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &pushNotificationR{}
		}
		if !queries.IsNil(object.MatchID) {
			args[object.MatchID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pushNotificationR{}
			}

			if !queries.IsNil(obj.MatchID) {
				args[obj.MatchID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Match")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Match")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Match = foreign
		if foreign.R == nil {
			foreign.R = &matchR{}
		}
		foreign.R.PushNotifications = append(foreign.R.PushNotifications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MatchID, foreign.ID) {
				local.R.Match = foreign
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.PushNotifications = append(foreign.R.PushNotifications, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pushNotificationL) LoadUser(e boil.Executor, singular bool, maybePushNotification interface{}, mods queries.Applicator) error {
	var slice []*PushNotification
	var object *PushNotification

	if singular {
		var ok bool
		object, ok = maybePushNotification.(*PushNotification)
		if !ok {
			object = new(PushNotification)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePushNotification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePushNotification))
			}
		}
	} else {
		s, ok := maybePushNotification.(*[]*PushNotification)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePushNotification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePushNotification))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &pushNotificationR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pushNotificationR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.PushNotifications = append(foreign.R.PushNotifications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.PushNotifications = append(foreign.R.PushNotifications, local)
				break
			}
		}
	}

	return nil
}

// SetMatch of the pushNotification to the related item.
// Sets o.R.Match to related.
// Adds o to related.R.PushNotifications.
func (o *PushNotification) SetMatch(exec boil.Executor, insert bool, related *Match) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"push_notifications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"match_id"}),
		strmangle.WhereClause("\"", "\"", 2, pushNotificationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MatchID, related.ID)
	if o.R == nil {
		o.R = &pushNotificationR{
			Match: related,
		}
	} else {
		o.R.Match = related
	}

	if related.R == nil {
		related.R = &matchR{
			PushNotifications: PushNotificationSlice{o},
		}
	} else {
		related.R.PushNotifications = append(related.R.PushNotifications, o)
	}

	return nil
}

// RemoveMatch relationship.
// Sets o.R.Match to nil.
// Removes o from all passed in related items' relationships struct.
func (o *PushNotification) RemoveMatch(exec boil.Executor, related *Match) error {
	var err error

	queries.SetScanner(&o.MatchID, nil)
	if _, err = o.Update(exec, boil.Whitelist("match_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Match = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PushNotifications {
		if queries.Equal(o.MatchID, ri.MatchID) {
			continue
		}

		ln := len(related.R.PushNotifications)
		if ln > 1 && i < ln-1 {
			related.R.PushNotifications[i] = related.R.PushNotifications[ln-1]
		}
		related.R.PushNotifications = related.R.PushNotifications[:ln-1]
		break
	}
	return nil
}

// SetUser of the pushNotification to the related item.
// Sets o.R.User to related.
// Adds o to related.R.PushNotifications.
func (o *PushNotification) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"push_notifications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, pushNotificationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &pushNotificationR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			PushNotifications: PushNotificationSlice{o},
		}
	} else {
		related.R.PushNotifications = append(related.R.PushNotifications, o)
	}

	return nil
}

// PushNotifications retrieves all the records using an executor.
func PushNotifications(mods ...qm.QueryMod) pushNotificationQuery {
	mods = append(mods, qm.From("\"push_notifications\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"push_notifications\".*"})
	}

	return pushNotificationQuery{q}
}

// FindPushNotification retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPushNotification(exec boil.Executor, iD int, selectCols ...string) (*PushNotification, error) {
	pushNotificationObj := &PushNotification{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"push_notifications\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, pushNotificationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from push_notifications")
	}

	return pushNotificationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PushNotification) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no push_notifications provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(pushNotificationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pushNotificationInsertCacheMut.RLock()
	cache, cached := pushNotificationInsertCache[key]
	pushNotificationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pushNotificationAllColumns,
			pushNotificationColumnsWithDefault,
			pushNotificationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pushNotificationType, pushNotificationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pushNotificationType, pushNotificationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"push_notifications\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"push_notifications\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into push_notifications")
	}

	if !cached {
		pushNotificationInsertCacheMut.Lock()
		pushNotificationInsertCache[key] = cache
		pushNotificationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the PushNotification.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PushNotification) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	pushNotificationUpdateCacheMut.RLock()
	cache, cached := pushNotificationUpdateCache[key]
	pushNotificationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pushNotificationAllColumns,
			pushNotificationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update push_notifications, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"push_notifications\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pushNotificationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pushNotificationType, pushNotificationMapping, append(wl, pushNotificationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update push_notifications row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for push_notifications")
	}

	if !cached {
		pushNotificationUpdateCacheMut.Lock()
		pushNotificationUpdateCache[key] = cache
		pushNotificationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q pushNotificationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for push_notifications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for push_notifications")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PushNotificationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pushNotificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"push_notifications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pushNotificationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in pushNotification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all pushNotification")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PushNotification) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no push_notifications provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(pushNotificationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pushNotificationUpsertCacheMut.RLock()
	cache, cached := pushNotificationUpsertCache[key]
	pushNotificationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			pushNotificationAllColumns,
			pushNotificationColumnsWithDefault,
			pushNotificationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			pushNotificationAllColumns,
			pushNotificationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert push_notifications, could not build update column list")
		}

		ret := strmangle.SetComplement(pushNotificationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(pushNotificationPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert push_notifications, could not build conflict column list")
			}

			conflict = make([]string, len(pushNotificationPrimaryKeyColumns))
			copy(conflict, pushNotificationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"push_notifications\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(pushNotificationType, pushNotificationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pushNotificationType, pushNotificationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert push_notifications")
	}

	if !cached {
		pushNotificationUpsertCacheMut.Lock()
		pushNotificationUpsertCache[key] = cache
		pushNotificationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single PushNotification record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PushNotification) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no PushNotification provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pushNotificationPrimaryKeyMapping)
	sql := "DELETE FROM \"push_notifications\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from push_notifications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for push_notifications")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pushNotificationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no pushNotificationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from push_notifications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for push_notifications")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PushNotificationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pushNotificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"push_notifications\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pushNotificationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from pushNotification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for push_notifications")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PushNotification) Reload(exec boil.Executor) error {
	ret, err := FindPushNotification(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PushNotificationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PushNotificationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pushNotificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"push_notifications\".* FROM \"push_notifications\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pushNotificationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in PushNotificationSlice")
	}

	*o = slice

	return nil
}

// PushNotificationExists checks if the PushNotification row exists.
func PushNotificationExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"push_notifications\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if push_notifications exists")
	}

	return exists, nil
}

// Exists checks if the PushNotification row exists.
func (o *PushNotification) Exists(exec boil.Executor) (bool, error) {
	return PushNotificationExists(exec, o.ID)
}
