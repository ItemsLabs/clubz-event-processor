// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testChatRoomMembers(t *testing.T) {
	t.Parallel()

	query := ChatRoomMembers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testChatRoomMembersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoomMember{}
	if err = randomize.Struct(seed, o, chatRoomMemberDBTypes, true, chatRoomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ChatRoomMembers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChatRoomMembersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoomMember{}
	if err = randomize.Struct(seed, o, chatRoomMemberDBTypes, true, chatRoomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ChatRoomMembers().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ChatRoomMembers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChatRoomMembersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoomMember{}
	if err = randomize.Struct(seed, o, chatRoomMemberDBTypes, true, chatRoomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChatRoomMemberSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ChatRoomMembers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChatRoomMembersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoomMember{}
	if err = randomize.Struct(seed, o, chatRoomMemberDBTypes, true, chatRoomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ChatRoomMemberExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ChatRoomMember exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ChatRoomMemberExists to return true, but got false.")
	}
}

func testChatRoomMembersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoomMember{}
	if err = randomize.Struct(seed, o, chatRoomMemberDBTypes, true, chatRoomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	chatRoomMemberFound, err := FindChatRoomMember(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if chatRoomMemberFound == nil {
		t.Error("want a record, got nil")
	}
}

func testChatRoomMembersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoomMember{}
	if err = randomize.Struct(seed, o, chatRoomMemberDBTypes, true, chatRoomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ChatRoomMembers().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testChatRoomMembersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoomMember{}
	if err = randomize.Struct(seed, o, chatRoomMemberDBTypes, true, chatRoomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ChatRoomMembers().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testChatRoomMembersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chatRoomMemberOne := &ChatRoomMember{}
	chatRoomMemberTwo := &ChatRoomMember{}
	if err = randomize.Struct(seed, chatRoomMemberOne, chatRoomMemberDBTypes, false, chatRoomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}
	if err = randomize.Struct(seed, chatRoomMemberTwo, chatRoomMemberDBTypes, false, chatRoomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = chatRoomMemberOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = chatRoomMemberTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ChatRoomMembers().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testChatRoomMembersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	chatRoomMemberOne := &ChatRoomMember{}
	chatRoomMemberTwo := &ChatRoomMember{}
	if err = randomize.Struct(seed, chatRoomMemberOne, chatRoomMemberDBTypes, false, chatRoomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}
	if err = randomize.Struct(seed, chatRoomMemberTwo, chatRoomMemberDBTypes, false, chatRoomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = chatRoomMemberOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = chatRoomMemberTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChatRoomMembers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testChatRoomMembersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoomMember{}
	if err = randomize.Struct(seed, o, chatRoomMemberDBTypes, true, chatRoomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChatRoomMembers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChatRoomMembersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoomMember{}
	if err = randomize.Struct(seed, o, chatRoomMemberDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(chatRoomMemberColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ChatRoomMembers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChatRoomMemberToOneChatRoomUsingRoom(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local ChatRoomMember
	var foreign ChatRoom

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, chatRoomMemberDBTypes, false, chatRoomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, chatRoomDBTypes, false, chatRoomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoom struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RoomID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Room().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ChatRoomMemberSlice{&local}
	if err = local.L.LoadRoom(tx, false, (*[]*ChatRoomMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Room == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Room = nil
	if err = local.L.LoadRoom(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Room == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testChatRoomMemberToOneUserUsingUser(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local ChatRoomMember
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, chatRoomMemberDBTypes, false, chatRoomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ChatRoomMemberSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*ChatRoomMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testChatRoomMemberToOneSetOpChatRoomUsingRoom(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ChatRoomMember
	var b, c ChatRoom

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chatRoomMemberDBTypes, false, strmangle.SetComplement(chatRoomMemberPrimaryKeyColumns, chatRoomMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, chatRoomDBTypes, false, strmangle.SetComplement(chatRoomPrimaryKeyColumns, chatRoomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, chatRoomDBTypes, false, strmangle.SetComplement(chatRoomPrimaryKeyColumns, chatRoomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ChatRoom{&b, &c} {
		err = a.SetRoom(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Room != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RoomChatRoomMember != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RoomID != x.ID {
			t.Error("foreign key was wrong value", a.RoomID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RoomID))
		reflect.Indirect(reflect.ValueOf(&a.RoomID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RoomID != x.ID {
			t.Error("foreign key was wrong value", a.RoomID, x.ID)
		}
	}
}
func testChatRoomMemberToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ChatRoomMember
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chatRoomMemberDBTypes, false, strmangle.SetComplement(chatRoomMemberPrimaryKeyColumns, chatRoomMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ChatRoomMember != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testChatRoomMembersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoomMember{}
	if err = randomize.Struct(seed, o, chatRoomMemberDBTypes, true, chatRoomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testChatRoomMembersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoomMember{}
	if err = randomize.Struct(seed, o, chatRoomMemberDBTypes, true, chatRoomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChatRoomMemberSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testChatRoomMembersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoomMember{}
	if err = randomize.Struct(seed, o, chatRoomMemberDBTypes, true, chatRoomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ChatRoomMembers().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	chatRoomMemberDBTypes = map[string]string{`ID`: `integer`, `Muted`: `boolean`, `Banned`: `boolean`, `BannedAt`: `timestamp with time zone`, `RoomID`: `uuid`, `UserID`: `uuid`, `Mod`: `boolean`}
	_                     = bytes.MinRead
)

func testChatRoomMembersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(chatRoomMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(chatRoomMemberAllColumns) == len(chatRoomMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoomMember{}
	if err = randomize.Struct(seed, o, chatRoomMemberDBTypes, true, chatRoomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChatRoomMembers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, chatRoomMemberDBTypes, true, chatRoomMemberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testChatRoomMembersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(chatRoomMemberAllColumns) == len(chatRoomMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ChatRoomMember{}
	if err = randomize.Struct(seed, o, chatRoomMemberDBTypes, true, chatRoomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChatRoomMembers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, chatRoomMemberDBTypes, true, chatRoomMemberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(chatRoomMemberAllColumns, chatRoomMemberPrimaryKeyColumns) {
		fields = chatRoomMemberAllColumns
	} else {
		fields = strmangle.SetComplement(
			chatRoomMemberAllColumns,
			chatRoomMemberPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ChatRoomMemberSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testChatRoomMembersUpsert(t *testing.T) {
	t.Parallel()

	if len(chatRoomMemberAllColumns) == len(chatRoomMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ChatRoomMember{}
	if err = randomize.Struct(seed, &o, chatRoomMemberDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ChatRoomMember: %s", err)
	}

	count, err := ChatRoomMembers().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, chatRoomMemberDBTypes, false, chatRoomMemberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ChatRoomMember struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ChatRoomMember: %s", err)
	}

	count, err = ChatRoomMembers().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
