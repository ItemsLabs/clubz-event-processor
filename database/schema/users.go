// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// User is an object representing the database table.
type User struct {
	ID                string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt         time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Name              string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	FirebaseID        null.String `boil:"firebase_id" json:"firebase_id,omitempty" toml:"firebase_id" yaml:"firebase_id,omitempty"`
	AvatarURL         null.String `boil:"avatar_url" json:"avatar_url,omitempty" toml:"avatar_url" yaml:"avatar_url,omitempty"`
	Balance           float64     `boil:"balance" json:"balance" toml:"balance" yaml:"balance"`
	PaypalEmail       null.String `boil:"paypal_email" json:"paypal_email,omitempty" toml:"paypal_email" yaml:"paypal_email,omitempty"`
	Verified          bool        `boil:"verified" json:"verified" toml:"verified" yaml:"verified"`
	BonusPowerups     int         `boil:"bonus_powerups" json:"bonus_powerups" toml:"bonus_powerups" yaml:"bonus_powerups"`
	ReferralCode      null.String `boil:"referral_code" json:"referral_code,omitempty" toml:"referral_code" yaml:"referral_code,omitempty"`
	ReferrerID        null.String `boil:"referrer_id" json:"referrer_id,omitempty" toml:"referrer_id" yaml:"referrer_id,omitempty"`
	AvgPoints         null.Int    `boil:"avg_points" json:"avg_points,omitempty" toml:"avg_points" yaml:"avg_points,omitempty"`
	AvgRank           null.Int    `boil:"avg_rank" json:"avg_rank,omitempty" toml:"avg_rank" yaml:"avg_rank,omitempty"`
	FollowerCount     null.Int    `boil:"follower_count" json:"follower_count,omitempty" toml:"follower_count" yaml:"follower_count,omitempty"`
	FollowingCount    null.Int    `boil:"following_count" json:"following_count,omitempty" toml:"following_count" yaml:"following_count,omitempty"`
	GamesPlayed       null.Int    `boil:"games_played" json:"games_played,omitempty" toml:"games_played" yaml:"games_played,omitempty"`
	NameChanged       bool        `boil:"name_changed" json:"name_changed" toml:"name_changed" yaml:"name_changed"`
	Moderator         bool        `boil:"moderator" json:"moderator" toml:"moderator" yaml:"moderator"`
	Premium           bool        `boil:"premium" json:"premium" toml:"premium" yaml:"premium"`
	SubscriptionID    null.Int    `boil:"subscription_id" json:"subscription_id,omitempty" toml:"subscription_id" yaml:"subscription_id,omitempty"`
	Influencer        bool        `boil:"influencer" json:"influencer" toml:"influencer" yaml:"influencer"`
	SubscriptionTier  int         `boil:"subscription_tier" json:"subscription_tier" toml:"subscription_tier" yaml:"subscription_tier"`
	AvgRankPercent    null.Int    `boil:"avg_rank_percent" json:"avg_rank_percent,omitempty" toml:"avg_rank_percent" yaml:"avg_rank_percent,omitempty"`
	LastNameChange    null.Time   `boil:"last_name_change" json:"last_name_change,omitempty" toml:"last_name_change" yaml:"last_name_change,omitempty"`
	WalletAddress     null.String `boil:"wallet_address" json:"wallet_address,omitempty" toml:"wallet_address" yaml:"wallet_address,omitempty"`
	Email             null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	EmailVerified     bool        `boil:"email_verified" json:"email_verified" toml:"email_verified" yaml:"email_verified"`
	PasswordHash      null.String `boil:"password_hash" json:"password_hash,omitempty" toml:"password_hash" yaml:"password_hash,omitempty"`
	TokenExpiration   null.Time   `boil:"token_expiration" json:"token_expiration,omitempty" toml:"token_expiration" yaml:"token_expiration,omitempty"`
	VerificationToken null.String `boil:"verification_token" json:"verification_token,omitempty" toml:"verification_token" yaml:"verification_token,omitempty"`
	FinishedGames     null.String `boil:"finished_games" json:"finished_games,omitempty" toml:"finished_games" yaml:"finished_games,omitempty"`
	SequenceSessionID null.String `boil:"sequence_session_id" json:"sequence_session_id,omitempty" toml:"sequence_session_id" yaml:"sequence_session_id,omitempty"`
	RealName          null.String `boil:"real_name" json:"real_name,omitempty" toml:"real_name" yaml:"real_name,omitempty"`
	ReferralBonusUsed null.Bool   `boil:"referral_bonus_used" json:"referral_bonus_used,omitempty" toml:"referral_bonus_used" yaml:"referral_bonus_used,omitempty"`

	R *userR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserColumns = struct {
	ID                string
	CreatedAt         string
	UpdatedAt         string
	Name              string
	FirebaseID        string
	AvatarURL         string
	Balance           string
	PaypalEmail       string
	Verified          string
	BonusPowerups     string
	ReferralCode      string
	ReferrerID        string
	AvgPoints         string
	AvgRank           string
	FollowerCount     string
	FollowingCount    string
	GamesPlayed       string
	NameChanged       string
	Moderator         string
	Premium           string
	SubscriptionID    string
	Influencer        string
	SubscriptionTier  string
	AvgRankPercent    string
	LastNameChange    string
	WalletAddress     string
	Email             string
	EmailVerified     string
	PasswordHash      string
	TokenExpiration   string
	VerificationToken string
	FinishedGames     string
	SequenceSessionID string
	RealName          string
	ReferralBonusUsed string
}{
	ID:                "id",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	Name:              "name",
	FirebaseID:        "firebase_id",
	AvatarURL:         "avatar_url",
	Balance:           "balance",
	PaypalEmail:       "paypal_email",
	Verified:          "verified",
	BonusPowerups:     "bonus_powerups",
	ReferralCode:      "referral_code",
	ReferrerID:        "referrer_id",
	AvgPoints:         "avg_points",
	AvgRank:           "avg_rank",
	FollowerCount:     "follower_count",
	FollowingCount:    "following_count",
	GamesPlayed:       "games_played",
	NameChanged:       "name_changed",
	Moderator:         "moderator",
	Premium:           "premium",
	SubscriptionID:    "subscription_id",
	Influencer:        "influencer",
	SubscriptionTier:  "subscription_tier",
	AvgRankPercent:    "avg_rank_percent",
	LastNameChange:    "last_name_change",
	WalletAddress:     "wallet_address",
	Email:             "email",
	EmailVerified:     "email_verified",
	PasswordHash:      "password_hash",
	TokenExpiration:   "token_expiration",
	VerificationToken: "verification_token",
	FinishedGames:     "finished_games",
	SequenceSessionID: "sequence_session_id",
	RealName:          "real_name",
	ReferralBonusUsed: "referral_bonus_used",
}

var UserTableColumns = struct {
	ID                string
	CreatedAt         string
	UpdatedAt         string
	Name              string
	FirebaseID        string
	AvatarURL         string
	Balance           string
	PaypalEmail       string
	Verified          string
	BonusPowerups     string
	ReferralCode      string
	ReferrerID        string
	AvgPoints         string
	AvgRank           string
	FollowerCount     string
	FollowingCount    string
	GamesPlayed       string
	NameChanged       string
	Moderator         string
	Premium           string
	SubscriptionID    string
	Influencer        string
	SubscriptionTier  string
	AvgRankPercent    string
	LastNameChange    string
	WalletAddress     string
	Email             string
	EmailVerified     string
	PasswordHash      string
	TokenExpiration   string
	VerificationToken string
	FinishedGames     string
	SequenceSessionID string
	RealName          string
	ReferralBonusUsed string
}{
	ID:                "users.id",
	CreatedAt:         "users.created_at",
	UpdatedAt:         "users.updated_at",
	Name:              "users.name",
	FirebaseID:        "users.firebase_id",
	AvatarURL:         "users.avatar_url",
	Balance:           "users.balance",
	PaypalEmail:       "users.paypal_email",
	Verified:          "users.verified",
	BonusPowerups:     "users.bonus_powerups",
	ReferralCode:      "users.referral_code",
	ReferrerID:        "users.referrer_id",
	AvgPoints:         "users.avg_points",
	AvgRank:           "users.avg_rank",
	FollowerCount:     "users.follower_count",
	FollowingCount:    "users.following_count",
	GamesPlayed:       "users.games_played",
	NameChanged:       "users.name_changed",
	Moderator:         "users.moderator",
	Premium:           "users.premium",
	SubscriptionID:    "users.subscription_id",
	Influencer:        "users.influencer",
	SubscriptionTier:  "users.subscription_tier",
	AvgRankPercent:    "users.avg_rank_percent",
	LastNameChange:    "users.last_name_change",
	WalletAddress:     "users.wallet_address",
	Email:             "users.email",
	EmailVerified:     "users.email_verified",
	PasswordHash:      "users.password_hash",
	TokenExpiration:   "users.token_expiration",
	VerificationToken: "users.verification_token",
	FinishedGames:     "users.finished_games",
	SequenceSessionID: "users.sequence_session_id",
	RealName:          "users.real_name",
	ReferralBonusUsed: "users.referral_bonus_used",
}

// Generated where

var UserWhere = struct {
	ID                whereHelperstring
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
	Name              whereHelperstring
	FirebaseID        whereHelpernull_String
	AvatarURL         whereHelpernull_String
	Balance           whereHelperfloat64
	PaypalEmail       whereHelpernull_String
	Verified          whereHelperbool
	BonusPowerups     whereHelperint
	ReferralCode      whereHelpernull_String
	ReferrerID        whereHelpernull_String
	AvgPoints         whereHelpernull_Int
	AvgRank           whereHelpernull_Int
	FollowerCount     whereHelpernull_Int
	FollowingCount    whereHelpernull_Int
	GamesPlayed       whereHelpernull_Int
	NameChanged       whereHelperbool
	Moderator         whereHelperbool
	Premium           whereHelperbool
	SubscriptionID    whereHelpernull_Int
	Influencer        whereHelperbool
	SubscriptionTier  whereHelperint
	AvgRankPercent    whereHelpernull_Int
	LastNameChange    whereHelpernull_Time
	WalletAddress     whereHelpernull_String
	Email             whereHelpernull_String
	EmailVerified     whereHelperbool
	PasswordHash      whereHelpernull_String
	TokenExpiration   whereHelpernull_Time
	VerificationToken whereHelpernull_String
	FinishedGames     whereHelpernull_String
	SequenceSessionID whereHelpernull_String
	RealName          whereHelpernull_String
	ReferralBonusUsed whereHelpernull_Bool
}{
	ID:                whereHelperstring{field: "\"users\".\"id\""},
	CreatedAt:         whereHelpertime_Time{field: "\"users\".\"created_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"users\".\"updated_at\""},
	Name:              whereHelperstring{field: "\"users\".\"name\""},
	FirebaseID:        whereHelpernull_String{field: "\"users\".\"firebase_id\""},
	AvatarURL:         whereHelpernull_String{field: "\"users\".\"avatar_url\""},
	Balance:           whereHelperfloat64{field: "\"users\".\"balance\""},
	PaypalEmail:       whereHelpernull_String{field: "\"users\".\"paypal_email\""},
	Verified:          whereHelperbool{field: "\"users\".\"verified\""},
	BonusPowerups:     whereHelperint{field: "\"users\".\"bonus_powerups\""},
	ReferralCode:      whereHelpernull_String{field: "\"users\".\"referral_code\""},
	ReferrerID:        whereHelpernull_String{field: "\"users\".\"referrer_id\""},
	AvgPoints:         whereHelpernull_Int{field: "\"users\".\"avg_points\""},
	AvgRank:           whereHelpernull_Int{field: "\"users\".\"avg_rank\""},
	FollowerCount:     whereHelpernull_Int{field: "\"users\".\"follower_count\""},
	FollowingCount:    whereHelpernull_Int{field: "\"users\".\"following_count\""},
	GamesPlayed:       whereHelpernull_Int{field: "\"users\".\"games_played\""},
	NameChanged:       whereHelperbool{field: "\"users\".\"name_changed\""},
	Moderator:         whereHelperbool{field: "\"users\".\"moderator\""},
	Premium:           whereHelperbool{field: "\"users\".\"premium\""},
	SubscriptionID:    whereHelpernull_Int{field: "\"users\".\"subscription_id\""},
	Influencer:        whereHelperbool{field: "\"users\".\"influencer\""},
	SubscriptionTier:  whereHelperint{field: "\"users\".\"subscription_tier\""},
	AvgRankPercent:    whereHelpernull_Int{field: "\"users\".\"avg_rank_percent\""},
	LastNameChange:    whereHelpernull_Time{field: "\"users\".\"last_name_change\""},
	WalletAddress:     whereHelpernull_String{field: "\"users\".\"wallet_address\""},
	Email:             whereHelpernull_String{field: "\"users\".\"email\""},
	EmailVerified:     whereHelperbool{field: "\"users\".\"email_verified\""},
	PasswordHash:      whereHelpernull_String{field: "\"users\".\"password_hash\""},
	TokenExpiration:   whereHelpernull_Time{field: "\"users\".\"token_expiration\""},
	VerificationToken: whereHelpernull_String{field: "\"users\".\"verification_token\""},
	FinishedGames:     whereHelpernull_String{field: "\"users\".\"finished_games\""},
	SequenceSessionID: whereHelpernull_String{field: "\"users\".\"sequence_session_id\""},
	RealName:          whereHelpernull_String{field: "\"users\".\"real_name\""},
	ReferralBonusUsed: whereHelpernull_Bool{field: "\"users\".\"referral_bonus_used\""},
}

// UserRels is where relationship names are stored.
var UserRels = struct {
	Referrer                     string
	Subscription                 string
	ChatRoomMember               string
	AppInboxes                   string
	AssignedCardPacks            string
	BanPenalties                 string
	SenderChatMessages           string
	FromUserFollowers            string
	ToUserFollowers              string
	Games                        string
	ManualSubscriptions          string
	MatchLeaderboards            string
	MatchNotifications           string
	Orders                       string
	PushNotifications            string
	StoreProductTransactions     string
	AppUserSubscriptionRequests  string
	Transactions                 string
	UserBadges                   string
	UserBanners                  string
	UserDivisions                string
	UserFrames                   string
	UserGameWeekHistories        string
	UserLeaderboardSubscriptions string
	ReferrerUsers                string
}{
	Referrer:                     "Referrer",
	Subscription:                 "Subscription",
	ChatRoomMember:               "ChatRoomMember",
	AppInboxes:                   "AppInboxes",
	AssignedCardPacks:            "AssignedCardPacks",
	BanPenalties:                 "BanPenalties",
	SenderChatMessages:           "SenderChatMessages",
	FromUserFollowers:            "FromUserFollowers",
	ToUserFollowers:              "ToUserFollowers",
	Games:                        "Games",
	ManualSubscriptions:          "ManualSubscriptions",
	MatchLeaderboards:            "MatchLeaderboards",
	MatchNotifications:           "MatchNotifications",
	Orders:                       "Orders",
	PushNotifications:            "PushNotifications",
	StoreProductTransactions:     "StoreProductTransactions",
	AppUserSubscriptionRequests:  "AppUserSubscriptionRequests",
	Transactions:                 "Transactions",
	UserBadges:                   "UserBadges",
	UserBanners:                  "UserBanners",
	UserDivisions:                "UserDivisions",
	UserFrames:                   "UserFrames",
	UserGameWeekHistories:        "UserGameWeekHistories",
	UserLeaderboardSubscriptions: "UserLeaderboardSubscriptions",
	ReferrerUsers:                "ReferrerUsers",
}

// userR is where relationships are stored.
type userR struct {
	Referrer                     *User                            `boil:"Referrer" json:"Referrer" toml:"Referrer" yaml:"Referrer"`
	Subscription                 *Subscription                    `boil:"Subscription" json:"Subscription" toml:"Subscription" yaml:"Subscription"`
	ChatRoomMember               *ChatRoomMember                  `boil:"ChatRoomMember" json:"ChatRoomMember" toml:"ChatRoomMember" yaml:"ChatRoomMember"`
	AppInboxes                   AppInboxSlice                    `boil:"AppInboxes" json:"AppInboxes" toml:"AppInboxes" yaml:"AppInboxes"`
	AssignedCardPacks            AssignedCardPackSlice            `boil:"AssignedCardPacks" json:"AssignedCardPacks" toml:"AssignedCardPacks" yaml:"AssignedCardPacks"`
	BanPenalties                 BanPenaltySlice                  `boil:"BanPenalties" json:"BanPenalties" toml:"BanPenalties" yaml:"BanPenalties"`
	SenderChatMessages           ChatMessageSlice                 `boil:"SenderChatMessages" json:"SenderChatMessages" toml:"SenderChatMessages" yaml:"SenderChatMessages"`
	FromUserFollowers            FollowerSlice                    `boil:"FromUserFollowers" json:"FromUserFollowers" toml:"FromUserFollowers" yaml:"FromUserFollowers"`
	ToUserFollowers              FollowerSlice                    `boil:"ToUserFollowers" json:"ToUserFollowers" toml:"ToUserFollowers" yaml:"ToUserFollowers"`
	Games                        GameSlice                        `boil:"Games" json:"Games" toml:"Games" yaml:"Games"`
	ManualSubscriptions          ManualSubscriptionSlice          `boil:"ManualSubscriptions" json:"ManualSubscriptions" toml:"ManualSubscriptions" yaml:"ManualSubscriptions"`
	MatchLeaderboards            MatchLeaderboardSlice            `boil:"MatchLeaderboards" json:"MatchLeaderboards" toml:"MatchLeaderboards" yaml:"MatchLeaderboards"`
	MatchNotifications           MatchNotificationSlice           `boil:"MatchNotifications" json:"MatchNotifications" toml:"MatchNotifications" yaml:"MatchNotifications"`
	Orders                       OrderSlice                       `boil:"Orders" json:"Orders" toml:"Orders" yaml:"Orders"`
	PushNotifications            PushNotificationSlice            `boil:"PushNotifications" json:"PushNotifications" toml:"PushNotifications" yaml:"PushNotifications"`
	StoreProductTransactions     StoreProductTransactionSlice     `boil:"StoreProductTransactions" json:"StoreProductTransactions" toml:"StoreProductTransactions" yaml:"StoreProductTransactions"`
	AppUserSubscriptionRequests  SubscriptionRequestSlice         `boil:"AppUserSubscriptionRequests" json:"AppUserSubscriptionRequests" toml:"AppUserSubscriptionRequests" yaml:"AppUserSubscriptionRequests"`
	Transactions                 TransactionSlice                 `boil:"Transactions" json:"Transactions" toml:"Transactions" yaml:"Transactions"`
	UserBadges                   UserBadgeSlice                   `boil:"UserBadges" json:"UserBadges" toml:"UserBadges" yaml:"UserBadges"`
	UserBanners                  UserBannerSlice                  `boil:"UserBanners" json:"UserBanners" toml:"UserBanners" yaml:"UserBanners"`
	UserDivisions                UserDivisionSlice                `boil:"UserDivisions" json:"UserDivisions" toml:"UserDivisions" yaml:"UserDivisions"`
	UserFrames                   UserFrameSlice                   `boil:"UserFrames" json:"UserFrames" toml:"UserFrames" yaml:"UserFrames"`
	UserGameWeekHistories        UserGameWeekHistorySlice         `boil:"UserGameWeekHistories" json:"UserGameWeekHistories" toml:"UserGameWeekHistories" yaml:"UserGameWeekHistories"`
	UserLeaderboardSubscriptions UserLeaderboardSubscriptionSlice `boil:"UserLeaderboardSubscriptions" json:"UserLeaderboardSubscriptions" toml:"UserLeaderboardSubscriptions" yaml:"UserLeaderboardSubscriptions"`
	ReferrerUsers                UserSlice                        `boil:"ReferrerUsers" json:"ReferrerUsers" toml:"ReferrerUsers" yaml:"ReferrerUsers"`
}

// NewStruct creates a new relationship struct
func (*userR) NewStruct() *userR {
	return &userR{}
}

func (r *userR) GetReferrer() *User {
	if r == nil {
		return nil
	}
	return r.Referrer
}

func (r *userR) GetSubscription() *Subscription {
	if r == nil {
		return nil
	}
	return r.Subscription
}

func (r *userR) GetChatRoomMember() *ChatRoomMember {
	if r == nil {
		return nil
	}
	return r.ChatRoomMember
}

func (r *userR) GetAppInboxes() AppInboxSlice {
	if r == nil {
		return nil
	}
	return r.AppInboxes
}

func (r *userR) GetAssignedCardPacks() AssignedCardPackSlice {
	if r == nil {
		return nil
	}
	return r.AssignedCardPacks
}

func (r *userR) GetBanPenalties() BanPenaltySlice {
	if r == nil {
		return nil
	}
	return r.BanPenalties
}

func (r *userR) GetSenderChatMessages() ChatMessageSlice {
	if r == nil {
		return nil
	}
	return r.SenderChatMessages
}

func (r *userR) GetFromUserFollowers() FollowerSlice {
	if r == nil {
		return nil
	}
	return r.FromUserFollowers
}

func (r *userR) GetToUserFollowers() FollowerSlice {
	if r == nil {
		return nil
	}
	return r.ToUserFollowers
}

func (r *userR) GetGames() GameSlice {
	if r == nil {
		return nil
	}
	return r.Games
}

func (r *userR) GetManualSubscriptions() ManualSubscriptionSlice {
	if r == nil {
		return nil
	}
	return r.ManualSubscriptions
}

func (r *userR) GetMatchLeaderboards() MatchLeaderboardSlice {
	if r == nil {
		return nil
	}
	return r.MatchLeaderboards
}

func (r *userR) GetMatchNotifications() MatchNotificationSlice {
	if r == nil {
		return nil
	}
	return r.MatchNotifications
}

func (r *userR) GetOrders() OrderSlice {
	if r == nil {
		return nil
	}
	return r.Orders
}

func (r *userR) GetPushNotifications() PushNotificationSlice {
	if r == nil {
		return nil
	}
	return r.PushNotifications
}

func (r *userR) GetStoreProductTransactions() StoreProductTransactionSlice {
	if r == nil {
		return nil
	}
	return r.StoreProductTransactions
}

func (r *userR) GetAppUserSubscriptionRequests() SubscriptionRequestSlice {
	if r == nil {
		return nil
	}
	return r.AppUserSubscriptionRequests
}

func (r *userR) GetTransactions() TransactionSlice {
	if r == nil {
		return nil
	}
	return r.Transactions
}

func (r *userR) GetUserBadges() UserBadgeSlice {
	if r == nil {
		return nil
	}
	return r.UserBadges
}

func (r *userR) GetUserBanners() UserBannerSlice {
	if r == nil {
		return nil
	}
	return r.UserBanners
}

func (r *userR) GetUserDivisions() UserDivisionSlice {
	if r == nil {
		return nil
	}
	return r.UserDivisions
}

func (r *userR) GetUserFrames() UserFrameSlice {
	if r == nil {
		return nil
	}
	return r.UserFrames
}

func (r *userR) GetUserGameWeekHistories() UserGameWeekHistorySlice {
	if r == nil {
		return nil
	}
	return r.UserGameWeekHistories
}

func (r *userR) GetUserLeaderboardSubscriptions() UserLeaderboardSubscriptionSlice {
	if r == nil {
		return nil
	}
	return r.UserLeaderboardSubscriptions
}

func (r *userR) GetReferrerUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.ReferrerUsers
}

// userL is where Load methods for each relationship are stored.
type userL struct{}

var (
	userAllColumns            = []string{"id", "created_at", "updated_at", "name", "firebase_id", "avatar_url", "balance", "paypal_email", "verified", "bonus_powerups", "referral_code", "referrer_id", "avg_points", "avg_rank", "follower_count", "following_count", "games_played", "name_changed", "moderator", "premium", "subscription_id", "influencer", "subscription_tier", "avg_rank_percent", "last_name_change", "wallet_address", "email", "email_verified", "password_hash", "token_expiration", "verification_token", "finished_games", "sequence_session_id", "real_name", "referral_bonus_used"}
	userColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "name", "balance", "verified", "bonus_powerups", "name_changed", "moderator", "premium", "influencer", "subscription_tier", "email_verified"}
	userColumnsWithDefault    = []string{"firebase_id", "avatar_url", "paypal_email", "referral_code", "referrer_id", "avg_points", "avg_rank", "follower_count", "following_count", "games_played", "subscription_id", "avg_rank_percent", "last_name_change", "wallet_address", "email", "password_hash", "token_expiration", "verification_token", "finished_games", "sequence_session_id", "real_name", "referral_bonus_used"}
	userPrimaryKeyColumns     = []string{"id"}
	userGeneratedColumns      = []string{}
)

type (
	// UserSlice is an alias for a slice of pointers to User.
	// This should almost always be used instead of []User.
	UserSlice []*User

	userQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userType                 = reflect.TypeOf(&User{})
	userMapping              = queries.MakeStructMapping(userType)
	userPrimaryKeyMapping, _ = queries.BindMapping(userType, userMapping, userPrimaryKeyColumns)
	userInsertCacheMut       sync.RWMutex
	userInsertCache          = make(map[string]insertCache)
	userUpdateCacheMut       sync.RWMutex
	userUpdateCache          = make(map[string]updateCache)
	userUpsertCacheMut       sync.RWMutex
	userUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single user record from the query.
func (q userQuery) One(exec boil.Executor) (*User, error) {
	o := &User{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for users")
	}

	return o, nil
}

// All returns all User records from the query.
func (q userQuery) All(exec boil.Executor) (UserSlice, error) {
	var o []*User

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to User slice")
	}

	return o, nil
}

// Count returns the count of all User records in the query.
func (q userQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if users exists")
	}

	return count > 0, nil
}

// Referrer pointed to by the foreign key.
func (o *User) Referrer(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ReferrerID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Subscription pointed to by the foreign key.
func (o *User) Subscription(mods ...qm.QueryMod) subscriptionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SubscriptionID),
	}

	queryMods = append(queryMods, mods...)

	return Subscriptions(queryMods...)
}

// ChatRoomMember pointed to by the foreign key.
func (o *User) ChatRoomMember(mods ...qm.QueryMod) chatRoomMemberQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"user_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return ChatRoomMembers(queryMods...)
}

// AppInboxes retrieves all the app_inbox's AppInboxes with an executor.
func (o *User) AppInboxes(mods ...qm.QueryMod) appInboxQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"app_inbox\".\"user_id\"=?", o.ID),
	)

	return AppInboxes(queryMods...)
}

// AssignedCardPacks retrieves all the assigned_card_pack's AssignedCardPacks with an executor.
func (o *User) AssignedCardPacks(mods ...qm.QueryMod) assignedCardPackQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assigned_card_packs\".\"user_id\"=?", o.ID),
	)

	return AssignedCardPacks(queryMods...)
}

// BanPenalties retrieves all the ban_penalty's BanPenalties with an executor.
func (o *User) BanPenalties(mods ...qm.QueryMod) banPenaltyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ban_penalties\".\"user_id\"=?", o.ID),
	)

	return BanPenalties(queryMods...)
}

// SenderChatMessages retrieves all the chat_message's ChatMessages with an executor via sender_id column.
func (o *User) SenderChatMessages(mods ...qm.QueryMod) chatMessageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chat_messages\".\"sender_id\"=?", o.ID),
	)

	return ChatMessages(queryMods...)
}

// FromUserFollowers retrieves all the follower's Followers with an executor via from_user_id column.
func (o *User) FromUserFollowers(mods ...qm.QueryMod) followerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"followers\".\"from_user_id\"=?", o.ID),
	)

	return Followers(queryMods...)
}

// ToUserFollowers retrieves all the follower's Followers with an executor via to_user_id column.
func (o *User) ToUserFollowers(mods ...qm.QueryMod) followerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"followers\".\"to_user_id\"=?", o.ID),
	)

	return Followers(queryMods...)
}

// Games retrieves all the game's Games with an executor.
func (o *User) Games(mods ...qm.QueryMod) gameQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"games\".\"user_id\"=?", o.ID),
	)

	return Games(queryMods...)
}

// ManualSubscriptions retrieves all the manual_subscription's ManualSubscriptions with an executor.
func (o *User) ManualSubscriptions(mods ...qm.QueryMod) manualSubscriptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"manual_subscriptions\".\"user_id\"=?", o.ID),
	)

	return ManualSubscriptions(queryMods...)
}

// MatchLeaderboards retrieves all the match_leaderboard's MatchLeaderboards with an executor.
func (o *User) MatchLeaderboards(mods ...qm.QueryMod) matchLeaderboardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"match_leaderboard\".\"user_id\"=?", o.ID),
	)

	return MatchLeaderboards(queryMods...)
}

// MatchNotifications retrieves all the match_notification's MatchNotifications with an executor.
func (o *User) MatchNotifications(mods ...qm.QueryMod) matchNotificationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"match_notifications\".\"user_id\"=?", o.ID),
	)

	return MatchNotifications(queryMods...)
}

// Orders retrieves all the order's Orders with an executor.
func (o *User) Orders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"user_id\"=?", o.ID),
	)

	return Orders(queryMods...)
}

// PushNotifications retrieves all the push_notification's PushNotifications with an executor.
func (o *User) PushNotifications(mods ...qm.QueryMod) pushNotificationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"push_notifications\".\"user_id\"=?", o.ID),
	)

	return PushNotifications(queryMods...)
}

// StoreProductTransactions retrieves all the store_product_transaction's StoreProductTransactions with an executor.
func (o *User) StoreProductTransactions(mods ...qm.QueryMod) storeProductTransactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"store_product_transactions\".\"user_id\"=?", o.ID),
	)

	return StoreProductTransactions(queryMods...)
}

// AppUserSubscriptionRequests retrieves all the subscription_request's SubscriptionRequests with an executor via app_user_id column.
func (o *User) AppUserSubscriptionRequests(mods ...qm.QueryMod) subscriptionRequestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"subscription_requests\".\"app_user_id\"=?", o.ID),
	)

	return SubscriptionRequests(queryMods...)
}

// Transactions retrieves all the transaction's Transactions with an executor.
func (o *User) Transactions(mods ...qm.QueryMod) transactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transactions\".\"user_id\"=?", o.ID),
	)

	return Transactions(queryMods...)
}

// UserBadges retrieves all the user_badge's UserBadges with an executor.
func (o *User) UserBadges(mods ...qm.QueryMod) userBadgeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_badges\".\"user_id\"=?", o.ID),
	)

	return UserBadges(queryMods...)
}

// UserBanners retrieves all the user_banner's UserBanners with an executor.
func (o *User) UserBanners(mods ...qm.QueryMod) userBannerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_banners\".\"user_id\"=?", o.ID),
	)

	return UserBanners(queryMods...)
}

// UserDivisions retrieves all the user_division's UserDivisions with an executor.
func (o *User) UserDivisions(mods ...qm.QueryMod) userDivisionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_divisions\".\"user_id\"=?", o.ID),
	)

	return UserDivisions(queryMods...)
}

// UserFrames retrieves all the user_frame's UserFrames with an executor.
func (o *User) UserFrames(mods ...qm.QueryMod) userFrameQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_frames\".\"user_id\"=?", o.ID),
	)

	return UserFrames(queryMods...)
}

// UserGameWeekHistories retrieves all the user_game_week_history's UserGameWeekHistories with an executor.
func (o *User) UserGameWeekHistories(mods ...qm.QueryMod) userGameWeekHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_game_week_histories\".\"user_id\"=?", o.ID),
	)

	return UserGameWeekHistories(queryMods...)
}

// UserLeaderboardSubscriptions retrieves all the user_leaderboard_subscription's UserLeaderboardSubscriptions with an executor.
func (o *User) UserLeaderboardSubscriptions(mods ...qm.QueryMod) userLeaderboardSubscriptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_leaderboard_subscriptions\".\"user_id\"=?", o.ID),
	)

	return UserLeaderboardSubscriptions(queryMods...)
}

// ReferrerUsers retrieves all the user's Users with an executor via referrer_id column.
func (o *User) ReferrerUsers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"users\".\"referrer_id\"=?", o.ID),
	)

	return Users(queryMods...)
}

// LoadReferrer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userL) LoadReferrer(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		if !queries.IsNil(object.ReferrerID) {
			args[object.ReferrerID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			if !queries.IsNil(obj.ReferrerID) {
				args[obj.ReferrerID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Referrer = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ReferrerUsers = append(foreign.R.ReferrerUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ReferrerID, foreign.ID) {
				local.R.Referrer = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ReferrerUsers = append(foreign.R.ReferrerUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadSubscription allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userL) LoadSubscription(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		if !queries.IsNil(object.SubscriptionID) {
			args[object.SubscriptionID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			if !queries.IsNil(obj.SubscriptionID) {
				args[obj.SubscriptionID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`subscriptions`),
		qm.WhereIn(`subscriptions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Subscription")
	}

	var resultSlice []*Subscription
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Subscription")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for subscriptions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subscriptions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Subscription = foreign
		if foreign.R == nil {
			foreign.R = &subscriptionR{}
		}
		foreign.R.Users = append(foreign.R.Users, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SubscriptionID, foreign.ID) {
				local.R.Subscription = foreign
				if foreign.R == nil {
					foreign.R = &subscriptionR{}
				}
				foreign.R.Users = append(foreign.R.Users, local)
				break
			}
		}
	}

	return nil
}

// LoadChatRoomMember allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (userL) LoadChatRoomMember(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`chat_room_members`),
		qm.WhereIn(`chat_room_members.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ChatRoomMember")
	}

	var resultSlice []*ChatRoomMember
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ChatRoomMember")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chat_room_members")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chat_room_members")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChatRoomMember = foreign
		if foreign.R == nil {
			foreign.R = &chatRoomMemberR{}
		}
		foreign.R.User = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.UserID {
				local.R.ChatRoomMember = foreign
				if foreign.R == nil {
					foreign.R = &chatRoomMemberR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadAppInboxes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadAppInboxes(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`app_inbox`),
		qm.WhereIn(`app_inbox.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load app_inbox")
	}

	var resultSlice []*AppInbox
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice app_inbox")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on app_inbox")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for app_inbox")
	}

	if singular {
		object.R.AppInboxes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &appInboxR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.UserID) {
				local.R.AppInboxes = append(local.R.AppInboxes, foreign)
				if foreign.R == nil {
					foreign.R = &appInboxR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadAssignedCardPacks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadAssignedCardPacks(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`assigned_card_packs`),
		qm.WhereIn(`assigned_card_packs.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assigned_card_packs")
	}

	var resultSlice []*AssignedCardPack
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assigned_card_packs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assigned_card_packs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assigned_card_packs")
	}

	if singular {
		object.R.AssignedCardPacks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assignedCardPackR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.AssignedCardPacks = append(local.R.AssignedCardPacks, foreign)
				if foreign.R == nil {
					foreign.R = &assignedCardPackR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadBanPenalties allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadBanPenalties(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`ban_penalties`),
		qm.WhereIn(`ban_penalties.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ban_penalties")
	}

	var resultSlice []*BanPenalty
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ban_penalties")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ban_penalties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ban_penalties")
	}

	if singular {
		object.R.BanPenalties = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &banPenaltyR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.BanPenalties = append(local.R.BanPenalties, foreign)
				if foreign.R == nil {
					foreign.R = &banPenaltyR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadSenderChatMessages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadSenderChatMessages(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`chat_messages`),
		qm.WhereIn(`chat_messages.sender_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chat_messages")
	}

	var resultSlice []*ChatMessage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chat_messages")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chat_messages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chat_messages")
	}

	if singular {
		object.R.SenderChatMessages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chatMessageR{}
			}
			foreign.R.Sender = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SenderID {
				local.R.SenderChatMessages = append(local.R.SenderChatMessages, foreign)
				if foreign.R == nil {
					foreign.R = &chatMessageR{}
				}
				foreign.R.Sender = local
				break
			}
		}
	}

	return nil
}

// LoadFromUserFollowers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadFromUserFollowers(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`followers`),
		qm.WhereIn(`followers.from_user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load followers")
	}

	var resultSlice []*Follower
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice followers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on followers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for followers")
	}

	if singular {
		object.R.FromUserFollowers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &followerR{}
			}
			foreign.R.FromUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FromUserID {
				local.R.FromUserFollowers = append(local.R.FromUserFollowers, foreign)
				if foreign.R == nil {
					foreign.R = &followerR{}
				}
				foreign.R.FromUser = local
				break
			}
		}
	}

	return nil
}

// LoadToUserFollowers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadToUserFollowers(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`followers`),
		qm.WhereIn(`followers.to_user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load followers")
	}

	var resultSlice []*Follower
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice followers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on followers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for followers")
	}

	if singular {
		object.R.ToUserFollowers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &followerR{}
			}
			foreign.R.ToUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ToUserID {
				local.R.ToUserFollowers = append(local.R.ToUserFollowers, foreign)
				if foreign.R == nil {
					foreign.R = &followerR{}
				}
				foreign.R.ToUser = local
				break
			}
		}
	}

	return nil
}

// LoadGames allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadGames(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`games`),
		qm.WhereIn(`games.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load games")
	}

	var resultSlice []*Game
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice games")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on games")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for games")
	}

	if singular {
		object.R.Games = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gameR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.Games = append(local.R.Games, foreign)
				if foreign.R == nil {
					foreign.R = &gameR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadManualSubscriptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadManualSubscriptions(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`manual_subscriptions`),
		qm.WhereIn(`manual_subscriptions.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load manual_subscriptions")
	}

	var resultSlice []*ManualSubscription
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice manual_subscriptions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on manual_subscriptions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for manual_subscriptions")
	}

	if singular {
		object.R.ManualSubscriptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &manualSubscriptionR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.ManualSubscriptions = append(local.R.ManualSubscriptions, foreign)
				if foreign.R == nil {
					foreign.R = &manualSubscriptionR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadMatchLeaderboards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadMatchLeaderboards(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`match_leaderboard`),
		qm.WhereIn(`match_leaderboard.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load match_leaderboard")
	}

	var resultSlice []*MatchLeaderboard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice match_leaderboard")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on match_leaderboard")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for match_leaderboard")
	}

	if singular {
		object.R.MatchLeaderboards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchLeaderboardR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.MatchLeaderboards = append(local.R.MatchLeaderboards, foreign)
				if foreign.R == nil {
					foreign.R = &matchLeaderboardR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadMatchNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadMatchNotifications(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`match_notifications`),
		qm.WhereIn(`match_notifications.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load match_notifications")
	}

	var resultSlice []*MatchNotification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice match_notifications")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on match_notifications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for match_notifications")
	}

	if singular {
		object.R.MatchNotifications = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchNotificationR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.UserID) {
				local.R.MatchNotifications = append(local.R.MatchNotifications, foreign)
				if foreign.R == nil {
					foreign.R = &matchNotificationR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadOrders(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if singular {
		object.R.Orders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.Orders = append(local.R.Orders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadPushNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadPushNotifications(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`push_notifications`),
		qm.WhereIn(`push_notifications.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load push_notifications")
	}

	var resultSlice []*PushNotification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice push_notifications")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on push_notifications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for push_notifications")
	}

	if singular {
		object.R.PushNotifications = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pushNotificationR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.PushNotifications = append(local.R.PushNotifications, foreign)
				if foreign.R == nil {
					foreign.R = &pushNotificationR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadStoreProductTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadStoreProductTransactions(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`store_product_transactions`),
		qm.WhereIn(`store_product_transactions.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load store_product_transactions")
	}

	var resultSlice []*StoreProductTransaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice store_product_transactions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on store_product_transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for store_product_transactions")
	}

	if singular {
		object.R.StoreProductTransactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &storeProductTransactionR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.UserID) {
				local.R.StoreProductTransactions = append(local.R.StoreProductTransactions, foreign)
				if foreign.R == nil {
					foreign.R = &storeProductTransactionR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadAppUserSubscriptionRequests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadAppUserSubscriptionRequests(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`subscription_requests`),
		qm.WhereIn(`subscription_requests.app_user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load subscription_requests")
	}

	var resultSlice []*SubscriptionRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice subscription_requests")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on subscription_requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subscription_requests")
	}

	if singular {
		object.R.AppUserSubscriptionRequests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subscriptionRequestR{}
			}
			foreign.R.AppUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AppUserID {
				local.R.AppUserSubscriptionRequests = append(local.R.AppUserSubscriptionRequests, foreign)
				if foreign.R == nil {
					foreign.R = &subscriptionRequestR{}
				}
				foreign.R.AppUser = local
				break
			}
		}
	}

	return nil
}

// LoadTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadTransactions(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`transactions`),
		qm.WhereIn(`transactions.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transactions")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transactions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if singular {
		object.R.Transactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.Transactions = append(local.R.Transactions, foreign)
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserBadges allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUserBadges(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_badges`),
		qm.WhereIn(`user_badges.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_badges")
	}

	var resultSlice []*UserBadge
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_badges")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_badges")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_badges")
	}

	if singular {
		object.R.UserBadges = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userBadgeR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserBadges = append(local.R.UserBadges, foreign)
				if foreign.R == nil {
					foreign.R = &userBadgeR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserBanners allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUserBanners(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_banners`),
		qm.WhereIn(`user_banners.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_banners")
	}

	var resultSlice []*UserBanner
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_banners")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_banners")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_banners")
	}

	if singular {
		object.R.UserBanners = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userBannerR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserBanners = append(local.R.UserBanners, foreign)
				if foreign.R == nil {
					foreign.R = &userBannerR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserDivisions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUserDivisions(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_divisions`),
		qm.WhereIn(`user_divisions.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_divisions")
	}

	var resultSlice []*UserDivision
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_divisions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_divisions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_divisions")
	}

	if singular {
		object.R.UserDivisions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userDivisionR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserDivisions = append(local.R.UserDivisions, foreign)
				if foreign.R == nil {
					foreign.R = &userDivisionR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserFrames allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUserFrames(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_frames`),
		qm.WhereIn(`user_frames.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_frames")
	}

	var resultSlice []*UserFrame
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_frames")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_frames")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_frames")
	}

	if singular {
		object.R.UserFrames = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userFrameR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserFrames = append(local.R.UserFrames, foreign)
				if foreign.R == nil {
					foreign.R = &userFrameR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserGameWeekHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUserGameWeekHistories(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_game_week_histories`),
		qm.WhereIn(`user_game_week_histories.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_game_week_histories")
	}

	var resultSlice []*UserGameWeekHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_game_week_histories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_game_week_histories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_game_week_histories")
	}

	if singular {
		object.R.UserGameWeekHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userGameWeekHistoryR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserGameWeekHistories = append(local.R.UserGameWeekHistories, foreign)
				if foreign.R == nil {
					foreign.R = &userGameWeekHistoryR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserLeaderboardSubscriptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUserLeaderboardSubscriptions(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_leaderboard_subscriptions`),
		qm.WhereIn(`user_leaderboard_subscriptions.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_leaderboard_subscriptions")
	}

	var resultSlice []*UserLeaderboardSubscription
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_leaderboard_subscriptions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_leaderboard_subscriptions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_leaderboard_subscriptions")
	}

	if singular {
		object.R.UserLeaderboardSubscriptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userLeaderboardSubscriptionR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserLeaderboardSubscriptions = append(local.R.UserLeaderboardSubscriptions, foreign)
				if foreign.R == nil {
					foreign.R = &userLeaderboardSubscriptionR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadReferrerUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadReferrerUsers(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.referrer_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if singular {
		object.R.ReferrerUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Referrer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ReferrerID) {
				local.R.ReferrerUsers = append(local.R.ReferrerUsers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Referrer = local
				break
			}
		}
	}

	return nil
}

// SetReferrer of the user to the related item.
// Sets o.R.Referrer to related.
// Adds o to related.R.ReferrerUsers.
func (o *User) SetReferrer(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"referrer_id"}),
		strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ReferrerID, related.ID)
	if o.R == nil {
		o.R = &userR{
			Referrer: related,
		}
	} else {
		o.R.Referrer = related
	}

	if related.R == nil {
		related.R = &userR{
			ReferrerUsers: UserSlice{o},
		}
	} else {
		related.R.ReferrerUsers = append(related.R.ReferrerUsers, o)
	}

	return nil
}

// RemoveReferrer relationship.
// Sets o.R.Referrer to nil.
// Removes o from all passed in related items' relationships struct.
func (o *User) RemoveReferrer(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.ReferrerID, nil)
	if _, err = o.Update(exec, boil.Whitelist("referrer_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Referrer = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ReferrerUsers {
		if queries.Equal(o.ReferrerID, ri.ReferrerID) {
			continue
		}

		ln := len(related.R.ReferrerUsers)
		if ln > 1 && i < ln-1 {
			related.R.ReferrerUsers[i] = related.R.ReferrerUsers[ln-1]
		}
		related.R.ReferrerUsers = related.R.ReferrerUsers[:ln-1]
		break
	}
	return nil
}

// SetSubscription of the user to the related item.
// Sets o.R.Subscription to related.
// Adds o to related.R.Users.
func (o *User) SetSubscription(exec boil.Executor, insert bool, related *Subscription) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"subscription_id"}),
		strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SubscriptionID, related.ID)
	if o.R == nil {
		o.R = &userR{
			Subscription: related,
		}
	} else {
		o.R.Subscription = related
	}

	if related.R == nil {
		related.R = &subscriptionR{
			Users: UserSlice{o},
		}
	} else {
		related.R.Users = append(related.R.Users, o)
	}

	return nil
}

// RemoveSubscription relationship.
// Sets o.R.Subscription to nil.
// Removes o from all passed in related items' relationships struct.
func (o *User) RemoveSubscription(exec boil.Executor, related *Subscription) error {
	var err error

	queries.SetScanner(&o.SubscriptionID, nil)
	if _, err = o.Update(exec, boil.Whitelist("subscription_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Subscription = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Users {
		if queries.Equal(o.SubscriptionID, ri.SubscriptionID) {
			continue
		}

		ln := len(related.R.Users)
		if ln > 1 && i < ln-1 {
			related.R.Users[i] = related.R.Users[ln-1]
		}
		related.R.Users = related.R.Users[:ln-1]
		break
	}
	return nil
}

// SetChatRoomMember of the user to the related item.
// Sets o.R.ChatRoomMember to related.
// Adds o to related.R.User.
func (o *User) SetChatRoomMember(exec boil.Executor, insert bool, related *ChatRoomMember) error {
	var err error

	if insert {
		related.UserID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"chat_room_members\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
			strmangle.WhereClause("\"", "\"", 2, chatRoomMemberPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.UserID = o.ID
	}

	if o.R == nil {
		o.R = &userR{
			ChatRoomMember: related,
		}
	} else {
		o.R.ChatRoomMember = related
	}

	if related.R == nil {
		related.R = &chatRoomMemberR{
			User: o,
		}
	} else {
		related.R.User = o
	}
	return nil
}

// AddAppInboxes adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.AppInboxes.
// Sets related.R.User appropriately.
func (o *User) AddAppInboxes(exec boil.Executor, insert bool, related ...*AppInbox) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UserID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"app_inbox\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, appInboxPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UserID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			AppInboxes: related,
		}
	} else {
		o.R.AppInboxes = append(o.R.AppInboxes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &appInboxR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// SetAppInboxes removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.User's AppInboxes accordingly.
// Replaces o.R.AppInboxes with related.
// Sets related.R.User's AppInboxes accordingly.
func (o *User) SetAppInboxes(exec boil.Executor, insert bool, related ...*AppInbox) error {
	query := "update \"app_inbox\" set \"user_id\" = null where \"user_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AppInboxes {
			queries.SetScanner(&rel.UserID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.User = nil
		}
		o.R.AppInboxes = nil
	}

	return o.AddAppInboxes(exec, insert, related...)
}

// RemoveAppInboxes relationships from objects passed in.
// Removes related items from R.AppInboxes (uses pointer comparison, removal does not keep order)
// Sets related.R.User.
func (o *User) RemoveAppInboxes(exec boil.Executor, related ...*AppInbox) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.UserID, nil)
		if rel.R != nil {
			rel.R.User = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("user_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AppInboxes {
			if rel != ri {
				continue
			}

			ln := len(o.R.AppInboxes)
			if ln > 1 && i < ln-1 {
				o.R.AppInboxes[i] = o.R.AppInboxes[ln-1]
			}
			o.R.AppInboxes = o.R.AppInboxes[:ln-1]
			break
		}
	}

	return nil
}

// AddAssignedCardPacks adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.AssignedCardPacks.
// Sets related.R.User appropriately.
func (o *User) AddAssignedCardPacks(exec boil.Executor, insert bool, related ...*AssignedCardPack) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assigned_card_packs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, assignedCardPackPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			AssignedCardPacks: related,
		}
	} else {
		o.R.AssignedCardPacks = append(o.R.AssignedCardPacks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assignedCardPackR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddBanPenalties adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.BanPenalties.
// Sets related.R.User appropriately.
func (o *User) AddBanPenalties(exec boil.Executor, insert bool, related ...*BanPenalty) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ban_penalties\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, banPenaltyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			BanPenalties: related,
		}
	} else {
		o.R.BanPenalties = append(o.R.BanPenalties, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &banPenaltyR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddSenderChatMessages adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.SenderChatMessages.
// Sets related.R.Sender appropriately.
func (o *User) AddSenderChatMessages(exec boil.Executor, insert bool, related ...*ChatMessage) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SenderID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chat_messages\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sender_id"}),
				strmangle.WhereClause("\"", "\"", 2, chatMessagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SenderID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			SenderChatMessages: related,
		}
	} else {
		o.R.SenderChatMessages = append(o.R.SenderChatMessages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chatMessageR{
				Sender: o,
			}
		} else {
			rel.R.Sender = o
		}
	}
	return nil
}

// AddFromUserFollowers adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.FromUserFollowers.
// Sets related.R.FromUser appropriately.
func (o *User) AddFromUserFollowers(exec boil.Executor, insert bool, related ...*Follower) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FromUserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"followers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"from_user_id"}),
				strmangle.WhereClause("\"", "\"", 2, followerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FromUserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			FromUserFollowers: related,
		}
	} else {
		o.R.FromUserFollowers = append(o.R.FromUserFollowers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &followerR{
				FromUser: o,
			}
		} else {
			rel.R.FromUser = o
		}
	}
	return nil
}

// AddToUserFollowers adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.ToUserFollowers.
// Sets related.R.ToUser appropriately.
func (o *User) AddToUserFollowers(exec boil.Executor, insert bool, related ...*Follower) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ToUserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"followers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"to_user_id"}),
				strmangle.WhereClause("\"", "\"", 2, followerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ToUserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			ToUserFollowers: related,
		}
	} else {
		o.R.ToUserFollowers = append(o.R.ToUserFollowers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &followerR{
				ToUser: o,
			}
		} else {
			rel.R.ToUser = o
		}
	}
	return nil
}

// AddGames adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.Games.
// Sets related.R.User appropriately.
func (o *User) AddGames(exec boil.Executor, insert bool, related ...*Game) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"games\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, gamePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			Games: related,
		}
	} else {
		o.R.Games = append(o.R.Games, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gameR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddManualSubscriptions adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.ManualSubscriptions.
// Sets related.R.User appropriately.
func (o *User) AddManualSubscriptions(exec boil.Executor, insert bool, related ...*ManualSubscription) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"manual_subscriptions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, manualSubscriptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			ManualSubscriptions: related,
		}
	} else {
		o.R.ManualSubscriptions = append(o.R.ManualSubscriptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &manualSubscriptionR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddMatchLeaderboards adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.MatchLeaderboards.
// Sets related.R.User appropriately.
func (o *User) AddMatchLeaderboards(exec boil.Executor, insert bool, related ...*MatchLeaderboard) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"match_leaderboard\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchLeaderboardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			MatchLeaderboards: related,
		}
	} else {
		o.R.MatchLeaderboards = append(o.R.MatchLeaderboards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchLeaderboardR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddMatchNotifications adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.MatchNotifications.
// Sets related.R.User appropriately.
func (o *User) AddMatchNotifications(exec boil.Executor, insert bool, related ...*MatchNotification) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UserID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"match_notifications\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchNotificationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UserID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			MatchNotifications: related,
		}
	} else {
		o.R.MatchNotifications = append(o.R.MatchNotifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchNotificationR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// SetMatchNotifications removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.User's MatchNotifications accordingly.
// Replaces o.R.MatchNotifications with related.
// Sets related.R.User's MatchNotifications accordingly.
func (o *User) SetMatchNotifications(exec boil.Executor, insert bool, related ...*MatchNotification) error {
	query := "update \"match_notifications\" set \"user_id\" = null where \"user_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.MatchNotifications {
			queries.SetScanner(&rel.UserID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.User = nil
		}
		o.R.MatchNotifications = nil
	}

	return o.AddMatchNotifications(exec, insert, related...)
}

// RemoveMatchNotifications relationships from objects passed in.
// Removes related items from R.MatchNotifications (uses pointer comparison, removal does not keep order)
// Sets related.R.User.
func (o *User) RemoveMatchNotifications(exec boil.Executor, related ...*MatchNotification) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.UserID, nil)
		if rel.R != nil {
			rel.R.User = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("user_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MatchNotifications {
			if rel != ri {
				continue
			}

			ln := len(o.R.MatchNotifications)
			if ln > 1 && i < ln-1 {
				o.R.MatchNotifications[i] = o.R.MatchNotifications[ln-1]
			}
			o.R.MatchNotifications = o.R.MatchNotifications[:ln-1]
			break
		}
	}

	return nil
}

// AddOrders adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.Orders.
// Sets related.R.User appropriately.
func (o *User) AddOrders(exec boil.Executor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			Orders: related,
		}
	} else {
		o.R.Orders = append(o.R.Orders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddPushNotifications adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.PushNotifications.
// Sets related.R.User appropriately.
func (o *User) AddPushNotifications(exec boil.Executor, insert bool, related ...*PushNotification) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"push_notifications\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, pushNotificationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			PushNotifications: related,
		}
	} else {
		o.R.PushNotifications = append(o.R.PushNotifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pushNotificationR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddStoreProductTransactions adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.StoreProductTransactions.
// Sets related.R.User appropriately.
func (o *User) AddStoreProductTransactions(exec boil.Executor, insert bool, related ...*StoreProductTransaction) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UserID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"store_product_transactions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, storeProductTransactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UserID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			StoreProductTransactions: related,
		}
	} else {
		o.R.StoreProductTransactions = append(o.R.StoreProductTransactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &storeProductTransactionR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// SetStoreProductTransactions removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.User's StoreProductTransactions accordingly.
// Replaces o.R.StoreProductTransactions with related.
// Sets related.R.User's StoreProductTransactions accordingly.
func (o *User) SetStoreProductTransactions(exec boil.Executor, insert bool, related ...*StoreProductTransaction) error {
	query := "update \"store_product_transactions\" set \"user_id\" = null where \"user_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.StoreProductTransactions {
			queries.SetScanner(&rel.UserID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.User = nil
		}
		o.R.StoreProductTransactions = nil
	}

	return o.AddStoreProductTransactions(exec, insert, related...)
}

// RemoveStoreProductTransactions relationships from objects passed in.
// Removes related items from R.StoreProductTransactions (uses pointer comparison, removal does not keep order)
// Sets related.R.User.
func (o *User) RemoveStoreProductTransactions(exec boil.Executor, related ...*StoreProductTransaction) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.UserID, nil)
		if rel.R != nil {
			rel.R.User = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("user_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.StoreProductTransactions {
			if rel != ri {
				continue
			}

			ln := len(o.R.StoreProductTransactions)
			if ln > 1 && i < ln-1 {
				o.R.StoreProductTransactions[i] = o.R.StoreProductTransactions[ln-1]
			}
			o.R.StoreProductTransactions = o.R.StoreProductTransactions[:ln-1]
			break
		}
	}

	return nil
}

// AddAppUserSubscriptionRequests adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.AppUserSubscriptionRequests.
// Sets related.R.AppUser appropriately.
func (o *User) AddAppUserSubscriptionRequests(exec boil.Executor, insert bool, related ...*SubscriptionRequest) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AppUserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"subscription_requests\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"app_user_id"}),
				strmangle.WhereClause("\"", "\"", 2, subscriptionRequestPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AppUserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			AppUserSubscriptionRequests: related,
		}
	} else {
		o.R.AppUserSubscriptionRequests = append(o.R.AppUserSubscriptionRequests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subscriptionRequestR{
				AppUser: o,
			}
		} else {
			rel.R.AppUser = o
		}
	}
	return nil
}

// AddTransactions adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.Transactions.
// Sets related.R.User appropriately.
func (o *User) AddTransactions(exec boil.Executor, insert bool, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transactions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			Transactions: related,
		}
	} else {
		o.R.Transactions = append(o.R.Transactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserBadges adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UserBadges.
// Sets related.R.User appropriately.
func (o *User) AddUserBadges(exec boil.Executor, insert bool, related ...*UserBadge) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_badges\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userBadgePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UserBadges: related,
		}
	} else {
		o.R.UserBadges = append(o.R.UserBadges, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userBadgeR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserBanners adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UserBanners.
// Sets related.R.User appropriately.
func (o *User) AddUserBanners(exec boil.Executor, insert bool, related ...*UserBanner) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_banners\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userBannerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UserBanners: related,
		}
	} else {
		o.R.UserBanners = append(o.R.UserBanners, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userBannerR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserDivisions adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UserDivisions.
// Sets related.R.User appropriately.
func (o *User) AddUserDivisions(exec boil.Executor, insert bool, related ...*UserDivision) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_divisions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userDivisionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UserDivisions: related,
		}
	} else {
		o.R.UserDivisions = append(o.R.UserDivisions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userDivisionR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserFrames adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UserFrames.
// Sets related.R.User appropriately.
func (o *User) AddUserFrames(exec boil.Executor, insert bool, related ...*UserFrame) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_frames\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userFramePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UserFrames: related,
		}
	} else {
		o.R.UserFrames = append(o.R.UserFrames, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userFrameR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserGameWeekHistories adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UserGameWeekHistories.
// Sets related.R.User appropriately.
func (o *User) AddUserGameWeekHistories(exec boil.Executor, insert bool, related ...*UserGameWeekHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_game_week_histories\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userGameWeekHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UserGameWeekHistories: related,
		}
	} else {
		o.R.UserGameWeekHistories = append(o.R.UserGameWeekHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userGameWeekHistoryR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserLeaderboardSubscriptions adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UserLeaderboardSubscriptions.
// Sets related.R.User appropriately.
func (o *User) AddUserLeaderboardSubscriptions(exec boil.Executor, insert bool, related ...*UserLeaderboardSubscription) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_leaderboard_subscriptions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userLeaderboardSubscriptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UserLeaderboardSubscriptions: related,
		}
	} else {
		o.R.UserLeaderboardSubscriptions = append(o.R.UserLeaderboardSubscriptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userLeaderboardSubscriptionR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddReferrerUsers adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.ReferrerUsers.
// Sets related.R.Referrer appropriately.
func (o *User) AddReferrerUsers(exec boil.Executor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ReferrerID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"referrer_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ReferrerID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			ReferrerUsers: related,
		}
	} else {
		o.R.ReferrerUsers = append(o.R.ReferrerUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Referrer: o,
			}
		} else {
			rel.R.Referrer = o
		}
	}
	return nil
}

// SetReferrerUsers removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Referrer's ReferrerUsers accordingly.
// Replaces o.R.ReferrerUsers with related.
// Sets related.R.Referrer's ReferrerUsers accordingly.
func (o *User) SetReferrerUsers(exec boil.Executor, insert bool, related ...*User) error {
	query := "update \"users\" set \"referrer_id\" = null where \"referrer_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ReferrerUsers {
			queries.SetScanner(&rel.ReferrerID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Referrer = nil
		}
		o.R.ReferrerUsers = nil
	}

	return o.AddReferrerUsers(exec, insert, related...)
}

// RemoveReferrerUsers relationships from objects passed in.
// Removes related items from R.ReferrerUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.Referrer.
func (o *User) RemoveReferrerUsers(exec boil.Executor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ReferrerID, nil)
		if rel.R != nil {
			rel.R.Referrer = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("referrer_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ReferrerUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.ReferrerUsers)
			if ln > 1 && i < ln-1 {
				o.R.ReferrerUsers[i] = o.R.ReferrerUsers[ln-1]
			}
			o.R.ReferrerUsers = o.R.ReferrerUsers[:ln-1]
			break
		}
	}

	return nil
}

// Users retrieves all the records using an executor.
func Users(mods ...qm.QueryMod) userQuery {
	mods = append(mods, qm.From("\"users\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"users\".*"})
	}

	return userQuery{q}
}

// FindUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUser(exec boil.Executor, iD string, selectCols ...string) (*User, error) {
	userObj := &User{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"users\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from users")
	}

	return userObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *User) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no users provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userInsertCacheMut.RLock()
	cache, cached := userInsertCache[key]
	userInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAllColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userType, userMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"users\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"users\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into users")
	}

	if !cached {
		userInsertCacheMut.Lock()
		userInsertCache[key] = cache
		userInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the User.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *User) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	userUpdateCacheMut.RLock()
	cache, cached := userUpdateCache[key]
	userUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAllColumns,
			userPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"users\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userType, userMapping, append(wl, userPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for users")
	}

	if !cached {
		userUpdateCacheMut.Lock()
		userUpdateCache[key] = cache
		userUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q userQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for users")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in user slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all user")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *User) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no users provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userUpsertCacheMut.RLock()
	cache, cached := userUpsertCache[key]
	userUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userAllColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userAllColumns,
			userPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert users, could not build update column list")
		}

		ret := strmangle.SetComplement(userAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert users, could not build conflict column list")
			}

			conflict = make([]string, len(userPrimaryKeyColumns))
			copy(conflict, userPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"users\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userType, userMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert users")
	}

	if !cached {
		userUpsertCacheMut.Lock()
		userUpsertCache[key] = cache
		userUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single User record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *User) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no User provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userPrimaryKeyMapping)
	sql := "DELETE FROM \"users\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for users")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no userQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for users")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from user slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for users")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *User) Reload(exec boil.Executor) error {
	ret, err := FindUser(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"users\".* FROM \"users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in UserSlice")
	}

	*o = slice

	return nil
}

// UserExists checks if the User row exists.
func UserExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"users\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if users exists")
	}

	return exists, nil
}

// Exists checks if the User row exists.
func (o *User) Exists(exec boil.Executor) (bool, error) {
	return UserExists(exec, o.ID)
}
