// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMatchEventSimulations(t *testing.T) {
	t.Parallel()

	query := MatchEventSimulations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMatchEventSimulationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventSimulation{}
	if err = randomize.Struct(seed, o, matchEventSimulationDBTypes, true, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MatchEventSimulations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMatchEventSimulationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventSimulation{}
	if err = randomize.Struct(seed, o, matchEventSimulationDBTypes, true, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MatchEventSimulations().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MatchEventSimulations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMatchEventSimulationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventSimulation{}
	if err = randomize.Struct(seed, o, matchEventSimulationDBTypes, true, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MatchEventSimulationSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MatchEventSimulations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMatchEventSimulationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventSimulation{}
	if err = randomize.Struct(seed, o, matchEventSimulationDBTypes, true, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MatchEventSimulationExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MatchEventSimulation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MatchEventSimulationExists to return true, but got false.")
	}
}

func testMatchEventSimulationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventSimulation{}
	if err = randomize.Struct(seed, o, matchEventSimulationDBTypes, true, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	matchEventSimulationFound, err := FindMatchEventSimulation(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if matchEventSimulationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMatchEventSimulationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventSimulation{}
	if err = randomize.Struct(seed, o, matchEventSimulationDBTypes, true, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MatchEventSimulations().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testMatchEventSimulationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventSimulation{}
	if err = randomize.Struct(seed, o, matchEventSimulationDBTypes, true, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MatchEventSimulations().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMatchEventSimulationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	matchEventSimulationOne := &MatchEventSimulation{}
	matchEventSimulationTwo := &MatchEventSimulation{}
	if err = randomize.Struct(seed, matchEventSimulationOne, matchEventSimulationDBTypes, false, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}
	if err = randomize.Struct(seed, matchEventSimulationTwo, matchEventSimulationDBTypes, false, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = matchEventSimulationOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = matchEventSimulationTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MatchEventSimulations().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMatchEventSimulationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	matchEventSimulationOne := &MatchEventSimulation{}
	matchEventSimulationTwo := &MatchEventSimulation{}
	if err = randomize.Struct(seed, matchEventSimulationOne, matchEventSimulationDBTypes, false, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}
	if err = randomize.Struct(seed, matchEventSimulationTwo, matchEventSimulationDBTypes, false, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = matchEventSimulationOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = matchEventSimulationTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MatchEventSimulations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testMatchEventSimulationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventSimulation{}
	if err = randomize.Struct(seed, o, matchEventSimulationDBTypes, true, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MatchEventSimulations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMatchEventSimulationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventSimulation{}
	if err = randomize.Struct(seed, o, matchEventSimulationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(matchEventSimulationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MatchEventSimulations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMatchEventSimulationToOneMatchEventUsingMatchEvent(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local MatchEventSimulation
	var foreign MatchEvent

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchEventSimulationDBTypes, false, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, matchEventDBTypes, false, matchEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEvent struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MatchEventID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.MatchEvent().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchEventSimulationSlice{&local}
	if err = local.L.LoadMatchEvent(tx, false, (*[]*MatchEventSimulation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MatchEvent == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.MatchEvent = nil
	if err = local.L.LoadMatchEvent(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MatchEvent == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchEventSimulationToOneMatchUsingMatch(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local MatchEventSimulation
	var foreign Match

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, matchEventSimulationDBTypes, false, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Match struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MatchID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Match().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MatchEventSimulationSlice{&local}
	if err = local.L.LoadMatch(tx, false, (*[]*MatchEventSimulation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Match == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Match = nil
	if err = local.L.LoadMatch(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Match == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testMatchEventSimulationToOneSetOpMatchEventUsingMatchEvent(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchEventSimulation
	var b, c MatchEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchEventSimulationDBTypes, false, strmangle.SetComplement(matchEventSimulationPrimaryKeyColumns, matchEventSimulationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchEventDBTypes, false, strmangle.SetComplement(matchEventPrimaryKeyColumns, matchEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MatchEvent{&b, &c} {
		err = a.SetMatchEvent(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.MatchEvent != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MatchEventSimulations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MatchEventID != x.ID {
			t.Error("foreign key was wrong value", a.MatchEventID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MatchEventID))
		reflect.Indirect(reflect.ValueOf(&a.MatchEventID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MatchEventID != x.ID {
			t.Error("foreign key was wrong value", a.MatchEventID, x.ID)
		}
	}
}
func testMatchEventSimulationToOneSetOpMatchUsingMatch(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a MatchEventSimulation
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matchEventSimulationDBTypes, false, strmangle.SetComplement(matchEventSimulationPrimaryKeyColumns, matchEventSimulationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Match{&b, &c} {
		err = a.SetMatch(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Match != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MatchEventSimulations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MatchID != x.ID {
			t.Error("foreign key was wrong value", a.MatchID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MatchID))
		reflect.Indirect(reflect.ValueOf(&a.MatchID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MatchID != x.ID {
			t.Error("foreign key was wrong value", a.MatchID, x.ID)
		}
	}
}

func testMatchEventSimulationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventSimulation{}
	if err = randomize.Struct(seed, o, matchEventSimulationDBTypes, true, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testMatchEventSimulationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventSimulation{}
	if err = randomize.Struct(seed, o, matchEventSimulationDBTypes, true, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MatchEventSimulationSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testMatchEventSimulationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventSimulation{}
	if err = randomize.Struct(seed, o, matchEventSimulationDBTypes, true, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MatchEventSimulations().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	matchEventSimulationDBTypes = map[string]string{`ID`: `integer`, `Timestamp`: `timestamp with time zone`, `SimulatedAt`: `timestamp with time zone`, `MatchID`: `uuid`, `MatchEventID`: `integer`}
	_                           = bytes.MinRead
)

func testMatchEventSimulationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(matchEventSimulationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(matchEventSimulationAllColumns) == len(matchEventSimulationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventSimulation{}
	if err = randomize.Struct(seed, o, matchEventSimulationDBTypes, true, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MatchEventSimulations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, matchEventSimulationDBTypes, true, matchEventSimulationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMatchEventSimulationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(matchEventSimulationAllColumns) == len(matchEventSimulationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MatchEventSimulation{}
	if err = randomize.Struct(seed, o, matchEventSimulationDBTypes, true, matchEventSimulationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MatchEventSimulations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, matchEventSimulationDBTypes, true, matchEventSimulationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(matchEventSimulationAllColumns, matchEventSimulationPrimaryKeyColumns) {
		fields = matchEventSimulationAllColumns
	} else {
		fields = strmangle.SetComplement(
			matchEventSimulationAllColumns,
			matchEventSimulationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MatchEventSimulationSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMatchEventSimulationsUpsert(t *testing.T) {
	t.Parallel()

	if len(matchEventSimulationAllColumns) == len(matchEventSimulationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MatchEventSimulation{}
	if err = randomize.Struct(seed, &o, matchEventSimulationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MatchEventSimulation: %s", err)
	}

	count, err := MatchEventSimulations().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, matchEventSimulationDBTypes, false, matchEventSimulationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MatchEventSimulation struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MatchEventSimulation: %s", err)
	}

	count, err = MatchEventSimulations().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
