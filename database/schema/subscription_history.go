// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SubscriptionHistory is an object representing the database table.
type SubscriptionHistory struct {
	ID                int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt         time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	LastBillingUpdate time.Time `boil:"last_billing_update" json:"last_billing_update" toml:"last_billing_update" yaml:"last_billing_update"`
	RawData           string    `boil:"raw_data" json:"raw_data" toml:"raw_data" yaml:"raw_data"`
	ExpirationTime    time.Time `boil:"expiration_time" json:"expiration_time" toml:"expiration_time" yaml:"expiration_time"`
	Active            bool      `boil:"active" json:"active" toml:"active" yaml:"active"`
	SubscriptionID    int       `boil:"subscription_id" json:"subscription_id" toml:"subscription_id" yaml:"subscription_id"`

	R *subscriptionHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L subscriptionHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SubscriptionHistoryColumns = struct {
	ID                string
	CreatedAt         string
	LastBillingUpdate string
	RawData           string
	ExpirationTime    string
	Active            string
	SubscriptionID    string
}{
	ID:                "id",
	CreatedAt:         "created_at",
	LastBillingUpdate: "last_billing_update",
	RawData:           "raw_data",
	ExpirationTime:    "expiration_time",
	Active:            "active",
	SubscriptionID:    "subscription_id",
}

var SubscriptionHistoryTableColumns = struct {
	ID                string
	CreatedAt         string
	LastBillingUpdate string
	RawData           string
	ExpirationTime    string
	Active            string
	SubscriptionID    string
}{
	ID:                "subscription_history.id",
	CreatedAt:         "subscription_history.created_at",
	LastBillingUpdate: "subscription_history.last_billing_update",
	RawData:           "subscription_history.raw_data",
	ExpirationTime:    "subscription_history.expiration_time",
	Active:            "subscription_history.active",
	SubscriptionID:    "subscription_history.subscription_id",
}

// Generated where

var SubscriptionHistoryWhere = struct {
	ID                whereHelperint
	CreatedAt         whereHelpertime_Time
	LastBillingUpdate whereHelpertime_Time
	RawData           whereHelperstring
	ExpirationTime    whereHelpertime_Time
	Active            whereHelperbool
	SubscriptionID    whereHelperint
}{
	ID:                whereHelperint{field: "\"subscription_history\".\"id\""},
	CreatedAt:         whereHelpertime_Time{field: "\"subscription_history\".\"created_at\""},
	LastBillingUpdate: whereHelpertime_Time{field: "\"subscription_history\".\"last_billing_update\""},
	RawData:           whereHelperstring{field: "\"subscription_history\".\"raw_data\""},
	ExpirationTime:    whereHelpertime_Time{field: "\"subscription_history\".\"expiration_time\""},
	Active:            whereHelperbool{field: "\"subscription_history\".\"active\""},
	SubscriptionID:    whereHelperint{field: "\"subscription_history\".\"subscription_id\""},
}

// SubscriptionHistoryRels is where relationship names are stored.
var SubscriptionHistoryRels = struct {
	Subscription string
}{
	Subscription: "Subscription",
}

// subscriptionHistoryR is where relationships are stored.
type subscriptionHistoryR struct {
	Subscription *Subscription `boil:"Subscription" json:"Subscription" toml:"Subscription" yaml:"Subscription"`
}

// NewStruct creates a new relationship struct
func (*subscriptionHistoryR) NewStruct() *subscriptionHistoryR {
	return &subscriptionHistoryR{}
}

func (r *subscriptionHistoryR) GetSubscription() *Subscription {
	if r == nil {
		return nil
	}
	return r.Subscription
}

// subscriptionHistoryL is where Load methods for each relationship are stored.
type subscriptionHistoryL struct{}

var (
	subscriptionHistoryAllColumns            = []string{"id", "created_at", "last_billing_update", "raw_data", "expiration_time", "active", "subscription_id"}
	subscriptionHistoryColumnsWithoutDefault = []string{"created_at", "last_billing_update", "raw_data", "expiration_time", "active", "subscription_id"}
	subscriptionHistoryColumnsWithDefault    = []string{"id"}
	subscriptionHistoryPrimaryKeyColumns     = []string{"id"}
	subscriptionHistoryGeneratedColumns      = []string{}
)

type (
	// SubscriptionHistorySlice is an alias for a slice of pointers to SubscriptionHistory.
	// This should almost always be used instead of []SubscriptionHistory.
	SubscriptionHistorySlice []*SubscriptionHistory

	subscriptionHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	subscriptionHistoryType                 = reflect.TypeOf(&SubscriptionHistory{})
	subscriptionHistoryMapping              = queries.MakeStructMapping(subscriptionHistoryType)
	subscriptionHistoryPrimaryKeyMapping, _ = queries.BindMapping(subscriptionHistoryType, subscriptionHistoryMapping, subscriptionHistoryPrimaryKeyColumns)
	subscriptionHistoryInsertCacheMut       sync.RWMutex
	subscriptionHistoryInsertCache          = make(map[string]insertCache)
	subscriptionHistoryUpdateCacheMut       sync.RWMutex
	subscriptionHistoryUpdateCache          = make(map[string]updateCache)
	subscriptionHistoryUpsertCacheMut       sync.RWMutex
	subscriptionHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single subscriptionHistory record from the query.
func (q subscriptionHistoryQuery) One(exec boil.Executor) (*SubscriptionHistory, error) {
	o := &SubscriptionHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for subscription_history")
	}

	return o, nil
}

// All returns all SubscriptionHistory records from the query.
func (q subscriptionHistoryQuery) All(exec boil.Executor) (SubscriptionHistorySlice, error) {
	var o []*SubscriptionHistory

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to SubscriptionHistory slice")
	}

	return o, nil
}

// Count returns the count of all SubscriptionHistory records in the query.
func (q subscriptionHistoryQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count subscription_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q subscriptionHistoryQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if subscription_history exists")
	}

	return count > 0, nil
}

// Subscription pointed to by the foreign key.
func (o *SubscriptionHistory) Subscription(mods ...qm.QueryMod) subscriptionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SubscriptionID),
	}

	queryMods = append(queryMods, mods...)

	return Subscriptions(queryMods...)
}

// LoadSubscription allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subscriptionHistoryL) LoadSubscription(e boil.Executor, singular bool, maybeSubscriptionHistory interface{}, mods queries.Applicator) error {
	var slice []*SubscriptionHistory
	var object *SubscriptionHistory

	if singular {
		var ok bool
		object, ok = maybeSubscriptionHistory.(*SubscriptionHistory)
		if !ok {
			object = new(SubscriptionHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubscriptionHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubscriptionHistory))
			}
		}
	} else {
		s, ok := maybeSubscriptionHistory.(*[]*SubscriptionHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubscriptionHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubscriptionHistory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &subscriptionHistoryR{}
		}
		args[object.SubscriptionID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subscriptionHistoryR{}
			}

			args[obj.SubscriptionID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`subscriptions`),
		qm.WhereIn(`subscriptions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Subscription")
	}

	var resultSlice []*Subscription
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Subscription")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for subscriptions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subscriptions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Subscription = foreign
		if foreign.R == nil {
			foreign.R = &subscriptionR{}
		}
		foreign.R.SubscriptionHistories = append(foreign.R.SubscriptionHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SubscriptionID == foreign.ID {
				local.R.Subscription = foreign
				if foreign.R == nil {
					foreign.R = &subscriptionR{}
				}
				foreign.R.SubscriptionHistories = append(foreign.R.SubscriptionHistories, local)
				break
			}
		}
	}

	return nil
}

// SetSubscription of the subscriptionHistory to the related item.
// Sets o.R.Subscription to related.
// Adds o to related.R.SubscriptionHistories.
func (o *SubscriptionHistory) SetSubscription(exec boil.Executor, insert bool, related *Subscription) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"subscription_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"subscription_id"}),
		strmangle.WhereClause("\"", "\"", 2, subscriptionHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SubscriptionID = related.ID
	if o.R == nil {
		o.R = &subscriptionHistoryR{
			Subscription: related,
		}
	} else {
		o.R.Subscription = related
	}

	if related.R == nil {
		related.R = &subscriptionR{
			SubscriptionHistories: SubscriptionHistorySlice{o},
		}
	} else {
		related.R.SubscriptionHistories = append(related.R.SubscriptionHistories, o)
	}

	return nil
}

// SubscriptionHistories retrieves all the records using an executor.
func SubscriptionHistories(mods ...qm.QueryMod) subscriptionHistoryQuery {
	mods = append(mods, qm.From("\"subscription_history\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"subscription_history\".*"})
	}

	return subscriptionHistoryQuery{q}
}

// FindSubscriptionHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSubscriptionHistory(exec boil.Executor, iD int, selectCols ...string) (*SubscriptionHistory, error) {
	subscriptionHistoryObj := &SubscriptionHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"subscription_history\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, subscriptionHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from subscription_history")
	}

	return subscriptionHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SubscriptionHistory) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no subscription_history provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(subscriptionHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	subscriptionHistoryInsertCacheMut.RLock()
	cache, cached := subscriptionHistoryInsertCache[key]
	subscriptionHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			subscriptionHistoryAllColumns,
			subscriptionHistoryColumnsWithDefault,
			subscriptionHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(subscriptionHistoryType, subscriptionHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(subscriptionHistoryType, subscriptionHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"subscription_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"subscription_history\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into subscription_history")
	}

	if !cached {
		subscriptionHistoryInsertCacheMut.Lock()
		subscriptionHistoryInsertCache[key] = cache
		subscriptionHistoryInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the SubscriptionHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SubscriptionHistory) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	subscriptionHistoryUpdateCacheMut.RLock()
	cache, cached := subscriptionHistoryUpdateCache[key]
	subscriptionHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			subscriptionHistoryAllColumns,
			subscriptionHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update subscription_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"subscription_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, subscriptionHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(subscriptionHistoryType, subscriptionHistoryMapping, append(wl, subscriptionHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update subscription_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for subscription_history")
	}

	if !cached {
		subscriptionHistoryUpdateCacheMut.Lock()
		subscriptionHistoryUpdateCache[key] = cache
		subscriptionHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q subscriptionHistoryQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for subscription_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for subscription_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SubscriptionHistorySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subscriptionHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"subscription_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, subscriptionHistoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in subscriptionHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all subscriptionHistory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SubscriptionHistory) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no subscription_history provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(subscriptionHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	subscriptionHistoryUpsertCacheMut.RLock()
	cache, cached := subscriptionHistoryUpsertCache[key]
	subscriptionHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			subscriptionHistoryAllColumns,
			subscriptionHistoryColumnsWithDefault,
			subscriptionHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			subscriptionHistoryAllColumns,
			subscriptionHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert subscription_history, could not build update column list")
		}

		ret := strmangle.SetComplement(subscriptionHistoryAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(subscriptionHistoryPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert subscription_history, could not build conflict column list")
			}

			conflict = make([]string, len(subscriptionHistoryPrimaryKeyColumns))
			copy(conflict, subscriptionHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"subscription_history\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(subscriptionHistoryType, subscriptionHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(subscriptionHistoryType, subscriptionHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert subscription_history")
	}

	if !cached {
		subscriptionHistoryUpsertCacheMut.Lock()
		subscriptionHistoryUpsertCache[key] = cache
		subscriptionHistoryUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single SubscriptionHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SubscriptionHistory) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no SubscriptionHistory provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), subscriptionHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"subscription_history\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from subscription_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for subscription_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q subscriptionHistoryQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no subscriptionHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from subscription_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for subscription_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SubscriptionHistorySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subscriptionHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"subscription_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subscriptionHistoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from subscriptionHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for subscription_history")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SubscriptionHistory) Reload(exec boil.Executor) error {
	ret, err := FindSubscriptionHistory(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SubscriptionHistorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SubscriptionHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subscriptionHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"subscription_history\".* FROM \"subscription_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subscriptionHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in SubscriptionHistorySlice")
	}

	*o = slice

	return nil
}

// SubscriptionHistoryExists checks if the SubscriptionHistory row exists.
func SubscriptionHistoryExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"subscription_history\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if subscription_history exists")
	}

	return exists, nil
}

// Exists checks if the SubscriptionHistory row exists.
func (o *SubscriptionHistory) Exists(exec boil.Executor) (bool, error) {
	return SubscriptionHistoryExists(exec, o.ID)
}
