// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserBanners(t *testing.T) {
	t.Parallel()

	query := UserBanners()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserBannersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBanner{}
	if err = randomize.Struct(seed, o, userBannerDBTypes, true, userBannerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserBanners().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserBannersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBanner{}
	if err = randomize.Struct(seed, o, userBannerDBTypes, true, userBannerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserBanners().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserBanners().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserBannersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBanner{}
	if err = randomize.Struct(seed, o, userBannerDBTypes, true, userBannerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserBannerSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserBanners().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserBannersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBanner{}
	if err = randomize.Struct(seed, o, userBannerDBTypes, true, userBannerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserBannerExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UserBanner exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserBannerExists to return true, but got false.")
	}
}

func testUserBannersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBanner{}
	if err = randomize.Struct(seed, o, userBannerDBTypes, true, userBannerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userBannerFound, err := FindUserBanner(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if userBannerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserBannersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBanner{}
	if err = randomize.Struct(seed, o, userBannerDBTypes, true, userBannerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserBanners().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserBannersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBanner{}
	if err = randomize.Struct(seed, o, userBannerDBTypes, true, userBannerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserBanners().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserBannersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userBannerOne := &UserBanner{}
	userBannerTwo := &UserBanner{}
	if err = randomize.Struct(seed, userBannerOne, userBannerDBTypes, false, userBannerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}
	if err = randomize.Struct(seed, userBannerTwo, userBannerDBTypes, false, userBannerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = userBannerOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userBannerTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserBanners().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserBannersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userBannerOne := &UserBanner{}
	userBannerTwo := &UserBanner{}
	if err = randomize.Struct(seed, userBannerOne, userBannerDBTypes, false, userBannerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}
	if err = randomize.Struct(seed, userBannerTwo, userBannerDBTypes, false, userBannerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = userBannerOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userBannerTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserBanners().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testUserBannersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBanner{}
	if err = randomize.Struct(seed, o, userBannerDBTypes, true, userBannerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserBanners().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserBannersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBanner{}
	if err = randomize.Struct(seed, o, userBannerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(userBannerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserBanners().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserBannerToOneBannerUsingBanner(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local UserBanner
	var foreign Banner

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userBannerDBTypes, false, userBannerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, bannerDBTypes, false, bannerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Banner struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BannerID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Banner().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserBannerSlice{&local}
	if err = local.L.LoadBanner(tx, false, (*[]*UserBanner)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Banner == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Banner = nil
	if err = local.L.LoadBanner(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Banner == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testUserBannerToOneUserUsingUser(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local UserBanner
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userBannerDBTypes, false, userBannerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserBannerSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*UserBanner)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testUserBannerToOneSetOpBannerUsingBanner(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a UserBanner
	var b, c Banner

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userBannerDBTypes, false, strmangle.SetComplement(userBannerPrimaryKeyColumns, userBannerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bannerDBTypes, false, strmangle.SetComplement(bannerPrimaryKeyColumns, bannerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bannerDBTypes, false, strmangle.SetComplement(bannerPrimaryKeyColumns, bannerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Banner{&b, &c} {
		err = a.SetBanner(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Banner != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserBanners[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BannerID != x.ID {
			t.Error("foreign key was wrong value", a.BannerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BannerID))
		reflect.Indirect(reflect.ValueOf(&a.BannerID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BannerID != x.ID {
			t.Error("foreign key was wrong value", a.BannerID, x.ID)
		}
	}
}
func testUserBannerToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a UserBanner
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userBannerDBTypes, false, strmangle.SetComplement(userBannerPrimaryKeyColumns, userBannerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserBanners[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testUserBannersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBanner{}
	if err = randomize.Struct(seed, o, userBannerDBTypes, true, userBannerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testUserBannersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBanner{}
	if err = randomize.Struct(seed, o, userBannerDBTypes, true, userBannerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserBannerSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testUserBannersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBanner{}
	if err = randomize.Struct(seed, o, userBannerDBTypes, true, userBannerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserBanners().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userBannerDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `BannerID`: `integer`, `UserID`: `uuid`}
	_                 = bytes.MinRead
)

func testUserBannersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userBannerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userBannerAllColumns) == len(userBannerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserBanner{}
	if err = randomize.Struct(seed, o, userBannerDBTypes, true, userBannerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserBanners().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userBannerDBTypes, true, userBannerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserBannersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userBannerAllColumns) == len(userBannerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserBanner{}
	if err = randomize.Struct(seed, o, userBannerDBTypes, true, userBannerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserBanners().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userBannerDBTypes, true, userBannerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userBannerAllColumns, userBannerPrimaryKeyColumns) {
		fields = userBannerAllColumns
	} else {
		fields = strmangle.SetComplement(
			userBannerAllColumns,
			userBannerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserBannerSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserBannersUpsert(t *testing.T) {
	t.Parallel()

	if len(userBannerAllColumns) == len(userBannerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserBanner{}
	if err = randomize.Struct(seed, &o, userBannerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserBanner: %s", err)
	}

	count, err := UserBanners().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userBannerDBTypes, false, userBannerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserBanner struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserBanner: %s", err)
	}

	count, err = UserBanners().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
