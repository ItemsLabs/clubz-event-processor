// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DjangoContentType is an object representing the database table.
type DjangoContentType struct {
	ID       int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	AppLabel string `boil:"app_label" json:"app_label" toml:"app_label" yaml:"app_label"`
	Model    string `boil:"model" json:"model" toml:"model" yaml:"model"`

	R *djangoContentTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L djangoContentTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DjangoContentTypeColumns = struct {
	ID       string
	AppLabel string
	Model    string
}{
	ID:       "id",
	AppLabel: "app_label",
	Model:    "model",
}

var DjangoContentTypeTableColumns = struct {
	ID       string
	AppLabel string
	Model    string
}{
	ID:       "django_content_type.id",
	AppLabel: "django_content_type.app_label",
	Model:    "django_content_type.model",
}

// Generated where

var DjangoContentTypeWhere = struct {
	ID       whereHelperint
	AppLabel whereHelperstring
	Model    whereHelperstring
}{
	ID:       whereHelperint{field: "\"django_content_type\".\"id\""},
	AppLabel: whereHelperstring{field: "\"django_content_type\".\"app_label\""},
	Model:    whereHelperstring{field: "\"django_content_type\".\"model\""},
}

// DjangoContentTypeRels is where relationship names are stored.
var DjangoContentTypeRels = struct {
	ContentTypeAuthPermissions string
	ContentTypeDjangoAdminLogs string
}{
	ContentTypeAuthPermissions: "ContentTypeAuthPermissions",
	ContentTypeDjangoAdminLogs: "ContentTypeDjangoAdminLogs",
}

// djangoContentTypeR is where relationships are stored.
type djangoContentTypeR struct {
	ContentTypeAuthPermissions AuthPermissionSlice `boil:"ContentTypeAuthPermissions" json:"ContentTypeAuthPermissions" toml:"ContentTypeAuthPermissions" yaml:"ContentTypeAuthPermissions"`
	ContentTypeDjangoAdminLogs DjangoAdminLogSlice `boil:"ContentTypeDjangoAdminLogs" json:"ContentTypeDjangoAdminLogs" toml:"ContentTypeDjangoAdminLogs" yaml:"ContentTypeDjangoAdminLogs"`
}

// NewStruct creates a new relationship struct
func (*djangoContentTypeR) NewStruct() *djangoContentTypeR {
	return &djangoContentTypeR{}
}

func (r *djangoContentTypeR) GetContentTypeAuthPermissions() AuthPermissionSlice {
	if r == nil {
		return nil
	}
	return r.ContentTypeAuthPermissions
}

func (r *djangoContentTypeR) GetContentTypeDjangoAdminLogs() DjangoAdminLogSlice {
	if r == nil {
		return nil
	}
	return r.ContentTypeDjangoAdminLogs
}

// djangoContentTypeL is where Load methods for each relationship are stored.
type djangoContentTypeL struct{}

var (
	djangoContentTypeAllColumns            = []string{"id", "app_label", "model"}
	djangoContentTypeColumnsWithoutDefault = []string{"app_label", "model"}
	djangoContentTypeColumnsWithDefault    = []string{"id"}
	djangoContentTypePrimaryKeyColumns     = []string{"id"}
	djangoContentTypeGeneratedColumns      = []string{}
)

type (
	// DjangoContentTypeSlice is an alias for a slice of pointers to DjangoContentType.
	// This should almost always be used instead of []DjangoContentType.
	DjangoContentTypeSlice []*DjangoContentType

	djangoContentTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	djangoContentTypeType                 = reflect.TypeOf(&DjangoContentType{})
	djangoContentTypeMapping              = queries.MakeStructMapping(djangoContentTypeType)
	djangoContentTypePrimaryKeyMapping, _ = queries.BindMapping(djangoContentTypeType, djangoContentTypeMapping, djangoContentTypePrimaryKeyColumns)
	djangoContentTypeInsertCacheMut       sync.RWMutex
	djangoContentTypeInsertCache          = make(map[string]insertCache)
	djangoContentTypeUpdateCacheMut       sync.RWMutex
	djangoContentTypeUpdateCache          = make(map[string]updateCache)
	djangoContentTypeUpsertCacheMut       sync.RWMutex
	djangoContentTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single djangoContentType record from the query.
func (q djangoContentTypeQuery) One(exec boil.Executor) (*DjangoContentType, error) {
	o := &DjangoContentType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for django_content_type")
	}

	return o, nil
}

// All returns all DjangoContentType records from the query.
func (q djangoContentTypeQuery) All(exec boil.Executor) (DjangoContentTypeSlice, error) {
	var o []*DjangoContentType

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to DjangoContentType slice")
	}

	return o, nil
}

// Count returns the count of all DjangoContentType records in the query.
func (q djangoContentTypeQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count django_content_type rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q djangoContentTypeQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if django_content_type exists")
	}

	return count > 0, nil
}

// ContentTypeAuthPermissions retrieves all the auth_permission's AuthPermissions with an executor via content_type_id column.
func (o *DjangoContentType) ContentTypeAuthPermissions(mods ...qm.QueryMod) authPermissionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"auth_permission\".\"content_type_id\"=?", o.ID),
	)

	return AuthPermissions(queryMods...)
}

// ContentTypeDjangoAdminLogs retrieves all the django_admin_log's DjangoAdminLogs with an executor via content_type_id column.
func (o *DjangoContentType) ContentTypeDjangoAdminLogs(mods ...qm.QueryMod) djangoAdminLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"django_admin_log\".\"content_type_id\"=?", o.ID),
	)

	return DjangoAdminLogs(queryMods...)
}

// LoadContentTypeAuthPermissions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (djangoContentTypeL) LoadContentTypeAuthPermissions(e boil.Executor, singular bool, maybeDjangoContentType interface{}, mods queries.Applicator) error {
	var slice []*DjangoContentType
	var object *DjangoContentType

	if singular {
		var ok bool
		object, ok = maybeDjangoContentType.(*DjangoContentType)
		if !ok {
			object = new(DjangoContentType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDjangoContentType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDjangoContentType))
			}
		}
	} else {
		s, ok := maybeDjangoContentType.(*[]*DjangoContentType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDjangoContentType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDjangoContentType))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &djangoContentTypeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &djangoContentTypeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`auth_permission`),
		qm.WhereIn(`auth_permission.content_type_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auth_permission")
	}

	var resultSlice []*AuthPermission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auth_permission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on auth_permission")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auth_permission")
	}

	if singular {
		object.R.ContentTypeAuthPermissions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &authPermissionR{}
			}
			foreign.R.ContentType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ContentTypeID {
				local.R.ContentTypeAuthPermissions = append(local.R.ContentTypeAuthPermissions, foreign)
				if foreign.R == nil {
					foreign.R = &authPermissionR{}
				}
				foreign.R.ContentType = local
				break
			}
		}
	}

	return nil
}

// LoadContentTypeDjangoAdminLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (djangoContentTypeL) LoadContentTypeDjangoAdminLogs(e boil.Executor, singular bool, maybeDjangoContentType interface{}, mods queries.Applicator) error {
	var slice []*DjangoContentType
	var object *DjangoContentType

	if singular {
		var ok bool
		object, ok = maybeDjangoContentType.(*DjangoContentType)
		if !ok {
			object = new(DjangoContentType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDjangoContentType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDjangoContentType))
			}
		}
	} else {
		s, ok := maybeDjangoContentType.(*[]*DjangoContentType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDjangoContentType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDjangoContentType))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &djangoContentTypeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &djangoContentTypeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`django_admin_log`),
		qm.WhereIn(`django_admin_log.content_type_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load django_admin_log")
	}

	var resultSlice []*DjangoAdminLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice django_admin_log")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on django_admin_log")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for django_admin_log")
	}

	if singular {
		object.R.ContentTypeDjangoAdminLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &djangoAdminLogR{}
			}
			foreign.R.ContentType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ContentTypeID) {
				local.R.ContentTypeDjangoAdminLogs = append(local.R.ContentTypeDjangoAdminLogs, foreign)
				if foreign.R == nil {
					foreign.R = &djangoAdminLogR{}
				}
				foreign.R.ContentType = local
				break
			}
		}
	}

	return nil
}

// AddContentTypeAuthPermissions adds the given related objects to the existing relationships
// of the django_content_type, optionally inserting them as new records.
// Appends related to o.R.ContentTypeAuthPermissions.
// Sets related.R.ContentType appropriately.
func (o *DjangoContentType) AddContentTypeAuthPermissions(exec boil.Executor, insert bool, related ...*AuthPermission) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContentTypeID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"auth_permission\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"content_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, authPermissionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContentTypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &djangoContentTypeR{
			ContentTypeAuthPermissions: related,
		}
	} else {
		o.R.ContentTypeAuthPermissions = append(o.R.ContentTypeAuthPermissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authPermissionR{
				ContentType: o,
			}
		} else {
			rel.R.ContentType = o
		}
	}
	return nil
}

// AddContentTypeDjangoAdminLogs adds the given related objects to the existing relationships
// of the django_content_type, optionally inserting them as new records.
// Appends related to o.R.ContentTypeDjangoAdminLogs.
// Sets related.R.ContentType appropriately.
func (o *DjangoContentType) AddContentTypeDjangoAdminLogs(exec boil.Executor, insert bool, related ...*DjangoAdminLog) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ContentTypeID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"django_admin_log\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"content_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, djangoAdminLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ContentTypeID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &djangoContentTypeR{
			ContentTypeDjangoAdminLogs: related,
		}
	} else {
		o.R.ContentTypeDjangoAdminLogs = append(o.R.ContentTypeDjangoAdminLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &djangoAdminLogR{
				ContentType: o,
			}
		} else {
			rel.R.ContentType = o
		}
	}
	return nil
}

// SetContentTypeDjangoAdminLogs removes all previously related items of the
// django_content_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ContentType's ContentTypeDjangoAdminLogs accordingly.
// Replaces o.R.ContentTypeDjangoAdminLogs with related.
// Sets related.R.ContentType's ContentTypeDjangoAdminLogs accordingly.
func (o *DjangoContentType) SetContentTypeDjangoAdminLogs(exec boil.Executor, insert bool, related ...*DjangoAdminLog) error {
	query := "update \"django_admin_log\" set \"content_type_id\" = null where \"content_type_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ContentTypeDjangoAdminLogs {
			queries.SetScanner(&rel.ContentTypeID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ContentType = nil
		}
		o.R.ContentTypeDjangoAdminLogs = nil
	}

	return o.AddContentTypeDjangoAdminLogs(exec, insert, related...)
}

// RemoveContentTypeDjangoAdminLogs relationships from objects passed in.
// Removes related items from R.ContentTypeDjangoAdminLogs (uses pointer comparison, removal does not keep order)
// Sets related.R.ContentType.
func (o *DjangoContentType) RemoveContentTypeDjangoAdminLogs(exec boil.Executor, related ...*DjangoAdminLog) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ContentTypeID, nil)
		if rel.R != nil {
			rel.R.ContentType = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("content_type_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ContentTypeDjangoAdminLogs {
			if rel != ri {
				continue
			}

			ln := len(o.R.ContentTypeDjangoAdminLogs)
			if ln > 1 && i < ln-1 {
				o.R.ContentTypeDjangoAdminLogs[i] = o.R.ContentTypeDjangoAdminLogs[ln-1]
			}
			o.R.ContentTypeDjangoAdminLogs = o.R.ContentTypeDjangoAdminLogs[:ln-1]
			break
		}
	}

	return nil
}

// DjangoContentTypes retrieves all the records using an executor.
func DjangoContentTypes(mods ...qm.QueryMod) djangoContentTypeQuery {
	mods = append(mods, qm.From("\"django_content_type\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"django_content_type\".*"})
	}

	return djangoContentTypeQuery{q}
}

// FindDjangoContentType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDjangoContentType(exec boil.Executor, iD int, selectCols ...string) (*DjangoContentType, error) {
	djangoContentTypeObj := &DjangoContentType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"django_content_type\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, djangoContentTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from django_content_type")
	}

	return djangoContentTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DjangoContentType) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no django_content_type provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(djangoContentTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	djangoContentTypeInsertCacheMut.RLock()
	cache, cached := djangoContentTypeInsertCache[key]
	djangoContentTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			djangoContentTypeAllColumns,
			djangoContentTypeColumnsWithDefault,
			djangoContentTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(djangoContentTypeType, djangoContentTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(djangoContentTypeType, djangoContentTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"django_content_type\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"django_content_type\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into django_content_type")
	}

	if !cached {
		djangoContentTypeInsertCacheMut.Lock()
		djangoContentTypeInsertCache[key] = cache
		djangoContentTypeInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DjangoContentType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DjangoContentType) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	djangoContentTypeUpdateCacheMut.RLock()
	cache, cached := djangoContentTypeUpdateCache[key]
	djangoContentTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			djangoContentTypeAllColumns,
			djangoContentTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update django_content_type, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"django_content_type\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, djangoContentTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(djangoContentTypeType, djangoContentTypeMapping, append(wl, djangoContentTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update django_content_type row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for django_content_type")
	}

	if !cached {
		djangoContentTypeUpdateCacheMut.Lock()
		djangoContentTypeUpdateCache[key] = cache
		djangoContentTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q djangoContentTypeQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for django_content_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for django_content_type")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DjangoContentTypeSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoContentTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"django_content_type\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, djangoContentTypePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in djangoContentType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all djangoContentType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DjangoContentType) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no django_content_type provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(djangoContentTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	djangoContentTypeUpsertCacheMut.RLock()
	cache, cached := djangoContentTypeUpsertCache[key]
	djangoContentTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			djangoContentTypeAllColumns,
			djangoContentTypeColumnsWithDefault,
			djangoContentTypeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			djangoContentTypeAllColumns,
			djangoContentTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert django_content_type, could not build update column list")
		}

		ret := strmangle.SetComplement(djangoContentTypeAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(djangoContentTypePrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert django_content_type, could not build conflict column list")
			}

			conflict = make([]string, len(djangoContentTypePrimaryKeyColumns))
			copy(conflict, djangoContentTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"django_content_type\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(djangoContentTypeType, djangoContentTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(djangoContentTypeType, djangoContentTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert django_content_type")
	}

	if !cached {
		djangoContentTypeUpsertCacheMut.Lock()
		djangoContentTypeUpsertCache[key] = cache
		djangoContentTypeUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DjangoContentType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DjangoContentType) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no DjangoContentType provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), djangoContentTypePrimaryKeyMapping)
	sql := "DELETE FROM \"django_content_type\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from django_content_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for django_content_type")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q djangoContentTypeQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no djangoContentTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from django_content_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for django_content_type")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DjangoContentTypeSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoContentTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"django_content_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, djangoContentTypePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from djangoContentType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for django_content_type")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DjangoContentType) Reload(exec boil.Executor) error {
	ret, err := FindDjangoContentType(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DjangoContentTypeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DjangoContentTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoContentTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"django_content_type\".* FROM \"django_content_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, djangoContentTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in DjangoContentTypeSlice")
	}

	*o = slice

	return nil
}

// DjangoContentTypeExists checks if the DjangoContentType row exists.
func DjangoContentTypeExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"django_content_type\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if django_content_type exists")
	}

	return exists, nil
}

// Exists checks if the DjangoContentType row exists.
func (o *DjangoContentType) Exists(exec boil.Executor) (bool, error) {
	return DjangoContentTypeExists(exec, o.ID)
}
