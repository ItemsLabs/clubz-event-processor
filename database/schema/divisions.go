// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Division is an object representing the database table.
type Division struct {
	ID                 string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt          time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Name               string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Tier               int       `boil:"tier" json:"tier" toml:"tier" yaml:"tier"`
	Percentage         float64   `boil:"percentage" json:"percentage" toml:"percentage" yaml:"percentage"`
	PromotionMaxRange  float64   `boil:"promotion_max_range" json:"promotion_max_range" toml:"promotion_max_range" yaml:"promotion_max_range"`
	PromotionMinRange  float64   `boil:"promotion_min_range" json:"promotion_min_range" toml:"promotion_min_range" yaml:"promotion_min_range"`
	RelegationMaxRange float64   `boil:"relegation_max_range" json:"relegation_max_range" toml:"relegation_max_range" yaml:"relegation_max_range"`
	RelegationMinRange float64   `boil:"relegation_min_range" json:"relegation_min_range" toml:"relegation_min_range" yaml:"relegation_min_range"`

	R *divisionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L divisionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DivisionColumns = struct {
	ID                 string
	CreatedAt          string
	UpdatedAt          string
	Name               string
	Tier               string
	Percentage         string
	PromotionMaxRange  string
	PromotionMinRange  string
	RelegationMaxRange string
	RelegationMinRange string
}{
	ID:                 "id",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	Name:               "name",
	Tier:               "tier",
	Percentage:         "percentage",
	PromotionMaxRange:  "promotion_max_range",
	PromotionMinRange:  "promotion_min_range",
	RelegationMaxRange: "relegation_max_range",
	RelegationMinRange: "relegation_min_range",
}

var DivisionTableColumns = struct {
	ID                 string
	CreatedAt          string
	UpdatedAt          string
	Name               string
	Tier               string
	Percentage         string
	PromotionMaxRange  string
	PromotionMinRange  string
	RelegationMaxRange string
	RelegationMinRange string
}{
	ID:                 "divisions.id",
	CreatedAt:          "divisions.created_at",
	UpdatedAt:          "divisions.updated_at",
	Name:               "divisions.name",
	Tier:               "divisions.tier",
	Percentage:         "divisions.percentage",
	PromotionMaxRange:  "divisions.promotion_max_range",
	PromotionMinRange:  "divisions.promotion_min_range",
	RelegationMaxRange: "divisions.relegation_max_range",
	RelegationMinRange: "divisions.relegation_min_range",
}

// Generated where

var DivisionWhere = struct {
	ID                 whereHelperstring
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	Name               whereHelperstring
	Tier               whereHelperint
	Percentage         whereHelperfloat64
	PromotionMaxRange  whereHelperfloat64
	PromotionMinRange  whereHelperfloat64
	RelegationMaxRange whereHelperfloat64
	RelegationMinRange whereHelperfloat64
}{
	ID:                 whereHelperstring{field: "\"divisions\".\"id\""},
	CreatedAt:          whereHelpertime_Time{field: "\"divisions\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"divisions\".\"updated_at\""},
	Name:               whereHelperstring{field: "\"divisions\".\"name\""},
	Tier:               whereHelperint{field: "\"divisions\".\"tier\""},
	Percentage:         whereHelperfloat64{field: "\"divisions\".\"percentage\""},
	PromotionMaxRange:  whereHelperfloat64{field: "\"divisions\".\"promotion_max_range\""},
	PromotionMinRange:  whereHelperfloat64{field: "\"divisions\".\"promotion_min_range\""},
	RelegationMaxRange: whereHelperfloat64{field: "\"divisions\".\"relegation_max_range\""},
	RelegationMinRange: whereHelperfloat64{field: "\"divisions\".\"relegation_min_range\""},
}

// DivisionRels is where relationship names are stored.
var DivisionRels = struct {
	DivisionRewards                   string
	GameWeekDivisions                 string
	MatchLeaderboards                 string
	UserDivisions                     string
	NewDivisionUserGameWeekHistories  string
	WeekDivisionUserGameWeekHistories string
}{
	DivisionRewards:                   "DivisionRewards",
	GameWeekDivisions:                 "GameWeekDivisions",
	MatchLeaderboards:                 "MatchLeaderboards",
	UserDivisions:                     "UserDivisions",
	NewDivisionUserGameWeekHistories:  "NewDivisionUserGameWeekHistories",
	WeekDivisionUserGameWeekHistories: "WeekDivisionUserGameWeekHistories",
}

// divisionR is where relationships are stored.
type divisionR struct {
	DivisionRewards                   DivisionRewardSlice      `boil:"DivisionRewards" json:"DivisionRewards" toml:"DivisionRewards" yaml:"DivisionRewards"`
	GameWeekDivisions                 GameWeekDivisionSlice    `boil:"GameWeekDivisions" json:"GameWeekDivisions" toml:"GameWeekDivisions" yaml:"GameWeekDivisions"`
	MatchLeaderboards                 MatchLeaderboardSlice    `boil:"MatchLeaderboards" json:"MatchLeaderboards" toml:"MatchLeaderboards" yaml:"MatchLeaderboards"`
	UserDivisions                     UserDivisionSlice        `boil:"UserDivisions" json:"UserDivisions" toml:"UserDivisions" yaml:"UserDivisions"`
	NewDivisionUserGameWeekHistories  UserGameWeekHistorySlice `boil:"NewDivisionUserGameWeekHistories" json:"NewDivisionUserGameWeekHistories" toml:"NewDivisionUserGameWeekHistories" yaml:"NewDivisionUserGameWeekHistories"`
	WeekDivisionUserGameWeekHistories UserGameWeekHistorySlice `boil:"WeekDivisionUserGameWeekHistories" json:"WeekDivisionUserGameWeekHistories" toml:"WeekDivisionUserGameWeekHistories" yaml:"WeekDivisionUserGameWeekHistories"`
}

// NewStruct creates a new relationship struct
func (*divisionR) NewStruct() *divisionR {
	return &divisionR{}
}

func (r *divisionR) GetDivisionRewards() DivisionRewardSlice {
	if r == nil {
		return nil
	}
	return r.DivisionRewards
}

func (r *divisionR) GetGameWeekDivisions() GameWeekDivisionSlice {
	if r == nil {
		return nil
	}
	return r.GameWeekDivisions
}

func (r *divisionR) GetMatchLeaderboards() MatchLeaderboardSlice {
	if r == nil {
		return nil
	}
	return r.MatchLeaderboards
}

func (r *divisionR) GetUserDivisions() UserDivisionSlice {
	if r == nil {
		return nil
	}
	return r.UserDivisions
}

func (r *divisionR) GetNewDivisionUserGameWeekHistories() UserGameWeekHistorySlice {
	if r == nil {
		return nil
	}
	return r.NewDivisionUserGameWeekHistories
}

func (r *divisionR) GetWeekDivisionUserGameWeekHistories() UserGameWeekHistorySlice {
	if r == nil {
		return nil
	}
	return r.WeekDivisionUserGameWeekHistories
}

// divisionL is where Load methods for each relationship are stored.
type divisionL struct{}

var (
	divisionAllColumns            = []string{"id", "created_at", "updated_at", "name", "tier", "percentage", "promotion_max_range", "promotion_min_range", "relegation_max_range", "relegation_min_range"}
	divisionColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "name", "tier", "percentage", "promotion_max_range", "promotion_min_range", "relegation_max_range", "relegation_min_range"}
	divisionColumnsWithDefault    = []string{}
	divisionPrimaryKeyColumns     = []string{"id"}
	divisionGeneratedColumns      = []string{}
)

type (
	// DivisionSlice is an alias for a slice of pointers to Division.
	// This should almost always be used instead of []Division.
	DivisionSlice []*Division

	divisionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	divisionType                 = reflect.TypeOf(&Division{})
	divisionMapping              = queries.MakeStructMapping(divisionType)
	divisionPrimaryKeyMapping, _ = queries.BindMapping(divisionType, divisionMapping, divisionPrimaryKeyColumns)
	divisionInsertCacheMut       sync.RWMutex
	divisionInsertCache          = make(map[string]insertCache)
	divisionUpdateCacheMut       sync.RWMutex
	divisionUpdateCache          = make(map[string]updateCache)
	divisionUpsertCacheMut       sync.RWMutex
	divisionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single division record from the query.
func (q divisionQuery) One(exec boil.Executor) (*Division, error) {
	o := &Division{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for divisions")
	}

	return o, nil
}

// All returns all Division records from the query.
func (q divisionQuery) All(exec boil.Executor) (DivisionSlice, error) {
	var o []*Division

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to Division slice")
	}

	return o, nil
}

// Count returns the count of all Division records in the query.
func (q divisionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count divisions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q divisionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if divisions exists")
	}

	return count > 0, nil
}

// DivisionRewards retrieves all the division_reward's DivisionRewards with an executor.
func (o *Division) DivisionRewards(mods ...qm.QueryMod) divisionRewardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"division_rewards\".\"division_id\"=?", o.ID),
	)

	return DivisionRewards(queryMods...)
}

// GameWeekDivisions retrieves all the game_week_division's GameWeekDivisions with an executor.
func (o *Division) GameWeekDivisions(mods ...qm.QueryMod) gameWeekDivisionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"game_week_divisions\".\"division_id\"=?", o.ID),
	)

	return GameWeekDivisions(queryMods...)
}

// MatchLeaderboards retrieves all the match_leaderboard's MatchLeaderboards with an executor.
func (o *Division) MatchLeaderboards(mods ...qm.QueryMod) matchLeaderboardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"match_leaderboard\".\"division_id\"=?", o.ID),
	)

	return MatchLeaderboards(queryMods...)
}

// UserDivisions retrieves all the user_division's UserDivisions with an executor.
func (o *Division) UserDivisions(mods ...qm.QueryMod) userDivisionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_divisions\".\"division_id\"=?", o.ID),
	)

	return UserDivisions(queryMods...)
}

// NewDivisionUserGameWeekHistories retrieves all the user_game_week_history's UserGameWeekHistories with an executor via new_division_id column.
func (o *Division) NewDivisionUserGameWeekHistories(mods ...qm.QueryMod) userGameWeekHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_game_week_histories\".\"new_division_id\"=?", o.ID),
	)

	return UserGameWeekHistories(queryMods...)
}

// WeekDivisionUserGameWeekHistories retrieves all the user_game_week_history's UserGameWeekHistories with an executor via week_division_id column.
func (o *Division) WeekDivisionUserGameWeekHistories(mods ...qm.QueryMod) userGameWeekHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_game_week_histories\".\"week_division_id\"=?", o.ID),
	)

	return UserGameWeekHistories(queryMods...)
}

// LoadDivisionRewards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (divisionL) LoadDivisionRewards(e boil.Executor, singular bool, maybeDivision interface{}, mods queries.Applicator) error {
	var slice []*Division
	var object *Division

	if singular {
		var ok bool
		object, ok = maybeDivision.(*Division)
		if !ok {
			object = new(Division)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDivision)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDivision))
			}
		}
	} else {
		s, ok := maybeDivision.(*[]*Division)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDivision)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDivision))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &divisionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &divisionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`division_rewards`),
		qm.WhereIn(`division_rewards.division_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load division_rewards")
	}

	var resultSlice []*DivisionReward
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice division_rewards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on division_rewards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for division_rewards")
	}

	if singular {
		object.R.DivisionRewards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &divisionRewardR{}
			}
			foreign.R.Division = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DivisionID) {
				local.R.DivisionRewards = append(local.R.DivisionRewards, foreign)
				if foreign.R == nil {
					foreign.R = &divisionRewardR{}
				}
				foreign.R.Division = local
				break
			}
		}
	}

	return nil
}

// LoadGameWeekDivisions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (divisionL) LoadGameWeekDivisions(e boil.Executor, singular bool, maybeDivision interface{}, mods queries.Applicator) error {
	var slice []*Division
	var object *Division

	if singular {
		var ok bool
		object, ok = maybeDivision.(*Division)
		if !ok {
			object = new(Division)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDivision)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDivision))
			}
		}
	} else {
		s, ok := maybeDivision.(*[]*Division)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDivision)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDivision))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &divisionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &divisionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`game_week_divisions`),
		qm.WhereIn(`game_week_divisions.division_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load game_week_divisions")
	}

	var resultSlice []*GameWeekDivision
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice game_week_divisions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on game_week_divisions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_week_divisions")
	}

	if singular {
		object.R.GameWeekDivisions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gameWeekDivisionR{}
			}
			foreign.R.Division = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DivisionID {
				local.R.GameWeekDivisions = append(local.R.GameWeekDivisions, foreign)
				if foreign.R == nil {
					foreign.R = &gameWeekDivisionR{}
				}
				foreign.R.Division = local
				break
			}
		}
	}

	return nil
}

// LoadMatchLeaderboards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (divisionL) LoadMatchLeaderboards(e boil.Executor, singular bool, maybeDivision interface{}, mods queries.Applicator) error {
	var slice []*Division
	var object *Division

	if singular {
		var ok bool
		object, ok = maybeDivision.(*Division)
		if !ok {
			object = new(Division)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDivision)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDivision))
			}
		}
	} else {
		s, ok := maybeDivision.(*[]*Division)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDivision)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDivision))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &divisionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &divisionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`match_leaderboard`),
		qm.WhereIn(`match_leaderboard.division_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load match_leaderboard")
	}

	var resultSlice []*MatchLeaderboard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice match_leaderboard")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on match_leaderboard")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for match_leaderboard")
	}

	if singular {
		object.R.MatchLeaderboards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchLeaderboardR{}
			}
			foreign.R.Division = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DivisionID) {
				local.R.MatchLeaderboards = append(local.R.MatchLeaderboards, foreign)
				if foreign.R == nil {
					foreign.R = &matchLeaderboardR{}
				}
				foreign.R.Division = local
				break
			}
		}
	}

	return nil
}

// LoadUserDivisions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (divisionL) LoadUserDivisions(e boil.Executor, singular bool, maybeDivision interface{}, mods queries.Applicator) error {
	var slice []*Division
	var object *Division

	if singular {
		var ok bool
		object, ok = maybeDivision.(*Division)
		if !ok {
			object = new(Division)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDivision)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDivision))
			}
		}
	} else {
		s, ok := maybeDivision.(*[]*Division)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDivision)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDivision))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &divisionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &divisionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_divisions`),
		qm.WhereIn(`user_divisions.division_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_divisions")
	}

	var resultSlice []*UserDivision
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_divisions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_divisions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_divisions")
	}

	if singular {
		object.R.UserDivisions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userDivisionR{}
			}
			foreign.R.Division = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DivisionID {
				local.R.UserDivisions = append(local.R.UserDivisions, foreign)
				if foreign.R == nil {
					foreign.R = &userDivisionR{}
				}
				foreign.R.Division = local
				break
			}
		}
	}

	return nil
}

// LoadNewDivisionUserGameWeekHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (divisionL) LoadNewDivisionUserGameWeekHistories(e boil.Executor, singular bool, maybeDivision interface{}, mods queries.Applicator) error {
	var slice []*Division
	var object *Division

	if singular {
		var ok bool
		object, ok = maybeDivision.(*Division)
		if !ok {
			object = new(Division)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDivision)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDivision))
			}
		}
	} else {
		s, ok := maybeDivision.(*[]*Division)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDivision)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDivision))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &divisionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &divisionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_game_week_histories`),
		qm.WhereIn(`user_game_week_histories.new_division_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_game_week_histories")
	}

	var resultSlice []*UserGameWeekHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_game_week_histories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_game_week_histories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_game_week_histories")
	}

	if singular {
		object.R.NewDivisionUserGameWeekHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userGameWeekHistoryR{}
			}
			foreign.R.NewDivision = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.NewDivisionID) {
				local.R.NewDivisionUserGameWeekHistories = append(local.R.NewDivisionUserGameWeekHistories, foreign)
				if foreign.R == nil {
					foreign.R = &userGameWeekHistoryR{}
				}
				foreign.R.NewDivision = local
				break
			}
		}
	}

	return nil
}

// LoadWeekDivisionUserGameWeekHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (divisionL) LoadWeekDivisionUserGameWeekHistories(e boil.Executor, singular bool, maybeDivision interface{}, mods queries.Applicator) error {
	var slice []*Division
	var object *Division

	if singular {
		var ok bool
		object, ok = maybeDivision.(*Division)
		if !ok {
			object = new(Division)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDivision)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDivision))
			}
		}
	} else {
		s, ok := maybeDivision.(*[]*Division)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDivision)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDivision))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &divisionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &divisionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_game_week_histories`),
		qm.WhereIn(`user_game_week_histories.week_division_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_game_week_histories")
	}

	var resultSlice []*UserGameWeekHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_game_week_histories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_game_week_histories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_game_week_histories")
	}

	if singular {
		object.R.WeekDivisionUserGameWeekHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userGameWeekHistoryR{}
			}
			foreign.R.WeekDivision = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.WeekDivisionID) {
				local.R.WeekDivisionUserGameWeekHistories = append(local.R.WeekDivisionUserGameWeekHistories, foreign)
				if foreign.R == nil {
					foreign.R = &userGameWeekHistoryR{}
				}
				foreign.R.WeekDivision = local
				break
			}
		}
	}

	return nil
}

// AddDivisionRewards adds the given related objects to the existing relationships
// of the division, optionally inserting them as new records.
// Appends related to o.R.DivisionRewards.
// Sets related.R.Division appropriately.
func (o *Division) AddDivisionRewards(exec boil.Executor, insert bool, related ...*DivisionReward) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DivisionID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"division_rewards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"division_id"}),
				strmangle.WhereClause("\"", "\"", 2, divisionRewardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DivisionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &divisionR{
			DivisionRewards: related,
		}
	} else {
		o.R.DivisionRewards = append(o.R.DivisionRewards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &divisionRewardR{
				Division: o,
			}
		} else {
			rel.R.Division = o
		}
	}
	return nil
}

// SetDivisionRewards removes all previously related items of the
// division replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Division's DivisionRewards accordingly.
// Replaces o.R.DivisionRewards with related.
// Sets related.R.Division's DivisionRewards accordingly.
func (o *Division) SetDivisionRewards(exec boil.Executor, insert bool, related ...*DivisionReward) error {
	query := "update \"division_rewards\" set \"division_id\" = null where \"division_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DivisionRewards {
			queries.SetScanner(&rel.DivisionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Division = nil
		}
		o.R.DivisionRewards = nil
	}

	return o.AddDivisionRewards(exec, insert, related...)
}

// RemoveDivisionRewards relationships from objects passed in.
// Removes related items from R.DivisionRewards (uses pointer comparison, removal does not keep order)
// Sets related.R.Division.
func (o *Division) RemoveDivisionRewards(exec boil.Executor, related ...*DivisionReward) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DivisionID, nil)
		if rel.R != nil {
			rel.R.Division = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("division_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DivisionRewards {
			if rel != ri {
				continue
			}

			ln := len(o.R.DivisionRewards)
			if ln > 1 && i < ln-1 {
				o.R.DivisionRewards[i] = o.R.DivisionRewards[ln-1]
			}
			o.R.DivisionRewards = o.R.DivisionRewards[:ln-1]
			break
		}
	}

	return nil
}

// AddGameWeekDivisions adds the given related objects to the existing relationships
// of the division, optionally inserting them as new records.
// Appends related to o.R.GameWeekDivisions.
// Sets related.R.Division appropriately.
func (o *Division) AddGameWeekDivisions(exec boil.Executor, insert bool, related ...*GameWeekDivision) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DivisionID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"game_week_divisions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"division_id"}),
				strmangle.WhereClause("\"", "\"", 2, gameWeekDivisionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DivisionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &divisionR{
			GameWeekDivisions: related,
		}
	} else {
		o.R.GameWeekDivisions = append(o.R.GameWeekDivisions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gameWeekDivisionR{
				Division: o,
			}
		} else {
			rel.R.Division = o
		}
	}
	return nil
}

// AddMatchLeaderboards adds the given related objects to the existing relationships
// of the division, optionally inserting them as new records.
// Appends related to o.R.MatchLeaderboards.
// Sets related.R.Division appropriately.
func (o *Division) AddMatchLeaderboards(exec boil.Executor, insert bool, related ...*MatchLeaderboard) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DivisionID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"match_leaderboard\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"division_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchLeaderboardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DivisionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &divisionR{
			MatchLeaderboards: related,
		}
	} else {
		o.R.MatchLeaderboards = append(o.R.MatchLeaderboards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchLeaderboardR{
				Division: o,
			}
		} else {
			rel.R.Division = o
		}
	}
	return nil
}

// SetMatchLeaderboards removes all previously related items of the
// division replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Division's MatchLeaderboards accordingly.
// Replaces o.R.MatchLeaderboards with related.
// Sets related.R.Division's MatchLeaderboards accordingly.
func (o *Division) SetMatchLeaderboards(exec boil.Executor, insert bool, related ...*MatchLeaderboard) error {
	query := "update \"match_leaderboard\" set \"division_id\" = null where \"division_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.MatchLeaderboards {
			queries.SetScanner(&rel.DivisionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Division = nil
		}
		o.R.MatchLeaderboards = nil
	}

	return o.AddMatchLeaderboards(exec, insert, related...)
}

// RemoveMatchLeaderboards relationships from objects passed in.
// Removes related items from R.MatchLeaderboards (uses pointer comparison, removal does not keep order)
// Sets related.R.Division.
func (o *Division) RemoveMatchLeaderboards(exec boil.Executor, related ...*MatchLeaderboard) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DivisionID, nil)
		if rel.R != nil {
			rel.R.Division = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("division_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MatchLeaderboards {
			if rel != ri {
				continue
			}

			ln := len(o.R.MatchLeaderboards)
			if ln > 1 && i < ln-1 {
				o.R.MatchLeaderboards[i] = o.R.MatchLeaderboards[ln-1]
			}
			o.R.MatchLeaderboards = o.R.MatchLeaderboards[:ln-1]
			break
		}
	}

	return nil
}

// AddUserDivisions adds the given related objects to the existing relationships
// of the division, optionally inserting them as new records.
// Appends related to o.R.UserDivisions.
// Sets related.R.Division appropriately.
func (o *Division) AddUserDivisions(exec boil.Executor, insert bool, related ...*UserDivision) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DivisionID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_divisions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"division_id"}),
				strmangle.WhereClause("\"", "\"", 2, userDivisionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DivisionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &divisionR{
			UserDivisions: related,
		}
	} else {
		o.R.UserDivisions = append(o.R.UserDivisions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userDivisionR{
				Division: o,
			}
		} else {
			rel.R.Division = o
		}
	}
	return nil
}

// AddNewDivisionUserGameWeekHistories adds the given related objects to the existing relationships
// of the division, optionally inserting them as new records.
// Appends related to o.R.NewDivisionUserGameWeekHistories.
// Sets related.R.NewDivision appropriately.
func (o *Division) AddNewDivisionUserGameWeekHistories(exec boil.Executor, insert bool, related ...*UserGameWeekHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.NewDivisionID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_game_week_histories\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"new_division_id"}),
				strmangle.WhereClause("\"", "\"", 2, userGameWeekHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.NewDivisionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &divisionR{
			NewDivisionUserGameWeekHistories: related,
		}
	} else {
		o.R.NewDivisionUserGameWeekHistories = append(o.R.NewDivisionUserGameWeekHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userGameWeekHistoryR{
				NewDivision: o,
			}
		} else {
			rel.R.NewDivision = o
		}
	}
	return nil
}

// SetNewDivisionUserGameWeekHistories removes all previously related items of the
// division replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.NewDivision's NewDivisionUserGameWeekHistories accordingly.
// Replaces o.R.NewDivisionUserGameWeekHistories with related.
// Sets related.R.NewDivision's NewDivisionUserGameWeekHistories accordingly.
func (o *Division) SetNewDivisionUserGameWeekHistories(exec boil.Executor, insert bool, related ...*UserGameWeekHistory) error {
	query := "update \"user_game_week_histories\" set \"new_division_id\" = null where \"new_division_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.NewDivisionUserGameWeekHistories {
			queries.SetScanner(&rel.NewDivisionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.NewDivision = nil
		}
		o.R.NewDivisionUserGameWeekHistories = nil
	}

	return o.AddNewDivisionUserGameWeekHistories(exec, insert, related...)
}

// RemoveNewDivisionUserGameWeekHistories relationships from objects passed in.
// Removes related items from R.NewDivisionUserGameWeekHistories (uses pointer comparison, removal does not keep order)
// Sets related.R.NewDivision.
func (o *Division) RemoveNewDivisionUserGameWeekHistories(exec boil.Executor, related ...*UserGameWeekHistory) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.NewDivisionID, nil)
		if rel.R != nil {
			rel.R.NewDivision = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("new_division_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.NewDivisionUserGameWeekHistories {
			if rel != ri {
				continue
			}

			ln := len(o.R.NewDivisionUserGameWeekHistories)
			if ln > 1 && i < ln-1 {
				o.R.NewDivisionUserGameWeekHistories[i] = o.R.NewDivisionUserGameWeekHistories[ln-1]
			}
			o.R.NewDivisionUserGameWeekHistories = o.R.NewDivisionUserGameWeekHistories[:ln-1]
			break
		}
	}

	return nil
}

// AddWeekDivisionUserGameWeekHistories adds the given related objects to the existing relationships
// of the division, optionally inserting them as new records.
// Appends related to o.R.WeekDivisionUserGameWeekHistories.
// Sets related.R.WeekDivision appropriately.
func (o *Division) AddWeekDivisionUserGameWeekHistories(exec boil.Executor, insert bool, related ...*UserGameWeekHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WeekDivisionID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_game_week_histories\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"week_division_id"}),
				strmangle.WhereClause("\"", "\"", 2, userGameWeekHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WeekDivisionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &divisionR{
			WeekDivisionUserGameWeekHistories: related,
		}
	} else {
		o.R.WeekDivisionUserGameWeekHistories = append(o.R.WeekDivisionUserGameWeekHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userGameWeekHistoryR{
				WeekDivision: o,
			}
		} else {
			rel.R.WeekDivision = o
		}
	}
	return nil
}

// SetWeekDivisionUserGameWeekHistories removes all previously related items of the
// division replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.WeekDivision's WeekDivisionUserGameWeekHistories accordingly.
// Replaces o.R.WeekDivisionUserGameWeekHistories with related.
// Sets related.R.WeekDivision's WeekDivisionUserGameWeekHistories accordingly.
func (o *Division) SetWeekDivisionUserGameWeekHistories(exec boil.Executor, insert bool, related ...*UserGameWeekHistory) error {
	query := "update \"user_game_week_histories\" set \"week_division_id\" = null where \"week_division_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.WeekDivisionUserGameWeekHistories {
			queries.SetScanner(&rel.WeekDivisionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.WeekDivision = nil
		}
		o.R.WeekDivisionUserGameWeekHistories = nil
	}

	return o.AddWeekDivisionUserGameWeekHistories(exec, insert, related...)
}

// RemoveWeekDivisionUserGameWeekHistories relationships from objects passed in.
// Removes related items from R.WeekDivisionUserGameWeekHistories (uses pointer comparison, removal does not keep order)
// Sets related.R.WeekDivision.
func (o *Division) RemoveWeekDivisionUserGameWeekHistories(exec boil.Executor, related ...*UserGameWeekHistory) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.WeekDivisionID, nil)
		if rel.R != nil {
			rel.R.WeekDivision = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("week_division_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WeekDivisionUserGameWeekHistories {
			if rel != ri {
				continue
			}

			ln := len(o.R.WeekDivisionUserGameWeekHistories)
			if ln > 1 && i < ln-1 {
				o.R.WeekDivisionUserGameWeekHistories[i] = o.R.WeekDivisionUserGameWeekHistories[ln-1]
			}
			o.R.WeekDivisionUserGameWeekHistories = o.R.WeekDivisionUserGameWeekHistories[:ln-1]
			break
		}
	}

	return nil
}

// Divisions retrieves all the records using an executor.
func Divisions(mods ...qm.QueryMod) divisionQuery {
	mods = append(mods, qm.From("\"divisions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"divisions\".*"})
	}

	return divisionQuery{q}
}

// FindDivision retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDivision(exec boil.Executor, iD string, selectCols ...string) (*Division, error) {
	divisionObj := &Division{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"divisions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, divisionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from divisions")
	}

	return divisionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Division) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no divisions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(divisionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	divisionInsertCacheMut.RLock()
	cache, cached := divisionInsertCache[key]
	divisionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			divisionAllColumns,
			divisionColumnsWithDefault,
			divisionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(divisionType, divisionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(divisionType, divisionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"divisions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"divisions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into divisions")
	}

	if !cached {
		divisionInsertCacheMut.Lock()
		divisionInsertCache[key] = cache
		divisionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Division.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Division) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	divisionUpdateCacheMut.RLock()
	cache, cached := divisionUpdateCache[key]
	divisionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			divisionAllColumns,
			divisionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update divisions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"divisions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, divisionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(divisionType, divisionMapping, append(wl, divisionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update divisions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for divisions")
	}

	if !cached {
		divisionUpdateCacheMut.Lock()
		divisionUpdateCache[key] = cache
		divisionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q divisionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for divisions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for divisions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DivisionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), divisionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"divisions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, divisionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in division slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all division")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Division) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no divisions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(divisionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	divisionUpsertCacheMut.RLock()
	cache, cached := divisionUpsertCache[key]
	divisionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			divisionAllColumns,
			divisionColumnsWithDefault,
			divisionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			divisionAllColumns,
			divisionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert divisions, could not build update column list")
		}

		ret := strmangle.SetComplement(divisionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(divisionPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert divisions, could not build conflict column list")
			}

			conflict = make([]string, len(divisionPrimaryKeyColumns))
			copy(conflict, divisionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"divisions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(divisionType, divisionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(divisionType, divisionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert divisions")
	}

	if !cached {
		divisionUpsertCacheMut.Lock()
		divisionUpsertCache[key] = cache
		divisionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Division record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Division) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no Division provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), divisionPrimaryKeyMapping)
	sql := "DELETE FROM \"divisions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from divisions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for divisions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q divisionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no divisionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from divisions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for divisions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DivisionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), divisionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"divisions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, divisionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from division slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for divisions")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Division) Reload(exec boil.Executor) error {
	ret, err := FindDivision(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DivisionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DivisionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), divisionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"divisions\".* FROM \"divisions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, divisionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in DivisionSlice")
	}

	*o = slice

	return nil
}

// DivisionExists checks if the Division row exists.
func DivisionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"divisions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if divisions exists")
	}

	return exists, nil
}

// Exists checks if the Division row exists.
func (o *Division) Exists(exec boil.Executor) (bool, error) {
	return DivisionExists(exec, o.ID)
}
