// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Region is an object representing the database table.
type Region struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ImportID  null.String `boil:"import_id" json:"import_id,omitempty" toml:"import_id" yaml:"import_id,omitempty"`
	Name      string      `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *regionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L regionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RegionColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	ImportID  string
	Name      string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	ImportID:  "import_id",
	Name:      "name",
}

var RegionTableColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	ImportID  string
	Name      string
}{
	ID:        "regions.id",
	CreatedAt: "regions.created_at",
	UpdatedAt: "regions.updated_at",
	ImportID:  "regions.import_id",
	Name:      "regions.name",
}

// Generated where

var RegionWhere = struct {
	ID        whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	ImportID  whereHelpernull_String
	Name      whereHelperstring
}{
	ID:        whereHelperstring{field: "\"regions\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"regions\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"regions\".\"updated_at\""},
	ImportID:  whereHelpernull_String{field: "\"regions\".\"import_id\""},
	Name:      whereHelperstring{field: "\"regions\".\"name\""},
}

// RegionRels is where relationship names are stored.
var RegionRels = struct {
	Teams string
}{
	Teams: "Teams",
}

// regionR is where relationships are stored.
type regionR struct {
	Teams TeamSlice `boil:"Teams" json:"Teams" toml:"Teams" yaml:"Teams"`
}

// NewStruct creates a new relationship struct
func (*regionR) NewStruct() *regionR {
	return &regionR{}
}

func (r *regionR) GetTeams() TeamSlice {
	if r == nil {
		return nil
	}
	return r.Teams
}

// regionL is where Load methods for each relationship are stored.
type regionL struct{}

var (
	regionAllColumns            = []string{"id", "created_at", "updated_at", "import_id", "name"}
	regionColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "name"}
	regionColumnsWithDefault    = []string{"import_id"}
	regionPrimaryKeyColumns     = []string{"id"}
	regionGeneratedColumns      = []string{}
)

type (
	// RegionSlice is an alias for a slice of pointers to Region.
	// This should almost always be used instead of []Region.
	RegionSlice []*Region

	regionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	regionType                 = reflect.TypeOf(&Region{})
	regionMapping              = queries.MakeStructMapping(regionType)
	regionPrimaryKeyMapping, _ = queries.BindMapping(regionType, regionMapping, regionPrimaryKeyColumns)
	regionInsertCacheMut       sync.RWMutex
	regionInsertCache          = make(map[string]insertCache)
	regionUpdateCacheMut       sync.RWMutex
	regionUpdateCache          = make(map[string]updateCache)
	regionUpsertCacheMut       sync.RWMutex
	regionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single region record from the query.
func (q regionQuery) One(exec boil.Executor) (*Region, error) {
	o := &Region{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for regions")
	}

	return o, nil
}

// All returns all Region records from the query.
func (q regionQuery) All(exec boil.Executor) (RegionSlice, error) {
	var o []*Region

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to Region slice")
	}

	return o, nil
}

// Count returns the count of all Region records in the query.
func (q regionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count regions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q regionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if regions exists")
	}

	return count > 0, nil
}

// Teams retrieves all the team's Teams with an executor.
func (o *Region) Teams(mods ...qm.QueryMod) teamQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"teams\".\"region_id\"=?", o.ID),
	)

	return Teams(queryMods...)
}

// LoadTeams allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (regionL) LoadTeams(e boil.Executor, singular bool, maybeRegion interface{}, mods queries.Applicator) error {
	var slice []*Region
	var object *Region

	if singular {
		var ok bool
		object, ok = maybeRegion.(*Region)
		if !ok {
			object = new(Region)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRegion)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRegion))
			}
		}
	} else {
		s, ok := maybeRegion.(*[]*Region)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRegion)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRegion))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &regionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &regionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`teams`),
		qm.WhereIn(`teams.region_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load teams")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice teams")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for teams")
	}

	if singular {
		object.R.Teams = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &teamR{}
			}
			foreign.R.Region = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RegionID) {
				local.R.Teams = append(local.R.Teams, foreign)
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.Region = local
				break
			}
		}
	}

	return nil
}

// AddTeams adds the given related objects to the existing relationships
// of the region, optionally inserting them as new records.
// Appends related to o.R.Teams.
// Sets related.R.Region appropriately.
func (o *Region) AddTeams(exec boil.Executor, insert bool, related ...*Team) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RegionID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"teams\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"region_id"}),
				strmangle.WhereClause("\"", "\"", 2, teamPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RegionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &regionR{
			Teams: related,
		}
	} else {
		o.R.Teams = append(o.R.Teams, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &teamR{
				Region: o,
			}
		} else {
			rel.R.Region = o
		}
	}
	return nil
}

// SetTeams removes all previously related items of the
// region replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Region's Teams accordingly.
// Replaces o.R.Teams with related.
// Sets related.R.Region's Teams accordingly.
func (o *Region) SetTeams(exec boil.Executor, insert bool, related ...*Team) error {
	query := "update \"teams\" set \"region_id\" = null where \"region_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Teams {
			queries.SetScanner(&rel.RegionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Region = nil
		}
		o.R.Teams = nil
	}

	return o.AddTeams(exec, insert, related...)
}

// RemoveTeams relationships from objects passed in.
// Removes related items from R.Teams (uses pointer comparison, removal does not keep order)
// Sets related.R.Region.
func (o *Region) RemoveTeams(exec boil.Executor, related ...*Team) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RegionID, nil)
		if rel.R != nil {
			rel.R.Region = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("region_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Teams {
			if rel != ri {
				continue
			}

			ln := len(o.R.Teams)
			if ln > 1 && i < ln-1 {
				o.R.Teams[i] = o.R.Teams[ln-1]
			}
			o.R.Teams = o.R.Teams[:ln-1]
			break
		}
	}

	return nil
}

// Regions retrieves all the records using an executor.
func Regions(mods ...qm.QueryMod) regionQuery {
	mods = append(mods, qm.From("\"regions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"regions\".*"})
	}

	return regionQuery{q}
}

// FindRegion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRegion(exec boil.Executor, iD string, selectCols ...string) (*Region, error) {
	regionObj := &Region{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"regions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, regionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from regions")
	}

	return regionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Region) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no regions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(regionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	regionInsertCacheMut.RLock()
	cache, cached := regionInsertCache[key]
	regionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			regionAllColumns,
			regionColumnsWithDefault,
			regionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(regionType, regionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(regionType, regionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"regions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"regions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into regions")
	}

	if !cached {
		regionInsertCacheMut.Lock()
		regionInsertCache[key] = cache
		regionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Region.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Region) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	regionUpdateCacheMut.RLock()
	cache, cached := regionUpdateCache[key]
	regionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			regionAllColumns,
			regionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update regions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"regions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, regionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(regionType, regionMapping, append(wl, regionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update regions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for regions")
	}

	if !cached {
		regionUpdateCacheMut.Lock()
		regionUpdateCache[key] = cache
		regionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q regionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for regions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for regions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RegionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), regionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"regions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, regionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in region slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all region")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Region) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no regions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(regionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	regionUpsertCacheMut.RLock()
	cache, cached := regionUpsertCache[key]
	regionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			regionAllColumns,
			regionColumnsWithDefault,
			regionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			regionAllColumns,
			regionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert regions, could not build update column list")
		}

		ret := strmangle.SetComplement(regionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(regionPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert regions, could not build conflict column list")
			}

			conflict = make([]string, len(regionPrimaryKeyColumns))
			copy(conflict, regionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"regions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(regionType, regionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(regionType, regionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert regions")
	}

	if !cached {
		regionUpsertCacheMut.Lock()
		regionUpsertCache[key] = cache
		regionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Region record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Region) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no Region provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), regionPrimaryKeyMapping)
	sql := "DELETE FROM \"regions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from regions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for regions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q regionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no regionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from regions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for regions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RegionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), regionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"regions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, regionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from region slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for regions")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Region) Reload(exec boil.Executor) error {
	ret, err := FindRegion(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RegionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RegionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), regionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"regions\".* FROM \"regions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, regionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in RegionSlice")
	}

	*o = slice

	return nil
}

// RegionExists checks if the Region row exists.
func RegionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"regions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if regions exists")
	}

	return exists, nil
}

// Exists checks if the Region row exists.
func (o *Region) Exists(exec boil.Executor) (bool, error) {
	return RegionExists(exec, o.ID)
}
