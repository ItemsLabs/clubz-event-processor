// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Competition is an object representing the database table.
type Competition struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ImportID  null.String `boil:"import_id" json:"import_id,omitempty" toml:"import_id" yaml:"import_id,omitempty"`
	Name      string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Code      string      `boil:"code" json:"code" toml:"code" yaml:"code"`
	ShortName null.String `boil:"short_name" json:"short_name,omitempty" toml:"short_name" yaml:"short_name,omitempty"`
	Enabled   bool        `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`
	ConfigID  null.String `boil:"config_id" json:"config_id,omitempty" toml:"config_id" yaml:"config_id,omitempty"`
	SportID   null.String `boil:"sport_id" json:"sport_id,omitempty" toml:"sport_id" yaml:"sport_id,omitempty"`

	R *competitionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L competitionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CompetitionColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	ImportID  string
	Name      string
	Code      string
	ShortName string
	Enabled   string
	ConfigID  string
	SportID   string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	ImportID:  "import_id",
	Name:      "name",
	Code:      "code",
	ShortName: "short_name",
	Enabled:   "enabled",
	ConfigID:  "config_id",
	SportID:   "sport_id",
}

var CompetitionTableColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	ImportID  string
	Name      string
	Code      string
	ShortName string
	Enabled   string
	ConfigID  string
	SportID   string
}{
	ID:        "competitions.id",
	CreatedAt: "competitions.created_at",
	UpdatedAt: "competitions.updated_at",
	ImportID:  "competitions.import_id",
	Name:      "competitions.name",
	Code:      "competitions.code",
	ShortName: "competitions.short_name",
	Enabled:   "competitions.enabled",
	ConfigID:  "competitions.config_id",
	SportID:   "competitions.sport_id",
}

// Generated where

var CompetitionWhere = struct {
	ID        whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	ImportID  whereHelpernull_String
	Name      whereHelperstring
	Code      whereHelperstring
	ShortName whereHelpernull_String
	Enabled   whereHelperbool
	ConfigID  whereHelpernull_String
	SportID   whereHelpernull_String
}{
	ID:        whereHelperstring{field: "\"competitions\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"competitions\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"competitions\".\"updated_at\""},
	ImportID:  whereHelpernull_String{field: "\"competitions\".\"import_id\""},
	Name:      whereHelperstring{field: "\"competitions\".\"name\""},
	Code:      whereHelperstring{field: "\"competitions\".\"code\""},
	ShortName: whereHelpernull_String{field: "\"competitions\".\"short_name\""},
	Enabled:   whereHelperbool{field: "\"competitions\".\"enabled\""},
	ConfigID:  whereHelpernull_String{field: "\"competitions\".\"config_id\""},
	SportID:   whereHelpernull_String{field: "\"competitions\".\"sport_id\""},
}

// CompetitionRels is where relationship names are stored.
var CompetitionRels = struct {
	Config                               string
	Sport                                string
	RelatedCompetitionCompetitionConfigs string
	CompetitionEditions                  string
	Matches                              string
	SeasonCompetitionMembers             string
}{
	Config:                               "Config",
	Sport:                                "Sport",
	RelatedCompetitionCompetitionConfigs: "RelatedCompetitionCompetitionConfigs",
	CompetitionEditions:                  "CompetitionEditions",
	Matches:                              "Matches",
	SeasonCompetitionMembers:             "SeasonCompetitionMembers",
}

// competitionR is where relationships are stored.
type competitionR struct {
	Config                               *CompetitionConfig           `boil:"Config" json:"Config" toml:"Config" yaml:"Config"`
	Sport                                *Sport                       `boil:"Sport" json:"Sport" toml:"Sport" yaml:"Sport"`
	RelatedCompetitionCompetitionConfigs CompetitionConfigSlice       `boil:"RelatedCompetitionCompetitionConfigs" json:"RelatedCompetitionCompetitionConfigs" toml:"RelatedCompetitionCompetitionConfigs" yaml:"RelatedCompetitionCompetitionConfigs"`
	CompetitionEditions                  CompetitionEditionSlice      `boil:"CompetitionEditions" json:"CompetitionEditions" toml:"CompetitionEditions" yaml:"CompetitionEditions"`
	Matches                              MatchSlice                   `boil:"Matches" json:"Matches" toml:"Matches" yaml:"Matches"`
	SeasonCompetitionMembers             SeasonCompetitionMemberSlice `boil:"SeasonCompetitionMembers" json:"SeasonCompetitionMembers" toml:"SeasonCompetitionMembers" yaml:"SeasonCompetitionMembers"`
}

// NewStruct creates a new relationship struct
func (*competitionR) NewStruct() *competitionR {
	return &competitionR{}
}

func (r *competitionR) GetConfig() *CompetitionConfig {
	if r == nil {
		return nil
	}
	return r.Config
}

func (r *competitionR) GetSport() *Sport {
	if r == nil {
		return nil
	}
	return r.Sport
}

func (r *competitionR) GetRelatedCompetitionCompetitionConfigs() CompetitionConfigSlice {
	if r == nil {
		return nil
	}
	return r.RelatedCompetitionCompetitionConfigs
}

func (r *competitionR) GetCompetitionEditions() CompetitionEditionSlice {
	if r == nil {
		return nil
	}
	return r.CompetitionEditions
}

func (r *competitionR) GetMatches() MatchSlice {
	if r == nil {
		return nil
	}
	return r.Matches
}

func (r *competitionR) GetSeasonCompetitionMembers() SeasonCompetitionMemberSlice {
	if r == nil {
		return nil
	}
	return r.SeasonCompetitionMembers
}

// competitionL is where Load methods for each relationship are stored.
type competitionL struct{}

var (
	competitionAllColumns            = []string{"id", "created_at", "updated_at", "import_id", "name", "code", "short_name", "enabled", "config_id", "sport_id"}
	competitionColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "name", "code", "enabled"}
	competitionColumnsWithDefault    = []string{"import_id", "short_name", "config_id", "sport_id"}
	competitionPrimaryKeyColumns     = []string{"id"}
	competitionGeneratedColumns      = []string{}
)

type (
	// CompetitionSlice is an alias for a slice of pointers to Competition.
	// This should almost always be used instead of []Competition.
	CompetitionSlice []*Competition

	competitionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	competitionType                 = reflect.TypeOf(&Competition{})
	competitionMapping              = queries.MakeStructMapping(competitionType)
	competitionPrimaryKeyMapping, _ = queries.BindMapping(competitionType, competitionMapping, competitionPrimaryKeyColumns)
	competitionInsertCacheMut       sync.RWMutex
	competitionInsertCache          = make(map[string]insertCache)
	competitionUpdateCacheMut       sync.RWMutex
	competitionUpdateCache          = make(map[string]updateCache)
	competitionUpsertCacheMut       sync.RWMutex
	competitionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single competition record from the query.
func (q competitionQuery) One(exec boil.Executor) (*Competition, error) {
	o := &Competition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for competitions")
	}

	return o, nil
}

// All returns all Competition records from the query.
func (q competitionQuery) All(exec boil.Executor) (CompetitionSlice, error) {
	var o []*Competition

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to Competition slice")
	}

	return o, nil
}

// Count returns the count of all Competition records in the query.
func (q competitionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count competitions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q competitionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if competitions exists")
	}

	return count > 0, nil
}

// Config pointed to by the foreign key.
func (o *Competition) Config(mods ...qm.QueryMod) competitionConfigQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ConfigID),
	}

	queryMods = append(queryMods, mods...)

	return CompetitionConfigs(queryMods...)
}

// Sport pointed to by the foreign key.
func (o *Competition) Sport(mods ...qm.QueryMod) sportQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SportID),
	}

	queryMods = append(queryMods, mods...)

	return Sports(queryMods...)
}

// RelatedCompetitionCompetitionConfigs retrieves all the competition_config's CompetitionConfigs with an executor via related_competition_id column.
func (o *Competition) RelatedCompetitionCompetitionConfigs(mods ...qm.QueryMod) competitionConfigQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"competition_config\".\"related_competition_id\"=?", o.ID),
	)

	return CompetitionConfigs(queryMods...)
}

// CompetitionEditions retrieves all the competition_edition's CompetitionEditions with an executor.
func (o *Competition) CompetitionEditions(mods ...qm.QueryMod) competitionEditionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"competition_editions\".\"competition_id\"=?", o.ID),
	)

	return CompetitionEditions(queryMods...)
}

// Matches retrieves all the match's Matches with an executor.
func (o *Competition) Matches(mods ...qm.QueryMod) matchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"matches\".\"competition_id\"=?", o.ID),
	)

	return Matches(queryMods...)
}

// SeasonCompetitionMembers retrieves all the season_competition_member's SeasonCompetitionMembers with an executor.
func (o *Competition) SeasonCompetitionMembers(mods ...qm.QueryMod) seasonCompetitionMemberQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"season_competition_members\".\"competition_id\"=?", o.ID),
	)

	return SeasonCompetitionMembers(queryMods...)
}

// LoadConfig allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (competitionL) LoadConfig(e boil.Executor, singular bool, maybeCompetition interface{}, mods queries.Applicator) error {
	var slice []*Competition
	var object *Competition

	if singular {
		var ok bool
		object, ok = maybeCompetition.(*Competition)
		if !ok {
			object = new(Competition)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompetition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompetition))
			}
		}
	} else {
		s, ok := maybeCompetition.(*[]*Competition)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompetition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompetition))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &competitionR{}
		}
		if !queries.IsNil(object.ConfigID) {
			args[object.ConfigID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &competitionR{}
			}

			if !queries.IsNil(obj.ConfigID) {
				args[obj.ConfigID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`competition_config`),
		qm.WhereIn(`competition_config.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CompetitionConfig")
	}

	var resultSlice []*CompetitionConfig
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CompetitionConfig")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for competition_config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for competition_config")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Config = foreign
		if foreign.R == nil {
			foreign.R = &competitionConfigR{}
		}
		foreign.R.ConfigCompetitions = append(foreign.R.ConfigCompetitions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ConfigID, foreign.ID) {
				local.R.Config = foreign
				if foreign.R == nil {
					foreign.R = &competitionConfigR{}
				}
				foreign.R.ConfigCompetitions = append(foreign.R.ConfigCompetitions, local)
				break
			}
		}
	}

	return nil
}

// LoadSport allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (competitionL) LoadSport(e boil.Executor, singular bool, maybeCompetition interface{}, mods queries.Applicator) error {
	var slice []*Competition
	var object *Competition

	if singular {
		var ok bool
		object, ok = maybeCompetition.(*Competition)
		if !ok {
			object = new(Competition)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompetition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompetition))
			}
		}
	} else {
		s, ok := maybeCompetition.(*[]*Competition)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompetition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompetition))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &competitionR{}
		}
		if !queries.IsNil(object.SportID) {
			args[object.SportID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &competitionR{}
			}

			if !queries.IsNil(obj.SportID) {
				args[obj.SportID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sports`),
		qm.WhereIn(`sports.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Sport")
	}

	var resultSlice []*Sport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Sport")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sports")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sports")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Sport = foreign
		if foreign.R == nil {
			foreign.R = &sportR{}
		}
		foreign.R.Competitions = append(foreign.R.Competitions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SportID, foreign.ID) {
				local.R.Sport = foreign
				if foreign.R == nil {
					foreign.R = &sportR{}
				}
				foreign.R.Competitions = append(foreign.R.Competitions, local)
				break
			}
		}
	}

	return nil
}

// LoadRelatedCompetitionCompetitionConfigs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (competitionL) LoadRelatedCompetitionCompetitionConfigs(e boil.Executor, singular bool, maybeCompetition interface{}, mods queries.Applicator) error {
	var slice []*Competition
	var object *Competition

	if singular {
		var ok bool
		object, ok = maybeCompetition.(*Competition)
		if !ok {
			object = new(Competition)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompetition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompetition))
			}
		}
	} else {
		s, ok := maybeCompetition.(*[]*Competition)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompetition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompetition))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &competitionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &competitionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`competition_config`),
		qm.WhereIn(`competition_config.related_competition_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load competition_config")
	}

	var resultSlice []*CompetitionConfig
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice competition_config")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on competition_config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for competition_config")
	}

	if singular {
		object.R.RelatedCompetitionCompetitionConfigs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &competitionConfigR{}
			}
			foreign.R.RelatedCompetition = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RelatedCompetitionID) {
				local.R.RelatedCompetitionCompetitionConfigs = append(local.R.RelatedCompetitionCompetitionConfigs, foreign)
				if foreign.R == nil {
					foreign.R = &competitionConfigR{}
				}
				foreign.R.RelatedCompetition = local
				break
			}
		}
	}

	return nil
}

// LoadCompetitionEditions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (competitionL) LoadCompetitionEditions(e boil.Executor, singular bool, maybeCompetition interface{}, mods queries.Applicator) error {
	var slice []*Competition
	var object *Competition

	if singular {
		var ok bool
		object, ok = maybeCompetition.(*Competition)
		if !ok {
			object = new(Competition)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompetition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompetition))
			}
		}
	} else {
		s, ok := maybeCompetition.(*[]*Competition)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompetition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompetition))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &competitionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &competitionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`competition_editions`),
		qm.WhereIn(`competition_editions.competition_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load competition_editions")
	}

	var resultSlice []*CompetitionEdition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice competition_editions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on competition_editions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for competition_editions")
	}

	if singular {
		object.R.CompetitionEditions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &competitionEditionR{}
			}
			foreign.R.Competition = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CompetitionID {
				local.R.CompetitionEditions = append(local.R.CompetitionEditions, foreign)
				if foreign.R == nil {
					foreign.R = &competitionEditionR{}
				}
				foreign.R.Competition = local
				break
			}
		}
	}

	return nil
}

// LoadMatches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (competitionL) LoadMatches(e boil.Executor, singular bool, maybeCompetition interface{}, mods queries.Applicator) error {
	var slice []*Competition
	var object *Competition

	if singular {
		var ok bool
		object, ok = maybeCompetition.(*Competition)
		if !ok {
			object = new(Competition)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompetition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompetition))
			}
		}
	} else {
		s, ok := maybeCompetition.(*[]*Competition)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompetition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompetition))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &competitionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &competitionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.competition_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load matches")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice matches")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if singular {
		object.R.Matches = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchR{}
			}
			foreign.R.Competition = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CompetitionID {
				local.R.Matches = append(local.R.Matches, foreign)
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.Competition = local
				break
			}
		}
	}

	return nil
}

// LoadSeasonCompetitionMembers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (competitionL) LoadSeasonCompetitionMembers(e boil.Executor, singular bool, maybeCompetition interface{}, mods queries.Applicator) error {
	var slice []*Competition
	var object *Competition

	if singular {
		var ok bool
		object, ok = maybeCompetition.(*Competition)
		if !ok {
			object = new(Competition)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompetition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompetition))
			}
		}
	} else {
		s, ok := maybeCompetition.(*[]*Competition)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompetition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompetition))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &competitionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &competitionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`season_competition_members`),
		qm.WhereIn(`season_competition_members.competition_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load season_competition_members")
	}

	var resultSlice []*SeasonCompetitionMember
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice season_competition_members")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on season_competition_members")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for season_competition_members")
	}

	if singular {
		object.R.SeasonCompetitionMembers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &seasonCompetitionMemberR{}
			}
			foreign.R.Competition = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CompetitionID {
				local.R.SeasonCompetitionMembers = append(local.R.SeasonCompetitionMembers, foreign)
				if foreign.R == nil {
					foreign.R = &seasonCompetitionMemberR{}
				}
				foreign.R.Competition = local
				break
			}
		}
	}

	return nil
}

// SetConfig of the competition to the related item.
// Sets o.R.Config to related.
// Adds o to related.R.ConfigCompetitions.
func (o *Competition) SetConfig(exec boil.Executor, insert bool, related *CompetitionConfig) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"competitions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"config_id"}),
		strmangle.WhereClause("\"", "\"", 2, competitionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ConfigID, related.ID)
	if o.R == nil {
		o.R = &competitionR{
			Config: related,
		}
	} else {
		o.R.Config = related
	}

	if related.R == nil {
		related.R = &competitionConfigR{
			ConfigCompetitions: CompetitionSlice{o},
		}
	} else {
		related.R.ConfigCompetitions = append(related.R.ConfigCompetitions, o)
	}

	return nil
}

// RemoveConfig relationship.
// Sets o.R.Config to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Competition) RemoveConfig(exec boil.Executor, related *CompetitionConfig) error {
	var err error

	queries.SetScanner(&o.ConfigID, nil)
	if _, err = o.Update(exec, boil.Whitelist("config_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Config = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ConfigCompetitions {
		if queries.Equal(o.ConfigID, ri.ConfigID) {
			continue
		}

		ln := len(related.R.ConfigCompetitions)
		if ln > 1 && i < ln-1 {
			related.R.ConfigCompetitions[i] = related.R.ConfigCompetitions[ln-1]
		}
		related.R.ConfigCompetitions = related.R.ConfigCompetitions[:ln-1]
		break
	}
	return nil
}

// SetSport of the competition to the related item.
// Sets o.R.Sport to related.
// Adds o to related.R.Competitions.
func (o *Competition) SetSport(exec boil.Executor, insert bool, related *Sport) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"competitions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sport_id"}),
		strmangle.WhereClause("\"", "\"", 2, competitionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SportID, related.ID)
	if o.R == nil {
		o.R = &competitionR{
			Sport: related,
		}
	} else {
		o.R.Sport = related
	}

	if related.R == nil {
		related.R = &sportR{
			Competitions: CompetitionSlice{o},
		}
	} else {
		related.R.Competitions = append(related.R.Competitions, o)
	}

	return nil
}

// RemoveSport relationship.
// Sets o.R.Sport to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Competition) RemoveSport(exec boil.Executor, related *Sport) error {
	var err error

	queries.SetScanner(&o.SportID, nil)
	if _, err = o.Update(exec, boil.Whitelist("sport_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Sport = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Competitions {
		if queries.Equal(o.SportID, ri.SportID) {
			continue
		}

		ln := len(related.R.Competitions)
		if ln > 1 && i < ln-1 {
			related.R.Competitions[i] = related.R.Competitions[ln-1]
		}
		related.R.Competitions = related.R.Competitions[:ln-1]
		break
	}
	return nil
}

// AddRelatedCompetitionCompetitionConfigs adds the given related objects to the existing relationships
// of the competition, optionally inserting them as new records.
// Appends related to o.R.RelatedCompetitionCompetitionConfigs.
// Sets related.R.RelatedCompetition appropriately.
func (o *Competition) AddRelatedCompetitionCompetitionConfigs(exec boil.Executor, insert bool, related ...*CompetitionConfig) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RelatedCompetitionID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"competition_config\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"related_competition_id"}),
				strmangle.WhereClause("\"", "\"", 2, competitionConfigPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RelatedCompetitionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &competitionR{
			RelatedCompetitionCompetitionConfigs: related,
		}
	} else {
		o.R.RelatedCompetitionCompetitionConfigs = append(o.R.RelatedCompetitionCompetitionConfigs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &competitionConfigR{
				RelatedCompetition: o,
			}
		} else {
			rel.R.RelatedCompetition = o
		}
	}
	return nil
}

// SetRelatedCompetitionCompetitionConfigs removes all previously related items of the
// competition replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RelatedCompetition's RelatedCompetitionCompetitionConfigs accordingly.
// Replaces o.R.RelatedCompetitionCompetitionConfigs with related.
// Sets related.R.RelatedCompetition's RelatedCompetitionCompetitionConfigs accordingly.
func (o *Competition) SetRelatedCompetitionCompetitionConfigs(exec boil.Executor, insert bool, related ...*CompetitionConfig) error {
	query := "update \"competition_config\" set \"related_competition_id\" = null where \"related_competition_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RelatedCompetitionCompetitionConfigs {
			queries.SetScanner(&rel.RelatedCompetitionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.RelatedCompetition = nil
		}
		o.R.RelatedCompetitionCompetitionConfigs = nil
	}

	return o.AddRelatedCompetitionCompetitionConfigs(exec, insert, related...)
}

// RemoveRelatedCompetitionCompetitionConfigs relationships from objects passed in.
// Removes related items from R.RelatedCompetitionCompetitionConfigs (uses pointer comparison, removal does not keep order)
// Sets related.R.RelatedCompetition.
func (o *Competition) RemoveRelatedCompetitionCompetitionConfigs(exec boil.Executor, related ...*CompetitionConfig) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RelatedCompetitionID, nil)
		if rel.R != nil {
			rel.R.RelatedCompetition = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("related_competition_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RelatedCompetitionCompetitionConfigs {
			if rel != ri {
				continue
			}

			ln := len(o.R.RelatedCompetitionCompetitionConfigs)
			if ln > 1 && i < ln-1 {
				o.R.RelatedCompetitionCompetitionConfigs[i] = o.R.RelatedCompetitionCompetitionConfigs[ln-1]
			}
			o.R.RelatedCompetitionCompetitionConfigs = o.R.RelatedCompetitionCompetitionConfigs[:ln-1]
			break
		}
	}

	return nil
}

// AddCompetitionEditions adds the given related objects to the existing relationships
// of the competition, optionally inserting them as new records.
// Appends related to o.R.CompetitionEditions.
// Sets related.R.Competition appropriately.
func (o *Competition) AddCompetitionEditions(exec boil.Executor, insert bool, related ...*CompetitionEdition) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CompetitionID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"competition_editions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"competition_id"}),
				strmangle.WhereClause("\"", "\"", 2, competitionEditionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CompetitionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &competitionR{
			CompetitionEditions: related,
		}
	} else {
		o.R.CompetitionEditions = append(o.R.CompetitionEditions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &competitionEditionR{
				Competition: o,
			}
		} else {
			rel.R.Competition = o
		}
	}
	return nil
}

// AddMatches adds the given related objects to the existing relationships
// of the competition, optionally inserting them as new records.
// Appends related to o.R.Matches.
// Sets related.R.Competition appropriately.
func (o *Competition) AddMatches(exec boil.Executor, insert bool, related ...*Match) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CompetitionID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"matches\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"competition_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CompetitionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &competitionR{
			Matches: related,
		}
	} else {
		o.R.Matches = append(o.R.Matches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchR{
				Competition: o,
			}
		} else {
			rel.R.Competition = o
		}
	}
	return nil
}

// AddSeasonCompetitionMembers adds the given related objects to the existing relationships
// of the competition, optionally inserting them as new records.
// Appends related to o.R.SeasonCompetitionMembers.
// Sets related.R.Competition appropriately.
func (o *Competition) AddSeasonCompetitionMembers(exec boil.Executor, insert bool, related ...*SeasonCompetitionMember) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CompetitionID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"season_competition_members\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"competition_id"}),
				strmangle.WhereClause("\"", "\"", 2, seasonCompetitionMemberPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CompetitionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &competitionR{
			SeasonCompetitionMembers: related,
		}
	} else {
		o.R.SeasonCompetitionMembers = append(o.R.SeasonCompetitionMembers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &seasonCompetitionMemberR{
				Competition: o,
			}
		} else {
			rel.R.Competition = o
		}
	}
	return nil
}

// Competitions retrieves all the records using an executor.
func Competitions(mods ...qm.QueryMod) competitionQuery {
	mods = append(mods, qm.From("\"competitions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"competitions\".*"})
	}

	return competitionQuery{q}
}

// FindCompetition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCompetition(exec boil.Executor, iD string, selectCols ...string) (*Competition, error) {
	competitionObj := &Competition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"competitions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, competitionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from competitions")
	}

	return competitionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Competition) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no competitions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(competitionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	competitionInsertCacheMut.RLock()
	cache, cached := competitionInsertCache[key]
	competitionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			competitionAllColumns,
			competitionColumnsWithDefault,
			competitionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(competitionType, competitionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(competitionType, competitionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"competitions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"competitions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into competitions")
	}

	if !cached {
		competitionInsertCacheMut.Lock()
		competitionInsertCache[key] = cache
		competitionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Competition.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Competition) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	competitionUpdateCacheMut.RLock()
	cache, cached := competitionUpdateCache[key]
	competitionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			competitionAllColumns,
			competitionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update competitions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"competitions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, competitionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(competitionType, competitionMapping, append(wl, competitionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update competitions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for competitions")
	}

	if !cached {
		competitionUpdateCacheMut.Lock()
		competitionUpdateCache[key] = cache
		competitionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q competitionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for competitions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for competitions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CompetitionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), competitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"competitions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, competitionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in competition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all competition")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Competition) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no competitions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(competitionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	competitionUpsertCacheMut.RLock()
	cache, cached := competitionUpsertCache[key]
	competitionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			competitionAllColumns,
			competitionColumnsWithDefault,
			competitionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			competitionAllColumns,
			competitionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert competitions, could not build update column list")
		}

		ret := strmangle.SetComplement(competitionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(competitionPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert competitions, could not build conflict column list")
			}

			conflict = make([]string, len(competitionPrimaryKeyColumns))
			copy(conflict, competitionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"competitions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(competitionType, competitionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(competitionType, competitionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert competitions")
	}

	if !cached {
		competitionUpsertCacheMut.Lock()
		competitionUpsertCache[key] = cache
		competitionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Competition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Competition) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no Competition provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), competitionPrimaryKeyMapping)
	sql := "DELETE FROM \"competitions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from competitions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for competitions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q competitionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no competitionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from competitions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for competitions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CompetitionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), competitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"competitions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, competitionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from competition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for competitions")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Competition) Reload(exec boil.Executor) error {
	ret, err := FindCompetition(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CompetitionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CompetitionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), competitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"competitions\".* FROM \"competitions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, competitionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in CompetitionSlice")
	}

	*o = slice

	return nil
}

// CompetitionExists checks if the Competition row exists.
func CompetitionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"competitions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if competitions exists")
	}

	return exists, nil
}

// Exists checks if the Competition row exists.
func (o *Competition) Exists(exec boil.Executor) (bool, error) {
	return CompetitionExists(exec, o.ID)
}
