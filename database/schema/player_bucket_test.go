// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPlayerBuckets(t *testing.T) {
	t.Parallel()

	query := PlayerBuckets()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPlayerBucketsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlayerBucket{}
	if err = randomize.Struct(seed, o, playerBucketDBTypes, true, playerBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PlayerBuckets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlayerBucketsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlayerBucket{}
	if err = randomize.Struct(seed, o, playerBucketDBTypes, true, playerBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PlayerBuckets().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PlayerBuckets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlayerBucketsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlayerBucket{}
	if err = randomize.Struct(seed, o, playerBucketDBTypes, true, playerBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlayerBucketSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PlayerBuckets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlayerBucketsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlayerBucket{}
	if err = randomize.Struct(seed, o, playerBucketDBTypes, true, playerBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PlayerBucketExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PlayerBucket exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PlayerBucketExists to return true, but got false.")
	}
}

func testPlayerBucketsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlayerBucket{}
	if err = randomize.Struct(seed, o, playerBucketDBTypes, true, playerBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	playerBucketFound, err := FindPlayerBucket(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if playerBucketFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPlayerBucketsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlayerBucket{}
	if err = randomize.Struct(seed, o, playerBucketDBTypes, true, playerBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PlayerBuckets().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testPlayerBucketsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlayerBucket{}
	if err = randomize.Struct(seed, o, playerBucketDBTypes, true, playerBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PlayerBuckets().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPlayerBucketsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playerBucketOne := &PlayerBucket{}
	playerBucketTwo := &PlayerBucket{}
	if err = randomize.Struct(seed, playerBucketOne, playerBucketDBTypes, false, playerBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}
	if err = randomize.Struct(seed, playerBucketTwo, playerBucketDBTypes, false, playerBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = playerBucketOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = playerBucketTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PlayerBuckets().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPlayerBucketsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playerBucketOne := &PlayerBucket{}
	playerBucketTwo := &PlayerBucket{}
	if err = randomize.Struct(seed, playerBucketOne, playerBucketDBTypes, false, playerBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}
	if err = randomize.Struct(seed, playerBucketTwo, playerBucketDBTypes, false, playerBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = playerBucketOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = playerBucketTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlayerBuckets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testPlayerBucketsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlayerBucket{}
	if err = randomize.Struct(seed, o, playerBucketDBTypes, true, playerBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlayerBuckets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlayerBucketsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlayerBucket{}
	if err = randomize.Struct(seed, o, playerBucketDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(playerBucketColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PlayerBuckets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlayerBucketToOneCountryUsingCountry(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local PlayerBucket
	var foreign Country

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, playerBucketDBTypes, true, playerBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, countryDBTypes, false, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CountryID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Country().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PlayerBucketSlice{&local}
	if err = local.L.LoadCountry(tx, false, (*[]*PlayerBucket)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Country = nil
	if err = local.L.LoadCountry(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testPlayerBucketToOneTeamUsingTeam(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local PlayerBucket
	var foreign Team

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, playerBucketDBTypes, false, playerBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TeamID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Team().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PlayerBucketSlice{&local}
	if err = local.L.LoadTeam(tx, false, (*[]*PlayerBucket)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Team = nil
	if err = local.L.LoadTeam(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testPlayerBucketToOneSetOpCountryUsingCountry(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a PlayerBucket
	var b, c Country

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerBucketDBTypes, false, strmangle.SetComplement(playerBucketPrimaryKeyColumns, playerBucketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Country{&b, &c} {
		err = a.SetCountry(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Country != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PlayerBuckets[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CountryID, x.ID) {
			t.Error("foreign key was wrong value", a.CountryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CountryID))
		reflect.Indirect(reflect.ValueOf(&a.CountryID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CountryID, x.ID) {
			t.Error("foreign key was wrong value", a.CountryID, x.ID)
		}
	}
}

func testPlayerBucketToOneRemoveOpCountryUsingCountry(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a PlayerBucket
	var b Country

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerBucketDBTypes, false, strmangle.SetComplement(playerBucketPrimaryKeyColumns, playerBucketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCountry(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCountry(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Country().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Country != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CountryID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PlayerBuckets) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPlayerBucketToOneSetOpTeamUsingTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a PlayerBucket
	var b, c Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerBucketDBTypes, false, strmangle.SetComplement(playerBucketPrimaryKeyColumns, playerBucketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Team{&b, &c} {
		err = a.SetTeam(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Team != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PlayerBuckets[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TeamID != x.ID {
			t.Error("foreign key was wrong value", a.TeamID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TeamID))
		reflect.Indirect(reflect.ValueOf(&a.TeamID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TeamID != x.ID {
			t.Error("foreign key was wrong value", a.TeamID, x.ID)
		}
	}
}

func testPlayerBucketsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlayerBucket{}
	if err = randomize.Struct(seed, o, playerBucketDBTypes, true, playerBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPlayerBucketsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlayerBucket{}
	if err = randomize.Struct(seed, o, playerBucketDBTypes, true, playerBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlayerBucketSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testPlayerBucketsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlayerBucket{}
	if err = randomize.Struct(seed, o, playerBucketDBTypes, true, playerBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PlayerBuckets().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	playerBucketDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `FirstName`: `character varying`, `LastName`: `character varying`, `TeamID`: `uuid`, `Age`: `integer`, `Bronze`: `boolean`, `Common`: `integer`, `CountryID`: `uuid`, `Diamond`: `boolean`, `GamePosition`: `character varying`, `Gold`: `boolean`, `Legendary`: `integer`, `Platinum`: `boolean`, `Position`: `character varying`, `Rare`: `integer`, `RealPopularity`: `integer`, `Silver`: `boolean`, `UltraRare`: `integer`, `Uncommon`: `integer`, `UsablePopularity`: `integer`}
	_                   = bytes.MinRead
)

func testPlayerBucketsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(playerBucketPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(playerBucketAllColumns) == len(playerBucketPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PlayerBucket{}
	if err = randomize.Struct(seed, o, playerBucketDBTypes, true, playerBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlayerBuckets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, playerBucketDBTypes, true, playerBucketPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPlayerBucketsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(playerBucketAllColumns) == len(playerBucketPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PlayerBucket{}
	if err = randomize.Struct(seed, o, playerBucketDBTypes, true, playerBucketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlayerBuckets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, playerBucketDBTypes, true, playerBucketPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(playerBucketAllColumns, playerBucketPrimaryKeyColumns) {
		fields = playerBucketAllColumns
	} else {
		fields = strmangle.SetComplement(
			playerBucketAllColumns,
			playerBucketPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PlayerBucketSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPlayerBucketsUpsert(t *testing.T) {
	t.Parallel()

	if len(playerBucketAllColumns) == len(playerBucketPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PlayerBucket{}
	if err = randomize.Struct(seed, &o, playerBucketDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PlayerBucket: %s", err)
	}

	count, err := PlayerBuckets().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, playerBucketDBTypes, false, playerBucketPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlayerBucket struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PlayerBucket: %s", err)
	}

	count, err = PlayerBuckets().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
