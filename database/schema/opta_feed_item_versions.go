// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OptaFeedItemVersion is an object representing the database table.
type OptaFeedItemVersion struct {
	ID             string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Status         int       `boil:"status" json:"status" toml:"status" yaml:"status"`
	Version        string    `boil:"version" json:"version" toml:"version" yaml:"version"`
	LastModifiedAt time.Time `boil:"last_modified_at" json:"last_modified_at" toml:"last_modified_at" yaml:"last_modified_at"`
	ItemID         string    `boil:"item_id" json:"item_id" toml:"item_id" yaml:"item_id"`

	R *optaFeedItemVersionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L optaFeedItemVersionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OptaFeedItemVersionColumns = struct {
	ID             string
	CreatedAt      string
	UpdatedAt      string
	Status         string
	Version        string
	LastModifiedAt string
	ItemID         string
}{
	ID:             "id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	Status:         "status",
	Version:        "version",
	LastModifiedAt: "last_modified_at",
	ItemID:         "item_id",
}

var OptaFeedItemVersionTableColumns = struct {
	ID             string
	CreatedAt      string
	UpdatedAt      string
	Status         string
	Version        string
	LastModifiedAt string
	ItemID         string
}{
	ID:             "opta_feed_item_versions.id",
	CreatedAt:      "opta_feed_item_versions.created_at",
	UpdatedAt:      "opta_feed_item_versions.updated_at",
	Status:         "opta_feed_item_versions.status",
	Version:        "opta_feed_item_versions.version",
	LastModifiedAt: "opta_feed_item_versions.last_modified_at",
	ItemID:         "opta_feed_item_versions.item_id",
}

// Generated where

var OptaFeedItemVersionWhere = struct {
	ID             whereHelperstring
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	Status         whereHelperint
	Version        whereHelperstring
	LastModifiedAt whereHelpertime_Time
	ItemID         whereHelperstring
}{
	ID:             whereHelperstring{field: "\"opta_feed_item_versions\".\"id\""},
	CreatedAt:      whereHelpertime_Time{field: "\"opta_feed_item_versions\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"opta_feed_item_versions\".\"updated_at\""},
	Status:         whereHelperint{field: "\"opta_feed_item_versions\".\"status\""},
	Version:        whereHelperstring{field: "\"opta_feed_item_versions\".\"version\""},
	LastModifiedAt: whereHelpertime_Time{field: "\"opta_feed_item_versions\".\"last_modified_at\""},
	ItemID:         whereHelperstring{field: "\"opta_feed_item_versions\".\"item_id\""},
}

// OptaFeedItemVersionRels is where relationship names are stored.
var OptaFeedItemVersionRels = struct {
	Item                        string
	MatchEvents                 string
	CurrentVersionOptaFeedItems string
}{
	Item:                        "Item",
	MatchEvents:                 "MatchEvents",
	CurrentVersionOptaFeedItems: "CurrentVersionOptaFeedItems",
}

// optaFeedItemVersionR is where relationships are stored.
type optaFeedItemVersionR struct {
	Item                        *OptaFeedItem     `boil:"Item" json:"Item" toml:"Item" yaml:"Item"`
	MatchEvents                 MatchEventSlice   `boil:"MatchEvents" json:"MatchEvents" toml:"MatchEvents" yaml:"MatchEvents"`
	CurrentVersionOptaFeedItems OptaFeedItemSlice `boil:"CurrentVersionOptaFeedItems" json:"CurrentVersionOptaFeedItems" toml:"CurrentVersionOptaFeedItems" yaml:"CurrentVersionOptaFeedItems"`
}

// NewStruct creates a new relationship struct
func (*optaFeedItemVersionR) NewStruct() *optaFeedItemVersionR {
	return &optaFeedItemVersionR{}
}

func (r *optaFeedItemVersionR) GetItem() *OptaFeedItem {
	if r == nil {
		return nil
	}
	return r.Item
}

func (r *optaFeedItemVersionR) GetMatchEvents() MatchEventSlice {
	if r == nil {
		return nil
	}
	return r.MatchEvents
}

func (r *optaFeedItemVersionR) GetCurrentVersionOptaFeedItems() OptaFeedItemSlice {
	if r == nil {
		return nil
	}
	return r.CurrentVersionOptaFeedItems
}

// optaFeedItemVersionL is where Load methods for each relationship are stored.
type optaFeedItemVersionL struct{}

var (
	optaFeedItemVersionAllColumns            = []string{"id", "created_at", "updated_at", "status", "version", "last_modified_at", "item_id"}
	optaFeedItemVersionColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "status", "version", "last_modified_at", "item_id"}
	optaFeedItemVersionColumnsWithDefault    = []string{}
	optaFeedItemVersionPrimaryKeyColumns     = []string{"id"}
	optaFeedItemVersionGeneratedColumns      = []string{}
)

type (
	// OptaFeedItemVersionSlice is an alias for a slice of pointers to OptaFeedItemVersion.
	// This should almost always be used instead of []OptaFeedItemVersion.
	OptaFeedItemVersionSlice []*OptaFeedItemVersion

	optaFeedItemVersionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	optaFeedItemVersionType                 = reflect.TypeOf(&OptaFeedItemVersion{})
	optaFeedItemVersionMapping              = queries.MakeStructMapping(optaFeedItemVersionType)
	optaFeedItemVersionPrimaryKeyMapping, _ = queries.BindMapping(optaFeedItemVersionType, optaFeedItemVersionMapping, optaFeedItemVersionPrimaryKeyColumns)
	optaFeedItemVersionInsertCacheMut       sync.RWMutex
	optaFeedItemVersionInsertCache          = make(map[string]insertCache)
	optaFeedItemVersionUpdateCacheMut       sync.RWMutex
	optaFeedItemVersionUpdateCache          = make(map[string]updateCache)
	optaFeedItemVersionUpsertCacheMut       sync.RWMutex
	optaFeedItemVersionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single optaFeedItemVersion record from the query.
func (q optaFeedItemVersionQuery) One(exec boil.Executor) (*OptaFeedItemVersion, error) {
	o := &OptaFeedItemVersion{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for opta_feed_item_versions")
	}

	return o, nil
}

// All returns all OptaFeedItemVersion records from the query.
func (q optaFeedItemVersionQuery) All(exec boil.Executor) (OptaFeedItemVersionSlice, error) {
	var o []*OptaFeedItemVersion

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to OptaFeedItemVersion slice")
	}

	return o, nil
}

// Count returns the count of all OptaFeedItemVersion records in the query.
func (q optaFeedItemVersionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count opta_feed_item_versions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q optaFeedItemVersionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if opta_feed_item_versions exists")
	}

	return count > 0, nil
}

// Item pointed to by the foreign key.
func (o *OptaFeedItemVersion) Item(mods ...qm.QueryMod) optaFeedItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ItemID),
	}

	queryMods = append(queryMods, mods...)

	return OptaFeedItems(queryMods...)
}

// MatchEvents retrieves all the match_event's MatchEvents with an executor.
func (o *OptaFeedItemVersion) MatchEvents(mods ...qm.QueryMod) matchEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"match_events\".\"opta_feed_item_version_id\"=?", o.ID),
	)

	return MatchEvents(queryMods...)
}

// CurrentVersionOptaFeedItems retrieves all the opta_feed_item's OptaFeedItems with an executor via current_version_id column.
func (o *OptaFeedItemVersion) CurrentVersionOptaFeedItems(mods ...qm.QueryMod) optaFeedItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"opta_feed_items\".\"current_version_id\"=?", o.ID),
	)

	return OptaFeedItems(queryMods...)
}

// LoadItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (optaFeedItemVersionL) LoadItem(e boil.Executor, singular bool, maybeOptaFeedItemVersion interface{}, mods queries.Applicator) error {
	var slice []*OptaFeedItemVersion
	var object *OptaFeedItemVersion

	if singular {
		var ok bool
		object, ok = maybeOptaFeedItemVersion.(*OptaFeedItemVersion)
		if !ok {
			object = new(OptaFeedItemVersion)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOptaFeedItemVersion)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOptaFeedItemVersion))
			}
		}
	} else {
		s, ok := maybeOptaFeedItemVersion.(*[]*OptaFeedItemVersion)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOptaFeedItemVersion)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOptaFeedItemVersion))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &optaFeedItemVersionR{}
		}
		args[object.ItemID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &optaFeedItemVersionR{}
			}

			args[obj.ItemID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`opta_feed_items`),
		qm.WhereIn(`opta_feed_items.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OptaFeedItem")
	}

	var resultSlice []*OptaFeedItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OptaFeedItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for opta_feed_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for opta_feed_items")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Item = foreign
		if foreign.R == nil {
			foreign.R = &optaFeedItemR{}
		}
		foreign.R.ItemOptaFeedItemVersions = append(foreign.R.ItemOptaFeedItemVersions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ItemID == foreign.ID {
				local.R.Item = foreign
				if foreign.R == nil {
					foreign.R = &optaFeedItemR{}
				}
				foreign.R.ItemOptaFeedItemVersions = append(foreign.R.ItemOptaFeedItemVersions, local)
				break
			}
		}
	}

	return nil
}

// LoadMatchEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (optaFeedItemVersionL) LoadMatchEvents(e boil.Executor, singular bool, maybeOptaFeedItemVersion interface{}, mods queries.Applicator) error {
	var slice []*OptaFeedItemVersion
	var object *OptaFeedItemVersion

	if singular {
		var ok bool
		object, ok = maybeOptaFeedItemVersion.(*OptaFeedItemVersion)
		if !ok {
			object = new(OptaFeedItemVersion)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOptaFeedItemVersion)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOptaFeedItemVersion))
			}
		}
	} else {
		s, ok := maybeOptaFeedItemVersion.(*[]*OptaFeedItemVersion)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOptaFeedItemVersion)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOptaFeedItemVersion))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &optaFeedItemVersionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &optaFeedItemVersionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`match_events`),
		qm.WhereIn(`match_events.opta_feed_item_version_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load match_events")
	}

	var resultSlice []*MatchEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice match_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on match_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for match_events")
	}

	if singular {
		object.R.MatchEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchEventR{}
			}
			foreign.R.OptaFeedItemVersion = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OptaFeedItemVersionID) {
				local.R.MatchEvents = append(local.R.MatchEvents, foreign)
				if foreign.R == nil {
					foreign.R = &matchEventR{}
				}
				foreign.R.OptaFeedItemVersion = local
				break
			}
		}
	}

	return nil
}

// LoadCurrentVersionOptaFeedItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (optaFeedItemVersionL) LoadCurrentVersionOptaFeedItems(e boil.Executor, singular bool, maybeOptaFeedItemVersion interface{}, mods queries.Applicator) error {
	var slice []*OptaFeedItemVersion
	var object *OptaFeedItemVersion

	if singular {
		var ok bool
		object, ok = maybeOptaFeedItemVersion.(*OptaFeedItemVersion)
		if !ok {
			object = new(OptaFeedItemVersion)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOptaFeedItemVersion)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOptaFeedItemVersion))
			}
		}
	} else {
		s, ok := maybeOptaFeedItemVersion.(*[]*OptaFeedItemVersion)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOptaFeedItemVersion)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOptaFeedItemVersion))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &optaFeedItemVersionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &optaFeedItemVersionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`opta_feed_items`),
		qm.WhereIn(`opta_feed_items.current_version_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load opta_feed_items")
	}

	var resultSlice []*OptaFeedItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice opta_feed_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on opta_feed_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for opta_feed_items")
	}

	if singular {
		object.R.CurrentVersionOptaFeedItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &optaFeedItemR{}
			}
			foreign.R.CurrentVersion = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CurrentVersionID) {
				local.R.CurrentVersionOptaFeedItems = append(local.R.CurrentVersionOptaFeedItems, foreign)
				if foreign.R == nil {
					foreign.R = &optaFeedItemR{}
				}
				foreign.R.CurrentVersion = local
				break
			}
		}
	}

	return nil
}

// SetItem of the optaFeedItemVersion to the related item.
// Sets o.R.Item to related.
// Adds o to related.R.ItemOptaFeedItemVersions.
func (o *OptaFeedItemVersion) SetItem(exec boil.Executor, insert bool, related *OptaFeedItem) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"opta_feed_item_versions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"item_id"}),
		strmangle.WhereClause("\"", "\"", 2, optaFeedItemVersionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ItemID = related.ID
	if o.R == nil {
		o.R = &optaFeedItemVersionR{
			Item: related,
		}
	} else {
		o.R.Item = related
	}

	if related.R == nil {
		related.R = &optaFeedItemR{
			ItemOptaFeedItemVersions: OptaFeedItemVersionSlice{o},
		}
	} else {
		related.R.ItemOptaFeedItemVersions = append(related.R.ItemOptaFeedItemVersions, o)
	}

	return nil
}

// AddMatchEvents adds the given related objects to the existing relationships
// of the opta_feed_item_version, optionally inserting them as new records.
// Appends related to o.R.MatchEvents.
// Sets related.R.OptaFeedItemVersion appropriately.
func (o *OptaFeedItemVersion) AddMatchEvents(exec boil.Executor, insert bool, related ...*MatchEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OptaFeedItemVersionID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"match_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"opta_feed_item_version_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OptaFeedItemVersionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &optaFeedItemVersionR{
			MatchEvents: related,
		}
	} else {
		o.R.MatchEvents = append(o.R.MatchEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchEventR{
				OptaFeedItemVersion: o,
			}
		} else {
			rel.R.OptaFeedItemVersion = o
		}
	}
	return nil
}

// SetMatchEvents removes all previously related items of the
// opta_feed_item_version replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OptaFeedItemVersion's MatchEvents accordingly.
// Replaces o.R.MatchEvents with related.
// Sets related.R.OptaFeedItemVersion's MatchEvents accordingly.
func (o *OptaFeedItemVersion) SetMatchEvents(exec boil.Executor, insert bool, related ...*MatchEvent) error {
	query := "update \"match_events\" set \"opta_feed_item_version_id\" = null where \"opta_feed_item_version_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.MatchEvents {
			queries.SetScanner(&rel.OptaFeedItemVersionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OptaFeedItemVersion = nil
		}
		o.R.MatchEvents = nil
	}

	return o.AddMatchEvents(exec, insert, related...)
}

// RemoveMatchEvents relationships from objects passed in.
// Removes related items from R.MatchEvents (uses pointer comparison, removal does not keep order)
// Sets related.R.OptaFeedItemVersion.
func (o *OptaFeedItemVersion) RemoveMatchEvents(exec boil.Executor, related ...*MatchEvent) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OptaFeedItemVersionID, nil)
		if rel.R != nil {
			rel.R.OptaFeedItemVersion = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("opta_feed_item_version_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MatchEvents {
			if rel != ri {
				continue
			}

			ln := len(o.R.MatchEvents)
			if ln > 1 && i < ln-1 {
				o.R.MatchEvents[i] = o.R.MatchEvents[ln-1]
			}
			o.R.MatchEvents = o.R.MatchEvents[:ln-1]
			break
		}
	}

	return nil
}

// AddCurrentVersionOptaFeedItems adds the given related objects to the existing relationships
// of the opta_feed_item_version, optionally inserting them as new records.
// Appends related to o.R.CurrentVersionOptaFeedItems.
// Sets related.R.CurrentVersion appropriately.
func (o *OptaFeedItemVersion) AddCurrentVersionOptaFeedItems(exec boil.Executor, insert bool, related ...*OptaFeedItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CurrentVersionID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"opta_feed_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"current_version_id"}),
				strmangle.WhereClause("\"", "\"", 2, optaFeedItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CurrentVersionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &optaFeedItemVersionR{
			CurrentVersionOptaFeedItems: related,
		}
	} else {
		o.R.CurrentVersionOptaFeedItems = append(o.R.CurrentVersionOptaFeedItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &optaFeedItemR{
				CurrentVersion: o,
			}
		} else {
			rel.R.CurrentVersion = o
		}
	}
	return nil
}

// SetCurrentVersionOptaFeedItems removes all previously related items of the
// opta_feed_item_version replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CurrentVersion's CurrentVersionOptaFeedItems accordingly.
// Replaces o.R.CurrentVersionOptaFeedItems with related.
// Sets related.R.CurrentVersion's CurrentVersionOptaFeedItems accordingly.
func (o *OptaFeedItemVersion) SetCurrentVersionOptaFeedItems(exec boil.Executor, insert bool, related ...*OptaFeedItem) error {
	query := "update \"opta_feed_items\" set \"current_version_id\" = null where \"current_version_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CurrentVersionOptaFeedItems {
			queries.SetScanner(&rel.CurrentVersionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CurrentVersion = nil
		}
		o.R.CurrentVersionOptaFeedItems = nil
	}

	return o.AddCurrentVersionOptaFeedItems(exec, insert, related...)
}

// RemoveCurrentVersionOptaFeedItems relationships from objects passed in.
// Removes related items from R.CurrentVersionOptaFeedItems (uses pointer comparison, removal does not keep order)
// Sets related.R.CurrentVersion.
func (o *OptaFeedItemVersion) RemoveCurrentVersionOptaFeedItems(exec boil.Executor, related ...*OptaFeedItem) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CurrentVersionID, nil)
		if rel.R != nil {
			rel.R.CurrentVersion = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("current_version_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CurrentVersionOptaFeedItems {
			if rel != ri {
				continue
			}

			ln := len(o.R.CurrentVersionOptaFeedItems)
			if ln > 1 && i < ln-1 {
				o.R.CurrentVersionOptaFeedItems[i] = o.R.CurrentVersionOptaFeedItems[ln-1]
			}
			o.R.CurrentVersionOptaFeedItems = o.R.CurrentVersionOptaFeedItems[:ln-1]
			break
		}
	}

	return nil
}

// OptaFeedItemVersions retrieves all the records using an executor.
func OptaFeedItemVersions(mods ...qm.QueryMod) optaFeedItemVersionQuery {
	mods = append(mods, qm.From("\"opta_feed_item_versions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"opta_feed_item_versions\".*"})
	}

	return optaFeedItemVersionQuery{q}
}

// FindOptaFeedItemVersion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOptaFeedItemVersion(exec boil.Executor, iD string, selectCols ...string) (*OptaFeedItemVersion, error) {
	optaFeedItemVersionObj := &OptaFeedItemVersion{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"opta_feed_item_versions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, optaFeedItemVersionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from opta_feed_item_versions")
	}

	return optaFeedItemVersionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OptaFeedItemVersion) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no opta_feed_item_versions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(optaFeedItemVersionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	optaFeedItemVersionInsertCacheMut.RLock()
	cache, cached := optaFeedItemVersionInsertCache[key]
	optaFeedItemVersionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			optaFeedItemVersionAllColumns,
			optaFeedItemVersionColumnsWithDefault,
			optaFeedItemVersionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(optaFeedItemVersionType, optaFeedItemVersionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(optaFeedItemVersionType, optaFeedItemVersionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"opta_feed_item_versions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"opta_feed_item_versions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into opta_feed_item_versions")
	}

	if !cached {
		optaFeedItemVersionInsertCacheMut.Lock()
		optaFeedItemVersionInsertCache[key] = cache
		optaFeedItemVersionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the OptaFeedItemVersion.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OptaFeedItemVersion) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	optaFeedItemVersionUpdateCacheMut.RLock()
	cache, cached := optaFeedItemVersionUpdateCache[key]
	optaFeedItemVersionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			optaFeedItemVersionAllColumns,
			optaFeedItemVersionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update opta_feed_item_versions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"opta_feed_item_versions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, optaFeedItemVersionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(optaFeedItemVersionType, optaFeedItemVersionMapping, append(wl, optaFeedItemVersionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update opta_feed_item_versions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for opta_feed_item_versions")
	}

	if !cached {
		optaFeedItemVersionUpdateCacheMut.Lock()
		optaFeedItemVersionUpdateCache[key] = cache
		optaFeedItemVersionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q optaFeedItemVersionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for opta_feed_item_versions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for opta_feed_item_versions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OptaFeedItemVersionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), optaFeedItemVersionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"opta_feed_item_versions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, optaFeedItemVersionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in optaFeedItemVersion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all optaFeedItemVersion")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OptaFeedItemVersion) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no opta_feed_item_versions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(optaFeedItemVersionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	optaFeedItemVersionUpsertCacheMut.RLock()
	cache, cached := optaFeedItemVersionUpsertCache[key]
	optaFeedItemVersionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			optaFeedItemVersionAllColumns,
			optaFeedItemVersionColumnsWithDefault,
			optaFeedItemVersionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			optaFeedItemVersionAllColumns,
			optaFeedItemVersionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert opta_feed_item_versions, could not build update column list")
		}

		ret := strmangle.SetComplement(optaFeedItemVersionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(optaFeedItemVersionPrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert opta_feed_item_versions, could not build conflict column list")
			}

			conflict = make([]string, len(optaFeedItemVersionPrimaryKeyColumns))
			copy(conflict, optaFeedItemVersionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"opta_feed_item_versions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(optaFeedItemVersionType, optaFeedItemVersionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(optaFeedItemVersionType, optaFeedItemVersionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert opta_feed_item_versions")
	}

	if !cached {
		optaFeedItemVersionUpsertCacheMut.Lock()
		optaFeedItemVersionUpsertCache[key] = cache
		optaFeedItemVersionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single OptaFeedItemVersion record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OptaFeedItemVersion) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no OptaFeedItemVersion provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), optaFeedItemVersionPrimaryKeyMapping)
	sql := "DELETE FROM \"opta_feed_item_versions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from opta_feed_item_versions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for opta_feed_item_versions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q optaFeedItemVersionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no optaFeedItemVersionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from opta_feed_item_versions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for opta_feed_item_versions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OptaFeedItemVersionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), optaFeedItemVersionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"opta_feed_item_versions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, optaFeedItemVersionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from optaFeedItemVersion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for opta_feed_item_versions")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OptaFeedItemVersion) Reload(exec boil.Executor) error {
	ret, err := FindOptaFeedItemVersion(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OptaFeedItemVersionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OptaFeedItemVersionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), optaFeedItemVersionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"opta_feed_item_versions\".* FROM \"opta_feed_item_versions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, optaFeedItemVersionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in OptaFeedItemVersionSlice")
	}

	*o = slice

	return nil
}

// OptaFeedItemVersionExists checks if the OptaFeedItemVersion row exists.
func OptaFeedItemVersionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"opta_feed_item_versions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if opta_feed_item_versions exists")
	}

	return exists, nil
}

// Exists checks if the OptaFeedItemVersion row exists.
func (o *OptaFeedItemVersion) Exists(exec boil.Executor) (bool, error) {
	return OptaFeedItemVersionExists(exec, o.ID)
}
