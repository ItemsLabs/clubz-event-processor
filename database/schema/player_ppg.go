// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlayerPPG is an object representing the database table.
type PlayerPPG struct {
	ID         null.String  `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	ImportID   null.String  `boil:"import_id" json:"import_id,omitempty" toml:"import_id" yaml:"import_id,omitempty"`
	FullName   null.String  `boil:"full_name" json:"full_name,omitempty" toml:"full_name" yaml:"full_name,omitempty"`
	PPG        null.Float64 `boil:"ppg" json:"ppg,omitempty" toml:"ppg" yaml:"ppg,omitempty"`
	TotalGoals null.Int64   `boil:"total_goals" json:"total_goals,omitempty" toml:"total_goals" yaml:"total_goals,omitempty"`
}

var PlayerPPGColumns = struct {
	ID         string
	ImportID   string
	FullName   string
	PPG        string
	TotalGoals string
}{
	ID:         "id",
	ImportID:   "import_id",
	FullName:   "full_name",
	PPG:        "ppg",
	TotalGoals: "total_goals",
}

var PlayerPPGTableColumns = struct {
	ID         string
	ImportID   string
	FullName   string
	PPG        string
	TotalGoals string
}{
	ID:         "player_ppg.id",
	ImportID:   "player_ppg.import_id",
	FullName:   "player_ppg.full_name",
	PPG:        "player_ppg.ppg",
	TotalGoals: "player_ppg.total_goals",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var PlayerPPGWhere = struct {
	ID         whereHelpernull_String
	ImportID   whereHelpernull_String
	FullName   whereHelpernull_String
	PPG        whereHelpernull_Float64
	TotalGoals whereHelpernull_Int64
}{
	ID:         whereHelpernull_String{field: "\"player_ppg\".\"id\""},
	ImportID:   whereHelpernull_String{field: "\"player_ppg\".\"import_id\""},
	FullName:   whereHelpernull_String{field: "\"player_ppg\".\"full_name\""},
	PPG:        whereHelpernull_Float64{field: "\"player_ppg\".\"ppg\""},
	TotalGoals: whereHelpernull_Int64{field: "\"player_ppg\".\"total_goals\""},
}

var (
	playerPPGAllColumns            = []string{"id", "import_id", "full_name", "ppg", "total_goals"}
	playerPPGColumnsWithoutDefault = []string{}
	playerPPGColumnsWithDefault    = []string{"id", "import_id", "full_name", "ppg", "total_goals"}
	playerPPGPrimaryKeyColumns     = []string{}
	playerPPGGeneratedColumns      = []string{}
)

type (
	// PlayerPPGSlice is an alias for a slice of pointers to PlayerPPG.
	// This should almost always be used instead of []PlayerPPG.
	PlayerPPGSlice []*PlayerPPG

	playerPPGQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playerPPGType           = reflect.TypeOf(&PlayerPPG{})
	playerPPGMapping        = queries.MakeStructMapping(playerPPGType)
	playerPPGInsertCacheMut sync.RWMutex
	playerPPGInsertCache    = make(map[string]insertCache)
	playerPPGUpdateCacheMut sync.RWMutex
	playerPPGUpdateCache    = make(map[string]updateCache)
	playerPPGUpsertCacheMut sync.RWMutex
	playerPPGUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

// One returns a single playerPPG record from the query.
func (q playerPPGQuery) One(exec boil.Executor) (*PlayerPPG, error) {
	o := &PlayerPPG{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for player_ppg")
	}

	return o, nil
}

// All returns all PlayerPPG records from the query.
func (q playerPPGQuery) All(exec boil.Executor) (PlayerPPGSlice, error) {
	var o []*PlayerPPG

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to PlayerPPG slice")
	}

	return o, nil
}

// Count returns the count of all PlayerPPG records in the query.
func (q playerPPGQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count player_ppg rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playerPPGQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if player_ppg exists")
	}

	return count > 0, nil
}

// PlayerPPGS retrieves all the records using an executor.
func PlayerPPGS(mods ...qm.QueryMod) playerPPGQuery {
	mods = append(mods, qm.From("\"player_ppg\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"player_ppg\".*"})
	}

	return playerPPGQuery{q}
}
