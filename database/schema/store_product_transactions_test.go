// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStoreProductTransactions(t *testing.T) {
	t.Parallel()

	query := StoreProductTransactions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStoreProductTransactionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StoreProductTransaction{}
	if err = randomize.Struct(seed, o, storeProductTransactionDBTypes, true, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StoreProductTransactions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStoreProductTransactionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StoreProductTransaction{}
	if err = randomize.Struct(seed, o, storeProductTransactionDBTypes, true, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := StoreProductTransactions().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StoreProductTransactions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStoreProductTransactionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StoreProductTransaction{}
	if err = randomize.Struct(seed, o, storeProductTransactionDBTypes, true, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StoreProductTransactionSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StoreProductTransactions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStoreProductTransactionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StoreProductTransaction{}
	if err = randomize.Struct(seed, o, storeProductTransactionDBTypes, true, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StoreProductTransactionExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if StoreProductTransaction exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StoreProductTransactionExists to return true, but got false.")
	}
}

func testStoreProductTransactionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StoreProductTransaction{}
	if err = randomize.Struct(seed, o, storeProductTransactionDBTypes, true, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	storeProductTransactionFound, err := FindStoreProductTransaction(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if storeProductTransactionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStoreProductTransactionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StoreProductTransaction{}
	if err = randomize.Struct(seed, o, storeProductTransactionDBTypes, true, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = StoreProductTransactions().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testStoreProductTransactionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StoreProductTransaction{}
	if err = randomize.Struct(seed, o, storeProductTransactionDBTypes, true, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := StoreProductTransactions().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStoreProductTransactionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	storeProductTransactionOne := &StoreProductTransaction{}
	storeProductTransactionTwo := &StoreProductTransaction{}
	if err = randomize.Struct(seed, storeProductTransactionOne, storeProductTransactionDBTypes, false, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}
	if err = randomize.Struct(seed, storeProductTransactionTwo, storeProductTransactionDBTypes, false, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = storeProductTransactionOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = storeProductTransactionTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StoreProductTransactions().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStoreProductTransactionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	storeProductTransactionOne := &StoreProductTransaction{}
	storeProductTransactionTwo := &StoreProductTransaction{}
	if err = randomize.Struct(seed, storeProductTransactionOne, storeProductTransactionDBTypes, false, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}
	if err = randomize.Struct(seed, storeProductTransactionTwo, storeProductTransactionDBTypes, false, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = storeProductTransactionOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = storeProductTransactionTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StoreProductTransactions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testStoreProductTransactionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StoreProductTransaction{}
	if err = randomize.Struct(seed, o, storeProductTransactionDBTypes, true, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StoreProductTransactions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStoreProductTransactionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StoreProductTransaction{}
	if err = randomize.Struct(seed, o, storeProductTransactionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(storeProductTransactionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := StoreProductTransactions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStoreProductTransactionToManyStoreTransactionAssignedCardPacks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a StoreProductTransaction
	var b, c AssignedCardPack

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storeProductTransactionDBTypes, true, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, assignedCardPackDBTypes, false, assignedCardPackColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assignedCardPackDBTypes, false, assignedCardPackColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.StoreTransactionID, a.ID)
	queries.Assign(&c.StoreTransactionID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.StoreTransactionAssignedCardPacks().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.StoreTransactionID, b.StoreTransactionID) {
			bFound = true
		}
		if queries.Equal(v.StoreTransactionID, c.StoreTransactionID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StoreProductTransactionSlice{&a}
	if err = a.L.LoadStoreTransactionAssignedCardPacks(tx, false, (*[]*StoreProductTransaction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.StoreTransactionAssignedCardPacks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.StoreTransactionAssignedCardPacks = nil
	if err = a.L.LoadStoreTransactionAssignedCardPacks(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.StoreTransactionAssignedCardPacks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStoreProductTransactionToManyAddOpStoreTransactionAssignedCardPacks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a StoreProductTransaction
	var b, c, d, e AssignedCardPack

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storeProductTransactionDBTypes, false, strmangle.SetComplement(storeProductTransactionPrimaryKeyColumns, storeProductTransactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedCardPack{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedCardPackDBTypes, false, strmangle.SetComplement(assignedCardPackPrimaryKeyColumns, assignedCardPackColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AssignedCardPack{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddStoreTransactionAssignedCardPacks(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.StoreTransactionID) {
			t.Error("foreign key was wrong value", a.ID, first.StoreTransactionID)
		}
		if !queries.Equal(a.ID, second.StoreTransactionID) {
			t.Error("foreign key was wrong value", a.ID, second.StoreTransactionID)
		}

		if first.R.StoreTransaction != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.StoreTransaction != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.StoreTransactionAssignedCardPacks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.StoreTransactionAssignedCardPacks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.StoreTransactionAssignedCardPacks().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStoreProductTransactionToManySetOpStoreTransactionAssignedCardPacks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a StoreProductTransaction
	var b, c, d, e AssignedCardPack

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storeProductTransactionDBTypes, false, strmangle.SetComplement(storeProductTransactionPrimaryKeyColumns, storeProductTransactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedCardPack{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedCardPackDBTypes, false, strmangle.SetComplement(assignedCardPackPrimaryKeyColumns, assignedCardPackColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetStoreTransactionAssignedCardPacks(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.StoreTransactionAssignedCardPacks().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetStoreTransactionAssignedCardPacks(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.StoreTransactionAssignedCardPacks().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.StoreTransactionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.StoreTransactionID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.StoreTransactionID) {
		t.Error("foreign key was wrong value", a.ID, d.StoreTransactionID)
	}
	if !queries.Equal(a.ID, e.StoreTransactionID) {
		t.Error("foreign key was wrong value", a.ID, e.StoreTransactionID)
	}

	if b.R.StoreTransaction != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.StoreTransaction != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.StoreTransaction != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.StoreTransaction != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.StoreTransactionAssignedCardPacks[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.StoreTransactionAssignedCardPacks[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testStoreProductTransactionToManyRemoveOpStoreTransactionAssignedCardPacks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a StoreProductTransaction
	var b, c, d, e AssignedCardPack

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storeProductTransactionDBTypes, false, strmangle.SetComplement(storeProductTransactionPrimaryKeyColumns, storeProductTransactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedCardPack{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedCardPackDBTypes, false, strmangle.SetComplement(assignedCardPackPrimaryKeyColumns, assignedCardPackColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddStoreTransactionAssignedCardPacks(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.StoreTransactionAssignedCardPacks().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveStoreTransactionAssignedCardPacks(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.StoreTransactionAssignedCardPacks().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.StoreTransactionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.StoreTransactionID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.StoreTransaction != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.StoreTransaction != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.StoreTransaction != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.StoreTransaction != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.StoreTransactionAssignedCardPacks) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.StoreTransactionAssignedCardPacks[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.StoreTransactionAssignedCardPacks[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testStoreProductTransactionToOneStoreProductUsingProduct(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local StoreProductTransaction
	var foreign StoreProduct

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, storeProductTransactionDBTypes, false, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, storeProductDBTypes, false, storeProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProduct struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProductID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Product().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := StoreProductTransactionSlice{&local}
	if err = local.L.LoadProduct(tx, false, (*[]*StoreProductTransaction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Product = nil
	if err = local.L.LoadProduct(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testStoreProductTransactionToOneTransactionUsingTransaction(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local StoreProductTransaction
	var foreign Transaction

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, storeProductTransactionDBTypes, true, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Transaction struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TransactionID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Transaction().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := StoreProductTransactionSlice{&local}
	if err = local.L.LoadTransaction(tx, false, (*[]*StoreProductTransaction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Transaction == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Transaction = nil
	if err = local.L.LoadTransaction(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Transaction == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testStoreProductTransactionToOneUserUsingUser(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local StoreProductTransaction
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, storeProductTransactionDBTypes, true, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := StoreProductTransactionSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*StoreProductTransaction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testStoreProductTransactionToOneSetOpStoreProductUsingProduct(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a StoreProductTransaction
	var b, c StoreProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storeProductTransactionDBTypes, false, strmangle.SetComplement(storeProductTransactionPrimaryKeyColumns, storeProductTransactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, storeProductDBTypes, false, strmangle.SetComplement(storeProductPrimaryKeyColumns, storeProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, storeProductDBTypes, false, strmangle.SetComplement(storeProductPrimaryKeyColumns, storeProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*StoreProduct{&b, &c} {
		err = a.SetProduct(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Product != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductStoreProductTransactions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProductID != x.ID {
			t.Error("foreign key was wrong value", a.ProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProductID))
		reflect.Indirect(reflect.ValueOf(&a.ProductID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProductID != x.ID {
			t.Error("foreign key was wrong value", a.ProductID, x.ID)
		}
	}
}
func testStoreProductTransactionToOneSetOpTransactionUsingTransaction(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a StoreProductTransaction
	var b, c Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storeProductTransactionDBTypes, false, strmangle.SetComplement(storeProductTransactionPrimaryKeyColumns, storeProductTransactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Transaction{&b, &c} {
		err = a.SetTransaction(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Transaction != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.StoreProductTransactions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TransactionID, x.ID) {
			t.Error("foreign key was wrong value", a.TransactionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TransactionID))
		reflect.Indirect(reflect.ValueOf(&a.TransactionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TransactionID, x.ID) {
			t.Error("foreign key was wrong value", a.TransactionID, x.ID)
		}
	}
}

func testStoreProductTransactionToOneRemoveOpTransactionUsingTransaction(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a StoreProductTransaction
	var b Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storeProductTransactionDBTypes, false, strmangle.SetComplement(storeProductTransactionPrimaryKeyColumns, storeProductTransactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTransaction(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTransaction(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Transaction().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Transaction != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TransactionID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.StoreProductTransactions) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testStoreProductTransactionToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a StoreProductTransaction
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storeProductTransactionDBTypes, false, strmangle.SetComplement(storeProductTransactionPrimaryKeyColumns, storeProductTransactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.StoreProductTransactions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testStoreProductTransactionToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a StoreProductTransaction
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storeProductTransactionDBTypes, false, strmangle.SetComplement(storeProductTransactionPrimaryKeyColumns, storeProductTransactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.StoreProductTransactions) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testStoreProductTransactionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StoreProductTransaction{}
	if err = randomize.Struct(seed, o, storeProductTransactionDBTypes, true, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testStoreProductTransactionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StoreProductTransaction{}
	if err = randomize.Struct(seed, o, storeProductTransactionDBTypes, true, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StoreProductTransactionSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testStoreProductTransactionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StoreProductTransaction{}
	if err = randomize.Struct(seed, o, storeProductTransactionDBTypes, true, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StoreProductTransactions().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	storeProductTransactionDBTypes = map[string]string{`ID`: `uuid`, `UpdatedAt`: `timestamp with time zone`, `CreatedAt`: `timestamp with time zone`, `ProductID`: `uuid`, `TransactionID`: `uuid`, `UserID`: `uuid`, `Confirmed`: `boolean`, `ConfirmedAt`: `timestamp with time zone`, `Initiated`: `boolean`, `InitiatedAt`: `timestamp with time zone`, `ExternalTransactionID`: `character varying`, `OriginStore`: `character varying`}
	_                              = bytes.MinRead
)

func testStoreProductTransactionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(storeProductTransactionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(storeProductTransactionAllColumns) == len(storeProductTransactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StoreProductTransaction{}
	if err = randomize.Struct(seed, o, storeProductTransactionDBTypes, true, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StoreProductTransactions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, storeProductTransactionDBTypes, true, storeProductTransactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStoreProductTransactionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(storeProductTransactionAllColumns) == len(storeProductTransactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StoreProductTransaction{}
	if err = randomize.Struct(seed, o, storeProductTransactionDBTypes, true, storeProductTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StoreProductTransactions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, storeProductTransactionDBTypes, true, storeProductTransactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(storeProductTransactionAllColumns, storeProductTransactionPrimaryKeyColumns) {
		fields = storeProductTransactionAllColumns
	} else {
		fields = strmangle.SetComplement(
			storeProductTransactionAllColumns,
			storeProductTransactionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StoreProductTransactionSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStoreProductTransactionsUpsert(t *testing.T) {
	t.Parallel()

	if len(storeProductTransactionAllColumns) == len(storeProductTransactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := StoreProductTransaction{}
	if err = randomize.Struct(seed, &o, storeProductTransactionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StoreProductTransaction: %s", err)
	}

	count, err := StoreProductTransactions().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, storeProductTransactionDBTypes, false, storeProductTransactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StoreProductTransaction struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StoreProductTransaction: %s", err)
	}

	count, err = StoreProductTransactions().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
