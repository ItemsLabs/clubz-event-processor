// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DjangoCeleryBeatClockedschedule is an object representing the database table.
type DjangoCeleryBeatClockedschedule struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ClockedTime time.Time `boil:"clocked_time" json:"clocked_time" toml:"clocked_time" yaml:"clocked_time"`
	Enabled     bool      `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`

	R *djangoCeleryBeatClockedscheduleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L djangoCeleryBeatClockedscheduleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DjangoCeleryBeatClockedscheduleColumns = struct {
	ID          string
	ClockedTime string
	Enabled     string
}{
	ID:          "id",
	ClockedTime: "clocked_time",
	Enabled:     "enabled",
}

var DjangoCeleryBeatClockedscheduleTableColumns = struct {
	ID          string
	ClockedTime string
	Enabled     string
}{
	ID:          "django_celery_beat_clockedschedule.id",
	ClockedTime: "django_celery_beat_clockedschedule.clocked_time",
	Enabled:     "django_celery_beat_clockedschedule.enabled",
}

// Generated where

var DjangoCeleryBeatClockedscheduleWhere = struct {
	ID          whereHelperint
	ClockedTime whereHelpertime_Time
	Enabled     whereHelperbool
}{
	ID:          whereHelperint{field: "\"django_celery_beat_clockedschedule\".\"id\""},
	ClockedTime: whereHelpertime_Time{field: "\"django_celery_beat_clockedschedule\".\"clocked_time\""},
	Enabled:     whereHelperbool{field: "\"django_celery_beat_clockedschedule\".\"enabled\""},
}

// DjangoCeleryBeatClockedscheduleRels is where relationship names are stored.
var DjangoCeleryBeatClockedscheduleRels = struct {
	ClockedDjangoCeleryBeatPeriodictasks string
}{
	ClockedDjangoCeleryBeatPeriodictasks: "ClockedDjangoCeleryBeatPeriodictasks",
}

// djangoCeleryBeatClockedscheduleR is where relationships are stored.
type djangoCeleryBeatClockedscheduleR struct {
	ClockedDjangoCeleryBeatPeriodictasks DjangoCeleryBeatPeriodictaskSlice `boil:"ClockedDjangoCeleryBeatPeriodictasks" json:"ClockedDjangoCeleryBeatPeriodictasks" toml:"ClockedDjangoCeleryBeatPeriodictasks" yaml:"ClockedDjangoCeleryBeatPeriodictasks"`
}

// NewStruct creates a new relationship struct
func (*djangoCeleryBeatClockedscheduleR) NewStruct() *djangoCeleryBeatClockedscheduleR {
	return &djangoCeleryBeatClockedscheduleR{}
}

func (r *djangoCeleryBeatClockedscheduleR) GetClockedDjangoCeleryBeatPeriodictasks() DjangoCeleryBeatPeriodictaskSlice {
	if r == nil {
		return nil
	}
	return r.ClockedDjangoCeleryBeatPeriodictasks
}

// djangoCeleryBeatClockedscheduleL is where Load methods for each relationship are stored.
type djangoCeleryBeatClockedscheduleL struct{}

var (
	djangoCeleryBeatClockedscheduleAllColumns            = []string{"id", "clocked_time", "enabled"}
	djangoCeleryBeatClockedscheduleColumnsWithoutDefault = []string{"clocked_time", "enabled"}
	djangoCeleryBeatClockedscheduleColumnsWithDefault    = []string{"id"}
	djangoCeleryBeatClockedschedulePrimaryKeyColumns     = []string{"id"}
	djangoCeleryBeatClockedscheduleGeneratedColumns      = []string{}
)

type (
	// DjangoCeleryBeatClockedscheduleSlice is an alias for a slice of pointers to DjangoCeleryBeatClockedschedule.
	// This should almost always be used instead of []DjangoCeleryBeatClockedschedule.
	DjangoCeleryBeatClockedscheduleSlice []*DjangoCeleryBeatClockedschedule

	djangoCeleryBeatClockedscheduleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	djangoCeleryBeatClockedscheduleType                 = reflect.TypeOf(&DjangoCeleryBeatClockedschedule{})
	djangoCeleryBeatClockedscheduleMapping              = queries.MakeStructMapping(djangoCeleryBeatClockedscheduleType)
	djangoCeleryBeatClockedschedulePrimaryKeyMapping, _ = queries.BindMapping(djangoCeleryBeatClockedscheduleType, djangoCeleryBeatClockedscheduleMapping, djangoCeleryBeatClockedschedulePrimaryKeyColumns)
	djangoCeleryBeatClockedscheduleInsertCacheMut       sync.RWMutex
	djangoCeleryBeatClockedscheduleInsertCache          = make(map[string]insertCache)
	djangoCeleryBeatClockedscheduleUpdateCacheMut       sync.RWMutex
	djangoCeleryBeatClockedscheduleUpdateCache          = make(map[string]updateCache)
	djangoCeleryBeatClockedscheduleUpsertCacheMut       sync.RWMutex
	djangoCeleryBeatClockedscheduleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single djangoCeleryBeatClockedschedule record from the query.
func (q djangoCeleryBeatClockedscheduleQuery) One(exec boil.Executor) (*DjangoCeleryBeatClockedschedule, error) {
	o := &DjangoCeleryBeatClockedschedule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: failed to execute a one query for django_celery_beat_clockedschedule")
	}

	return o, nil
}

// All returns all DjangoCeleryBeatClockedschedule records from the query.
func (q djangoCeleryBeatClockedscheduleQuery) All(exec boil.Executor) (DjangoCeleryBeatClockedscheduleSlice, error) {
	var o []*DjangoCeleryBeatClockedschedule

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "schema: failed to assign all query results to DjangoCeleryBeatClockedschedule slice")
	}

	return o, nil
}

// Count returns the count of all DjangoCeleryBeatClockedschedule records in the query.
func (q djangoCeleryBeatClockedscheduleQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to count django_celery_beat_clockedschedule rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q djangoCeleryBeatClockedscheduleQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "schema: failed to check if django_celery_beat_clockedschedule exists")
	}

	return count > 0, nil
}

// ClockedDjangoCeleryBeatPeriodictasks retrieves all the django_celery_beat_periodictask's DjangoCeleryBeatPeriodictasks with an executor via clocked_id column.
func (o *DjangoCeleryBeatClockedschedule) ClockedDjangoCeleryBeatPeriodictasks(mods ...qm.QueryMod) djangoCeleryBeatPeriodictaskQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"django_celery_beat_periodictask\".\"clocked_id\"=?", o.ID),
	)

	return DjangoCeleryBeatPeriodictasks(queryMods...)
}

// LoadClockedDjangoCeleryBeatPeriodictasks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (djangoCeleryBeatClockedscheduleL) LoadClockedDjangoCeleryBeatPeriodictasks(e boil.Executor, singular bool, maybeDjangoCeleryBeatClockedschedule interface{}, mods queries.Applicator) error {
	var slice []*DjangoCeleryBeatClockedschedule
	var object *DjangoCeleryBeatClockedschedule

	if singular {
		var ok bool
		object, ok = maybeDjangoCeleryBeatClockedschedule.(*DjangoCeleryBeatClockedschedule)
		if !ok {
			object = new(DjangoCeleryBeatClockedschedule)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDjangoCeleryBeatClockedschedule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDjangoCeleryBeatClockedschedule))
			}
		}
	} else {
		s, ok := maybeDjangoCeleryBeatClockedschedule.(*[]*DjangoCeleryBeatClockedschedule)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDjangoCeleryBeatClockedschedule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDjangoCeleryBeatClockedschedule))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &djangoCeleryBeatClockedscheduleR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &djangoCeleryBeatClockedscheduleR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`django_celery_beat_periodictask`),
		qm.WhereIn(`django_celery_beat_periodictask.clocked_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load django_celery_beat_periodictask")
	}

	var resultSlice []*DjangoCeleryBeatPeriodictask
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice django_celery_beat_periodictask")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on django_celery_beat_periodictask")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for django_celery_beat_periodictask")
	}

	if singular {
		object.R.ClockedDjangoCeleryBeatPeriodictasks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &djangoCeleryBeatPeriodictaskR{}
			}
			foreign.R.Clocked = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ClockedID) {
				local.R.ClockedDjangoCeleryBeatPeriodictasks = append(local.R.ClockedDjangoCeleryBeatPeriodictasks, foreign)
				if foreign.R == nil {
					foreign.R = &djangoCeleryBeatPeriodictaskR{}
				}
				foreign.R.Clocked = local
				break
			}
		}
	}

	return nil
}

// AddClockedDjangoCeleryBeatPeriodictasks adds the given related objects to the existing relationships
// of the django_celery_beat_clockedschedule, optionally inserting them as new records.
// Appends related to o.R.ClockedDjangoCeleryBeatPeriodictasks.
// Sets related.R.Clocked appropriately.
func (o *DjangoCeleryBeatClockedschedule) AddClockedDjangoCeleryBeatPeriodictasks(exec boil.Executor, insert bool, related ...*DjangoCeleryBeatPeriodictask) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ClockedID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"django_celery_beat_periodictask\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"clocked_id"}),
				strmangle.WhereClause("\"", "\"", 2, djangoCeleryBeatPeriodictaskPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ClockedID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &djangoCeleryBeatClockedscheduleR{
			ClockedDjangoCeleryBeatPeriodictasks: related,
		}
	} else {
		o.R.ClockedDjangoCeleryBeatPeriodictasks = append(o.R.ClockedDjangoCeleryBeatPeriodictasks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &djangoCeleryBeatPeriodictaskR{
				Clocked: o,
			}
		} else {
			rel.R.Clocked = o
		}
	}
	return nil
}

// SetClockedDjangoCeleryBeatPeriodictasks removes all previously related items of the
// django_celery_beat_clockedschedule replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Clocked's ClockedDjangoCeleryBeatPeriodictasks accordingly.
// Replaces o.R.ClockedDjangoCeleryBeatPeriodictasks with related.
// Sets related.R.Clocked's ClockedDjangoCeleryBeatPeriodictasks accordingly.
func (o *DjangoCeleryBeatClockedschedule) SetClockedDjangoCeleryBeatPeriodictasks(exec boil.Executor, insert bool, related ...*DjangoCeleryBeatPeriodictask) error {
	query := "update \"django_celery_beat_periodictask\" set \"clocked_id\" = null where \"clocked_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ClockedDjangoCeleryBeatPeriodictasks {
			queries.SetScanner(&rel.ClockedID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Clocked = nil
		}
		o.R.ClockedDjangoCeleryBeatPeriodictasks = nil
	}

	return o.AddClockedDjangoCeleryBeatPeriodictasks(exec, insert, related...)
}

// RemoveClockedDjangoCeleryBeatPeriodictasks relationships from objects passed in.
// Removes related items from R.ClockedDjangoCeleryBeatPeriodictasks (uses pointer comparison, removal does not keep order)
// Sets related.R.Clocked.
func (o *DjangoCeleryBeatClockedschedule) RemoveClockedDjangoCeleryBeatPeriodictasks(exec boil.Executor, related ...*DjangoCeleryBeatPeriodictask) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ClockedID, nil)
		if rel.R != nil {
			rel.R.Clocked = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("clocked_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ClockedDjangoCeleryBeatPeriodictasks {
			if rel != ri {
				continue
			}

			ln := len(o.R.ClockedDjangoCeleryBeatPeriodictasks)
			if ln > 1 && i < ln-1 {
				o.R.ClockedDjangoCeleryBeatPeriodictasks[i] = o.R.ClockedDjangoCeleryBeatPeriodictasks[ln-1]
			}
			o.R.ClockedDjangoCeleryBeatPeriodictasks = o.R.ClockedDjangoCeleryBeatPeriodictasks[:ln-1]
			break
		}
	}

	return nil
}

// DjangoCeleryBeatClockedschedules retrieves all the records using an executor.
func DjangoCeleryBeatClockedschedules(mods ...qm.QueryMod) djangoCeleryBeatClockedscheduleQuery {
	mods = append(mods, qm.From("\"django_celery_beat_clockedschedule\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"django_celery_beat_clockedschedule\".*"})
	}

	return djangoCeleryBeatClockedscheduleQuery{q}
}

// FindDjangoCeleryBeatClockedschedule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDjangoCeleryBeatClockedschedule(exec boil.Executor, iD int, selectCols ...string) (*DjangoCeleryBeatClockedschedule, error) {
	djangoCeleryBeatClockedscheduleObj := &DjangoCeleryBeatClockedschedule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"django_celery_beat_clockedschedule\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, djangoCeleryBeatClockedscheduleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "schema: unable to select from django_celery_beat_clockedschedule")
	}

	return djangoCeleryBeatClockedscheduleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DjangoCeleryBeatClockedschedule) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("schema: no django_celery_beat_clockedschedule provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(djangoCeleryBeatClockedscheduleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	djangoCeleryBeatClockedscheduleInsertCacheMut.RLock()
	cache, cached := djangoCeleryBeatClockedscheduleInsertCache[key]
	djangoCeleryBeatClockedscheduleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			djangoCeleryBeatClockedscheduleAllColumns,
			djangoCeleryBeatClockedscheduleColumnsWithDefault,
			djangoCeleryBeatClockedscheduleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(djangoCeleryBeatClockedscheduleType, djangoCeleryBeatClockedscheduleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(djangoCeleryBeatClockedscheduleType, djangoCeleryBeatClockedscheduleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"django_celery_beat_clockedschedule\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"django_celery_beat_clockedschedule\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "schema: unable to insert into django_celery_beat_clockedschedule")
	}

	if !cached {
		djangoCeleryBeatClockedscheduleInsertCacheMut.Lock()
		djangoCeleryBeatClockedscheduleInsertCache[key] = cache
		djangoCeleryBeatClockedscheduleInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DjangoCeleryBeatClockedschedule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DjangoCeleryBeatClockedschedule) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	djangoCeleryBeatClockedscheduleUpdateCacheMut.RLock()
	cache, cached := djangoCeleryBeatClockedscheduleUpdateCache[key]
	djangoCeleryBeatClockedscheduleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			djangoCeleryBeatClockedscheduleAllColumns,
			djangoCeleryBeatClockedschedulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("schema: unable to update django_celery_beat_clockedschedule, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"django_celery_beat_clockedschedule\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, djangoCeleryBeatClockedschedulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(djangoCeleryBeatClockedscheduleType, djangoCeleryBeatClockedscheduleMapping, append(wl, djangoCeleryBeatClockedschedulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update django_celery_beat_clockedschedule row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by update for django_celery_beat_clockedschedule")
	}

	if !cached {
		djangoCeleryBeatClockedscheduleUpdateCacheMut.Lock()
		djangoCeleryBeatClockedscheduleUpdateCache[key] = cache
		djangoCeleryBeatClockedscheduleUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q djangoCeleryBeatClockedscheduleQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all for django_celery_beat_clockedschedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected for django_celery_beat_clockedschedule")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DjangoCeleryBeatClockedscheduleSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("schema: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoCeleryBeatClockedschedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"django_celery_beat_clockedschedule\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, djangoCeleryBeatClockedschedulePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to update all in djangoCeleryBeatClockedschedule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to retrieve rows affected all in update all djangoCeleryBeatClockedschedule")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DjangoCeleryBeatClockedschedule) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("schema: no django_celery_beat_clockedschedule provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(djangoCeleryBeatClockedscheduleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	djangoCeleryBeatClockedscheduleUpsertCacheMut.RLock()
	cache, cached := djangoCeleryBeatClockedscheduleUpsertCache[key]
	djangoCeleryBeatClockedscheduleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			djangoCeleryBeatClockedscheduleAllColumns,
			djangoCeleryBeatClockedscheduleColumnsWithDefault,
			djangoCeleryBeatClockedscheduleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			djangoCeleryBeatClockedscheduleAllColumns,
			djangoCeleryBeatClockedschedulePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("schema: unable to upsert django_celery_beat_clockedschedule, could not build update column list")
		}

		ret := strmangle.SetComplement(djangoCeleryBeatClockedscheduleAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(djangoCeleryBeatClockedschedulePrimaryKeyColumns) == 0 {
				return errors.New("schema: unable to upsert django_celery_beat_clockedschedule, could not build conflict column list")
			}

			conflict = make([]string, len(djangoCeleryBeatClockedschedulePrimaryKeyColumns))
			copy(conflict, djangoCeleryBeatClockedschedulePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"django_celery_beat_clockedschedule\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(djangoCeleryBeatClockedscheduleType, djangoCeleryBeatClockedscheduleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(djangoCeleryBeatClockedscheduleType, djangoCeleryBeatClockedscheduleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "schema: unable to upsert django_celery_beat_clockedschedule")
	}

	if !cached {
		djangoCeleryBeatClockedscheduleUpsertCacheMut.Lock()
		djangoCeleryBeatClockedscheduleUpsertCache[key] = cache
		djangoCeleryBeatClockedscheduleUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DjangoCeleryBeatClockedschedule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DjangoCeleryBeatClockedschedule) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("schema: no DjangoCeleryBeatClockedschedule provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), djangoCeleryBeatClockedschedulePrimaryKeyMapping)
	sql := "DELETE FROM \"django_celery_beat_clockedschedule\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete from django_celery_beat_clockedschedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by delete for django_celery_beat_clockedschedule")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q djangoCeleryBeatClockedscheduleQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("schema: no djangoCeleryBeatClockedscheduleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from django_celery_beat_clockedschedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for django_celery_beat_clockedschedule")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DjangoCeleryBeatClockedscheduleSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoCeleryBeatClockedschedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"django_celery_beat_clockedschedule\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, djangoCeleryBeatClockedschedulePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "schema: unable to delete all from djangoCeleryBeatClockedschedule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "schema: failed to get rows affected by deleteall for django_celery_beat_clockedschedule")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DjangoCeleryBeatClockedschedule) Reload(exec boil.Executor) error {
	ret, err := FindDjangoCeleryBeatClockedschedule(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DjangoCeleryBeatClockedscheduleSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DjangoCeleryBeatClockedscheduleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoCeleryBeatClockedschedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"django_celery_beat_clockedschedule\".* FROM \"django_celery_beat_clockedschedule\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, djangoCeleryBeatClockedschedulePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "schema: unable to reload all in DjangoCeleryBeatClockedscheduleSlice")
	}

	*o = slice

	return nil
}

// DjangoCeleryBeatClockedscheduleExists checks if the DjangoCeleryBeatClockedschedule row exists.
func DjangoCeleryBeatClockedscheduleExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"django_celery_beat_clockedschedule\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "schema: unable to check if django_celery_beat_clockedschedule exists")
	}

	return exists, nil
}

// Exists checks if the DjangoCeleryBeatClockedschedule row exists.
func (o *DjangoCeleryBeatClockedschedule) Exists(exec boil.Executor) (bool, error) {
	return DjangoCeleryBeatClockedscheduleExists(exec, o.ID)
}
