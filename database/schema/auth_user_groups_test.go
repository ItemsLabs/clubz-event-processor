// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package schema

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAuthUserGroups(t *testing.T) {
	t.Parallel()

	query := AuthUserGroups()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAuthUserGroupsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthUserGroup{}
	if err = randomize.Struct(seed, o, authUserGroupDBTypes, true, authUserGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthUserGroups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthUserGroupsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthUserGroup{}
	if err = randomize.Struct(seed, o, authUserGroupDBTypes, true, authUserGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AuthUserGroups().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthUserGroups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthUserGroupsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthUserGroup{}
	if err = randomize.Struct(seed, o, authUserGroupDBTypes, true, authUserGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuthUserGroupSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthUserGroups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthUserGroupsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthUserGroup{}
	if err = randomize.Struct(seed, o, authUserGroupDBTypes, true, authUserGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AuthUserGroupExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AuthUserGroup exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AuthUserGroupExists to return true, but got false.")
	}
}

func testAuthUserGroupsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthUserGroup{}
	if err = randomize.Struct(seed, o, authUserGroupDBTypes, true, authUserGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	authUserGroupFound, err := FindAuthUserGroup(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if authUserGroupFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAuthUserGroupsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthUserGroup{}
	if err = randomize.Struct(seed, o, authUserGroupDBTypes, true, authUserGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AuthUserGroups().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testAuthUserGroupsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthUserGroup{}
	if err = randomize.Struct(seed, o, authUserGroupDBTypes, true, authUserGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AuthUserGroups().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAuthUserGroupsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authUserGroupOne := &AuthUserGroup{}
	authUserGroupTwo := &AuthUserGroup{}
	if err = randomize.Struct(seed, authUserGroupOne, authUserGroupDBTypes, false, authUserGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}
	if err = randomize.Struct(seed, authUserGroupTwo, authUserGroupDBTypes, false, authUserGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = authUserGroupOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = authUserGroupTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AuthUserGroups().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAuthUserGroupsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authUserGroupOne := &AuthUserGroup{}
	authUserGroupTwo := &AuthUserGroup{}
	if err = randomize.Struct(seed, authUserGroupOne, authUserGroupDBTypes, false, authUserGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}
	if err = randomize.Struct(seed, authUserGroupTwo, authUserGroupDBTypes, false, authUserGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = authUserGroupOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = authUserGroupTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthUserGroups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testAuthUserGroupsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthUserGroup{}
	if err = randomize.Struct(seed, o, authUserGroupDBTypes, true, authUserGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthUserGroups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthUserGroupsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthUserGroup{}
	if err = randomize.Struct(seed, o, authUserGroupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(authUserGroupColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AuthUserGroups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthUserGroupToOneAuthGroupUsingGroup(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local AuthUserGroup
	var foreign AuthGroup

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, authUserGroupDBTypes, false, authUserGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, authGroupDBTypes, false, authGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GroupID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Group().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AuthUserGroupSlice{&local}
	if err = local.L.LoadGroup(tx, false, (*[]*AuthUserGroup)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Group = nil
	if err = local.L.LoadGroup(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testAuthUserGroupToOneAuthUserUsingUser(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local AuthUserGroup
	var foreign AuthUser

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, authUserGroupDBTypes, false, authUserGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, authUserDBTypes, false, authUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthUser struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AuthUserGroupSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*AuthUserGroup)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testAuthUserGroupToOneSetOpAuthGroupUsingGroup(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AuthUserGroup
	var b, c AuthGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, authUserGroupDBTypes, false, strmangle.SetComplement(authUserGroupPrimaryKeyColumns, authUserGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authGroupDBTypes, false, strmangle.SetComplement(authGroupPrimaryKeyColumns, authGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authGroupDBTypes, false, strmangle.SetComplement(authGroupPrimaryKeyColumns, authGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AuthGroup{&b, &c} {
		err = a.SetGroup(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Group != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GroupAuthUserGroups[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GroupID != x.ID {
			t.Error("foreign key was wrong value", a.GroupID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GroupID))
		reflect.Indirect(reflect.ValueOf(&a.GroupID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GroupID != x.ID {
			t.Error("foreign key was wrong value", a.GroupID, x.ID)
		}
	}
}
func testAuthUserGroupToOneSetOpAuthUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AuthUserGroup
	var b, c AuthUser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, authUserGroupDBTypes, false, strmangle.SetComplement(authUserGroupPrimaryKeyColumns, authUserGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authUserDBTypes, false, strmangle.SetComplement(authUserPrimaryKeyColumns, authUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authUserDBTypes, false, strmangle.SetComplement(authUserPrimaryKeyColumns, authUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AuthUser{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserAuthUserGroups[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testAuthUserGroupsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthUserGroup{}
	if err = randomize.Struct(seed, o, authUserGroupDBTypes, true, authUserGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testAuthUserGroupsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthUserGroup{}
	if err = randomize.Struct(seed, o, authUserGroupDBTypes, true, authUserGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuthUserGroupSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testAuthUserGroupsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthUserGroup{}
	if err = randomize.Struct(seed, o, authUserGroupDBTypes, true, authUserGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AuthUserGroups().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	authUserGroupDBTypes = map[string]string{`ID`: `integer`, `UserID`: `integer`, `GroupID`: `integer`}
	_                    = bytes.MinRead
)

func testAuthUserGroupsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(authUserGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(authUserGroupAllColumns) == len(authUserGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AuthUserGroup{}
	if err = randomize.Struct(seed, o, authUserGroupDBTypes, true, authUserGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthUserGroups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, authUserGroupDBTypes, true, authUserGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAuthUserGroupsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(authUserGroupAllColumns) == len(authUserGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AuthUserGroup{}
	if err = randomize.Struct(seed, o, authUserGroupDBTypes, true, authUserGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthUserGroups().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, authUserGroupDBTypes, true, authUserGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(authUserGroupAllColumns, authUserGroupPrimaryKeyColumns) {
		fields = authUserGroupAllColumns
	} else {
		fields = strmangle.SetComplement(
			authUserGroupAllColumns,
			authUserGroupPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AuthUserGroupSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAuthUserGroupsUpsert(t *testing.T) {
	t.Parallel()

	if len(authUserGroupAllColumns) == len(authUserGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AuthUserGroup{}
	if err = randomize.Struct(seed, &o, authUserGroupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AuthUserGroup: %s", err)
	}

	count, err := AuthUserGroups().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, authUserGroupDBTypes, false, authUserGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthUserGroup struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AuthUserGroup: %s", err)
	}

	count, err = AuthUserGroups().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
